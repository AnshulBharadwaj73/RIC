2023-08-13 11:42:16,428  * Debugger is active!
2023-08-13 11:42:16,433  * Debugger PIN: 646-688-976
2023-08-13 11:42:37,090 bytecode dump:
>          0	NOP(arg=None, lineno=1144)
           2	RESUME(arg=0, lineno=1144)
           4	LOAD_FAST(arg=0, lineno=1147)
           6	LOAD_CONST(arg=1, lineno=1147)
           8	BINARY_SUBSCR(arg=None, lineno=1147)
          18	STORE_FAST(arg=3, lineno=1147)
          20	LOAD_FAST(arg=1, lineno=1148)
          22	UNARY_NEGATIVE(arg=None, lineno=1148)
          24	LOAD_FAST(arg=3, lineno=1148)
          26	SWAP(arg=2, lineno=1148)
          28	COPY(arg=2, lineno=1148)
          30	COMPARE_OP(arg=1, lineno=1148)
          36	POP_JUMP_FORWARD_IF_FALSE(arg=6, lineno=1148)
          38	LOAD_FAST(arg=1, lineno=1148)
          40	COMPARE_OP(arg=1, lineno=1148)
          46	POP_JUMP_FORWARD_IF_FALSE(arg=5, lineno=1148)
          48	JUMP_FORWARD(arg=2, lineno=1148)
>         50	POP_TOP(arg=None, lineno=1148)
          52	JUMP_FORWARD(arg=2, lineno=1148)
>         54	LOAD_CONST(arg=1, lineno=1149)
          56	STORE_FAST(arg=3, lineno=1149)
>         58	LOAD_FAST(arg=0, lineno=1151)
          60	LOAD_CONST(arg=2, lineno=1151)
          62	BINARY_SUBSCR(arg=None, lineno=1151)
          72	STORE_FAST(arg=4, lineno=1151)
          74	LOAD_FAST(arg=1, lineno=1152)
          76	UNARY_NEGATIVE(arg=None, lineno=1152)
          78	LOAD_FAST(arg=4, lineno=1152)
          80	SWAP(arg=2, lineno=1152)
          82	COPY(arg=2, lineno=1152)
          84	COMPARE_OP(arg=1, lineno=1152)
          90	POP_JUMP_FORWARD_IF_FALSE(arg=6, lineno=1152)
          92	LOAD_FAST(arg=1, lineno=1152)
          94	COMPARE_OP(arg=1, lineno=1152)
         100	POP_JUMP_FORWARD_IF_FALSE(arg=5, lineno=1152)
         102	JUMP_FORWARD(arg=2, lineno=1152)
>        104	POP_TOP(arg=None, lineno=1152)
         106	JUMP_FORWARD(arg=2, lineno=1152)
>        108	LOAD_CONST(arg=1, lineno=1153)
         110	STORE_FAST(arg=4, lineno=1153)
>        112	LOAD_FAST(arg=2, lineno=1155)
         114	POP_JUMP_FORWARD_IF_FALSE(arg=42, lineno=1155)
         116	LOAD_GLOBAL(arg=1, lineno=1156)
         128	LOAD_ATTR(arg=1, lineno=1156)
         138	LOAD_FAST(arg=3, lineno=1156)
         140	PRECALL(arg=1, lineno=1156)
         144	CALL(arg=1, lineno=1156)
         154	LOAD_GLOBAL(arg=1, lineno=1156)
         166	LOAD_ATTR(arg=1, lineno=1156)
         176	LOAD_FAST(arg=4, lineno=1156)
         178	PRECALL(arg=1, lineno=1156)
         182	CALL(arg=1, lineno=1156)
         192	COMPARE_OP(arg=3, lineno=1156)
         198	RETURN_VALUE(arg=None, lineno=1156)
>        200	LOAD_GLOBAL(arg=1, lineno=1158)
         212	LOAD_ATTR(arg=2, lineno=1158)
         222	LOAD_FAST(arg=3, lineno=1158)
         224	PRECALL(arg=1, lineno=1158)
         228	CALL(arg=1, lineno=1158)
         238	LOAD_GLOBAL(arg=1, lineno=1158)
         250	LOAD_ATTR(arg=2, lineno=1158)
         260	LOAD_FAST(arg=4, lineno=1158)
         262	PRECALL(arg=1, lineno=1158)
         266	CALL(arg=1, lineno=1158)
         276	COMPARE_OP(arg=3, lineno=1158)
         282	RETURN_VALUE(arg=None, lineno=1158)
2023-08-13 11:42:37,090 pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-13 11:42:37,091 stack: []
2023-08-13 11:42:37,091 state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-13 11:42:37,091 dispatch pc=0, inst=NOP(arg=None, lineno=1144)
2023-08-13 11:42:37,091 stack []
2023-08-13 11:42:37,092 dispatch pc=2, inst=RESUME(arg=0, lineno=1144)
2023-08-13 11:42:37,092 stack []
2023-08-13 11:42:37,092 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1147)
2023-08-13 11:42:37,092 stack []
2023-08-13 11:42:37,092 dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=1147)
2023-08-13 11:42:37,092 stack ['$x4.0']
2023-08-13 11:42:37,092 dispatch pc=8, inst=BINARY_SUBSCR(arg=None, lineno=1147)
2023-08-13 11:42:37,092 stack ['$x4.0', '$const6.1']
2023-08-13 11:42:37,092 dispatch pc=18, inst=STORE_FAST(arg=3, lineno=1147)
2023-08-13 11:42:37,092 stack ['$8binary_subscr.2']
2023-08-13 11:42:37,092 dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=1148)
2023-08-13 11:42:37,092 stack []
2023-08-13 11:42:37,093 dispatch pc=22, inst=UNARY_NEGATIVE(arg=None, lineno=1148)
2023-08-13 11:42:37,093 stack ['$threshold20.3']
2023-08-13 11:42:37,093 dispatch pc=24, inst=LOAD_FAST(arg=3, lineno=1148)
2023-08-13 11:42:37,093 stack ['$22unary_negative.4']
2023-08-13 11:42:37,093 dispatch pc=26, inst=SWAP(arg=2, lineno=1148)
2023-08-13 11:42:37,093 stack ['$22unary_negative.4', '$x024.5']
2023-08-13 11:42:37,093 dispatch pc=28, inst=COPY(arg=2, lineno=1148)
2023-08-13 11:42:37,093 stack ['$x024.5', '$22unary_negative.4']
2023-08-13 11:42:37,093 dispatch pc=30, inst=COMPARE_OP(arg=1, lineno=1148)
2023-08-13 11:42:37,093 stack ['$x024.5', '$22unary_negative.4', '$x024.5']
2023-08-13 11:42:37,093 dispatch pc=36, inst=POP_JUMP_FORWARD_IF_FALSE(arg=6, lineno=1148)
2023-08-13 11:42:37,093 stack ['$x024.5', '$30compare_op.6']
2023-08-13 11:42:37,093 end state. edges=[Edge(pc=38, stack=('$x024.5',), blockstack=(), npush=0), Edge(pc=50, stack=('$x024.5',), blockstack=(), npush=0)]
2023-08-13 11:42:37,093 pending: deque([State(pc_initial=38 nstack_initial=1), State(pc_initial=50 nstack_initial=1)])
2023-08-13 11:42:37,094 stack: ['$phi38.0']
2023-08-13 11:42:37,094 state.pc_initial: State(pc_initial=38 nstack_initial=1)
2023-08-13 11:42:37,094 dispatch pc=38, inst=LOAD_FAST(arg=1, lineno=1148)
2023-08-13 11:42:37,094 stack ['$phi38.0']
2023-08-13 11:42:37,094 dispatch pc=40, inst=COMPARE_OP(arg=1, lineno=1148)
2023-08-13 11:42:37,094 stack ['$phi38.0', '$threshold38.1']
2023-08-13 11:42:37,094 dispatch pc=46, inst=POP_JUMP_FORWARD_IF_FALSE(arg=5, lineno=1148)
2023-08-13 11:42:37,094 stack ['$40compare_op.2']
2023-08-13 11:42:37,094 end state. edges=[Edge(pc=48, stack=(), blockstack=(), npush=0), Edge(pc=58, stack=(), blockstack=(), npush=0)]
2023-08-13 11:42:37,094 pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=48 nstack_initial=0), State(pc_initial=58 nstack_initial=0)])
2023-08-13 11:42:37,094 stack: ['$phi50.0']
2023-08-13 11:42:37,094 state.pc_initial: State(pc_initial=50 nstack_initial=1)
2023-08-13 11:42:37,094 dispatch pc=50, inst=POP_TOP(arg=None, lineno=1148)
2023-08-13 11:42:37,094 stack ['$phi50.0']
2023-08-13 11:42:37,095 dispatch pc=52, inst=JUMP_FORWARD(arg=2, lineno=1148)
2023-08-13 11:42:37,095 stack []
2023-08-13 11:42:37,095 end state. edges=[Edge(pc=58, stack=(), blockstack=(), npush=0)]
2023-08-13 11:42:37,095 pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=58 nstack_initial=0), State(pc_initial=58 nstack_initial=0)])
2023-08-13 11:42:37,095 stack: []
2023-08-13 11:42:37,095 state.pc_initial: State(pc_initial=48 nstack_initial=0)
2023-08-13 11:42:37,095 dispatch pc=48, inst=JUMP_FORWARD(arg=2, lineno=1148)
2023-08-13 11:42:37,095 stack []
2023-08-13 11:42:37,095 end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0)]
2023-08-13 11:42:37,097 pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=58 nstack_initial=0), State(pc_initial=54 nstack_initial=0)])
2023-08-13 11:42:37,097 stack: []
2023-08-13 11:42:37,097 state.pc_initial: State(pc_initial=58 nstack_initial=0)
2023-08-13 11:42:37,097 dispatch pc=58, inst=LOAD_FAST(arg=0, lineno=1151)
2023-08-13 11:42:37,097 stack []
2023-08-13 11:42:37,097 dispatch pc=60, inst=LOAD_CONST(arg=2, lineno=1151)
2023-08-13 11:42:37,097 stack ['$x58.0']
2023-08-13 11:42:37,097 dispatch pc=62, inst=BINARY_SUBSCR(arg=None, lineno=1151)
2023-08-13 11:42:37,098 stack ['$x58.0', '$const60.1']
2023-08-13 11:42:37,098 dispatch pc=72, inst=STORE_FAST(arg=4, lineno=1151)
2023-08-13 11:42:37,098 stack ['$62binary_subscr.2']
2023-08-13 11:42:37,098 dispatch pc=74, inst=LOAD_FAST(arg=1, lineno=1152)
2023-08-13 11:42:37,098 stack []
2023-08-13 11:42:37,098 dispatch pc=76, inst=UNARY_NEGATIVE(arg=None, lineno=1152)
2023-08-13 11:42:37,098 stack ['$threshold74.3']
2023-08-13 11:42:37,098 dispatch pc=78, inst=LOAD_FAST(arg=4, lineno=1152)
2023-08-13 11:42:37,098 stack ['$76unary_negative.4']
2023-08-13 11:42:37,099 dispatch pc=80, inst=SWAP(arg=2, lineno=1152)
2023-08-13 11:42:37,099 stack ['$76unary_negative.4', '$x178.5']
2023-08-13 11:42:37,099 dispatch pc=82, inst=COPY(arg=2, lineno=1152)
2023-08-13 11:42:37,099 stack ['$x178.5', '$76unary_negative.4']
2023-08-13 11:42:37,099 dispatch pc=84, inst=COMPARE_OP(arg=1, lineno=1152)
2023-08-13 11:42:37,099 stack ['$x178.5', '$76unary_negative.4', '$x178.5']
2023-08-13 11:42:37,099 dispatch pc=90, inst=POP_JUMP_FORWARD_IF_FALSE(arg=6, lineno=1152)
2023-08-13 11:42:37,099 stack ['$x178.5', '$84compare_op.6']
2023-08-13 11:42:37,099 end state. edges=[Edge(pc=92, stack=('$x178.5',), blockstack=(), npush=0), Edge(pc=104, stack=('$x178.5',), blockstack=(), npush=0)]
2023-08-13 11:42:37,099 pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=54 nstack_initial=0), State(pc_initial=92 nstack_initial=1), State(pc_initial=104 nstack_initial=1)])
2023-08-13 11:42:37,100 pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=92 nstack_initial=1), State(pc_initial=104 nstack_initial=1)])
2023-08-13 11:42:37,100 stack: []
2023-08-13 11:42:37,100 state.pc_initial: State(pc_initial=54 nstack_initial=0)
2023-08-13 11:42:37,100 dispatch pc=54, inst=LOAD_CONST(arg=1, lineno=1149)
2023-08-13 11:42:37,100 stack []
2023-08-13 11:42:37,100 dispatch pc=56, inst=STORE_FAST(arg=3, lineno=1149)
2023-08-13 11:42:37,100 stack ['$const54.0']
2023-08-13 11:42:37,100 end state. edges=[Edge(pc=58, stack=(), blockstack=(), npush=0)]
2023-08-13 11:42:37,100 pending: deque([State(pc_initial=92 nstack_initial=1), State(pc_initial=104 nstack_initial=1), State(pc_initial=58 nstack_initial=0)])
2023-08-13 11:42:37,100 stack: ['$phi92.0']
2023-08-13 11:42:37,100 state.pc_initial: State(pc_initial=92 nstack_initial=1)
2023-08-13 11:42:37,100 dispatch pc=92, inst=LOAD_FAST(arg=1, lineno=1152)
2023-08-13 11:42:37,100 stack ['$phi92.0']
2023-08-13 11:42:37,100 dispatch pc=94, inst=COMPARE_OP(arg=1, lineno=1152)
2023-08-13 11:42:37,101 stack ['$phi92.0', '$threshold92.1']
2023-08-13 11:42:37,101 dispatch pc=100, inst=POP_JUMP_FORWARD_IF_FALSE(arg=5, lineno=1152)
2023-08-13 11:42:37,101 stack ['$94compare_op.2']
2023-08-13 11:42:37,101 end state. edges=[Edge(pc=102, stack=(), blockstack=(), npush=0), Edge(pc=112, stack=(), blockstack=(), npush=0)]
2023-08-13 11:42:37,101 pending: deque([State(pc_initial=104 nstack_initial=1), State(pc_initial=58 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=112 nstack_initial=0)])
2023-08-13 11:42:37,101 stack: ['$phi104.0']
2023-08-13 11:42:37,101 state.pc_initial: State(pc_initial=104 nstack_initial=1)
2023-08-13 11:42:37,101 dispatch pc=104, inst=POP_TOP(arg=None, lineno=1152)
2023-08-13 11:42:37,101 stack ['$phi104.0']
2023-08-13 11:42:37,101 dispatch pc=106, inst=JUMP_FORWARD(arg=2, lineno=1152)
2023-08-13 11:42:37,101 stack []
2023-08-13 11:42:37,101 end state. edges=[Edge(pc=112, stack=(), blockstack=(), npush=0)]
2023-08-13 11:42:37,101 pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=112 nstack_initial=0), State(pc_initial=112 nstack_initial=0)])
2023-08-13 11:42:37,101 pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=112 nstack_initial=0), State(pc_initial=112 nstack_initial=0)])
2023-08-13 11:42:37,101 stack: []
2023-08-13 11:42:37,102 state.pc_initial: State(pc_initial=102 nstack_initial=0)
2023-08-13 11:42:37,102 dispatch pc=102, inst=JUMP_FORWARD(arg=2, lineno=1152)
2023-08-13 11:42:37,102 stack []
2023-08-13 11:42:37,102 end state. edges=[Edge(pc=108, stack=(), blockstack=(), npush=0)]
2023-08-13 11:42:37,102 pending: deque([State(pc_initial=112 nstack_initial=0), State(pc_initial=112 nstack_initial=0), State(pc_initial=108 nstack_initial=0)])
2023-08-13 11:42:37,102 stack: []
2023-08-13 11:42:37,102 state.pc_initial: State(pc_initial=112 nstack_initial=0)
2023-08-13 11:42:37,102 dispatch pc=112, inst=LOAD_FAST(arg=2, lineno=1155)
2023-08-13 11:42:37,102 stack []
2023-08-13 11:42:37,102 dispatch pc=114, inst=POP_JUMP_FORWARD_IF_FALSE(arg=42, lineno=1155)
2023-08-13 11:42:37,102 stack ['$zero_pos112.0']
2023-08-13 11:42:37,102 end state. edges=[Edge(pc=116, stack=(), blockstack=(), npush=0), Edge(pc=200, stack=(), blockstack=(), npush=0)]
2023-08-13 11:42:37,102 pending: deque([State(pc_initial=112 nstack_initial=0), State(pc_initial=108 nstack_initial=0), State(pc_initial=116 nstack_initial=0), State(pc_initial=200 nstack_initial=0)])
2023-08-13 11:42:37,103 pending: deque([State(pc_initial=108 nstack_initial=0), State(pc_initial=116 nstack_initial=0), State(pc_initial=200 nstack_initial=0)])
2023-08-13 11:42:37,103 stack: []
2023-08-13 11:42:37,103 state.pc_initial: State(pc_initial=108 nstack_initial=0)
2023-08-13 11:42:37,103 dispatch pc=108, inst=LOAD_CONST(arg=1, lineno=1153)
2023-08-13 11:42:37,103 stack []
2023-08-13 11:42:37,103 dispatch pc=110, inst=STORE_FAST(arg=4, lineno=1153)
2023-08-13 11:42:37,103 stack ['$const108.0']
2023-08-13 11:42:37,104 end state. edges=[Edge(pc=112, stack=(), blockstack=(), npush=0)]
2023-08-13 11:42:37,104 pending: deque([State(pc_initial=116 nstack_initial=0), State(pc_initial=200 nstack_initial=0), State(pc_initial=112 nstack_initial=0)])
2023-08-13 11:42:37,104 stack: []
2023-08-13 11:42:37,104 state.pc_initial: State(pc_initial=116 nstack_initial=0)
2023-08-13 11:42:37,104 dispatch pc=116, inst=LOAD_GLOBAL(arg=1, lineno=1156)
2023-08-13 11:42:37,104 stack []
2023-08-13 11:42:37,104 dispatch pc=128, inst=LOAD_ATTR(arg=1, lineno=1156)
2023-08-13 11:42:37,104 stack ['$null$116.1', '$116load_global.0']
2023-08-13 11:42:37,104 dispatch pc=138, inst=LOAD_FAST(arg=3, lineno=1156)
2023-08-13 11:42:37,104 stack ['$null$116.1', '$128load_attr.2']
2023-08-13 11:42:37,104 dispatch pc=140, inst=PRECALL(arg=1, lineno=1156)
2023-08-13 11:42:37,104 stack ['$null$116.1', '$128load_attr.2', '$x0138.3']
2023-08-13 11:42:37,105 dispatch pc=144, inst=CALL(arg=1, lineno=1156)
2023-08-13 11:42:37,105 stack ['$null$116.1', '$128load_attr.2', '$x0138.3']
2023-08-13 11:42:37,105 dispatch pc=154, inst=LOAD_GLOBAL(arg=1, lineno=1156)
2023-08-13 11:42:37,105 stack ['$144call.4']
2023-08-13 11:42:37,105 dispatch pc=166, inst=LOAD_ATTR(arg=1, lineno=1156)
2023-08-13 11:42:37,105 stack ['$144call.4', '$null$154.6', '$154load_global.5']
2023-08-13 11:42:37,105 dispatch pc=176, inst=LOAD_FAST(arg=4, lineno=1156)
2023-08-13 11:42:37,105 stack ['$144call.4', '$null$154.6', '$166load_attr.7']
2023-08-13 11:42:37,105 dispatch pc=178, inst=PRECALL(arg=1, lineno=1156)
2023-08-13 11:42:37,105 stack ['$144call.4', '$null$154.6', '$166load_attr.7', '$x1176.8']
2023-08-13 11:42:37,105 dispatch pc=182, inst=CALL(arg=1, lineno=1156)
2023-08-13 11:42:37,105 stack ['$144call.4', '$null$154.6', '$166load_attr.7', '$x1176.8']
2023-08-13 11:42:37,105 dispatch pc=192, inst=COMPARE_OP(arg=3, lineno=1156)
2023-08-13 11:42:37,106 stack ['$144call.4', '$182call.9']
2023-08-13 11:42:37,106 dispatch pc=198, inst=RETURN_VALUE(arg=None, lineno=1156)
2023-08-13 11:42:37,106 stack ['$192compare_op.10']
2023-08-13 11:42:37,106 end state. edges=[]
2023-08-13 11:42:37,106 pending: deque([State(pc_initial=200 nstack_initial=0), State(pc_initial=112 nstack_initial=0)])
2023-08-13 11:42:37,106 stack: []
2023-08-13 11:42:37,106 state.pc_initial: State(pc_initial=200 nstack_initial=0)
2023-08-13 11:42:37,106 dispatch pc=200, inst=LOAD_GLOBAL(arg=1, lineno=1158)
2023-08-13 11:42:37,106 stack []
2023-08-13 11:42:37,106 dispatch pc=212, inst=LOAD_ATTR(arg=2, lineno=1158)
2023-08-13 11:42:37,106 stack ['$null$200.1', '$200load_global.0']
2023-08-13 11:42:37,106 dispatch pc=222, inst=LOAD_FAST(arg=3, lineno=1158)
2023-08-13 11:42:37,106 stack ['$null$200.1', '$212load_attr.2']
2023-08-13 11:42:37,106 dispatch pc=224, inst=PRECALL(arg=1, lineno=1158)
2023-08-13 11:42:37,107 stack ['$null$200.1', '$212load_attr.2', '$x0222.3']
2023-08-13 11:42:37,107 dispatch pc=228, inst=CALL(arg=1, lineno=1158)
2023-08-13 11:42:37,107 stack ['$null$200.1', '$212load_attr.2', '$x0222.3']
2023-08-13 11:42:37,107 dispatch pc=238, inst=LOAD_GLOBAL(arg=1, lineno=1158)
2023-08-13 11:42:37,107 stack ['$228call.4']
2023-08-13 11:42:37,107 dispatch pc=250, inst=LOAD_ATTR(arg=2, lineno=1158)
2023-08-13 11:42:37,107 stack ['$228call.4', '$null$238.6', '$238load_global.5']
2023-08-13 11:42:37,107 dispatch pc=260, inst=LOAD_FAST(arg=4, lineno=1158)
2023-08-13 11:42:37,107 stack ['$228call.4', '$null$238.6', '$250load_attr.7']
2023-08-13 11:42:37,107 dispatch pc=262, inst=PRECALL(arg=1, lineno=1158)
2023-08-13 11:42:37,107 stack ['$228call.4', '$null$238.6', '$250load_attr.7', '$x1260.8']
2023-08-13 11:42:37,107 dispatch pc=266, inst=CALL(arg=1, lineno=1158)
2023-08-13 11:42:37,107 stack ['$228call.4', '$null$238.6', '$250load_attr.7', '$x1260.8']
2023-08-13 11:42:37,108 dispatch pc=276, inst=COMPARE_OP(arg=3, lineno=1158)
2023-08-13 11:42:37,108 stack ['$228call.4', '$266call.9']
2023-08-13 11:42:37,108 dispatch pc=282, inst=RETURN_VALUE(arg=None, lineno=1158)
2023-08-13 11:42:37,108 stack ['$276compare_op.10']
2023-08-13 11:42:37,108 end state. edges=[]
2023-08-13 11:42:37,108 pending: deque([State(pc_initial=112 nstack_initial=0)])
2023-08-13 11:42:37,108 -------------------------Prune PHIs-------------------------
2023-08-13 11:42:37,108 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=38 nstack_initial=1): {'$phi38.0'},
             State(pc_initial=48 nstack_initial=0): set(),
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=54 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=92 nstack_initial=1): {'$phi92.0'},
             State(pc_initial=102 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=1): set(),
             State(pc_initial=108 nstack_initial=0): set(),
             State(pc_initial=112 nstack_initial=0): set(),
             State(pc_initial=116 nstack_initial=0): set(),
             State(pc_initial=200 nstack_initial=0): set()})
2023-08-13 11:42:37,108 defmap: {'$phi104.0': State(pc_initial=58 nstack_initial=0),
 '$phi38.0': State(pc_initial=0 nstack_initial=0),
 '$phi50.0': State(pc_initial=0 nstack_initial=0),
 '$phi92.0': State(pc_initial=58 nstack_initial=0)}
2023-08-13 11:42:37,109 phismap: defaultdict(<class 'set'>,
            {'$phi104.0': {('$x178.5', State(pc_initial=58 nstack_initial=0))},
             '$phi38.0': {('$x024.5', State(pc_initial=0 nstack_initial=0))},
             '$phi50.0': {('$x024.5', State(pc_initial=0 nstack_initial=0))},
             '$phi92.0': {('$x178.5', State(pc_initial=58 nstack_initial=0))}})
2023-08-13 11:42:37,109 changing phismap: defaultdict(<class 'set'>,
            {'$phi104.0': {('$x178.5', State(pc_initial=58 nstack_initial=0))},
             '$phi38.0': {('$x024.5', State(pc_initial=0 nstack_initial=0))},
             '$phi50.0': {('$x024.5', State(pc_initial=0 nstack_initial=0))},
             '$phi92.0': {('$x178.5', State(pc_initial=58 nstack_initial=0))}})
2023-08-13 11:42:37,109 keep phismap: {'$phi38.0': {('$x024.5', State(pc_initial=0 nstack_initial=0))},
 '$phi92.0': {('$x178.5', State(pc_initial=58 nstack_initial=0))}}
2023-08-13 11:42:37,109 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi38.0': '$x024.5'},
             State(pc_initial=58 nstack_initial=0): {'$phi92.0': '$x178.5'}})
2023-08-13 11:42:37,109 ----------------------DONE Prune PHIs-----------------------
2023-08-13 11:42:37,109 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$x4.0'}), (6, {'res': '$const6.1'}), (8, {'index': '$const6.1', 'target': '$x4.0', 'res': '$8binary_subscr.2'}), (10, {}), (12, {}), (14, {}), (16, {}), (18, {'value': '$8binary_subscr.2'}), (20, {'res': '$threshold20.3'}), (22, {'value': '$threshold20.3', 'res': '$22unary_negative.4'}), (24, {'res': '$x024.5'}), (30, {'lhs': '$22unary_negative.4', 'rhs': '$x024.5', 'res': '$30compare_op.6'}), (32, {}), (34, {}), (36, {'pred': '$30compare_op.6'})), outgoing_phis={'$phi38.0': '$x024.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={38: ('$x024.5',), 50: ('$x024.5',)})
2023-08-13 11:42:37,110 block_infos State(pc_initial=38 nstack_initial=1):
AdaptBlockInfo(insts=((38, {'res': '$threshold38.1'}), (40, {'lhs': '$phi38.0', 'rhs': '$threshold38.1', 'res': '$40compare_op.2'}), (42, {}), (44, {}), (46, {'pred': '$40compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={48: (), 58: ()})
2023-08-13 11:42:37,110 block_infos State(pc_initial=48 nstack_initial=0):
AdaptBlockInfo(insts=((48, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: ()})
2023-08-13 11:42:37,110 block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((52, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: ()})
2023-08-13 11:42:37,110 block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$const54.0'}), (56, {'value': '$const54.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: ()})
2023-08-13 11:42:37,110 block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$x58.0'}), (60, {'res': '$const60.1'}), (62, {'index': '$const60.1', 'target': '$x58.0', 'res': '$62binary_subscr.2'}), (64, {}), (66, {}), (68, {}), (70, {}), (72, {'value': '$62binary_subscr.2'}), (74, {'res': '$threshold74.3'}), (76, {'value': '$threshold74.3', 'res': '$76unary_negative.4'}), (78, {'res': '$x178.5'}), (84, {'lhs': '$76unary_negative.4', 'rhs': '$x178.5', 'res': '$84compare_op.6'}), (86, {}), (88, {}), (90, {'pred': '$84compare_op.6'})), outgoing_phis={'$phi92.0': '$x178.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={92: ('$x178.5',), 104: ('$x178.5',)})
2023-08-13 11:42:37,110 block_infos State(pc_initial=92 nstack_initial=1):
AdaptBlockInfo(insts=((92, {'res': '$threshold92.1'}), (94, {'lhs': '$phi92.0', 'rhs': '$threshold92.1', 'res': '$94compare_op.2'}), (96, {}), (98, {}), (100, {'pred': '$94compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={102: (), 112: ()})
2023-08-13 11:42:37,110 block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={108: ()})
2023-08-13 11:42:37,110 block_infos State(pc_initial=104 nstack_initial=1):
AdaptBlockInfo(insts=((106, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={112: ()})
2023-08-13 11:42:37,110 block_infos State(pc_initial=108 nstack_initial=0):
AdaptBlockInfo(insts=((108, {'res': '$const108.0'}), (110, {'value': '$const108.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={112: ()})
2023-08-13 11:42:37,110 block_infos State(pc_initial=112 nstack_initial=0):
AdaptBlockInfo(insts=((112, {'res': '$zero_pos112.0'}), (114, {'pred': '$zero_pos112.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={116: (), 200: ()})
2023-08-13 11:42:37,110 block_infos State(pc_initial=116 nstack_initial=0):
AdaptBlockInfo(insts=((116, {'idx': 0, 'res': '$116load_global.0'}), (118, {}), (120, {}), (122, {}), (124, {}), (126, {}), (128, {'item': '$116load_global.0', 'res': '$128load_attr.2'}), (130, {}), (132, {}), (134, {}), (136, {}), (138, {'res': '$x0138.3'}), (140, {}), (142, {}), (144, {'func': '$128load_attr.2', 'args': ['$x0138.3'], 'kw_names': None, 'res': '$144call.4'}), (146, {}), (148, {}), (150, {}), (152, {}), (154, {'idx': 0, 'res': '$154load_global.5'}), (156, {}), (158, {}), (160, {}), (162, {}), (164, {}), (166, {'item': '$154load_global.5', 'res': '$166load_attr.7'}), (168, {}), (170, {}), (172, {}), (174, {}), (176, {'res': '$x1176.8'}), (178, {}), (180, {}), (182, {'func': '$166load_attr.7', 'args': ['$x1176.8'], 'kw_names': None, 'res': '$182call.9'}), (184, {}), (186, {}), (188, {}), (190, {}), (192, {'lhs': '$144call.4', 'rhs': '$182call.9', 'res': '$192compare_op.10'}), (194, {}), (196, {}), (198, {'retval': '$192compare_op.10', 'castval': '$198return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:37,110 block_infos State(pc_initial=200 nstack_initial=0):
AdaptBlockInfo(insts=((200, {'idx': 0, 'res': '$200load_global.0'}), (202, {}), (204, {}), (206, {}), (208, {}), (210, {}), (212, {'item': '$200load_global.0', 'res': '$212load_attr.2'}), (214, {}), (216, {}), (218, {}), (220, {}), (222, {'res': '$x0222.3'}), (224, {}), (226, {}), (228, {'func': '$212load_attr.2', 'args': ['$x0222.3'], 'kw_names': None, 'res': '$228call.4'}), (230, {}), (232, {}), (234, {}), (236, {}), (238, {'idx': 0, 'res': '$238load_global.5'}), (240, {}), (242, {}), (244, {}), (246, {}), (248, {}), (250, {'item': '$238load_global.5', 'res': '$250load_attr.7'}), (252, {}), (254, {}), (256, {}), (258, {}), (260, {'res': '$x1260.8'}), (262, {}), (264, {}), (266, {'func': '$250load_attr.7', 'args': ['$x1260.8'], 'kw_names': None, 'res': '$266call.9'}), (268, {}), (270, {}), (272, {}), (274, {}), (276, {'lhs': '$228call.4', 'rhs': '$266call.9', 'res': '$276compare_op.10'}), (278, {}), (280, {}), (282, {'retval': '$276compare_op.10', 'castval': '$282return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:37,113 label 0:
    x = arg(0, name=x)                       ['x']
    threshold = arg(1, name=threshold)       ['threshold']
    zero_pos = arg(2, name=zero_pos)         ['zero_pos']
    $const6.1 = const(int, 0)                ['$const6.1']
    x0 = getitem(value=x, index=$const6.1, fn=<built-in function getitem>) ['$const6.1', 'x', 'x0']
    $22unary_negative.4 = unary(fn=<built-in function neg>, value=threshold) ['$22unary_negative.4', 'threshold']
    $30compare_op.6 = $22unary_negative.4 <= x0 ['$22unary_negative.4', '$30compare_op.6', 'x0']
    bool36 = global(bool: <class 'bool'>)    ['bool36']
    $36pred = call bool36($30compare_op.6, func=bool36, args=(Var($30compare_op.6, audio.py:1148),), kws=(), vararg=None, varkwarg=None, target=None) ['$30compare_op.6', '$36pred', 'bool36']
    $phi38.0 = x0                            ['$phi38.0', 'x0']
    branch $36pred, 38, 50                   ['$36pred']
label 38:
    $40compare_op.2 = $phi38.0 <= threshold  ['$40compare_op.2', '$phi38.0', 'threshold']
    bool46 = global(bool: <class 'bool'>)    ['bool46']
    $46pred = call bool46($40compare_op.2, func=bool46, args=(Var($40compare_op.2, audio.py:1148),), kws=(), vararg=None, varkwarg=None, target=None) ['$40compare_op.2', '$46pred', 'bool46']
    branch $46pred, 48, 58                   ['$46pred']
label 48:
    jump 54                                  []
label 50:
    jump 58                                  []
label 54:
    x0 = const(int, 0)                       ['x0']
    jump 58                                  []
label 58:
    $const60.1 = const(int, -1)              ['$const60.1']
    x1 = getitem(value=x, index=$const60.1, fn=<built-in function getitem>) ['$const60.1', 'x', 'x1']
    $76unary_negative.4 = unary(fn=<built-in function neg>, value=threshold) ['$76unary_negative.4', 'threshold']
    $84compare_op.6 = $76unary_negative.4 <= x1 ['$76unary_negative.4', '$84compare_op.6', 'x1']
    bool90 = global(bool: <class 'bool'>)    ['bool90']
    $90pred = call bool90($84compare_op.6, func=bool90, args=(Var($84compare_op.6, audio.py:1152),), kws=(), vararg=None, varkwarg=None, target=None) ['$84compare_op.6', '$90pred', 'bool90']
    $phi92.0 = x1                            ['$phi92.0', 'x1']
    branch $90pred, 92, 104                  ['$90pred']
label 92:
    $94compare_op.2 = $phi92.0 <= threshold  ['$94compare_op.2', '$phi92.0', 'threshold']
    bool100 = global(bool: <class 'bool'>)   ['bool100']
    $100pred = call bool100($94compare_op.2, func=bool100, args=(Var($94compare_op.2, audio.py:1152),), kws=(), vararg=None, varkwarg=None, target=None) ['$100pred', '$94compare_op.2', 'bool100']
    branch $100pred, 102, 112                ['$100pred']
label 102:
    jump 108                                 []
label 104:
    jump 112                                 []
label 108:
    x1 = const(int, 0)                       ['x1']
    jump 112                                 []
label 112:
    bool114 = global(bool: <class 'bool'>)   ['bool114']
    $114pred = call bool114(zero_pos, func=bool114, args=(Var(zero_pos, audio.py:1144),), kws=(), vararg=None, varkwarg=None, target=None) ['$114pred', 'bool114', 'zero_pos']
    branch $114pred, 116, 200                ['$114pred']
label 116:
    $116load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>) ['$116load_global.0']
    $128load_attr.2 = getattr(value=$116load_global.0, attr=signbit) ['$116load_global.0', '$128load_attr.2']
    $144call.4 = call $128load_attr.2(x0, func=$128load_attr.2, args=[Var(x0, audio.py:1147)], kws=(), vararg=None, varkwarg=None, target=None) ['$128load_attr.2', '$144call.4', 'x0']
    $154load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>) ['$154load_global.5']
    $166load_attr.7 = getattr(value=$154load_global.5, attr=signbit) ['$154load_global.5', '$166load_attr.7']
    $182call.9 = call $166load_attr.7(x1, func=$166load_attr.7, args=[Var(x1, audio.py:1151)], kws=(), vararg=None, varkwarg=None, target=None) ['$166load_attr.7', '$182call.9', 'x1']
    $192compare_op.10 = $144call.4 != $182call.9 ['$144call.4', '$182call.9', '$192compare_op.10']
    $198return_value.11 = cast(value=$192compare_op.10) ['$192compare_op.10', '$198return_value.11']
    return $198return_value.11               ['$198return_value.11']
label 200:
    $200load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>) ['$200load_global.0']
    $212load_attr.2 = getattr(value=$200load_global.0, attr=sign) ['$200load_global.0', '$212load_attr.2']
    $228call.4 = call $212load_attr.2(x0, func=$212load_attr.2, args=[Var(x0, audio.py:1147)], kws=(), vararg=None, varkwarg=None, target=None) ['$212load_attr.2', '$228call.4', 'x0']
    $238load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>) ['$238load_global.5']
    $250load_attr.7 = getattr(value=$238load_global.5, attr=sign) ['$238load_global.5', '$250load_attr.7']
    $266call.9 = call $250load_attr.7(x1, func=$250load_attr.7, args=[Var(x1, audio.py:1151)], kws=(), vararg=None, varkwarg=None, target=None) ['$250load_attr.7', '$266call.9', 'x1']
    $276compare_op.10 = $228call.4 != $266call.9 ['$228call.4', '$266call.9', '$276compare_op.10']
    $282return_value.11 = cast(value=$276compare_op.10) ['$276compare_op.10', '$282return_value.11']
    return $282return_value.11               ['$282return_value.11']

2023-08-13 11:42:38,058 bytecode dump:
>          0	NOP(arg=None, lineno=1161)
           2	RESUME(arg=0, lineno=1161)
           4	LOAD_GLOBAL(arg=1, lineno=1177)
          16	LOAD_FAST(arg=0, lineno=1177)
          18	LOAD_FAST(arg=1, lineno=1177)
          20	LOAD_FAST(arg=2, lineno=1177)
          22	PRECALL(arg=3, lineno=1177)
          26	CALL(arg=3, lineno=1177)
          36	LOAD_FAST(arg=3, lineno=1177)
          38	LOAD_CONST(arg=1, lineno=1177)
          40	LOAD_CONST(arg=1, lineno=1177)
          42	BUILD_SLICE(arg=2, lineno=1177)
          44	STORE_SUBSCR(arg=None, lineno=1177)
          48	LOAD_CONST(arg=1, lineno=1177)
          50	RETURN_VALUE(arg=None, lineno=1177)
2023-08-13 11:42:38,059 pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-13 11:42:38,059 stack: []
2023-08-13 11:42:38,059 state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-13 11:42:38,059 dispatch pc=0, inst=NOP(arg=None, lineno=1161)
2023-08-13 11:42:38,059 stack []
2023-08-13 11:42:38,059 dispatch pc=2, inst=RESUME(arg=0, lineno=1161)
2023-08-13 11:42:38,059 stack []
2023-08-13 11:42:38,059 dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=1177)
2023-08-13 11:42:38,059 stack []
2023-08-13 11:42:38,059 dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1177)
2023-08-13 11:42:38,059 stack ['$null$4.1', '$4load_global.0']
2023-08-13 11:42:38,059 dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=1177)
2023-08-13 11:42:38,059 stack ['$null$4.1', '$4load_global.0', '$x16.2']
2023-08-13 11:42:38,059 dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=1177)
2023-08-13 11:42:38,059 stack ['$null$4.1', '$4load_global.0', '$x16.2', '$threshold18.3']
2023-08-13 11:42:38,059 dispatch pc=22, inst=PRECALL(arg=3, lineno=1177)
2023-08-13 11:42:38,059 stack ['$null$4.1', '$4load_global.0', '$x16.2', '$threshold18.3', '$zero_pos20.4']
2023-08-13 11:42:38,059 dispatch pc=26, inst=CALL(arg=3, lineno=1177)
2023-08-13 11:42:38,059 stack ['$null$4.1', '$4load_global.0', '$x16.2', '$threshold18.3', '$zero_pos20.4']
2023-08-13 11:42:38,060 dispatch pc=36, inst=LOAD_FAST(arg=3, lineno=1177)
2023-08-13 11:42:38,060 stack ['$26call.5']
2023-08-13 11:42:38,060 dispatch pc=38, inst=LOAD_CONST(arg=1, lineno=1177)
2023-08-13 11:42:38,060 stack ['$26call.5', '$y36.6']
2023-08-13 11:42:38,060 dispatch pc=40, inst=LOAD_CONST(arg=1, lineno=1177)
2023-08-13 11:42:38,060 stack ['$26call.5', '$y36.6', '$const38.7']
2023-08-13 11:42:38,060 dispatch pc=42, inst=BUILD_SLICE(arg=2, lineno=1177)
2023-08-13 11:42:38,060 stack ['$26call.5', '$y36.6', '$const38.7', '$const40.8']
2023-08-13 11:42:38,060 dispatch pc=44, inst=STORE_SUBSCR(arg=None, lineno=1177)
2023-08-13 11:42:38,060 stack ['$26call.5', '$y36.6', '$42build_slice.10']
2023-08-13 11:42:38,060 dispatch pc=48, inst=LOAD_CONST(arg=1, lineno=1177)
2023-08-13 11:42:38,060 stack []
2023-08-13 11:42:38,060 dispatch pc=50, inst=RETURN_VALUE(arg=None, lineno=1177)
2023-08-13 11:42:38,060 stack ['$const48.11']
2023-08-13 11:42:38,060 end state. edges=[]
2023-08-13 11:42:38,060 -------------------------Prune PHIs-------------------------
2023-08-13 11:42:38,060 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-08-13 11:42:38,060 defmap: {}
2023-08-13 11:42:38,060 phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:38,060 changing phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:38,060 keep phismap: {}
2023-08-13 11:42:38,061 new_out: defaultdict(<class 'dict'>, {})
2023-08-13 11:42:38,061 ----------------------DONE Prune PHIs-----------------------
2023-08-13 11:42:38,061 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'res': '$x16.2'}), (18, {'res': '$threshold18.3'}), (20, {'res': '$zero_pos20.4'}), (22, {}), (24, {}), (26, {'func': '$4load_global.0', 'args': ['$x16.2', '$threshold18.3', '$zero_pos20.4'], 'kw_names': None, 'res': '$26call.5'}), (28, {}), (30, {}), (32, {}), (34, {}), (36, {'res': '$y36.6'}), (38, {'res': '$const38.7'}), (40, {'res': '$const40.8'}), (42, {'start': '$const38.7', 'stop': '$const40.8', 'step': None, 'res': '$42build_slice.10', 'slicevar': '$42build_slice.9'}), (44, {'target': '$y36.6', 'index': '$42build_slice.10', 'value': '$26call.5'}), (46, {}), (48, {'res': '$const48.11'}), (50, {'retval': '$const48.11', 'castval': '$50return_value.12'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:38,061 label 0:
    x = arg(0, name=x)                       ['x']
    threshold = arg(1, name=threshold)       ['threshold']
    zero_pos = arg(2, name=zero_pos)         ['zero_pos']
    y = arg(3, name=y)                       ['y']
    $4load_global.0 = global(_zc_stencil: <numba.stencils.stencil.StencilFunc object at 0x000001F690DC6590>) ['$4load_global.0']
    $26call.5 = call $4load_global.0(x, threshold, zero_pos, func=$4load_global.0, args=[Var(x, audio.py:1161), Var(threshold, audio.py:1161), Var(zero_pos, audio.py:1161)], kws=(), vararg=None, varkwarg=None, target=None) ['$26call.5', '$4load_global.0', 'threshold', 'x', 'zero_pos']
    $const38.7 = const(NoneType, None)       ['$const38.7']
    $const40.8 = const(NoneType, None)       ['$const40.8']
    $42build_slice.9 = global(slice: <class 'slice'>) ['$42build_slice.9']
    $42build_slice.10 = call $42build_slice.9($const38.7, $const40.8, func=$42build_slice.9, args=(Var($const38.7, audio.py:1177), Var($const40.8, audio.py:1177)), kws=(), vararg=None, varkwarg=None, target=None) ['$42build_slice.10', '$42build_slice.9', '$const38.7', '$const40.8']
    y[$42build_slice.10] = $26call.5         ['$26call.5', '$42build_slice.10', 'y']
    $const48.11 = const(NoneType, None)      ['$const48.11']
    $50return_value.12 = cast(value=$const48.11) ['$50return_value.12', '$const48.11']
    return $50return_value.12                ['$50return_value.12']

2023-08-13 11:42:38,078 ==== SSA block analysis pass on 0
2023-08-13 11:42:38,078 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F695F94E90>
2023-08-13 11:42:38,078 on stmt: x = arg(0, name=x)
2023-08-13 11:42:38,078 on stmt: threshold = arg(1, name=threshold)
2023-08-13 11:42:38,078 on stmt: zero_pos = arg(2, name=zero_pos)
2023-08-13 11:42:38,078 on stmt: y = arg(3, name=y)
2023-08-13 11:42:38,078 on stmt: $4load_global.0 = global(_zc_stencil: <numba.stencils.stencil.StencilFunc object at 0x000001F690DC6590>)
2023-08-13 11:42:38,078 on stmt: $26call.5 = call $4load_global.0(x, threshold, zero_pos, func=$4load_global.0, args=[Var(x, audio.py:1161), Var(threshold, audio.py:1161), Var(zero_pos, audio.py:1161)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,078 on stmt: $const38.7 = const(NoneType, None)
2023-08-13 11:42:38,078 on stmt: $const40.8 = const(NoneType, None)
2023-08-13 11:42:38,078 on stmt: $42build_slice.9 = global(slice: <class 'slice'>)
2023-08-13 11:42:38,078 on stmt: $42build_slice.10 = call $42build_slice.9($const38.7, $const40.8, func=$42build_slice.9, args=(Var($const38.7, audio.py:1177), Var($const40.8, audio.py:1177)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,079 on stmt: y[slice(None, None, None)] = $26call.5
2023-08-13 11:42:38,079 on stmt: $const48.11 = const(NoneType, None)
2023-08-13 11:42:38,079 on stmt: $50return_value.12 = cast(value=$const48.11)
2023-08-13 11:42:38,079 on stmt: return $50return_value.12
2023-08-13 11:42:38,079 defs defaultdict(<class 'list'>,
            {'$26call.5': [<numba.core.ir.Assign object at 0x000001F695FA7D50>],
             '$42build_slice.10': [<numba.core.ir.Assign object at 0x000001F695FA98D0>],
             '$42build_slice.9': [<numba.core.ir.Assign object at 0x000001F695FA9750>],
             '$4load_global.0': [<numba.core.ir.Assign object at 0x000001F695FA6690>],
             '$50return_value.12': [<numba.core.ir.Assign object at 0x000001F695FAA050>],
             '$const38.7': [<numba.core.ir.Assign object at 0x000001F695FA8B50>],
             '$const40.8': [<numba.core.ir.Assign object at 0x000001F695FA9390>],
             '$const48.11': [<numba.core.ir.Assign object at 0x000001F695FA9D10>],
             'threshold': [<numba.core.ir.Assign object at 0x000001F695FA5210>],
             'x': [<numba.core.ir.Assign object at 0x000001F695FA5390>],
             'y': [<numba.core.ir.Assign object at 0x000001F695FA5E50>],
             'zero_pos': [<numba.core.ir.Assign object at 0x000001F695FA58D0>]})
2023-08-13 11:42:38,079 SSA violators set()
2023-08-13 11:42:38,285 bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	RESUME(arg=0, lineno=1)
           4	LOAD_FAST(arg=0, lineno=2)
           6	LOAD_ATTR(arg=0, lineno=2)
          16	STORE_FAST(arg=3, lineno=2)
          18	LOAD_GLOBAL(arg=2, lineno=3)
          30	LOAD_METHOD(arg=2, lineno=3)
          52	LOAD_FAST(arg=3, lineno=3)
          54	LOAD_GLOBAL(arg=2, lineno=3)
          66	LOAD_ATTR(arg=3, lineno=3)
          76	KW_NAMES(arg=1, lineno=3)
          78	PRECALL(arg=2, lineno=3)
          82	CALL(arg=2, lineno=3)
          92	STORE_FAST(arg=4, lineno=3)
          94	LOAD_CONST(arg=2, lineno=4)
          96	LOAD_FAST(arg=4, lineno=4)
          98	LOAD_CONST(arg=0, lineno=4)
         100	LOAD_CONST(arg=3, lineno=4)
         102	BUILD_SLICE(arg=2, lineno=4)
         104	STORE_SUBSCR(arg=None, lineno=4)
         108	LOAD_CONST(arg=2, lineno=5)
         110	LOAD_FAST(arg=4, lineno=5)
         112	LOAD_CONST(arg=2, lineno=5)
         114	LOAD_CONST(arg=0, lineno=5)
         116	BUILD_SLICE(arg=2, lineno=5)
         118	STORE_SUBSCR(arg=None, lineno=5)
         122	LOAD_GLOBAL(arg=9, lineno=6)
         134	LOAD_GLOBAL(arg=11, lineno=6)
         146	LOAD_CONST(arg=2, lineno=6)
         148	LOAD_CONST(arg=4, lineno=6)
         150	PRECALL(arg=2, lineno=6)
         154	CALL(arg=2, lineno=6)
         164	UNARY_NEGATIVE(arg=None, lineno=6)
         166	LOAD_FAST(arg=3, lineno=6)
         168	LOAD_CONST(arg=2, lineno=6)
         170	BINARY_SUBSCR(arg=None, lineno=6)
         180	LOAD_GLOBAL(arg=13, lineno=6)
         192	LOAD_CONST(arg=2, lineno=6)
         194	LOAD_CONST(arg=2, lineno=6)
         196	PRECALL(arg=2, lineno=6)
         200	CALL(arg=2, lineno=6)
         210	BINARY_OP(arg=10, lineno=6)
         214	PRECALL(arg=2, lineno=6)
         218	CALL(arg=2, lineno=6)
         228	GET_ITER(arg=None, lineno=6)
>        230	FOR_ITER(arg=4, lineno=6)
         232	STORE_FAST(arg=5, lineno=6)
         234	LOAD_CONST(arg=2, lineno=7)
         236	STORE_FAST(arg=6, lineno=7)
         238	JUMP_BACKWARD(arg=5, lineno=7)
>        240	LOAD_FAST(arg=4, lineno=8)
         242	RETURN_VALUE(arg=None, lineno=8)
2023-08-13 11:42:38,285 pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-13 11:42:38,286 stack: []
2023-08-13 11:42:38,286 state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-13 11:42:38,286 dispatch pc=0, inst=NOP(arg=None, lineno=1)
2023-08-13 11:42:38,286 stack []
2023-08-13 11:42:38,286 dispatch pc=2, inst=RESUME(arg=0, lineno=1)
2023-08-13 11:42:38,286 stack []
2023-08-13 11:42:38,286 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2)
2023-08-13 11:42:38,286 stack []
2023-08-13 11:42:38,286 dispatch pc=6, inst=LOAD_ATTR(arg=0, lineno=2)
2023-08-13 11:42:38,287 stack ['$x4.0']
2023-08-13 11:42:38,287 dispatch pc=16, inst=STORE_FAST(arg=3, lineno=2)
2023-08-13 11:42:38,287 stack ['$6load_attr.1']
2023-08-13 11:42:38,287 dispatch pc=18, inst=LOAD_GLOBAL(arg=2, lineno=3)
2023-08-13 11:42:38,287 stack []
2023-08-13 11:42:38,287 dispatch pc=30, inst=LOAD_METHOD(arg=2, lineno=3)
2023-08-13 11:42:38,287 stack ['$18load_global.2']
2023-08-13 11:42:38,287 dispatch pc=52, inst=LOAD_FAST(arg=3, lineno=3)
2023-08-13 11:42:38,287 stack ['$null$30.3', '$30load_method.4']
2023-08-13 11:42:38,287 dispatch pc=54, inst=LOAD_GLOBAL(arg=2, lineno=3)
2023-08-13 11:42:38,287 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5']
2023-08-13 11:42:38,287 dispatch pc=66, inst=LOAD_ATTR(arg=3, lineno=3)
2023-08-13 11:42:38,287 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$54load_global.6']
2023-08-13 11:42:38,287 dispatch pc=76, inst=KW_NAMES(arg=1, lineno=3)
2023-08-13 11:42:38,287 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$66load_attr.7']
2023-08-13 11:42:38,287 dispatch pc=78, inst=PRECALL(arg=2, lineno=3)
2023-08-13 11:42:38,287 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$66load_attr.7']
2023-08-13 11:42:38,287 dispatch pc=82, inst=CALL(arg=2, lineno=3)
2023-08-13 11:42:38,287 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$66load_attr.7']
2023-08-13 11:42:38,288 dispatch pc=92, inst=STORE_FAST(arg=4, lineno=3)
2023-08-13 11:42:38,288 stack ['$82call.8']
2023-08-13 11:42:38,288 dispatch pc=94, inst=LOAD_CONST(arg=2, lineno=4)
2023-08-13 11:42:38,288 stack []
2023-08-13 11:42:38,288 dispatch pc=96, inst=LOAD_FAST(arg=4, lineno=4)
2023-08-13 11:42:38,288 stack ['$const94.9']
2023-08-13 11:42:38,288 dispatch pc=98, inst=LOAD_CONST(arg=0, lineno=4)
2023-08-13 11:42:38,288 stack ['$const94.9', '$out096.10']
2023-08-13 11:42:38,288 dispatch pc=100, inst=LOAD_CONST(arg=3, lineno=4)
2023-08-13 11:42:38,288 stack ['$const94.9', '$out096.10', '$const98.11']
2023-08-13 11:42:38,288 dispatch pc=102, inst=BUILD_SLICE(arg=2, lineno=4)
2023-08-13 11:42:38,288 stack ['$const94.9', '$out096.10', '$const98.11', '$const100.12']
2023-08-13 11:42:38,288 dispatch pc=104, inst=STORE_SUBSCR(arg=None, lineno=4)
2023-08-13 11:42:38,288 stack ['$const94.9', '$out096.10', '$102build_slice.14']
2023-08-13 11:42:38,288 dispatch pc=108, inst=LOAD_CONST(arg=2, lineno=5)
2023-08-13 11:42:38,288 stack []
2023-08-13 11:42:38,288 dispatch pc=110, inst=LOAD_FAST(arg=4, lineno=5)
2023-08-13 11:42:38,288 stack ['$const108.15']
2023-08-13 11:42:38,288 dispatch pc=112, inst=LOAD_CONST(arg=2, lineno=5)
2023-08-13 11:42:38,288 stack ['$const108.15', '$out0110.16']
2023-08-13 11:42:38,289 dispatch pc=114, inst=LOAD_CONST(arg=0, lineno=5)
2023-08-13 11:42:38,289 stack ['$const108.15', '$out0110.16', '$const112.17']
2023-08-13 11:42:38,289 dispatch pc=116, inst=BUILD_SLICE(arg=2, lineno=5)
2023-08-13 11:42:38,289 stack ['$const108.15', '$out0110.16', '$const112.17', '$const114.18']
2023-08-13 11:42:38,289 dispatch pc=118, inst=STORE_SUBSCR(arg=None, lineno=5)
2023-08-13 11:42:38,289 stack ['$const108.15', '$out0110.16', '$116build_slice.20']
2023-08-13 11:42:38,289 dispatch pc=122, inst=LOAD_GLOBAL(arg=9, lineno=6)
2023-08-13 11:42:38,289 stack []
2023-08-13 11:42:38,289 dispatch pc=134, inst=LOAD_GLOBAL(arg=11, lineno=6)
2023-08-13 11:42:38,289 stack ['$null$122.22', '$122load_global.21']
2023-08-13 11:42:38,289 dispatch pc=146, inst=LOAD_CONST(arg=2, lineno=6)
2023-08-13 11:42:38,289 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23']
2023-08-13 11:42:38,290 dispatch pc=148, inst=LOAD_CONST(arg=4, lineno=6)
2023-08-13 11:42:38,290 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23', '$const146.25']
2023-08-13 11:42:38,290 dispatch pc=150, inst=PRECALL(arg=2, lineno=6)
2023-08-13 11:42:38,290 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23', '$const146.25', '$const148.26']
2023-08-13 11:42:38,290 dispatch pc=154, inst=CALL(arg=2, lineno=6)
2023-08-13 11:42:38,290 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23', '$const146.25', '$const148.26']
2023-08-13 11:42:38,290 dispatch pc=164, inst=UNARY_NEGATIVE(arg=None, lineno=6)
2023-08-13 11:42:38,291 stack ['$null$122.22', '$122load_global.21', '$154call.27']
2023-08-13 11:42:38,291 dispatch pc=166, inst=LOAD_FAST(arg=3, lineno=6)
2023-08-13 11:42:38,291 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28']
2023-08-13 11:42:38,291 dispatch pc=168, inst=LOAD_CONST(arg=2, lineno=6)
2023-08-13 11:42:38,291 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$full_shape0166.29']
2023-08-13 11:42:38,291 dispatch pc=170, inst=BINARY_SUBSCR(arg=None, lineno=6)
2023-08-13 11:42:38,291 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$full_shape0166.29', '$const168.30']
2023-08-13 11:42:38,291 dispatch pc=180, inst=LOAD_GLOBAL(arg=13, lineno=6)
2023-08-13 11:42:38,291 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31']
2023-08-13 11:42:38,291 dispatch pc=192, inst=LOAD_CONST(arg=2, lineno=6)
2023-08-13 11:42:38,291 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32']
2023-08-13 11:42:38,291 dispatch pc=194, inst=LOAD_CONST(arg=2, lineno=6)
2023-08-13 11:42:38,291 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32', '$const192.34']
2023-08-13 11:42:38,291 dispatch pc=196, inst=PRECALL(arg=2, lineno=6)
2023-08-13 11:42:38,291 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32', '$const192.34', '$const194.35']
2023-08-13 11:42:38,291 dispatch pc=200, inst=CALL(arg=2, lineno=6)
2023-08-13 11:42:38,291 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32', '$const192.34', '$const194.35']
2023-08-13 11:42:38,291 dispatch pc=210, inst=BINARY_OP(arg=10, lineno=6)
2023-08-13 11:42:38,292 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$200call.36']
2023-08-13 11:42:38,292 dispatch pc=214, inst=PRECALL(arg=2, lineno=6)
2023-08-13 11:42:38,292 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$binop_sub210.37']
2023-08-13 11:42:38,292 dispatch pc=218, inst=CALL(arg=2, lineno=6)
2023-08-13 11:42:38,292 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$binop_sub210.37']
2023-08-13 11:42:38,292 dispatch pc=228, inst=GET_ITER(arg=None, lineno=6)
2023-08-13 11:42:38,292 stack ['$218call.38']
2023-08-13 11:42:38,292 end state. edges=[Edge(pc=230, stack=('$228get_iter.39',), blockstack=(), npush=0)]
2023-08-13 11:42:38,292 pending: deque([State(pc_initial=230 nstack_initial=1)])
2023-08-13 11:42:38,292 stack: ['$phi230.0']
2023-08-13 11:42:38,292 state.pc_initial: State(pc_initial=230 nstack_initial=1)
2023-08-13 11:42:38,292 dispatch pc=230, inst=FOR_ITER(arg=4, lineno=6)
2023-08-13 11:42:38,292 stack ['$phi230.0']
2023-08-13 11:42:38,292 end state. edges=[Edge(pc=240, stack=(), blockstack=(), npush=0), Edge(pc=232, stack=('$phi230.0', '$230for_iter.2'), blockstack=(), npush=0)]
2023-08-13 11:42:38,292 pending: deque([State(pc_initial=240 nstack_initial=0), State(pc_initial=232 nstack_initial=2)])
2023-08-13 11:42:38,292 stack: []
2023-08-13 11:42:38,292 state.pc_initial: State(pc_initial=240 nstack_initial=0)
2023-08-13 11:42:38,292 dispatch pc=240, inst=LOAD_FAST(arg=4, lineno=8)
2023-08-13 11:42:38,293 stack []
2023-08-13 11:42:38,293 dispatch pc=242, inst=RETURN_VALUE(arg=None, lineno=8)
2023-08-13 11:42:38,293 stack ['$out0240.0']
2023-08-13 11:42:38,293 end state. edges=[]
2023-08-13 11:42:38,293 pending: deque([State(pc_initial=232 nstack_initial=2)])
2023-08-13 11:42:38,293 stack: ['$phi232.0', '$phi232.1']
2023-08-13 11:42:38,293 state.pc_initial: State(pc_initial=232 nstack_initial=2)
2023-08-13 11:42:38,293 dispatch pc=232, inst=STORE_FAST(arg=5, lineno=6)
2023-08-13 11:42:38,293 stack ['$phi232.0', '$phi232.1']
2023-08-13 11:42:38,293 dispatch pc=234, inst=LOAD_CONST(arg=2, lineno=7)
2023-08-13 11:42:38,293 stack ['$phi232.0']
2023-08-13 11:42:38,293 dispatch pc=236, inst=STORE_FAST(arg=6, lineno=7)
2023-08-13 11:42:38,293 stack ['$phi232.0', '$const234.2']
2023-08-13 11:42:38,293 dispatch pc=238, inst=JUMP_BACKWARD(arg=5, lineno=7)
2023-08-13 11:42:38,293 stack ['$phi232.0']
2023-08-13 11:42:38,293 end state. edges=[Edge(pc=230, stack=('$phi232.0',), blockstack=(), npush=0)]
2023-08-13 11:42:38,293 pending: deque([State(pc_initial=230 nstack_initial=1)])
2023-08-13 11:42:38,293 -------------------------Prune PHIs-------------------------
2023-08-13 11:42:38,293 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=230 nstack_initial=1): {'$phi230.0'},
             State(pc_initial=232 nstack_initial=2): {'$phi232.1'},
             State(pc_initial=240 nstack_initial=0): set()})
2023-08-13 11:42:38,295 defmap: {'$phi230.0': State(pc_initial=0 nstack_initial=0),
 '$phi232.1': State(pc_initial=230 nstack_initial=1)}
2023-08-13 11:42:38,295 phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi232.0',
                            State(pc_initial=232 nstack_initial=2))},
             '$phi232.0': {('$phi230.0',
                            State(pc_initial=230 nstack_initial=1))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:38,296 changing phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi230.0',
                            State(pc_initial=230 nstack_initial=1))},
             '$phi232.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:38,296 changing phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:38,296 changing phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:38,296 keep phismap: {'$phi230.0': {('$228get_iter.39', State(pc_initial=0 nstack_initial=0))},
 '$phi232.1': {('$230for_iter.2', State(pc_initial=230 nstack_initial=1))}}
2023-08-13 11:42:38,297 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi230.0': '$228get_iter.39'},
             State(pc_initial=230 nstack_initial=1): {'$phi232.1': '$230for_iter.2'}})
2023-08-13 11:42:38,297 ----------------------DONE Prune PHIs-----------------------
2023-08-13 11:42:38,297 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$x4.0'}), (6, {'item': '$x4.0', 'res': '$6load_attr.1'}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'value': '$6load_attr.1'}), (18, {'idx': 1, 'res': '$18load_global.2'}), (20, {}), (22, {}), (24, {}), (26, {}), (28, {}), (30, {'item': '$18load_global.2', 'res': '$30load_method.4'}), (32, {}), (34, {}), (36, {}), (38, {}), (40, {}), (42, {}), (44, {}), (46, {}), (48, {}), (50, {}), (52, {'res': '$full_shape052.5'}), (54, {'idx': 1, 'res': '$54load_global.6'}), (56, {}), (58, {}), (60, {}), (62, {}), (64, {}), (66, {'item': '$54load_global.6', 'res': '$66load_attr.7'}), (68, {}), (70, {}), (72, {}), (74, {}), (78, {}), (80, {}), (82, {'func': '$30load_method.4', 'args': ['$full_shape052.5', '$66load_attr.7'], 'kw_names': 1, 'res': '$82call.8'}), (84, {}), (86, {}), (88, {}), (90, {}), (92, {'value': '$82call.8'}), (94, {'res': '$const94.9'}), (96, {'res': '$out096.10'}), (98, {'res': '$const98.11'}), (100, {'res': '$const100.12'}), (102, {'start': '$const98.11', 'stop': '$const100.12', 'step': None, 'res': '$102build_slice.14', 'slicevar': '$102build_slice.13'}), (104, {'target': '$out096.10', 'index': '$102build_slice.14', 'value': '$const94.9'}), (106, {}), (108, {'res': '$const108.15'}), (110, {'res': '$out0110.16'}), (112, {'res': '$const112.17'}), (114, {'res': '$const114.18'}), (116, {'start': '$const112.17', 'stop': '$const114.18', 'step': None, 'res': '$116build_slice.20', 'slicevar': '$116build_slice.19'}), (118, {'target': '$out0110.16', 'index': '$116build_slice.20', 'value': '$const108.15'}), (120, {}), (122, {'idx': 4, 'res': '$122load_global.21'}), (124, {}), (126, {}), (128, {}), (130, {}), (132, {}), (134, {'idx': 5, 'res': '$134load_global.23'}), (136, {}), (138, {}), (140, {}), (142, {}), (144, {}), (146, {'res': '$const146.25'}), (148, {'res': '$const148.26'}), (150, {}), (152, {}), (154, {'func': '$134load_global.23', 'args': ['$const146.25', '$const148.26'], 'kw_names': None, 'res': '$154call.27'}), (156, {}), (158, {}), (160, {}), (162, {}), (164, {'value': '$154call.27', 'res': '$164unary_negative.28'}), (166, {'res': '$full_shape0166.29'}), (168, {'res': '$const168.30'}), (170, {'index': '$const168.30', 'target': '$full_shape0166.29', 'res': '$170binary_subscr.31'}), (172, {}), (174, {}), (176, {}), (178, {}), (180, {'idx': 6, 'res': '$180load_global.32'}), (182, {}), (184, {}), (186, {}), (188, {}), (190, {}), (192, {'res': '$const192.34'}), (194, {'res': '$const194.35'}), (196, {}), (198, {}), (200, {'func': '$180load_global.32', 'args': ['$const192.34', '$const194.35'], 'kw_names': None, 'res': '$200call.36'}), (202, {}), (204, {}), (206, {}), (208, {}), (210, {'op': '-', 'lhs': '$170binary_subscr.31', 'rhs': '$200call.36', 'res': '$binop_sub210.37'}), (212, {}), (214, {}), (216, {}), (218, {'func': '$122load_global.21', 'args': ['$164unary_negative.28', '$binop_sub210.37'], 'kw_names': None, 'res': '$218call.38'}), (220, {}), (222, {}), (224, {}), (226, {}), (228, {'value': '$218call.38', 'res': '$228get_iter.39'})), outgoing_phis={'$phi230.0': '$228get_iter.39'}, blockstack=(), active_try_block=None, outgoing_edgepushed={230: ('$228get_iter.39',)})
2023-08-13 11:42:38,298 block_infos State(pc_initial=230 nstack_initial=1):
AdaptBlockInfo(insts=((230, {'iterator': '$phi230.0', 'pair': '$230for_iter.1', 'indval': '$230for_iter.2', 'pred': '$230for_iter.3'}),), outgoing_phis={'$phi232.1': '$230for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={240: (), 232: ('$phi230.0', '$230for_iter.2')})
2023-08-13 11:42:38,298 block_infos State(pc_initial=232 nstack_initial=2):
AdaptBlockInfo(insts=((232, {'value': '$phi232.1'}), (234, {'res': '$const234.2'}), (236, {'value': '$const234.2'}), (238, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={230: ('$phi232.0',)})
2023-08-13 11:42:38,298 block_infos State(pc_initial=240 nstack_initial=0):
AdaptBlockInfo(insts=((240, {'res': '$out0240.0'}), (242, {'retval': '$out0240.0', 'castval': '$242return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:38,300 label 0:
    x = arg(0, name=x)                       ['x']
    threshold = arg(1, name=threshold)       ['threshold']
    zero_pos = arg(2, name=zero_pos)         ['zero_pos']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $18load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>) ['$18load_global.2']
    $30load_method.4 = getattr(value=$18load_global.2, attr=empty) ['$18load_global.2', '$30load_method.4']
    $54load_global.6 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>) ['$54load_global.6']
    $66load_attr.7 = getattr(value=$54load_global.6, attr=bool_) ['$54load_global.6', '$66load_attr.7']
    out0 = call $30load_method.4(full_shape0, func=$30load_method.4, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($66load_attr.7, <string>:3))], vararg=None, varkwarg=None, target=None) ['$30load_method.4', '$66load_attr.7', 'full_shape0', 'out0']
    $const94.9 = const(int, 0)               ['$const94.9']
    $const98.11 = const(NoneType, None)      ['$const98.11']
    $const100.12 = const(int, 1)             ['$const100.12']
    $102build_slice.13 = global(slice: <class 'slice'>) ['$102build_slice.13']
    $102build_slice.14 = call $102build_slice.13($const98.11, $const100.12, func=$102build_slice.13, args=(Var($const98.11, <string>:4), Var($const100.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$102build_slice.13', '$102build_slice.14', '$const100.12', '$const98.11']
    out0[$102build_slice.14] = $const94.9    ['$102build_slice.14', '$const94.9', 'out0']
    $const108.15 = const(int, 0)             ['$const108.15']
    $const112.17 = const(int, 0)             ['$const112.17']
    $const114.18 = const(NoneType, None)     ['$const114.18']
    $116build_slice.19 = global(slice: <class 'slice'>) ['$116build_slice.19']
    $116build_slice.20 = call $116build_slice.19($const112.17, $const114.18, func=$116build_slice.19, args=(Var($const112.17, <string>:5), Var($const114.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$116build_slice.19', '$116build_slice.20', '$const112.17', '$const114.18']
    out0[$116build_slice.20] = $const108.15  ['$116build_slice.20', '$const108.15', 'out0']
    $122load_global.21 = global(range: <class 'range'>) ['$122load_global.21']
    $134load_global.23 = global(min: <built-in function min>) ['$134load_global.23']
    $const146.25 = const(int, 0)             ['$const146.25']
    $const148.26 = const(int, -1)            ['$const148.26']
    $154call.27 = call $134load_global.23($const146.25, $const148.26, func=$134load_global.23, args=[Var($const146.25, <string>:6), Var($const148.26, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$134load_global.23', '$154call.27', '$const146.25', '$const148.26']
    $164unary_negative.28 = unary(fn=<built-in function neg>, value=$154call.27) ['$154call.27', '$164unary_negative.28']
    $const168.30 = const(int, 0)             ['$const168.30']
    $170binary_subscr.31 = getitem(value=full_shape0, index=$const168.30, fn=<built-in function getitem>) ['$170binary_subscr.31', '$const168.30', 'full_shape0']
    $180load_global.32 = global(max: <built-in function max>) ['$180load_global.32']
    $const192.34 = const(int, 0)             ['$const192.34']
    $const194.35 = const(int, 0)             ['$const194.35']
    $200call.36 = call $180load_global.32($const192.34, $const194.35, func=$180load_global.32, args=[Var($const192.34, <string>:6), Var($const194.35, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$180load_global.32', '$200call.36', '$const192.34', '$const194.35']
    $binop_sub210.37 = $170binary_subscr.31 - $200call.36 ['$170binary_subscr.31', '$200call.36', '$binop_sub210.37']
    $218call.38 = call $122load_global.21($164unary_negative.28, $binop_sub210.37, func=$122load_global.21, args=[Var($164unary_negative.28, <string>:6), Var($binop_sub210.37, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$122load_global.21', '$164unary_negative.28', '$218call.38', '$binop_sub210.37']
    $228get_iter.39 = getiter(value=$218call.38) ['$218call.38', '$228get_iter.39']
    $phi230.0 = $228get_iter.39              ['$228get_iter.39', '$phi230.0']
    jump 230                                 []
label 230:
    $230for_iter.1 = iternext(value=$phi230.0) ['$230for_iter.1', '$phi230.0']
    $230for_iter.2 = pair_first(value=$230for_iter.1) ['$230for_iter.1', '$230for_iter.2']
    $230for_iter.3 = pair_second(value=$230for_iter.1) ['$230for_iter.1', '$230for_iter.3']
    $phi232.1 = $230for_iter.2               ['$230for_iter.2', '$phi232.1']
    branch $230for_iter.3, 232, 240          ['$230for_iter.3']
label 232:
    index00 = $phi232.1                      ['$phi232.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 230                                 []
label 240:
    $242return_value.1 = cast(value=out0)    ['$242return_value.1', 'out0']
    return $242return_value.1                ['$242return_value.1']

2023-08-13 11:42:38,335 ==== SSA block analysis pass on 0
2023-08-13 11:42:38,335 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696002290>
2023-08-13 11:42:38,335 on stmt: x = arg(0, name=x)
2023-08-13 11:42:38,335 on stmt: threshold = arg(1, name=threshold)
2023-08-13 11:42:38,335 on stmt: zero_pos = arg(2, name=zero_pos)
2023-08-13 11:42:38,335 on stmt: full_shape0 = getattr(value=x, attr=shape)
2023-08-13 11:42:38,336 on stmt: $18load_global.2.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:38,336 on stmt: $30load_method.4.1 = getattr(value=$18load_global.2.1, attr=empty)
2023-08-13 11:42:38,336 on stmt: $54load_global.6.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:38,336 on stmt: $66load_attr.7.1 = getattr(value=$54load_global.6.1, attr=bool_)
2023-08-13 11:42:38,336 on stmt: out0 = call $30load_method.4.1(full_shape0, func=$30load_method.4.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($66load_attr.7.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,337 on stmt: $const94.9.1 = const(int, 0)
2023-08-13 11:42:38,337 on stmt: $const98.11.1 = const(NoneType, None)
2023-08-13 11:42:38,337 on stmt: $const100.12.1 = const(int, 1)
2023-08-13 11:42:38,337 on stmt: $102build_slice.13.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:38,337 on stmt: $102build_slice.14.1 = call $102build_slice.13.1($const98.11.1, $const100.12.1, func=$102build_slice.13.1, args=(Var($const98.11.1, <string>:4), Var($const100.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,337 on stmt: out0[$102build_slice.14.1] = $const94.9.1
2023-08-13 11:42:38,337 on stmt: $const108.15.1 = const(int, 0)
2023-08-13 11:42:38,337 on stmt: $const112.17.1 = const(int, 0)
2023-08-13 11:42:38,337 on stmt: $const114.18.1 = const(NoneType, None)
2023-08-13 11:42:38,337 on stmt: $116build_slice.19.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:38,337 on stmt: $116build_slice.20.1 = call $116build_slice.19.1($const112.17.1, $const114.18.1, func=$116build_slice.19.1, args=(Var($const112.17.1, <string>:5), Var($const114.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,337 on stmt: out0[$116build_slice.20.1] = $const108.15.1
2023-08-13 11:42:38,337 on stmt: $122load_global.21.1 = global(range: <class 'range'>)
2023-08-13 11:42:38,338 on stmt: $134load_global.23.1 = global(min: <built-in function min>)
2023-08-13 11:42:38,338 on stmt: $const146.25.1 = const(int, 0)
2023-08-13 11:42:38,338 on stmt: $const148.26.1 = const(int, -1)
2023-08-13 11:42:38,338 on stmt: $154call.27.1 = call $134load_global.23.1($const146.25.1, $const148.26.1, func=$134load_global.23.1, args=[Var($const146.25.1, <string>:6), Var($const148.26.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,338 on stmt: $164unary_negative.28.1 = unary(fn=<built-in function neg>, value=$154call.27.1)
2023-08-13 11:42:38,338 on stmt: $const168.30.1 = const(int, 0)
2023-08-13 11:42:38,338 on stmt: $170binary_subscr.31.1 = getitem(value=full_shape0, index=$const168.30.1, fn=<built-in function getitem>)
2023-08-13 11:42:38,338 on stmt: $180load_global.32.1 = global(max: <built-in function max>)
2023-08-13 11:42:38,338 on stmt: $const192.34.1 = const(int, 0)
2023-08-13 11:42:38,338 on stmt: $const194.35.1 = const(int, 0)
2023-08-13 11:42:38,338 on stmt: $200call.36.1 = call $180load_global.32.1($const192.34.1, $const194.35.1, func=$180load_global.32.1, args=[Var($const192.34.1, <string>:6), Var($const194.35.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,338 on stmt: $binop_sub210.37.1 = $170binary_subscr.31.1 - $200call.36.1
2023-08-13 11:42:38,338 on stmt: $218call.38.1 = call $122load_global.21.1($164unary_negative.28.1, $binop_sub210.37.1, func=$122load_global.21.1, args=[Var($164unary_negative.28.1, <string>:6), Var($binop_sub210.37.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,338 on stmt: $228get_iter.39.1 = getiter(value=$218call.38.1)
2023-08-13 11:42:38,338 on stmt: $phi230.0.1 = $228get_iter.39.1
2023-08-13 11:42:38,338 on stmt: jump 230
2023-08-13 11:42:38,338 ==== SSA block analysis pass on 230
2023-08-13 11:42:38,338 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696002290>
2023-08-13 11:42:38,338 on stmt: $230for_iter.1.1 = iternext(value=$phi230.0.1)
2023-08-13 11:42:38,338 on stmt: $230for_iter.2.1 = pair_first(value=$230for_iter.1.1)
2023-08-13 11:42:38,339 on stmt: $230for_iter.3.1 = pair_second(value=$230for_iter.1.1)
2023-08-13 11:42:38,339 on stmt: $phi232.1.1 = $230for_iter.2.1
2023-08-13 11:42:38,339 on stmt: branch $230for_iter.3.1, 232, 442
2023-08-13 11:42:38,339 ==== SSA block analysis pass on 232
2023-08-13 11:42:38,339 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696002290>
2023-08-13 11:42:38,339 on stmt: index00 = $phi232.1.1
2023-08-13 11:42:38,339 on stmt: jump 240
2023-08-13 11:42:38,339 ==== SSA block analysis pass on 442
2023-08-13 11:42:38,339 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696002290>
2023-08-13 11:42:38,339 on stmt: $242return_value.1.1 = cast(value=out0)
2023-08-13 11:42:38,339 on stmt: return $242return_value.1.1
2023-08-13 11:42:38,339 ==== SSA block analysis pass on 240
2023-08-13 11:42:38,339 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696002290>
2023-08-13 11:42:38,339 on stmt: $const6.1 = const(int, 0)
2023-08-13 11:42:38,339 on stmt: stencil_index = $const6.1 + index00
2023-08-13 11:42:38,339 on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:38,339 on stmt: $22unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2023-08-13 11:42:38,339 on stmt: $30compare_op.6 = $22unary_negative.4 <= x0
2023-08-13 11:42:38,339 on stmt: bool36 = global(bool: <class 'bool'>)
2023-08-13 11:42:38,339 on stmt: $36pred = call bool36($30compare_op.6, func=bool36, args=(Var($30compare_op.6, audio.py:1148),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,339 on stmt: $phi38.0 = x0
2023-08-13 11:42:38,340 on stmt: branch $36pred, 241, 291
2023-08-13 11:42:38,340 ==== SSA block analysis pass on 241
2023-08-13 11:42:38,340 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696002290>
2023-08-13 11:42:38,340 on stmt: $40compare_op.2 = x0 <= threshold
2023-08-13 11:42:38,340 on stmt: bool46 = global(bool: <class 'bool'>)
2023-08-13 11:42:38,340 on stmt: $46pred = call bool46($40compare_op.2, func=bool46, args=(Var($40compare_op.2, audio.py:1148),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,340 on stmt: branch $46pred, 279, 295
2023-08-13 11:42:38,340 ==== SSA block analysis pass on 279
2023-08-13 11:42:38,340 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696002290>
2023-08-13 11:42:38,340 on stmt: jump 289
2023-08-13 11:42:38,340 ==== SSA block analysis pass on 291
2023-08-13 11:42:38,340 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696002290>
2023-08-13 11:42:38,340 on stmt: jump 295
2023-08-13 11:42:38,340 ==== SSA block analysis pass on 289
2023-08-13 11:42:38,340 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696002290>
2023-08-13 11:42:38,340 on stmt: x0 = const(int, 0)
2023-08-13 11:42:38,340 on stmt: jump 295
2023-08-13 11:42:38,340 ==== SSA block analysis pass on 295
2023-08-13 11:42:38,340 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696002290>
2023-08-13 11:42:38,340 on stmt: $const60.1 = const(int, -1)
2023-08-13 11:42:38,340 on stmt: stencil_index = $const60.1 + index00
2023-08-13 11:42:38,340 on stmt: x1 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:38,340 on stmt: $76unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2023-08-13 11:42:38,341 on stmt: $84compare_op.6 = $76unary_negative.4 <= x1
2023-08-13 11:42:38,341 on stmt: bool90 = global(bool: <class 'bool'>)
2023-08-13 11:42:38,341 on stmt: $90pred = call bool90($84compare_op.6, func=bool90, args=(Var($84compare_op.6, audio.py:1152),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,341 on stmt: $phi92.0 = x1
2023-08-13 11:42:38,341 on stmt: branch $90pred, 299, 345
2023-08-13 11:42:38,341 ==== SSA block analysis pass on 299
2023-08-13 11:42:38,341 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696002290>
2023-08-13 11:42:38,341 on stmt: $94compare_op.2 = x1 <= threshold
2023-08-13 11:42:38,341 on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-13 11:42:38,341 on stmt: $100pred = call bool100($94compare_op.2, func=bool100, args=(Var($94compare_op.2, audio.py:1152),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,341 on stmt: branch $100pred, 333, 349
2023-08-13 11:42:38,341 ==== SSA block analysis pass on 333
2023-08-13 11:42:38,341 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696002290>
2023-08-13 11:42:38,341 on stmt: jump 343
2023-08-13 11:42:38,341 ==== SSA block analysis pass on 345
2023-08-13 11:42:38,341 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696002290>
2023-08-13 11:42:38,341 on stmt: jump 349
2023-08-13 11:42:38,341 ==== SSA block analysis pass on 343
2023-08-13 11:42:38,341 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696002290>
2023-08-13 11:42:38,341 on stmt: x1 = const(int, 0)
2023-08-13 11:42:38,341 on stmt: jump 349
2023-08-13 11:42:38,342 ==== SSA block analysis pass on 349
2023-08-13 11:42:38,342 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696002290>
2023-08-13 11:42:38,342 on stmt: bool114 = global(bool: <class 'bool'>)
2023-08-13 11:42:38,342 on stmt: $114pred = call bool114(zero_pos, func=bool114, args=(Var(zero_pos, audio.py:1144),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,342 on stmt: branch $114pred, 353, 357
2023-08-13 11:42:38,342 ==== SSA block analysis pass on 353
2023-08-13 11:42:38,342 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696002290>
2023-08-13 11:42:38,342 on stmt: $116load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:38,342 on stmt: $128load_attr.2 = getattr(value=$116load_global.0, attr=signbit)
2023-08-13 11:42:38,342 on stmt: $144call.4 = call $128load_attr.2(x0, func=$128load_attr.2, args=[Var(x0, audio.py:1147)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,342 on stmt: $154load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:38,342 on stmt: $166load_attr.7 = getattr(value=$154load_global.5, attr=signbit)
2023-08-13 11:42:38,342 on stmt: $182call.9 = call $166load_attr.7(x1, func=$166load_attr.7, args=[Var(x1, audio.py:1151)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,342 on stmt: $192compare_op.10 = $144call.4 != $182call.9
2023-08-13 11:42:38,342 on stmt: $198return_value.11 = cast(value=$192compare_op.10)
2023-08-13 11:42:38,342 on stmt: out0[index00] = $198return_value.11
2023-08-13 11:42:38,342 on stmt: jump 441
2023-08-13 11:42:38,342 ==== SSA block analysis pass on 357
2023-08-13 11:42:38,342 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696002290>
2023-08-13 11:42:38,342 on stmt: $200load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:38,342 on stmt: $212load_attr.2 = getattr(value=$200load_global.0, attr=sign)
2023-08-13 11:42:38,343 on stmt: $228call.4 = call $212load_attr.2(x0, func=$212load_attr.2, args=[Var(x0, audio.py:1147)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,343 on stmt: $238load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:38,343 on stmt: $250load_attr.7 = getattr(value=$238load_global.5, attr=sign)
2023-08-13 11:42:38,343 on stmt: $266call.9 = call $250load_attr.7(x1, func=$250load_attr.7, args=[Var(x1, audio.py:1151)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,343 on stmt: $276compare_op.10 = $228call.4 != $266call.9
2023-08-13 11:42:38,343 on stmt: $282return_value.11 = cast(value=$276compare_op.10)
2023-08-13 11:42:38,343 on stmt: out0[index00] = $282return_value.11
2023-08-13 11:42:38,343 on stmt: jump 441
2023-08-13 11:42:38,343 ==== SSA block analysis pass on 441
2023-08-13 11:42:38,343 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696002290>
2023-08-13 11:42:38,343 on stmt: jump 230
2023-08-13 11:42:38,344 defs defaultdict(<class 'list'>,
            {'$100pred': [<numba.core.ir.Assign object at 0x000001F69611CDD0>],
             '$102build_slice.13.1': [<numba.core.ir.Assign object at 0x000001F69620E5D0>],
             '$102build_slice.14.1': [<numba.core.ir.Assign object at 0x000001F69620E750>],
             '$114pred': [<numba.core.ir.Assign object at 0x000001F696156210>],
             '$116build_slice.19.1': [<numba.core.ir.Assign object at 0x000001F69620F090>],
             '$116build_slice.20.1': [<numba.core.ir.Assign object at 0x000001F69620F210>],
             '$116load_global.0': [<numba.core.ir.Assign object at 0x000001F69616CFD0>],
             '$122load_global.21.1': [<numba.core.ir.Assign object at 0x000001F69620F4D0>],
             '$128load_attr.2': [<numba.core.ir.Assign object at 0x000001F696174990>],
             '$134load_global.23.1': [<numba.core.ir.Assign object at 0x000001F69620F750>],
             '$144call.4': [<numba.core.ir.Assign object at 0x000001F69617C550>],
             '$154call.27.1': [<numba.core.ir.Assign object at 0x000001F69620FE10>],
             '$154load_global.5': [<numba.core.ir.Assign object at 0x000001F69617FE50>],
             '$164unary_negative.28.1': [<numba.core.ir.Assign object at 0x000001F6962100D0>],
             '$166load_attr.7': [<numba.core.ir.Assign object at 0x000001F696187850>],
             '$170binary_subscr.31.1': [<numba.core.ir.Assign object at 0x000001F696210610>],
             '$180load_global.32.1': [<numba.core.ir.Assign object at 0x000001F6962108D0>],
             '$182call.9': [<numba.core.ir.Assign object at 0x000001F696197FD0>],
             '$18load_global.2.1': [<numba.core.ir.Assign object at 0x000001F69620CC50>],
             '$192compare_op.10': [<numba.core.ir.Assign object at 0x000001F696196C50>],
             '$198return_value.11': [<numba.core.ir.Assign object at 0x000001F69619E690>],
             '$200call.36.1': [<numba.core.ir.Assign object at 0x000001F696210F50>],
             '$200load_global.0': [<numba.core.ir.Assign object at 0x000001F6961B5490>],
             '$212load_attr.2': [<numba.core.ir.Assign object at 0x000001F6961BCE10>],
             '$218call.38.1': [<numba.core.ir.Assign object at 0x000001F6962114D0>],
             '$228call.4': [<numba.core.ir.Assign object at 0x000001F6961C4950>],
             '$228get_iter.39.1': [<numba.core.ir.Assign object at 0x000001F696211790>],
             '$22unary_negative.4': [<numba.core.ir.Assign object at 0x000001F69451CF50>],
             '$230for_iter.1.1': [<numba.core.ir.Assign object at 0x000001F696211910>],
             '$230for_iter.2.1': [<numba.core.ir.Assign object at 0x000001F696211A90>],
             '$230for_iter.3.1': [<numba.core.ir.Assign object at 0x000001F696211C10>],
             '$238load_global.5': [<numba.core.ir.Assign object at 0x000001F6961CC290>],
             '$242return_value.1.1': [<numba.core.ir.Assign object at 0x000001F696212710>],
             '$250load_attr.7': [<numba.core.ir.Assign object at 0x000001F6961CFC50>],
             '$266call.9': [<numba.core.ir.Assign object at 0x000001F6961DFF50>],
             '$276compare_op.10': [<numba.core.ir.Assign object at 0x000001F6961DF050>],
             '$282return_value.11': [<numba.core.ir.Assign object at 0x000001F6961E6A90>],
             '$30compare_op.6': [<numba.core.ir.Assign object at 0x000001F695FA7290>],
             '$30load_method.4.1': [<numba.core.ir.Assign object at 0x000001F69620CF10>],
             '$36pred': [<numba.core.ir.Assign object at 0x000001F6951FA710>],
             '$40compare_op.2': [<numba.core.ir.Assign object at 0x000001F69607C450>],
             '$46pred': [<numba.core.ir.Assign object at 0x000001F69608B7D0>],
             '$54load_global.6.1': [<numba.core.ir.Assign object at 0x000001F69620D410>],
             '$66load_attr.7.1': [<numba.core.ir.Assign object at 0x000001F69620D710>],
             '$76unary_negative.4': [<numba.core.ir.Assign object at 0x000001F6960D8590>],
             '$84compare_op.6': [<numba.core.ir.Assign object at 0x000001F6960DBE90>],
             '$90pred': [<numba.core.ir.Assign object at 0x000001F6960F3F50>],
             '$94compare_op.2': [<numba.core.ir.Assign object at 0x000001F69610DA10>],
             '$binop_sub210.37.1': [<numba.core.ir.Assign object at 0x000001F696211250>],
             '$const100.12.1': [<numba.core.ir.Assign object at 0x000001F69620E3D0>],
             '$const108.15.1': [<numba.core.ir.Assign object at 0x000001F69620E9D0>],
             '$const112.17.1': [<numba.core.ir.Assign object at 0x000001F69620ECD0>],
             '$const114.18.1': [<numba.core.ir.Assign object at 0x000001F69620EE90>],
             '$const146.25.1': [<numba.core.ir.Assign object at 0x000001F69620F990>],
             '$const148.26.1': [<numba.core.ir.Assign object at 0x000001F69620FB50>],
             '$const168.30.1': [<numba.core.ir.Assign object at 0x000001F696210410>],
             '$const192.34.1': [<numba.core.ir.Assign object at 0x000001F696210B10>],
             '$const194.35.1': [<numba.core.ir.Assign object at 0x000001F696210CD0>],
             '$const6.1': [<numba.core.ir.Assign object at 0x000001F695FA92D0>],
             '$const60.1': [<numba.core.ir.Assign object at 0x000001F6960C90D0>],
             '$const94.9.1': [<numba.core.ir.Assign object at 0x000001F69620DED0>],
             '$const98.11.1': [<numba.core.ir.Assign object at 0x000001F69620E210>],
             '$phi230.0.1': [<numba.core.ir.Assign object at 0x000001F69620CAD0>],
             '$phi232.1.1': [<numba.core.ir.Assign object at 0x000001F696211810>],
             '$phi38.0': [<numba.core.ir.Assign object at 0x000001F695F9F310>],
             '$phi92.0': [<numba.core.ir.Assign object at 0x000001F6960F2D50>],
             'bool100': [<numba.core.ir.Assign object at 0x000001F6961153D0>],
             'bool114': [<numba.core.ir.Assign object at 0x000001F69614E750>],
             'bool36': [<numba.core.ir.Assign object at 0x000001F6951E26D0>],
             'bool46': [<numba.core.ir.Assign object at 0x000001F69607FDD0>],
             'bool90': [<numba.core.ir.Assign object at 0x000001F6960E3890>],
             'full_shape0': [<numba.core.ir.Assign object at 0x000001F69620C810>],
             'index00': [<numba.core.ir.Assign object at 0x000001F696211F50>],
             'out0': [<numba.core.ir.Assign object at 0x000001F69620DB10>],
             'stencil_index': [<numba.core.ir.Assign object at 0x000001F695FE0C50>,
                               <numba.core.ir.Assign object at 0x000001F6961FF350>],
             'threshold': [<numba.core.ir.Assign object at 0x000001F695FCC7D0>],
             'x': [<numba.core.ir.Assign object at 0x000001F696001C10>],
             'x0': [<numba.core.ir.Assign object at 0x000001F6961FF2D0>,
                    <numba.core.ir.Assign object at 0x000001F6960B9A90>],
             'x1': [<numba.core.ir.Assign object at 0x000001F6961FF410>,
                    <numba.core.ir.Assign object at 0x000001F69613F110>],
             'zero_pos': [<numba.core.ir.Assign object at 0x000001F69620C350>]})
2023-08-13 11:42:38,344 SSA violators {'x1', 'stencil_index', 'x0'}
2023-08-13 11:42:38,344 Fix SSA violator on var x1
2023-08-13 11:42:38,344 ==== SSA block rewrite pass on 0
2023-08-13 11:42:38,344 Running <numba.core.ssa._FreshVarHandler object at 0x000001F695FE1990>
2023-08-13 11:42:38,344 on stmt: x = arg(0, name=x)
2023-08-13 11:42:38,344 on stmt: threshold = arg(1, name=threshold)
2023-08-13 11:42:38,344 on stmt: zero_pos = arg(2, name=zero_pos)
2023-08-13 11:42:38,345 on stmt: full_shape0 = getattr(value=x, attr=shape)
2023-08-13 11:42:38,345 on stmt: $18load_global.2.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:38,345 on stmt: $30load_method.4.1 = getattr(value=$18load_global.2.1, attr=empty)
2023-08-13 11:42:38,345 on stmt: $54load_global.6.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:38,345 on stmt: $66load_attr.7.1 = getattr(value=$54load_global.6.1, attr=bool_)
2023-08-13 11:42:38,345 on stmt: out0 = call $30load_method.4.1(full_shape0, func=$30load_method.4.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($66load_attr.7.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,345 on stmt: $const94.9.1 = const(int, 0)
2023-08-13 11:42:38,345 on stmt: $const98.11.1 = const(NoneType, None)
2023-08-13 11:42:38,345 on stmt: $const100.12.1 = const(int, 1)
2023-08-13 11:42:38,345 on stmt: $102build_slice.13.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:38,345 on stmt: $102build_slice.14.1 = call $102build_slice.13.1($const98.11.1, $const100.12.1, func=$102build_slice.13.1, args=(Var($const98.11.1, <string>:4), Var($const100.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,345 on stmt: out0[$102build_slice.14.1] = $const94.9.1
2023-08-13 11:42:38,345 on stmt: $const108.15.1 = const(int, 0)
2023-08-13 11:42:38,345 on stmt: $const112.17.1 = const(int, 0)
2023-08-13 11:42:38,345 on stmt: $const114.18.1 = const(NoneType, None)
2023-08-13 11:42:38,345 on stmt: $116build_slice.19.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:38,345 on stmt: $116build_slice.20.1 = call $116build_slice.19.1($const112.17.1, $const114.18.1, func=$116build_slice.19.1, args=(Var($const112.17.1, <string>:5), Var($const114.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,345 on stmt: out0[$116build_slice.20.1] = $const108.15.1
2023-08-13 11:42:38,345 on stmt: $122load_global.21.1 = global(range: <class 'range'>)
2023-08-13 11:42:38,345 on stmt: $134load_global.23.1 = global(min: <built-in function min>)
2023-08-13 11:42:38,346 on stmt: $const146.25.1 = const(int, 0)
2023-08-13 11:42:38,346 on stmt: $const148.26.1 = const(int, -1)
2023-08-13 11:42:38,346 on stmt: $154call.27.1 = call $134load_global.23.1($const146.25.1, $const148.26.1, func=$134load_global.23.1, args=[Var($const146.25.1, <string>:6), Var($const148.26.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,346 on stmt: $164unary_negative.28.1 = unary(fn=<built-in function neg>, value=$154call.27.1)
2023-08-13 11:42:38,346 on stmt: $const168.30.1 = const(int, 0)
2023-08-13 11:42:38,346 on stmt: $170binary_subscr.31.1 = getitem(value=full_shape0, index=$const168.30.1, fn=<built-in function getitem>)
2023-08-13 11:42:38,346 on stmt: $180load_global.32.1 = global(max: <built-in function max>)
2023-08-13 11:42:38,346 on stmt: $const192.34.1 = const(int, 0)
2023-08-13 11:42:38,346 on stmt: $const194.35.1 = const(int, 0)
2023-08-13 11:42:38,346 on stmt: $200call.36.1 = call $180load_global.32.1($const192.34.1, $const194.35.1, func=$180load_global.32.1, args=[Var($const192.34.1, <string>:6), Var($const194.35.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,346 on stmt: $binop_sub210.37.1 = $170binary_subscr.31.1 - $200call.36.1
2023-08-13 11:42:38,346 on stmt: $218call.38.1 = call $122load_global.21.1($164unary_negative.28.1, $binop_sub210.37.1, func=$122load_global.21.1, args=[Var($164unary_negative.28.1, <string>:6), Var($binop_sub210.37.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,346 on stmt: $228get_iter.39.1 = getiter(value=$218call.38.1)
2023-08-13 11:42:38,346 on stmt: $phi230.0.1 = $228get_iter.39.1
2023-08-13 11:42:38,346 on stmt: jump 230
2023-08-13 11:42:38,346 ==== SSA block rewrite pass on 230
2023-08-13 11:42:38,346 Running <numba.core.ssa._FreshVarHandler object at 0x000001F695FE1990>
2023-08-13 11:42:38,346 on stmt: $230for_iter.1.1 = iternext(value=$phi230.0.1)
2023-08-13 11:42:38,346 on stmt: $230for_iter.2.1 = pair_first(value=$230for_iter.1.1)
2023-08-13 11:42:38,346 on stmt: $230for_iter.3.1 = pair_second(value=$230for_iter.1.1)
2023-08-13 11:42:38,346 on stmt: $phi232.1.1 = $230for_iter.2.1
2023-08-13 11:42:38,347 on stmt: branch $230for_iter.3.1, 232, 442
2023-08-13 11:42:38,347 ==== SSA block rewrite pass on 232
2023-08-13 11:42:38,347 Running <numba.core.ssa._FreshVarHandler object at 0x000001F695FE1990>
2023-08-13 11:42:38,347 on stmt: index00 = $phi232.1.1
2023-08-13 11:42:38,347 on stmt: jump 240
2023-08-13 11:42:38,347 ==== SSA block rewrite pass on 442
2023-08-13 11:42:38,347 Running <numba.core.ssa._FreshVarHandler object at 0x000001F695FE1990>
2023-08-13 11:42:38,347 on stmt: $242return_value.1.1 = cast(value=out0)
2023-08-13 11:42:38,347 on stmt: return $242return_value.1.1
2023-08-13 11:42:38,347 ==== SSA block rewrite pass on 240
2023-08-13 11:42:38,347 Running <numba.core.ssa._FreshVarHandler object at 0x000001F695FE1990>
2023-08-13 11:42:38,347 on stmt: $const6.1 = const(int, 0)
2023-08-13 11:42:38,347 on stmt: stencil_index = $const6.1 + index00
2023-08-13 11:42:38,347 on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:38,347 on stmt: $22unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2023-08-13 11:42:38,347 on stmt: $30compare_op.6 = $22unary_negative.4 <= x0
2023-08-13 11:42:38,347 on stmt: bool36 = global(bool: <class 'bool'>)
2023-08-13 11:42:38,347 on stmt: $36pred = call bool36($30compare_op.6, func=bool36, args=(Var($30compare_op.6, audio.py:1148),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,347 on stmt: $phi38.0 = x0
2023-08-13 11:42:38,347 on stmt: branch $36pred, 241, 291
2023-08-13 11:42:38,347 ==== SSA block rewrite pass on 241
2023-08-13 11:42:38,348 Running <numba.core.ssa._FreshVarHandler object at 0x000001F695FE1990>
2023-08-13 11:42:38,348 on stmt: $40compare_op.2 = x0 <= threshold
2023-08-13 11:42:38,348 on stmt: bool46 = global(bool: <class 'bool'>)
2023-08-13 11:42:38,348 on stmt: $46pred = call bool46($40compare_op.2, func=bool46, args=(Var($40compare_op.2, audio.py:1148),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,348 on stmt: branch $46pred, 279, 295
2023-08-13 11:42:38,348 ==== SSA block rewrite pass on 279
2023-08-13 11:42:38,348 Running <numba.core.ssa._FreshVarHandler object at 0x000001F695FE1990>
2023-08-13 11:42:38,348 on stmt: jump 289
2023-08-13 11:42:38,348 ==== SSA block rewrite pass on 291
2023-08-13 11:42:38,348 Running <numba.core.ssa._FreshVarHandler object at 0x000001F695FE1990>
2023-08-13 11:42:38,348 on stmt: jump 295
2023-08-13 11:42:38,348 ==== SSA block rewrite pass on 289
2023-08-13 11:42:38,348 Running <numba.core.ssa._FreshVarHandler object at 0x000001F695FE1990>
2023-08-13 11:42:38,348 on stmt: x0 = const(int, 0)
2023-08-13 11:42:38,348 on stmt: jump 295
2023-08-13 11:42:38,348 ==== SSA block rewrite pass on 295
2023-08-13 11:42:38,349 Running <numba.core.ssa._FreshVarHandler object at 0x000001F695FE1990>
2023-08-13 11:42:38,349 on stmt: $const60.1 = const(int, -1)
2023-08-13 11:42:38,349 on stmt: stencil_index = $const60.1 + index00
2023-08-13 11:42:38,349 on stmt: x1 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:38,349 first assign: x1
2023-08-13 11:42:38,349 replaced with: x1 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:38,349 on stmt: $76unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2023-08-13 11:42:38,349 on stmt: $84compare_op.6 = $76unary_negative.4 <= x1
2023-08-13 11:42:38,349 on stmt: bool90 = global(bool: <class 'bool'>)
2023-08-13 11:42:38,349 on stmt: $90pred = call bool90($84compare_op.6, func=bool90, args=(Var($84compare_op.6, audio.py:1152),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,349 on stmt: $phi92.0 = x1
2023-08-13 11:42:38,350 on stmt: branch $90pred, 299, 345
2023-08-13 11:42:38,350 ==== SSA block rewrite pass on 299
2023-08-13 11:42:38,350 Running <numba.core.ssa._FreshVarHandler object at 0x000001F695FE1990>
2023-08-13 11:42:38,350 on stmt: $94compare_op.2 = x1 <= threshold
2023-08-13 11:42:38,350 on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-13 11:42:38,350 on stmt: $100pred = call bool100($94compare_op.2, func=bool100, args=(Var($94compare_op.2, audio.py:1152),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,350 on stmt: branch $100pred, 333, 349
2023-08-13 11:42:38,350 ==== SSA block rewrite pass on 333
2023-08-13 11:42:38,350 Running <numba.core.ssa._FreshVarHandler object at 0x000001F695FE1990>
2023-08-13 11:42:38,350 on stmt: jump 343
2023-08-13 11:42:38,350 ==== SSA block rewrite pass on 345
2023-08-13 11:42:38,350 Running <numba.core.ssa._FreshVarHandler object at 0x000001F695FE1990>
2023-08-13 11:42:38,350 on stmt: jump 349
2023-08-13 11:42:38,350 ==== SSA block rewrite pass on 343
2023-08-13 11:42:38,350 Running <numba.core.ssa._FreshVarHandler object at 0x000001F695FE1990>
2023-08-13 11:42:38,350 on stmt: x1 = const(int, 0)
2023-08-13 11:42:38,350 replaced with: x1.1 = const(int, 0)
2023-08-13 11:42:38,350 on stmt: jump 349
2023-08-13 11:42:38,350 ==== SSA block rewrite pass on 349
2023-08-13 11:42:38,350 Running <numba.core.ssa._FreshVarHandler object at 0x000001F695FE1990>
2023-08-13 11:42:38,350 on stmt: bool114 = global(bool: <class 'bool'>)
2023-08-13 11:42:38,350 on stmt: $114pred = call bool114(zero_pos, func=bool114, args=(Var(zero_pos, audio.py:1144),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,351 on stmt: branch $114pred, 353, 357
2023-08-13 11:42:38,351 ==== SSA block rewrite pass on 353
2023-08-13 11:42:38,351 Running <numba.core.ssa._FreshVarHandler object at 0x000001F695FE1990>
2023-08-13 11:42:38,351 on stmt: $116load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:38,351 on stmt: $128load_attr.2 = getattr(value=$116load_global.0, attr=signbit)
2023-08-13 11:42:38,351 on stmt: $144call.4 = call $128load_attr.2(x0, func=$128load_attr.2, args=[Var(x0, audio.py:1147)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,351 on stmt: $154load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:38,351 on stmt: $166load_attr.7 = getattr(value=$154load_global.5, attr=signbit)
2023-08-13 11:42:38,351 on stmt: $182call.9 = call $166load_attr.7(x1, func=$166load_attr.7, args=[Var(x1, audio.py:1151)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,351 on stmt: $192compare_op.10 = $144call.4 != $182call.9
2023-08-13 11:42:38,351 on stmt: $198return_value.11 = cast(value=$192compare_op.10)
2023-08-13 11:42:38,351 on stmt: out0[index00] = $198return_value.11
2023-08-13 11:42:38,351 on stmt: jump 441
2023-08-13 11:42:38,351 ==== SSA block rewrite pass on 357
2023-08-13 11:42:38,351 Running <numba.core.ssa._FreshVarHandler object at 0x000001F695FE1990>
2023-08-13 11:42:38,351 on stmt: $200load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:38,351 on stmt: $212load_attr.2 = getattr(value=$200load_global.0, attr=sign)
2023-08-13 11:42:38,351 on stmt: $228call.4 = call $212load_attr.2(x0, func=$212load_attr.2, args=[Var(x0, audio.py:1147)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,352 on stmt: $238load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:38,352 on stmt: $250load_attr.7 = getattr(value=$238load_global.5, attr=sign)
2023-08-13 11:42:38,352 on stmt: $266call.9 = call $250load_attr.7(x1, func=$250load_attr.7, args=[Var(x1, audio.py:1151)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,352 on stmt: $276compare_op.10 = $228call.4 != $266call.9
2023-08-13 11:42:38,352 on stmt: $282return_value.11 = cast(value=$276compare_op.10)
2023-08-13 11:42:38,352 on stmt: out0[index00] = $282return_value.11
2023-08-13 11:42:38,352 on stmt: jump 441
2023-08-13 11:42:38,352 ==== SSA block rewrite pass on 441
2023-08-13 11:42:38,352 Running <numba.core.ssa._FreshVarHandler object at 0x000001F695FE1990>
2023-08-13 11:42:38,352 on stmt: jump 230
2023-08-13 11:42:38,352 Replaced assignments: defaultdict(<class 'list'>,
            {295: [<numba.core.ir.Assign object at 0x000001F695FCF550>],
             343: [<numba.core.ir.Assign object at 0x000001F69621E6D0>]})
2023-08-13 11:42:38,353 ==== SSA block rewrite pass on 0
2023-08-13 11:42:38,353 Running <numba.core.ssa._FixSSAVars object at 0x000001F69621FCD0>
2023-08-13 11:42:38,353 on stmt: x = arg(0, name=x)
2023-08-13 11:42:38,353 on stmt: threshold = arg(1, name=threshold)
2023-08-13 11:42:38,353 on stmt: zero_pos = arg(2, name=zero_pos)
2023-08-13 11:42:38,353 on stmt: full_shape0 = getattr(value=x, attr=shape)
2023-08-13 11:42:38,353 on stmt: $18load_global.2.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:38,353 on stmt: $30load_method.4.1 = getattr(value=$18load_global.2.1, attr=empty)
2023-08-13 11:42:38,353 on stmt: $54load_global.6.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:38,354 on stmt: $66load_attr.7.1 = getattr(value=$54load_global.6.1, attr=bool_)
2023-08-13 11:42:38,354 on stmt: out0 = call $30load_method.4.1(full_shape0, func=$30load_method.4.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($66load_attr.7.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,354 on stmt: $const94.9.1 = const(int, 0)
2023-08-13 11:42:38,354 on stmt: $const98.11.1 = const(NoneType, None)
2023-08-13 11:42:38,354 on stmt: $const100.12.1 = const(int, 1)
2023-08-13 11:42:38,354 on stmt: $102build_slice.13.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:38,354 on stmt: $102build_slice.14.1 = call $102build_slice.13.1($const98.11.1, $const100.12.1, func=$102build_slice.13.1, args=(Var($const98.11.1, <string>:4), Var($const100.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,354 on stmt: out0[$102build_slice.14.1] = $const94.9.1
2023-08-13 11:42:38,354 on stmt: $const108.15.1 = const(int, 0)
2023-08-13 11:42:38,354 on stmt: $const112.17.1 = const(int, 0)
2023-08-13 11:42:38,354 on stmt: $const114.18.1 = const(NoneType, None)
2023-08-13 11:42:38,354 on stmt: $116build_slice.19.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:38,354 on stmt: $116build_slice.20.1 = call $116build_slice.19.1($const112.17.1, $const114.18.1, func=$116build_slice.19.1, args=(Var($const112.17.1, <string>:5), Var($const114.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,354 on stmt: out0[$116build_slice.20.1] = $const108.15.1
2023-08-13 11:42:38,354 on stmt: $122load_global.21.1 = global(range: <class 'range'>)
2023-08-13 11:42:38,354 on stmt: $134load_global.23.1 = global(min: <built-in function min>)
2023-08-13 11:42:38,354 on stmt: $const146.25.1 = const(int, 0)
2023-08-13 11:42:38,354 on stmt: $const148.26.1 = const(int, -1)
2023-08-13 11:42:38,355 on stmt: $154call.27.1 = call $134load_global.23.1($const146.25.1, $const148.26.1, func=$134load_global.23.1, args=[Var($const146.25.1, <string>:6), Var($const148.26.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,355 on stmt: $164unary_negative.28.1 = unary(fn=<built-in function neg>, value=$154call.27.1)
2023-08-13 11:42:38,355 on stmt: $const168.30.1 = const(int, 0)
2023-08-13 11:42:38,355 on stmt: $170binary_subscr.31.1 = getitem(value=full_shape0, index=$const168.30.1, fn=<built-in function getitem>)
2023-08-13 11:42:38,355 on stmt: $180load_global.32.1 = global(max: <built-in function max>)
2023-08-13 11:42:38,355 on stmt: $const192.34.1 = const(int, 0)
2023-08-13 11:42:38,355 on stmt: $const194.35.1 = const(int, 0)
2023-08-13 11:42:38,355 on stmt: $200call.36.1 = call $180load_global.32.1($const192.34.1, $const194.35.1, func=$180load_global.32.1, args=[Var($const192.34.1, <string>:6), Var($const194.35.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,355 on stmt: $binop_sub210.37.1 = $170binary_subscr.31.1 - $200call.36.1
2023-08-13 11:42:38,355 on stmt: $218call.38.1 = call $122load_global.21.1($164unary_negative.28.1, $binop_sub210.37.1, func=$122load_global.21.1, args=[Var($164unary_negative.28.1, <string>:6), Var($binop_sub210.37.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,355 on stmt: $228get_iter.39.1 = getiter(value=$218call.38.1)
2023-08-13 11:42:38,355 on stmt: $phi230.0.1 = $228get_iter.39.1
2023-08-13 11:42:38,355 on stmt: jump 230
2023-08-13 11:42:38,355 ==== SSA block rewrite pass on 230
2023-08-13 11:42:38,355 Running <numba.core.ssa._FixSSAVars object at 0x000001F69621FCD0>
2023-08-13 11:42:38,355 on stmt: $230for_iter.1.1 = iternext(value=$phi230.0.1)
2023-08-13 11:42:38,355 on stmt: $230for_iter.2.1 = pair_first(value=$230for_iter.1.1)
2023-08-13 11:42:38,355 on stmt: $230for_iter.3.1 = pair_second(value=$230for_iter.1.1)
2023-08-13 11:42:38,355 on stmt: $phi232.1.1 = $230for_iter.2.1
2023-08-13 11:42:38,355 on stmt: branch $230for_iter.3.1, 232, 442
2023-08-13 11:42:38,356 ==== SSA block rewrite pass on 232
2023-08-13 11:42:38,356 Running <numba.core.ssa._FixSSAVars object at 0x000001F69621FCD0>
2023-08-13 11:42:38,356 on stmt: index00 = $phi232.1.1
2023-08-13 11:42:38,356 on stmt: jump 240
2023-08-13 11:42:38,356 ==== SSA block rewrite pass on 442
2023-08-13 11:42:38,356 Running <numba.core.ssa._FixSSAVars object at 0x000001F69621FCD0>
2023-08-13 11:42:38,356 on stmt: $242return_value.1.1 = cast(value=out0)
2023-08-13 11:42:38,356 on stmt: return $242return_value.1.1
2023-08-13 11:42:38,356 ==== SSA block rewrite pass on 240
2023-08-13 11:42:38,356 Running <numba.core.ssa._FixSSAVars object at 0x000001F69621FCD0>
2023-08-13 11:42:38,356 on stmt: $const6.1 = const(int, 0)
2023-08-13 11:42:38,356 on stmt: stencil_index = $const6.1 + index00
2023-08-13 11:42:38,356 on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:38,356 on stmt: $22unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2023-08-13 11:42:38,356 on stmt: $30compare_op.6 = $22unary_negative.4 <= x0
2023-08-13 11:42:38,356 on stmt: bool36 = global(bool: <class 'bool'>)
2023-08-13 11:42:38,356 on stmt: $36pred = call bool36($30compare_op.6, func=bool36, args=(Var($30compare_op.6, audio.py:1148),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,356 on stmt: $phi38.0 = x0
2023-08-13 11:42:38,356 on stmt: branch $36pred, 241, 291
2023-08-13 11:42:38,357 ==== SSA block rewrite pass on 241
2023-08-13 11:42:38,357 Running <numba.core.ssa._FixSSAVars object at 0x000001F69621FCD0>
2023-08-13 11:42:38,357 on stmt: $40compare_op.2 = x0 <= threshold
2023-08-13 11:42:38,357 on stmt: bool46 = global(bool: <class 'bool'>)
2023-08-13 11:42:38,357 on stmt: $46pred = call bool46($40compare_op.2, func=bool46, args=(Var($40compare_op.2, audio.py:1148),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,357 on stmt: branch $46pred, 279, 295
2023-08-13 11:42:38,357 ==== SSA block rewrite pass on 279
2023-08-13 11:42:38,357 Running <numba.core.ssa._FixSSAVars object at 0x000001F69621FCD0>
2023-08-13 11:42:38,357 on stmt: jump 289
2023-08-13 11:42:38,357 ==== SSA block rewrite pass on 291
2023-08-13 11:42:38,357 Running <numba.core.ssa._FixSSAVars object at 0x000001F69621FCD0>
2023-08-13 11:42:38,357 on stmt: jump 295
2023-08-13 11:42:38,357 ==== SSA block rewrite pass on 289
2023-08-13 11:42:38,357 Running <numba.core.ssa._FixSSAVars object at 0x000001F69621FCD0>
2023-08-13 11:42:38,357 on stmt: x0 = const(int, 0)
2023-08-13 11:42:38,357 on stmt: jump 295
2023-08-13 11:42:38,357 ==== SSA block rewrite pass on 295
2023-08-13 11:42:38,357 Running <numba.core.ssa._FixSSAVars object at 0x000001F69621FCD0>
2023-08-13 11:42:38,357 on stmt: $const60.1 = const(int, -1)
2023-08-13 11:42:38,357 on stmt: stencil_index = $const60.1 + index00
2023-08-13 11:42:38,358 on stmt: x1 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:38,358 on stmt: $76unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2023-08-13 11:42:38,358 on stmt: $84compare_op.6 = $76unary_negative.4 <= x1
2023-08-13 11:42:38,358 find_def var='x1' stmt=$84compare_op.6 = $76unary_negative.4 <= x1
2023-08-13 11:42:38,358 on stmt: bool90 = global(bool: <class 'bool'>)
2023-08-13 11:42:38,358 on stmt: $90pred = call bool90($84compare_op.6, func=bool90, args=(Var($84compare_op.6, audio.py:1152),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,358 on stmt: $phi92.0 = x1
2023-08-13 11:42:38,358 find_def var='x1' stmt=$phi92.0 = x1
2023-08-13 11:42:38,358 on stmt: branch $90pred, 299, 345
2023-08-13 11:42:38,358 ==== SSA block rewrite pass on 299
2023-08-13 11:42:38,358 Running <numba.core.ssa._FixSSAVars object at 0x000001F69621FCD0>
2023-08-13 11:42:38,358 on stmt: $94compare_op.2 = x1 <= threshold
2023-08-13 11:42:38,358 find_def var='x1' stmt=$94compare_op.2 = x1 <= threshold
2023-08-13 11:42:38,358 find_def_from_top label 299
2023-08-13 11:42:38,358 idom 295 from label 299
2023-08-13 11:42:38,358 find_def_from_bottom label 295
2023-08-13 11:42:38,358 on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-13 11:42:38,358 on stmt: $100pred = call bool100($94compare_op.2, func=bool100, args=(Var($94compare_op.2, audio.py:1152),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,358 on stmt: branch $100pred, 333, 349
2023-08-13 11:42:38,359 ==== SSA block rewrite pass on 333
2023-08-13 11:42:38,359 Running <numba.core.ssa._FixSSAVars object at 0x000001F69621FCD0>
2023-08-13 11:42:38,359 on stmt: jump 343
2023-08-13 11:42:38,359 ==== SSA block rewrite pass on 345
2023-08-13 11:42:38,359 Running <numba.core.ssa._FixSSAVars object at 0x000001F69621FCD0>
2023-08-13 11:42:38,359 on stmt: jump 349
2023-08-13 11:42:38,359 ==== SSA block rewrite pass on 343
2023-08-13 11:42:38,359 Running <numba.core.ssa._FixSSAVars object at 0x000001F69621FCD0>
2023-08-13 11:42:38,359 on stmt: x1.1 = const(int, 0)
2023-08-13 11:42:38,359 on stmt: jump 349
2023-08-13 11:42:38,359 ==== SSA block rewrite pass on 349
2023-08-13 11:42:38,359 Running <numba.core.ssa._FixSSAVars object at 0x000001F69621FCD0>
2023-08-13 11:42:38,359 on stmt: bool114 = global(bool: <class 'bool'>)
2023-08-13 11:42:38,359 on stmt: $114pred = call bool114(zero_pos, func=bool114, args=(Var(zero_pos, audio.py:1144),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,359 on stmt: branch $114pred, 353, 357
2023-08-13 11:42:38,359 ==== SSA block rewrite pass on 353
2023-08-13 11:42:38,359 Running <numba.core.ssa._FixSSAVars object at 0x000001F69621FCD0>
2023-08-13 11:42:38,359 on stmt: $116load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:38,359 on stmt: $128load_attr.2 = getattr(value=$116load_global.0, attr=signbit)
2023-08-13 11:42:38,359 on stmt: $144call.4 = call $128load_attr.2(x0, func=$128load_attr.2, args=[Var(x0, audio.py:1147)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,359 on stmt: $154load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:38,360 on stmt: $166load_attr.7 = getattr(value=$154load_global.5, attr=signbit)
2023-08-13 11:42:38,360 on stmt: $182call.9 = call $166load_attr.7(x1, func=$166load_attr.7, args=[Var(x1, audio.py:1151)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,360 find_def var='x1' stmt=$182call.9 = call $166load_attr.7(x1, func=$166load_attr.7, args=[Var(x1, audio.py:1151)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,360 find_def_from_top label 353
2023-08-13 11:42:38,360 idom 349 from label 353
2023-08-13 11:42:38,360 find_def_from_bottom label 349
2023-08-13 11:42:38,360 find_def_from_top label 349
2023-08-13 11:42:38,360 insert phi node x1.2 = phi(incoming_values=[], incoming_blocks=[]) at 349
2023-08-13 11:42:38,360 find_def_from_bottom label 345
2023-08-13 11:42:38,360 find_def_from_top label 345
2023-08-13 11:42:38,360 idom 295 from label 345
2023-08-13 11:42:38,360 find_def_from_bottom label 295
2023-08-13 11:42:38,360 incoming_def x1 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:38,360 find_def_from_bottom label 299
2023-08-13 11:42:38,360 find_def_from_top label 299
2023-08-13 11:42:38,360 idom 295 from label 299
2023-08-13 11:42:38,360 find_def_from_bottom label 295
2023-08-13 11:42:38,360 incoming_def x1 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:38,360 find_def_from_bottom label 343
2023-08-13 11:42:38,360 incoming_def x1.1 = const(int, 0)
2023-08-13 11:42:38,361 replaced with: $182call.9 = call $166load_attr.7(x1.2, func=$166load_attr.7, args=[Var(x1.2, audio.py:1156)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,361 on stmt: $192compare_op.10 = $144call.4 != $182call.9
2023-08-13 11:42:38,361 on stmt: $198return_value.11 = cast(value=$192compare_op.10)
2023-08-13 11:42:38,361 on stmt: out0[index00] = $198return_value.11
2023-08-13 11:42:38,361 on stmt: jump 441
2023-08-13 11:42:38,361 ==== SSA block rewrite pass on 357
2023-08-13 11:42:38,361 Running <numba.core.ssa._FixSSAVars object at 0x000001F69621FCD0>
2023-08-13 11:42:38,361 on stmt: $200load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:38,361 on stmt: $212load_attr.2 = getattr(value=$200load_global.0, attr=sign)
2023-08-13 11:42:38,361 on stmt: $228call.4 = call $212load_attr.2(x0, func=$212load_attr.2, args=[Var(x0, audio.py:1147)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,361 on stmt: $238load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:38,361 on stmt: $250load_attr.7 = getattr(value=$238load_global.5, attr=sign)
2023-08-13 11:42:38,361 on stmt: $266call.9 = call $250load_attr.7(x1, func=$250load_attr.7, args=[Var(x1, audio.py:1151)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,361 find_def var='x1' stmt=$266call.9 = call $250load_attr.7(x1, func=$250load_attr.7, args=[Var(x1, audio.py:1151)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,361 find_def_from_top label 357
2023-08-13 11:42:38,361 idom 349 from label 357
2023-08-13 11:42:38,361 find_def_from_bottom label 349
2023-08-13 11:42:38,361 replaced with: $266call.9 = call $250load_attr.7(x1.2, func=$250load_attr.7, args=[Var(x1.2, audio.py:1156)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,361 on stmt: $276compare_op.10 = $228call.4 != $266call.9
2023-08-13 11:42:38,362 on stmt: $282return_value.11 = cast(value=$276compare_op.10)
2023-08-13 11:42:38,362 on stmt: out0[index00] = $282return_value.11
2023-08-13 11:42:38,362 on stmt: jump 441
2023-08-13 11:42:38,362 ==== SSA block rewrite pass on 441
2023-08-13 11:42:38,362 Running <numba.core.ssa._FixSSAVars object at 0x000001F69621FCD0>
2023-08-13 11:42:38,362 on stmt: jump 230
2023-08-13 11:42:38,362 Fix SSA violator on var stencil_index
2023-08-13 11:42:38,362 ==== SSA block rewrite pass on 0
2023-08-13 11:42:38,362 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696011D90>
2023-08-13 11:42:38,362 on stmt: x = arg(0, name=x)
2023-08-13 11:42:38,362 on stmt: threshold = arg(1, name=threshold)
2023-08-13 11:42:38,362 on stmt: zero_pos = arg(2, name=zero_pos)
2023-08-13 11:42:38,362 on stmt: full_shape0 = getattr(value=x, attr=shape)
2023-08-13 11:42:38,362 on stmt: $18load_global.2.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:38,362 on stmt: $30load_method.4.1 = getattr(value=$18load_global.2.1, attr=empty)
2023-08-13 11:42:38,362 on stmt: $54load_global.6.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:38,362 on stmt: $66load_attr.7.1 = getattr(value=$54load_global.6.1, attr=bool_)
2023-08-13 11:42:38,362 on stmt: out0 = call $30load_method.4.1(full_shape0, func=$30load_method.4.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($66load_attr.7.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,362 on stmt: $const94.9.1 = const(int, 0)
2023-08-13 11:42:38,362 on stmt: $const98.11.1 = const(NoneType, None)
2023-08-13 11:42:38,363 on stmt: $const100.12.1 = const(int, 1)
2023-08-13 11:42:38,363 on stmt: $102build_slice.13.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:38,363 on stmt: $102build_slice.14.1 = call $102build_slice.13.1($const98.11.1, $const100.12.1, func=$102build_slice.13.1, args=(Var($const98.11.1, <string>:4), Var($const100.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,363 on stmt: out0[$102build_slice.14.1] = $const94.9.1
2023-08-13 11:42:38,363 on stmt: $const108.15.1 = const(int, 0)
2023-08-13 11:42:38,363 on stmt: $const112.17.1 = const(int, 0)
2023-08-13 11:42:38,363 on stmt: $const114.18.1 = const(NoneType, None)
2023-08-13 11:42:38,363 on stmt: $116build_slice.19.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:38,363 on stmt: $116build_slice.20.1 = call $116build_slice.19.1($const112.17.1, $const114.18.1, func=$116build_slice.19.1, args=(Var($const112.17.1, <string>:5), Var($const114.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,363 on stmt: out0[$116build_slice.20.1] = $const108.15.1
2023-08-13 11:42:38,363 on stmt: $122load_global.21.1 = global(range: <class 'range'>)
2023-08-13 11:42:38,363 on stmt: $134load_global.23.1 = global(min: <built-in function min>)
2023-08-13 11:42:38,363 on stmt: $const146.25.1 = const(int, 0)
2023-08-13 11:42:38,363 on stmt: $const148.26.1 = const(int, -1)
2023-08-13 11:42:38,363 on stmt: $154call.27.1 = call $134load_global.23.1($const146.25.1, $const148.26.1, func=$134load_global.23.1, args=[Var($const146.25.1, <string>:6), Var($const148.26.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,363 on stmt: $164unary_negative.28.1 = unary(fn=<built-in function neg>, value=$154call.27.1)
2023-08-13 11:42:38,363 on stmt: $const168.30.1 = const(int, 0)
2023-08-13 11:42:38,363 on stmt: $170binary_subscr.31.1 = getitem(value=full_shape0, index=$const168.30.1, fn=<built-in function getitem>)
2023-08-13 11:42:38,363 on stmt: $180load_global.32.1 = global(max: <built-in function max>)
2023-08-13 11:42:38,363 on stmt: $const192.34.1 = const(int, 0)
2023-08-13 11:42:38,363 on stmt: $const194.35.1 = const(int, 0)
2023-08-13 11:42:38,363 on stmt: $200call.36.1 = call $180load_global.32.1($const192.34.1, $const194.35.1, func=$180load_global.32.1, args=[Var($const192.34.1, <string>:6), Var($const194.35.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,364 on stmt: $binop_sub210.37.1 = $170binary_subscr.31.1 - $200call.36.1
2023-08-13 11:42:38,364 on stmt: $218call.38.1 = call $122load_global.21.1($164unary_negative.28.1, $binop_sub210.37.1, func=$122load_global.21.1, args=[Var($164unary_negative.28.1, <string>:6), Var($binop_sub210.37.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,364 on stmt: $228get_iter.39.1 = getiter(value=$218call.38.1)
2023-08-13 11:42:38,364 on stmt: $phi230.0.1 = $228get_iter.39.1
2023-08-13 11:42:38,364 on stmt: jump 230
2023-08-13 11:42:38,364 ==== SSA block rewrite pass on 230
2023-08-13 11:42:38,364 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696011D90>
2023-08-13 11:42:38,364 on stmt: $230for_iter.1.1 = iternext(value=$phi230.0.1)
2023-08-13 11:42:38,364 on stmt: $230for_iter.2.1 = pair_first(value=$230for_iter.1.1)
2023-08-13 11:42:38,364 on stmt: $230for_iter.3.1 = pair_second(value=$230for_iter.1.1)
2023-08-13 11:42:38,364 on stmt: $phi232.1.1 = $230for_iter.2.1
2023-08-13 11:42:38,364 on stmt: branch $230for_iter.3.1, 232, 442
2023-08-13 11:42:38,364 ==== SSA block rewrite pass on 232
2023-08-13 11:42:38,364 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696011D90>
2023-08-13 11:42:38,365 on stmt: index00 = $phi232.1.1
2023-08-13 11:42:38,365 on stmt: jump 240
2023-08-13 11:42:38,365 ==== SSA block rewrite pass on 442
2023-08-13 11:42:38,365 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696011D90>
2023-08-13 11:42:38,365 on stmt: $242return_value.1.1 = cast(value=out0)
2023-08-13 11:42:38,365 on stmt: return $242return_value.1.1
2023-08-13 11:42:38,365 ==== SSA block rewrite pass on 240
2023-08-13 11:42:38,365 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696011D90>
2023-08-13 11:42:38,365 on stmt: $const6.1 = const(int, 0)
2023-08-13 11:42:38,365 on stmt: stencil_index = $const6.1 + index00
2023-08-13 11:42:38,365 first assign: stencil_index
2023-08-13 11:42:38,365 replaced with: stencil_index = $const6.1 + index00
2023-08-13 11:42:38,365 on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:38,365 on stmt: $22unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2023-08-13 11:42:38,365 on stmt: $30compare_op.6 = $22unary_negative.4 <= x0
2023-08-13 11:42:38,365 on stmt: bool36 = global(bool: <class 'bool'>)
2023-08-13 11:42:38,365 on stmt: $36pred = call bool36($30compare_op.6, func=bool36, args=(Var($30compare_op.6, audio.py:1148),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,365 on stmt: $phi38.0 = x0
2023-08-13 11:42:38,365 on stmt: branch $36pred, 241, 291
2023-08-13 11:42:38,365 ==== SSA block rewrite pass on 241
2023-08-13 11:42:38,365 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696011D90>
2023-08-13 11:42:38,366 on stmt: $40compare_op.2 = x0 <= threshold
2023-08-13 11:42:38,366 on stmt: bool46 = global(bool: <class 'bool'>)
2023-08-13 11:42:38,366 on stmt: $46pred = call bool46($40compare_op.2, func=bool46, args=(Var($40compare_op.2, audio.py:1148),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,366 on stmt: branch $46pred, 279, 295
2023-08-13 11:42:38,366 ==== SSA block rewrite pass on 279
2023-08-13 11:42:38,366 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696011D90>
2023-08-13 11:42:38,366 on stmt: jump 289
2023-08-13 11:42:38,366 ==== SSA block rewrite pass on 291
2023-08-13 11:42:38,366 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696011D90>
2023-08-13 11:42:38,366 on stmt: jump 295
2023-08-13 11:42:38,366 ==== SSA block rewrite pass on 289
2023-08-13 11:42:38,366 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696011D90>
2023-08-13 11:42:38,366 on stmt: x0 = const(int, 0)
2023-08-13 11:42:38,366 on stmt: jump 295
2023-08-13 11:42:38,366 ==== SSA block rewrite pass on 295
2023-08-13 11:42:38,366 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696011D90>
2023-08-13 11:42:38,366 on stmt: $const60.1 = const(int, -1)
2023-08-13 11:42:38,366 on stmt: stencil_index = $const60.1 + index00
2023-08-13 11:42:38,366 replaced with: stencil_index.1 = $const60.1 + index00
2023-08-13 11:42:38,366 on stmt: x1 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:38,367 on stmt: $76unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2023-08-13 11:42:38,367 on stmt: $84compare_op.6 = $76unary_negative.4 <= x1
2023-08-13 11:42:38,367 on stmt: bool90 = global(bool: <class 'bool'>)
2023-08-13 11:42:38,367 on stmt: $90pred = call bool90($84compare_op.6, func=bool90, args=(Var($84compare_op.6, audio.py:1152),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,367 on stmt: $phi92.0 = x1
2023-08-13 11:42:38,367 on stmt: branch $90pred, 299, 345
2023-08-13 11:42:38,367 ==== SSA block rewrite pass on 299
2023-08-13 11:42:38,367 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696011D90>
2023-08-13 11:42:38,367 on stmt: $94compare_op.2 = x1 <= threshold
2023-08-13 11:42:38,367 on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-13 11:42:38,367 on stmt: $100pred = call bool100($94compare_op.2, func=bool100, args=(Var($94compare_op.2, audio.py:1152),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,367 on stmt: branch $100pred, 333, 349
2023-08-13 11:42:38,367 ==== SSA block rewrite pass on 333
2023-08-13 11:42:38,367 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696011D90>
2023-08-13 11:42:38,367 on stmt: jump 343
2023-08-13 11:42:38,367 ==== SSA block rewrite pass on 345
2023-08-13 11:42:38,367 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696011D90>
2023-08-13 11:42:38,367 on stmt: jump 349
2023-08-13 11:42:38,367 ==== SSA block rewrite pass on 343
2023-08-13 11:42:38,367 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696011D90>
2023-08-13 11:42:38,367 on stmt: x1.1 = const(int, 0)
2023-08-13 11:42:38,367 on stmt: jump 349
2023-08-13 11:42:38,367 ==== SSA block rewrite pass on 349
2023-08-13 11:42:38,368 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696011D90>
2023-08-13 11:42:38,368 on stmt: x1.2 = phi(incoming_values=[Var(x1, audio.py:1151), Var(x1, audio.py:1151), Var(x1.1, audio.py:1153)], incoming_blocks=[345, 299, 343])
2023-08-13 11:42:38,368 on stmt: bool114 = global(bool: <class 'bool'>)
2023-08-13 11:42:38,368 on stmt: $114pred = call bool114(zero_pos, func=bool114, args=(Var(zero_pos, audio.py:1144),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,368 on stmt: branch $114pred, 353, 357
2023-08-13 11:42:38,368 ==== SSA block rewrite pass on 353
2023-08-13 11:42:38,368 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696011D90>
2023-08-13 11:42:38,368 on stmt: $116load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:38,368 on stmt: $128load_attr.2 = getattr(value=$116load_global.0, attr=signbit)
2023-08-13 11:42:38,368 on stmt: $144call.4 = call $128load_attr.2(x0, func=$128load_attr.2, args=[Var(x0, audio.py:1147)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,368 on stmt: $154load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:38,368 on stmt: $166load_attr.7 = getattr(value=$154load_global.5, attr=signbit)
2023-08-13 11:42:38,368 on stmt: $182call.9 = call $166load_attr.7(x1.2, func=$166load_attr.7, args=[Var(x1.2, audio.py:1156)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,368 on stmt: $192compare_op.10 = $144call.4 != $182call.9
2023-08-13 11:42:38,368 on stmt: $198return_value.11 = cast(value=$192compare_op.10)
2023-08-13 11:42:38,368 on stmt: out0[index00] = $198return_value.11
2023-08-13 11:42:38,368 on stmt: jump 441
2023-08-13 11:42:38,368 ==== SSA block rewrite pass on 357
2023-08-13 11:42:38,368 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696011D90>
2023-08-13 11:42:38,368 on stmt: $200load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:38,368 on stmt: $212load_attr.2 = getattr(value=$200load_global.0, attr=sign)
2023-08-13 11:42:38,369 on stmt: $228call.4 = call $212load_attr.2(x0, func=$212load_attr.2, args=[Var(x0, audio.py:1147)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,369 on stmt: $238load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:38,369 on stmt: $250load_attr.7 = getattr(value=$238load_global.5, attr=sign)
2023-08-13 11:42:38,369 on stmt: $266call.9 = call $250load_attr.7(x1.2, func=$250load_attr.7, args=[Var(x1.2, audio.py:1156)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,369 on stmt: $276compare_op.10 = $228call.4 != $266call.9
2023-08-13 11:42:38,369 on stmt: $282return_value.11 = cast(value=$276compare_op.10)
2023-08-13 11:42:38,369 on stmt: out0[index00] = $282return_value.11
2023-08-13 11:42:38,369 on stmt: jump 441
2023-08-13 11:42:38,369 ==== SSA block rewrite pass on 441
2023-08-13 11:42:38,369 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696011D90>
2023-08-13 11:42:38,369 on stmt: jump 230
2023-08-13 11:42:38,369 Replaced assignments: defaultdict(<class 'list'>,
            {240: [<numba.core.ir.Assign object at 0x000001F69621E510>],
             295: [<numba.core.ir.Assign object at 0x000001F69621FCD0>]})
2023-08-13 11:42:38,369 ==== SSA block rewrite pass on 0
2023-08-13 11:42:38,369 Running <numba.core.ssa._FixSSAVars object at 0x000001F696011D90>
2023-08-13 11:42:38,369 on stmt: x = arg(0, name=x)
2023-08-13 11:42:38,369 on stmt: threshold = arg(1, name=threshold)
2023-08-13 11:42:38,369 on stmt: zero_pos = arg(2, name=zero_pos)
2023-08-13 11:42:38,369 on stmt: full_shape0 = getattr(value=x, attr=shape)
2023-08-13 11:42:38,369 on stmt: $18load_global.2.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:38,370 on stmt: $30load_method.4.1 = getattr(value=$18load_global.2.1, attr=empty)
2023-08-13 11:42:38,370 on stmt: $54load_global.6.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:38,370 on stmt: $66load_attr.7.1 = getattr(value=$54load_global.6.1, attr=bool_)
2023-08-13 11:42:38,370 on stmt: out0 = call $30load_method.4.1(full_shape0, func=$30load_method.4.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($66load_attr.7.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,370 on stmt: $const94.9.1 = const(int, 0)
2023-08-13 11:42:38,370 on stmt: $const98.11.1 = const(NoneType, None)
2023-08-13 11:42:38,370 on stmt: $const100.12.1 = const(int, 1)
2023-08-13 11:42:38,370 on stmt: $102build_slice.13.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:38,370 on stmt: $102build_slice.14.1 = call $102build_slice.13.1($const98.11.1, $const100.12.1, func=$102build_slice.13.1, args=(Var($const98.11.1, <string>:4), Var($const100.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,370 on stmt: out0[$102build_slice.14.1] = $const94.9.1
2023-08-13 11:42:38,370 on stmt: $const108.15.1 = const(int, 0)
2023-08-13 11:42:38,370 on stmt: $const112.17.1 = const(int, 0)
2023-08-13 11:42:38,370 on stmt: $const114.18.1 = const(NoneType, None)
2023-08-13 11:42:38,370 on stmt: $116build_slice.19.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:38,371 on stmt: $116build_slice.20.1 = call $116build_slice.19.1($const112.17.1, $const114.18.1, func=$116build_slice.19.1, args=(Var($const112.17.1, <string>:5), Var($const114.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,371 on stmt: out0[$116build_slice.20.1] = $const108.15.1
2023-08-13 11:42:38,371 on stmt: $122load_global.21.1 = global(range: <class 'range'>)
2023-08-13 11:42:38,371 on stmt: $134load_global.23.1 = global(min: <built-in function min>)
2023-08-13 11:42:38,371 on stmt: $const146.25.1 = const(int, 0)
2023-08-13 11:42:38,371 on stmt: $const148.26.1 = const(int, -1)
2023-08-13 11:42:38,371 on stmt: $154call.27.1 = call $134load_global.23.1($const146.25.1, $const148.26.1, func=$134load_global.23.1, args=[Var($const146.25.1, <string>:6), Var($const148.26.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,371 on stmt: $164unary_negative.28.1 = unary(fn=<built-in function neg>, value=$154call.27.1)
2023-08-13 11:42:38,371 on stmt: $const168.30.1 = const(int, 0)
2023-08-13 11:42:38,372 on stmt: $170binary_subscr.31.1 = getitem(value=full_shape0, index=$const168.30.1, fn=<built-in function getitem>)
2023-08-13 11:42:38,372 on stmt: $180load_global.32.1 = global(max: <built-in function max>)
2023-08-13 11:42:38,372 on stmt: $const192.34.1 = const(int, 0)
2023-08-13 11:42:38,372 on stmt: $const194.35.1 = const(int, 0)
2023-08-13 11:42:38,372 on stmt: $200call.36.1 = call $180load_global.32.1($const192.34.1, $const194.35.1, func=$180load_global.32.1, args=[Var($const192.34.1, <string>:6), Var($const194.35.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,372 on stmt: $binop_sub210.37.1 = $170binary_subscr.31.1 - $200call.36.1
2023-08-13 11:42:38,372 on stmt: $218call.38.1 = call $122load_global.21.1($164unary_negative.28.1, $binop_sub210.37.1, func=$122load_global.21.1, args=[Var($164unary_negative.28.1, <string>:6), Var($binop_sub210.37.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,372 on stmt: $228get_iter.39.1 = getiter(value=$218call.38.1)
2023-08-13 11:42:38,372 on stmt: $phi230.0.1 = $228get_iter.39.1
2023-08-13 11:42:38,372 on stmt: jump 230
2023-08-13 11:42:38,372 ==== SSA block rewrite pass on 230
2023-08-13 11:42:38,372 Running <numba.core.ssa._FixSSAVars object at 0x000001F696011D90>
2023-08-13 11:42:38,372 on stmt: $230for_iter.1.1 = iternext(value=$phi230.0.1)
2023-08-13 11:42:38,372 on stmt: $230for_iter.2.1 = pair_first(value=$230for_iter.1.1)
2023-08-13 11:42:38,372 on stmt: $230for_iter.3.1 = pair_second(value=$230for_iter.1.1)
2023-08-13 11:42:38,372 on stmt: $phi232.1.1 = $230for_iter.2.1
2023-08-13 11:42:38,372 on stmt: branch $230for_iter.3.1, 232, 442
2023-08-13 11:42:38,372 ==== SSA block rewrite pass on 232
2023-08-13 11:42:38,372 Running <numba.core.ssa._FixSSAVars object at 0x000001F696011D90>
2023-08-13 11:42:38,372 on stmt: index00 = $phi232.1.1
2023-08-13 11:42:38,373 on stmt: jump 240
2023-08-13 11:42:38,373 ==== SSA block rewrite pass on 442
2023-08-13 11:42:38,373 Running <numba.core.ssa._FixSSAVars object at 0x000001F696011D90>
2023-08-13 11:42:38,373 on stmt: $242return_value.1.1 = cast(value=out0)
2023-08-13 11:42:38,373 on stmt: return $242return_value.1.1
2023-08-13 11:42:38,373 ==== SSA block rewrite pass on 240
2023-08-13 11:42:38,373 Running <numba.core.ssa._FixSSAVars object at 0x000001F696011D90>
2023-08-13 11:42:38,373 on stmt: $const6.1 = const(int, 0)
2023-08-13 11:42:38,373 on stmt: stencil_index = $const6.1 + index00
2023-08-13 11:42:38,373 on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:38,373 find_def var='stencil_index' stmt=x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:38,373 on stmt: $22unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2023-08-13 11:42:38,373 on stmt: $30compare_op.6 = $22unary_negative.4 <= x0
2023-08-13 11:42:38,373 on stmt: bool36 = global(bool: <class 'bool'>)
2023-08-13 11:42:38,373 on stmt: $36pred = call bool36($30compare_op.6, func=bool36, args=(Var($30compare_op.6, audio.py:1148),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,373 on stmt: $phi38.0 = x0
2023-08-13 11:42:38,373 on stmt: branch $36pred, 241, 291
2023-08-13 11:42:38,373 ==== SSA block rewrite pass on 241
2023-08-13 11:42:38,373 Running <numba.core.ssa._FixSSAVars object at 0x000001F696011D90>
2023-08-13 11:42:38,373 on stmt: $40compare_op.2 = x0 <= threshold
2023-08-13 11:42:38,373 on stmt: bool46 = global(bool: <class 'bool'>)
2023-08-13 11:42:38,374 on stmt: $46pred = call bool46($40compare_op.2, func=bool46, args=(Var($40compare_op.2, audio.py:1148),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,374 on stmt: branch $46pred, 279, 295
2023-08-13 11:42:38,374 ==== SSA block rewrite pass on 279
2023-08-13 11:42:38,374 Running <numba.core.ssa._FixSSAVars object at 0x000001F696011D90>
2023-08-13 11:42:38,374 on stmt: jump 289
2023-08-13 11:42:38,374 ==== SSA block rewrite pass on 291
2023-08-13 11:42:38,374 Running <numba.core.ssa._FixSSAVars object at 0x000001F696011D90>
2023-08-13 11:42:38,374 on stmt: jump 295
2023-08-13 11:42:38,374 ==== SSA block rewrite pass on 289
2023-08-13 11:42:38,374 Running <numba.core.ssa._FixSSAVars object at 0x000001F696011D90>
2023-08-13 11:42:38,374 on stmt: x0 = const(int, 0)
2023-08-13 11:42:38,374 on stmt: jump 295
2023-08-13 11:42:38,374 ==== SSA block rewrite pass on 295
2023-08-13 11:42:38,374 Running <numba.core.ssa._FixSSAVars object at 0x000001F696011D90>
2023-08-13 11:42:38,374 on stmt: $const60.1 = const(int, -1)
2023-08-13 11:42:38,374 on stmt: stencil_index.1 = $const60.1 + index00
2023-08-13 11:42:38,374 on stmt: x1 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:38,374 find_def var='stencil_index' stmt=x1 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:38,374 replaced with: x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2023-08-13 11:42:38,374 on stmt: $76unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2023-08-13 11:42:38,375 on stmt: $84compare_op.6 = $76unary_negative.4 <= x1
2023-08-13 11:42:38,375 on stmt: bool90 = global(bool: <class 'bool'>)
2023-08-13 11:42:38,375 on stmt: $90pred = call bool90($84compare_op.6, func=bool90, args=(Var($84compare_op.6, audio.py:1152),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,375 on stmt: $phi92.0 = x1
2023-08-13 11:42:38,375 on stmt: branch $90pred, 299, 345
2023-08-13 11:42:38,375 ==== SSA block rewrite pass on 299
2023-08-13 11:42:38,375 Running <numba.core.ssa._FixSSAVars object at 0x000001F696011D90>
2023-08-13 11:42:38,375 on stmt: $94compare_op.2 = x1 <= threshold
2023-08-13 11:42:38,375 on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-13 11:42:38,375 on stmt: $100pred = call bool100($94compare_op.2, func=bool100, args=(Var($94compare_op.2, audio.py:1152),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,375 on stmt: branch $100pred, 333, 349
2023-08-13 11:42:38,375 ==== SSA block rewrite pass on 333
2023-08-13 11:42:38,375 Running <numba.core.ssa._FixSSAVars object at 0x000001F696011D90>
2023-08-13 11:42:38,375 on stmt: jump 343
2023-08-13 11:42:38,375 ==== SSA block rewrite pass on 345
2023-08-13 11:42:38,375 Running <numba.core.ssa._FixSSAVars object at 0x000001F696011D90>
2023-08-13 11:42:38,375 on stmt: jump 349
2023-08-13 11:42:38,375 ==== SSA block rewrite pass on 343
2023-08-13 11:42:38,375 Running <numba.core.ssa._FixSSAVars object at 0x000001F696011D90>
2023-08-13 11:42:38,375 on stmt: x1.1 = const(int, 0)
2023-08-13 11:42:38,376 on stmt: jump 349
2023-08-13 11:42:38,376 ==== SSA block rewrite pass on 349
2023-08-13 11:42:38,376 Running <numba.core.ssa._FixSSAVars object at 0x000001F696011D90>
2023-08-13 11:42:38,376 on stmt: x1.2 = phi(incoming_values=[Var(x1, audio.py:1151), Var(x1, audio.py:1151), Var(x1.1, audio.py:1153)], incoming_blocks=[345, 299, 343])
2023-08-13 11:42:38,376 on stmt: bool114 = global(bool: <class 'bool'>)
2023-08-13 11:42:38,376 on stmt: $114pred = call bool114(zero_pos, func=bool114, args=(Var(zero_pos, audio.py:1144),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,376 on stmt: branch $114pred, 353, 357
2023-08-13 11:42:38,376 ==== SSA block rewrite pass on 353
2023-08-13 11:42:38,376 Running <numba.core.ssa._FixSSAVars object at 0x000001F696011D90>
2023-08-13 11:42:38,376 on stmt: $116load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:38,376 on stmt: $128load_attr.2 = getattr(value=$116load_global.0, attr=signbit)
2023-08-13 11:42:38,376 on stmt: $144call.4 = call $128load_attr.2(x0, func=$128load_attr.2, args=[Var(x0, audio.py:1147)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,376 on stmt: $154load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:38,376 on stmt: $166load_attr.7 = getattr(value=$154load_global.5, attr=signbit)
2023-08-13 11:42:38,376 on stmt: $182call.9 = call $166load_attr.7(x1.2, func=$166load_attr.7, args=[Var(x1.2, audio.py:1156)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,376 on stmt: $192compare_op.10 = $144call.4 != $182call.9
2023-08-13 11:42:38,376 on stmt: $198return_value.11 = cast(value=$192compare_op.10)
2023-08-13 11:42:38,376 on stmt: out0[index00] = $198return_value.11
2023-08-13 11:42:38,376 on stmt: jump 441
2023-08-13 11:42:38,376 ==== SSA block rewrite pass on 357
2023-08-13 11:42:38,377 Running <numba.core.ssa._FixSSAVars object at 0x000001F696011D90>
2023-08-13 11:42:38,377 on stmt: $200load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:38,377 on stmt: $212load_attr.2 = getattr(value=$200load_global.0, attr=sign)
2023-08-13 11:42:38,377 on stmt: $228call.4 = call $212load_attr.2(x0, func=$212load_attr.2, args=[Var(x0, audio.py:1147)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,377 on stmt: $238load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:38,377 on stmt: $250load_attr.7 = getattr(value=$238load_global.5, attr=sign)
2023-08-13 11:42:38,377 on stmt: $266call.9 = call $250load_attr.7(x1.2, func=$250load_attr.7, args=[Var(x1.2, audio.py:1156)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,377 on stmt: $276compare_op.10 = $228call.4 != $266call.9
2023-08-13 11:42:38,377 on stmt: $282return_value.11 = cast(value=$276compare_op.10)
2023-08-13 11:42:38,377 on stmt: out0[index00] = $282return_value.11
2023-08-13 11:42:38,377 on stmt: jump 441
2023-08-13 11:42:38,377 ==== SSA block rewrite pass on 441
2023-08-13 11:42:38,377 Running <numba.core.ssa._FixSSAVars object at 0x000001F696011D90>
2023-08-13 11:42:38,377 on stmt: jump 230
2023-08-13 11:42:38,377 Fix SSA violator on var x0
2023-08-13 11:42:38,377 ==== SSA block rewrite pass on 0
2023-08-13 11:42:38,377 Running <numba.core.ssa._FreshVarHandler object at 0x000001F695FCF550>
2023-08-13 11:42:38,377 on stmt: x = arg(0, name=x)
2023-08-13 11:42:38,377 on stmt: threshold = arg(1, name=threshold)
2023-08-13 11:42:38,377 on stmt: zero_pos = arg(2, name=zero_pos)
2023-08-13 11:42:38,377 on stmt: full_shape0 = getattr(value=x, attr=shape)
2023-08-13 11:42:38,378 on stmt: $18load_global.2.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:38,378 on stmt: $30load_method.4.1 = getattr(value=$18load_global.2.1, attr=empty)
2023-08-13 11:42:38,378 on stmt: $54load_global.6.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:38,378 on stmt: $66load_attr.7.1 = getattr(value=$54load_global.6.1, attr=bool_)
2023-08-13 11:42:38,378 on stmt: out0 = call $30load_method.4.1(full_shape0, func=$30load_method.4.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($66load_attr.7.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,378 on stmt: $const94.9.1 = const(int, 0)
2023-08-13 11:42:38,378 on stmt: $const98.11.1 = const(NoneType, None)
2023-08-13 11:42:38,378 on stmt: $const100.12.1 = const(int, 1)
2023-08-13 11:42:38,378 on stmt: $102build_slice.13.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:38,378 on stmt: $102build_slice.14.1 = call $102build_slice.13.1($const98.11.1, $const100.12.1, func=$102build_slice.13.1, args=(Var($const98.11.1, <string>:4), Var($const100.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,378 on stmt: out0[$102build_slice.14.1] = $const94.9.1
2023-08-13 11:42:38,378 on stmt: $const108.15.1 = const(int, 0)
2023-08-13 11:42:38,378 on stmt: $const112.17.1 = const(int, 0)
2023-08-13 11:42:38,378 on stmt: $const114.18.1 = const(NoneType, None)
2023-08-13 11:42:38,378 on stmt: $116build_slice.19.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:38,378 on stmt: $116build_slice.20.1 = call $116build_slice.19.1($const112.17.1, $const114.18.1, func=$116build_slice.19.1, args=(Var($const112.17.1, <string>:5), Var($const114.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,378 on stmt: out0[$116build_slice.20.1] = $const108.15.1
2023-08-13 11:42:38,378 on stmt: $122load_global.21.1 = global(range: <class 'range'>)
2023-08-13 11:42:38,378 on stmt: $134load_global.23.1 = global(min: <built-in function min>)
2023-08-13 11:42:38,378 on stmt: $const146.25.1 = const(int, 0)
2023-08-13 11:42:38,378 on stmt: $const148.26.1 = const(int, -1)
2023-08-13 11:42:38,378 on stmt: $154call.27.1 = call $134load_global.23.1($const146.25.1, $const148.26.1, func=$134load_global.23.1, args=[Var($const146.25.1, <string>:6), Var($const148.26.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,379 on stmt: $164unary_negative.28.1 = unary(fn=<built-in function neg>, value=$154call.27.1)
2023-08-13 11:42:38,379 on stmt: $const168.30.1 = const(int, 0)
2023-08-13 11:42:38,379 on stmt: $170binary_subscr.31.1 = getitem(value=full_shape0, index=$const168.30.1, fn=<built-in function getitem>)
2023-08-13 11:42:38,379 on stmt: $180load_global.32.1 = global(max: <built-in function max>)
2023-08-13 11:42:38,379 on stmt: $const192.34.1 = const(int, 0)
2023-08-13 11:42:38,379 on stmt: $const194.35.1 = const(int, 0)
2023-08-13 11:42:38,379 on stmt: $200call.36.1 = call $180load_global.32.1($const192.34.1, $const194.35.1, func=$180load_global.32.1, args=[Var($const192.34.1, <string>:6), Var($const194.35.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,379 on stmt: $binop_sub210.37.1 = $170binary_subscr.31.1 - $200call.36.1
2023-08-13 11:42:38,379 on stmt: $218call.38.1 = call $122load_global.21.1($164unary_negative.28.1, $binop_sub210.37.1, func=$122load_global.21.1, args=[Var($164unary_negative.28.1, <string>:6), Var($binop_sub210.37.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,379 on stmt: $228get_iter.39.1 = getiter(value=$218call.38.1)
2023-08-13 11:42:38,379 on stmt: $phi230.0.1 = $228get_iter.39.1
2023-08-13 11:42:38,379 on stmt: jump 230
2023-08-13 11:42:38,379 ==== SSA block rewrite pass on 230
2023-08-13 11:42:38,379 Running <numba.core.ssa._FreshVarHandler object at 0x000001F695FCF550>
2023-08-13 11:42:38,379 on stmt: $230for_iter.1.1 = iternext(value=$phi230.0.1)
2023-08-13 11:42:38,379 on stmt: $230for_iter.2.1 = pair_first(value=$230for_iter.1.1)
2023-08-13 11:42:38,379 on stmt: $230for_iter.3.1 = pair_second(value=$230for_iter.1.1)
2023-08-13 11:42:38,379 on stmt: $phi232.1.1 = $230for_iter.2.1
2023-08-13 11:42:38,379 on stmt: branch $230for_iter.3.1, 232, 442
2023-08-13 11:42:38,379 ==== SSA block rewrite pass on 232
2023-08-13 11:42:38,379 Running <numba.core.ssa._FreshVarHandler object at 0x000001F695FCF550>
2023-08-13 11:42:38,380 on stmt: index00 = $phi232.1.1
2023-08-13 11:42:38,380 on stmt: jump 240
2023-08-13 11:42:38,380 ==== SSA block rewrite pass on 442
2023-08-13 11:42:38,380 Running <numba.core.ssa._FreshVarHandler object at 0x000001F695FCF550>
2023-08-13 11:42:38,380 on stmt: $242return_value.1.1 = cast(value=out0)
2023-08-13 11:42:38,380 on stmt: return $242return_value.1.1
2023-08-13 11:42:38,380 ==== SSA block rewrite pass on 240
2023-08-13 11:42:38,380 Running <numba.core.ssa._FreshVarHandler object at 0x000001F695FCF550>
2023-08-13 11:42:38,380 on stmt: $const6.1 = const(int, 0)
2023-08-13 11:42:38,380 on stmt: stencil_index = $const6.1 + index00
2023-08-13 11:42:38,380 on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:38,380 first assign: x0
2023-08-13 11:42:38,380 replaced with: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:38,380 on stmt: $22unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2023-08-13 11:42:38,380 on stmt: $30compare_op.6 = $22unary_negative.4 <= x0
2023-08-13 11:42:38,380 on stmt: bool36 = global(bool: <class 'bool'>)
2023-08-13 11:42:38,380 on stmt: $36pred = call bool36($30compare_op.6, func=bool36, args=(Var($30compare_op.6, audio.py:1148),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,380 on stmt: $phi38.0 = x0
2023-08-13 11:42:38,380 on stmt: branch $36pred, 241, 291
2023-08-13 11:42:38,380 ==== SSA block rewrite pass on 241
2023-08-13 11:42:38,381 Running <numba.core.ssa._FreshVarHandler object at 0x000001F695FCF550>
2023-08-13 11:42:38,381 on stmt: $40compare_op.2 = x0 <= threshold
2023-08-13 11:42:38,381 on stmt: bool46 = global(bool: <class 'bool'>)
2023-08-13 11:42:38,381 on stmt: $46pred = call bool46($40compare_op.2, func=bool46, args=(Var($40compare_op.2, audio.py:1148),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,381 on stmt: branch $46pred, 279, 295
2023-08-13 11:42:38,381 ==== SSA block rewrite pass on 279
2023-08-13 11:42:38,381 Running <numba.core.ssa._FreshVarHandler object at 0x000001F695FCF550>
2023-08-13 11:42:38,381 on stmt: jump 289
2023-08-13 11:42:38,381 ==== SSA block rewrite pass on 291
2023-08-13 11:42:38,381 Running <numba.core.ssa._FreshVarHandler object at 0x000001F695FCF550>
2023-08-13 11:42:38,381 on stmt: jump 295
2023-08-13 11:42:38,381 ==== SSA block rewrite pass on 289
2023-08-13 11:42:38,382 Running <numba.core.ssa._FreshVarHandler object at 0x000001F695FCF550>
2023-08-13 11:42:38,382 on stmt: x0 = const(int, 0)
2023-08-13 11:42:38,382 replaced with: x0.1 = const(int, 0)
2023-08-13 11:42:38,382 on stmt: jump 295
2023-08-13 11:42:38,382 ==== SSA block rewrite pass on 295
2023-08-13 11:42:38,382 Running <numba.core.ssa._FreshVarHandler object at 0x000001F695FCF550>
2023-08-13 11:42:38,382 on stmt: $const60.1 = const(int, -1)
2023-08-13 11:42:38,382 on stmt: stencil_index.1 = $const60.1 + index00
2023-08-13 11:42:38,382 on stmt: x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2023-08-13 11:42:38,382 on stmt: $76unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2023-08-13 11:42:38,382 on stmt: $84compare_op.6 = $76unary_negative.4 <= x1
2023-08-13 11:42:38,382 on stmt: bool90 = global(bool: <class 'bool'>)
2023-08-13 11:42:38,382 on stmt: $90pred = call bool90($84compare_op.6, func=bool90, args=(Var($84compare_op.6, audio.py:1152),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,382 on stmt: $phi92.0 = x1
2023-08-13 11:42:38,382 on stmt: branch $90pred, 299, 345
2023-08-13 11:42:38,382 ==== SSA block rewrite pass on 299
2023-08-13 11:42:38,382 Running <numba.core.ssa._FreshVarHandler object at 0x000001F695FCF550>
2023-08-13 11:42:38,382 on stmt: $94compare_op.2 = x1 <= threshold
2023-08-13 11:42:38,382 on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-13 11:42:38,382 on stmt: $100pred = call bool100($94compare_op.2, func=bool100, args=(Var($94compare_op.2, audio.py:1152),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,382 on stmt: branch $100pred, 333, 349
2023-08-13 11:42:38,383 ==== SSA block rewrite pass on 333
2023-08-13 11:42:38,383 Running <numba.core.ssa._FreshVarHandler object at 0x000001F695FCF550>
2023-08-13 11:42:38,383 on stmt: jump 343
2023-08-13 11:42:38,383 ==== SSA block rewrite pass on 345
2023-08-13 11:42:38,383 Running <numba.core.ssa._FreshVarHandler object at 0x000001F695FCF550>
2023-08-13 11:42:38,383 on stmt: jump 349
2023-08-13 11:42:38,383 ==== SSA block rewrite pass on 343
2023-08-13 11:42:38,383 Running <numba.core.ssa._FreshVarHandler object at 0x000001F695FCF550>
2023-08-13 11:42:38,383 on stmt: x1.1 = const(int, 0)
2023-08-13 11:42:38,383 on stmt: jump 349
2023-08-13 11:42:38,383 ==== SSA block rewrite pass on 349
2023-08-13 11:42:38,383 Running <numba.core.ssa._FreshVarHandler object at 0x000001F695FCF550>
2023-08-13 11:42:38,383 on stmt: x1.2 = phi(incoming_values=[Var(x1, audio.py:1151), Var(x1, audio.py:1151), Var(x1.1, audio.py:1153)], incoming_blocks=[345, 299, 343])
2023-08-13 11:42:38,383 on stmt: bool114 = global(bool: <class 'bool'>)
2023-08-13 11:42:38,383 on stmt: $114pred = call bool114(zero_pos, func=bool114, args=(Var(zero_pos, audio.py:1144),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,383 on stmt: branch $114pred, 353, 357
2023-08-13 11:42:38,383 ==== SSA block rewrite pass on 353
2023-08-13 11:42:38,383 Running <numba.core.ssa._FreshVarHandler object at 0x000001F695FCF550>
2023-08-13 11:42:38,383 on stmt: $116load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:38,383 on stmt: $128load_attr.2 = getattr(value=$116load_global.0, attr=signbit)
2023-08-13 11:42:38,383 on stmt: $144call.4 = call $128load_attr.2(x0, func=$128load_attr.2, args=[Var(x0, audio.py:1147)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,383 on stmt: $154load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:38,384 on stmt: $166load_attr.7 = getattr(value=$154load_global.5, attr=signbit)
2023-08-13 11:42:38,384 on stmt: $182call.9 = call $166load_attr.7(x1.2, func=$166load_attr.7, args=[Var(x1.2, audio.py:1156)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,384 on stmt: $192compare_op.10 = $144call.4 != $182call.9
2023-08-13 11:42:38,384 on stmt: $198return_value.11 = cast(value=$192compare_op.10)
2023-08-13 11:42:38,384 on stmt: out0[index00] = $198return_value.11
2023-08-13 11:42:38,384 on stmt: jump 441
2023-08-13 11:42:38,384 ==== SSA block rewrite pass on 357
2023-08-13 11:42:38,384 Running <numba.core.ssa._FreshVarHandler object at 0x000001F695FCF550>
2023-08-13 11:42:38,384 on stmt: $200load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:38,384 on stmt: $212load_attr.2 = getattr(value=$200load_global.0, attr=sign)
2023-08-13 11:42:38,384 on stmt: $228call.4 = call $212load_attr.2(x0, func=$212load_attr.2, args=[Var(x0, audio.py:1147)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,384 on stmt: $238load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:38,384 on stmt: $250load_attr.7 = getattr(value=$238load_global.5, attr=sign)
2023-08-13 11:42:38,384 on stmt: $266call.9 = call $250load_attr.7(x1.2, func=$250load_attr.7, args=[Var(x1.2, audio.py:1156)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,384 on stmt: $276compare_op.10 = $228call.4 != $266call.9
2023-08-13 11:42:38,384 on stmt: $282return_value.11 = cast(value=$276compare_op.10)
2023-08-13 11:42:38,384 on stmt: out0[index00] = $282return_value.11
2023-08-13 11:42:38,384 on stmt: jump 441
2023-08-13 11:42:38,384 ==== SSA block rewrite pass on 441
2023-08-13 11:42:38,384 Running <numba.core.ssa._FreshVarHandler object at 0x000001F695FCF550>
2023-08-13 11:42:38,384 on stmt: jump 230
2023-08-13 11:42:38,385 Replaced assignments: defaultdict(<class 'list'>,
            {240: [<numba.core.ir.Assign object at 0x000001F696002290>],
             289: [<numba.core.ir.Assign object at 0x000001F69621AD10>]})
2023-08-13 11:42:38,385 ==== SSA block rewrite pass on 0
2023-08-13 11:42:38,385 Running <numba.core.ssa._FixSSAVars object at 0x000001F69620A610>
2023-08-13 11:42:38,385 on stmt: x = arg(0, name=x)
2023-08-13 11:42:38,385 on stmt: threshold = arg(1, name=threshold)
2023-08-13 11:42:38,385 on stmt: zero_pos = arg(2, name=zero_pos)
2023-08-13 11:42:38,385 on stmt: full_shape0 = getattr(value=x, attr=shape)
2023-08-13 11:42:38,385 on stmt: $18load_global.2.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:38,385 on stmt: $30load_method.4.1 = getattr(value=$18load_global.2.1, attr=empty)
2023-08-13 11:42:38,385 on stmt: $54load_global.6.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:38,385 on stmt: $66load_attr.7.1 = getattr(value=$54load_global.6.1, attr=bool_)
2023-08-13 11:42:38,385 on stmt: out0 = call $30load_method.4.1(full_shape0, func=$30load_method.4.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($66load_attr.7.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,385 on stmt: $const94.9.1 = const(int, 0)
2023-08-13 11:42:38,385 on stmt: $const98.11.1 = const(NoneType, None)
2023-08-13 11:42:38,385 on stmt: $const100.12.1 = const(int, 1)
2023-08-13 11:42:38,385 on stmt: $102build_slice.13.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:38,385 on stmt: $102build_slice.14.1 = call $102build_slice.13.1($const98.11.1, $const100.12.1, func=$102build_slice.13.1, args=(Var($const98.11.1, <string>:4), Var($const100.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,386 on stmt: out0[$102build_slice.14.1] = $const94.9.1
2023-08-13 11:42:38,386 on stmt: $const108.15.1 = const(int, 0)
2023-08-13 11:42:38,386 on stmt: $const112.17.1 = const(int, 0)
2023-08-13 11:42:38,386 on stmt: $const114.18.1 = const(NoneType, None)
2023-08-13 11:42:38,386 on stmt: $116build_slice.19.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:38,386 on stmt: $116build_slice.20.1 = call $116build_slice.19.1($const112.17.1, $const114.18.1, func=$116build_slice.19.1, args=(Var($const112.17.1, <string>:5), Var($const114.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,386 on stmt: out0[$116build_slice.20.1] = $const108.15.1
2023-08-13 11:42:38,386 on stmt: $122load_global.21.1 = global(range: <class 'range'>)
2023-08-13 11:42:38,386 on stmt: $134load_global.23.1 = global(min: <built-in function min>)
2023-08-13 11:42:38,387 on stmt: $const146.25.1 = const(int, 0)
2023-08-13 11:42:38,387 on stmt: $const148.26.1 = const(int, -1)
2023-08-13 11:42:38,387 on stmt: $154call.27.1 = call $134load_global.23.1($const146.25.1, $const148.26.1, func=$134load_global.23.1, args=[Var($const146.25.1, <string>:6), Var($const148.26.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,387 on stmt: $164unary_negative.28.1 = unary(fn=<built-in function neg>, value=$154call.27.1)
2023-08-13 11:42:38,387 on stmt: $const168.30.1 = const(int, 0)
2023-08-13 11:42:38,387 on stmt: $170binary_subscr.31.1 = getitem(value=full_shape0, index=$const168.30.1, fn=<built-in function getitem>)
2023-08-13 11:42:38,387 on stmt: $180load_global.32.1 = global(max: <built-in function max>)
2023-08-13 11:42:38,387 on stmt: $const192.34.1 = const(int, 0)
2023-08-13 11:42:38,387 on stmt: $const194.35.1 = const(int, 0)
2023-08-13 11:42:38,387 on stmt: $200call.36.1 = call $180load_global.32.1($const192.34.1, $const194.35.1, func=$180load_global.32.1, args=[Var($const192.34.1, <string>:6), Var($const194.35.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,387 on stmt: $binop_sub210.37.1 = $170binary_subscr.31.1 - $200call.36.1
2023-08-13 11:42:38,387 on stmt: $218call.38.1 = call $122load_global.21.1($164unary_negative.28.1, $binop_sub210.37.1, func=$122load_global.21.1, args=[Var($164unary_negative.28.1, <string>:6), Var($binop_sub210.37.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,387 on stmt: $228get_iter.39.1 = getiter(value=$218call.38.1)
2023-08-13 11:42:38,387 on stmt: $phi230.0.1 = $228get_iter.39.1
2023-08-13 11:42:38,387 on stmt: jump 230
2023-08-13 11:42:38,388 ==== SSA block rewrite pass on 230
2023-08-13 11:42:38,388 Running <numba.core.ssa._FixSSAVars object at 0x000001F69620A610>
2023-08-13 11:42:38,388 on stmt: $230for_iter.1.1 = iternext(value=$phi230.0.1)
2023-08-13 11:42:38,388 on stmt: $230for_iter.2.1 = pair_first(value=$230for_iter.1.1)
2023-08-13 11:42:38,388 on stmt: $230for_iter.3.1 = pair_second(value=$230for_iter.1.1)
2023-08-13 11:42:38,388 on stmt: $phi232.1.1 = $230for_iter.2.1
2023-08-13 11:42:38,388 on stmt: branch $230for_iter.3.1, 232, 442
2023-08-13 11:42:38,388 ==== SSA block rewrite pass on 232
2023-08-13 11:42:38,388 Running <numba.core.ssa._FixSSAVars object at 0x000001F69620A610>
2023-08-13 11:42:38,388 on stmt: index00 = $phi232.1.1
2023-08-13 11:42:38,388 on stmt: jump 240
2023-08-13 11:42:38,388 ==== SSA block rewrite pass on 442
2023-08-13 11:42:38,388 Running <numba.core.ssa._FixSSAVars object at 0x000001F69620A610>
2023-08-13 11:42:38,388 on stmt: $242return_value.1.1 = cast(value=out0)
2023-08-13 11:42:38,388 on stmt: return $242return_value.1.1
2023-08-13 11:42:38,388 ==== SSA block rewrite pass on 240
2023-08-13 11:42:38,388 Running <numba.core.ssa._FixSSAVars object at 0x000001F69620A610>
2023-08-13 11:42:38,388 on stmt: $const6.1 = const(int, 0)
2023-08-13 11:42:38,388 on stmt: stencil_index = $const6.1 + index00
2023-08-13 11:42:38,388 on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:38,388 on stmt: $22unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2023-08-13 11:42:38,388 on stmt: $30compare_op.6 = $22unary_negative.4 <= x0
2023-08-13 11:42:38,389 find_def var='x0' stmt=$30compare_op.6 = $22unary_negative.4 <= x0
2023-08-13 11:42:38,389 on stmt: bool36 = global(bool: <class 'bool'>)
2023-08-13 11:42:38,389 on stmt: $36pred = call bool36($30compare_op.6, func=bool36, args=(Var($30compare_op.6, audio.py:1148),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,389 on stmt: $phi38.0 = x0
2023-08-13 11:42:38,389 find_def var='x0' stmt=$phi38.0 = x0
2023-08-13 11:42:38,389 on stmt: branch $36pred, 241, 291
2023-08-13 11:42:38,389 ==== SSA block rewrite pass on 241
2023-08-13 11:42:38,389 Running <numba.core.ssa._FixSSAVars object at 0x000001F69620A610>
2023-08-13 11:42:38,389 on stmt: $40compare_op.2 = x0 <= threshold
2023-08-13 11:42:38,389 find_def var='x0' stmt=$40compare_op.2 = x0 <= threshold
2023-08-13 11:42:38,389 find_def_from_top label 241
2023-08-13 11:42:38,389 idom 240 from label 241
2023-08-13 11:42:38,389 find_def_from_bottom label 240
2023-08-13 11:42:38,389 on stmt: bool46 = global(bool: <class 'bool'>)
2023-08-13 11:42:38,389 on stmt: $46pred = call bool46($40compare_op.2, func=bool46, args=(Var($40compare_op.2, audio.py:1148),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,389 on stmt: branch $46pred, 279, 295
2023-08-13 11:42:38,389 ==== SSA block rewrite pass on 279
2023-08-13 11:42:38,389 Running <numba.core.ssa._FixSSAVars object at 0x000001F69620A610>
2023-08-13 11:42:38,390 on stmt: jump 289
2023-08-13 11:42:38,390 ==== SSA block rewrite pass on 291
2023-08-13 11:42:38,390 Running <numba.core.ssa._FixSSAVars object at 0x000001F69620A610>
2023-08-13 11:42:38,390 on stmt: jump 295
2023-08-13 11:42:38,390 ==== SSA block rewrite pass on 289
2023-08-13 11:42:38,390 Running <numba.core.ssa._FixSSAVars object at 0x000001F69620A610>
2023-08-13 11:42:38,390 on stmt: x0.1 = const(int, 0)
2023-08-13 11:42:38,390 on stmt: jump 295
2023-08-13 11:42:38,390 ==== SSA block rewrite pass on 295
2023-08-13 11:42:38,390 Running <numba.core.ssa._FixSSAVars object at 0x000001F69620A610>
2023-08-13 11:42:38,390 on stmt: $const60.1 = const(int, -1)
2023-08-13 11:42:38,390 on stmt: stencil_index.1 = $const60.1 + index00
2023-08-13 11:42:38,390 on stmt: x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2023-08-13 11:42:38,390 on stmt: $76unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2023-08-13 11:42:38,390 on stmt: $84compare_op.6 = $76unary_negative.4 <= x1
2023-08-13 11:42:38,390 on stmt: bool90 = global(bool: <class 'bool'>)
2023-08-13 11:42:38,390 on stmt: $90pred = call bool90($84compare_op.6, func=bool90, args=(Var($84compare_op.6, audio.py:1152),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,390 on stmt: $phi92.0 = x1
2023-08-13 11:42:38,390 on stmt: branch $90pred, 299, 345
2023-08-13 11:42:38,390 ==== SSA block rewrite pass on 299
2023-08-13 11:42:38,390 Running <numba.core.ssa._FixSSAVars object at 0x000001F69620A610>
2023-08-13 11:42:38,390 on stmt: $94compare_op.2 = x1 <= threshold
2023-08-13 11:42:38,390 on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-13 11:42:38,391 on stmt: $100pred = call bool100($94compare_op.2, func=bool100, args=(Var($94compare_op.2, audio.py:1152),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,391 on stmt: branch $100pred, 333, 349
2023-08-13 11:42:38,391 ==== SSA block rewrite pass on 333
2023-08-13 11:42:38,391 Running <numba.core.ssa._FixSSAVars object at 0x000001F69620A610>
2023-08-13 11:42:38,391 on stmt: jump 343
2023-08-13 11:42:38,391 ==== SSA block rewrite pass on 345
2023-08-13 11:42:38,391 Running <numba.core.ssa._FixSSAVars object at 0x000001F69620A610>
2023-08-13 11:42:38,391 on stmt: jump 349
2023-08-13 11:42:38,391 ==== SSA block rewrite pass on 343
2023-08-13 11:42:38,391 Running <numba.core.ssa._FixSSAVars object at 0x000001F69620A610>
2023-08-13 11:42:38,391 on stmt: x1.1 = const(int, 0)
2023-08-13 11:42:38,391 on stmt: jump 349
2023-08-13 11:42:38,391 ==== SSA block rewrite pass on 349
2023-08-13 11:42:38,391 Running <numba.core.ssa._FixSSAVars object at 0x000001F69620A610>
2023-08-13 11:42:38,391 on stmt: x1.2 = phi(incoming_values=[Var(x1, audio.py:1151), Var(x1, audio.py:1151), Var(x1.1, audio.py:1153)], incoming_blocks=[345, 299, 343])
2023-08-13 11:42:38,391 on stmt: bool114 = global(bool: <class 'bool'>)
2023-08-13 11:42:38,391 on stmt: $114pred = call bool114(zero_pos, func=bool114, args=(Var(zero_pos, audio.py:1144),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,391 on stmt: branch $114pred, 353, 357
2023-08-13 11:42:38,391 ==== SSA block rewrite pass on 353
2023-08-13 11:42:38,391 Running <numba.core.ssa._FixSSAVars object at 0x000001F69620A610>
2023-08-13 11:42:38,391 on stmt: $116load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:38,391 on stmt: $128load_attr.2 = getattr(value=$116load_global.0, attr=signbit)
2023-08-13 11:42:38,392 on stmt: $144call.4 = call $128load_attr.2(x0, func=$128load_attr.2, args=[Var(x0, audio.py:1147)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,392 find_def var='x0' stmt=$144call.4 = call $128load_attr.2(x0, func=$128load_attr.2, args=[Var(x0, audio.py:1147)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,392 find_def_from_top label 353
2023-08-13 11:42:38,392 idom 349 from label 353
2023-08-13 11:42:38,392 find_def_from_bottom label 349
2023-08-13 11:42:38,392 find_def_from_top label 349
2023-08-13 11:42:38,392 idom 295 from label 349
2023-08-13 11:42:38,392 find_def_from_bottom label 295
2023-08-13 11:42:38,392 find_def_from_top label 295
2023-08-13 11:42:38,392 insert phi node x0.2 = phi(incoming_values=[], incoming_blocks=[]) at 295
2023-08-13 11:42:38,392 find_def_from_bottom label 241
2023-08-13 11:42:38,392 find_def_from_top label 241
2023-08-13 11:42:38,392 idom 240 from label 241
2023-08-13 11:42:38,392 find_def_from_bottom label 240
2023-08-13 11:42:38,392 incoming_def x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:38,392 find_def_from_bottom label 291
2023-08-13 11:42:38,392 find_def_from_top label 291
2023-08-13 11:42:38,392 idom 240 from label 291
2023-08-13 11:42:38,392 find_def_from_bottom label 240
2023-08-13 11:42:38,392 incoming_def x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:38,392 find_def_from_bottom label 289
2023-08-13 11:42:38,393 incoming_def x0.1 = const(int, 0)
2023-08-13 11:42:38,393 replaced with: $144call.4 = call $128load_attr.2(x0.2, func=$128load_attr.2, args=[Var(x0.2, audio.py:1156)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,393 on stmt: $154load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:38,393 on stmt: $166load_attr.7 = getattr(value=$154load_global.5, attr=signbit)
2023-08-13 11:42:38,393 on stmt: $182call.9 = call $166load_attr.7(x1.2, func=$166load_attr.7, args=[Var(x1.2, audio.py:1156)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,393 on stmt: $192compare_op.10 = $144call.4 != $182call.9
2023-08-13 11:42:38,393 on stmt: $198return_value.11 = cast(value=$192compare_op.10)
2023-08-13 11:42:38,393 on stmt: out0[index00] = $198return_value.11
2023-08-13 11:42:38,393 on stmt: jump 441
2023-08-13 11:42:38,393 ==== SSA block rewrite pass on 357
2023-08-13 11:42:38,393 Running <numba.core.ssa._FixSSAVars object at 0x000001F69620A610>
2023-08-13 11:42:38,393 on stmt: $200load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:38,393 on stmt: $212load_attr.2 = getattr(value=$200load_global.0, attr=sign)
2023-08-13 11:42:38,393 on stmt: $228call.4 = call $212load_attr.2(x0, func=$212load_attr.2, args=[Var(x0, audio.py:1147)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,393 find_def var='x0' stmt=$228call.4 = call $212load_attr.2(x0, func=$212load_attr.2, args=[Var(x0, audio.py:1147)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,393 find_def_from_top label 357
2023-08-13 11:42:38,393 idom 349 from label 357
2023-08-13 11:42:38,393 find_def_from_bottom label 349
2023-08-13 11:42:38,393 find_def_from_top label 349
2023-08-13 11:42:38,393 idom 295 from label 349
2023-08-13 11:42:38,394 find_def_from_bottom label 295
2023-08-13 11:42:38,394 replaced with: $228call.4 = call $212load_attr.2(x0.2, func=$212load_attr.2, args=[Var(x0.2, audio.py:1156)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,394 on stmt: $238load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:38,394 on stmt: $250load_attr.7 = getattr(value=$238load_global.5, attr=sign)
2023-08-13 11:42:38,394 on stmt: $266call.9 = call $250load_attr.7(x1.2, func=$250load_attr.7, args=[Var(x1.2, audio.py:1156)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,394 on stmt: $276compare_op.10 = $228call.4 != $266call.9
2023-08-13 11:42:38,394 on stmt: $282return_value.11 = cast(value=$276compare_op.10)
2023-08-13 11:42:38,394 on stmt: out0[index00] = $282return_value.11
2023-08-13 11:42:38,394 on stmt: jump 441
2023-08-13 11:42:38,394 ==== SSA block rewrite pass on 441
2023-08-13 11:42:38,394 Running <numba.core.ssa._FixSSAVars object at 0x000001F69620A610>
2023-08-13 11:42:38,394 on stmt: jump 230
2023-08-13 11:42:38,414 bytecode dump:
>          0	NOP(arg=None, lineno=4253)
           2	COPY_FREE_VARS(arg=1, lineno=4253)
           4	RESUME(arg=0, lineno=4253)
           6	LOAD_GLOBAL(arg=1, lineno=4254)
          18	LOAD_FAST(arg=0, lineno=4254)
          20	LOAD_FAST(arg=1, lineno=4254)
          22	LOAD_DEREF(arg=2, lineno=4254)
          24	PRECALL(arg=3, lineno=4254)
          28	CALL(arg=3, lineno=4254)
          38	RETURN_VALUE(arg=None, lineno=4254)
2023-08-13 11:42:38,414 pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-13 11:42:38,414 stack: []
2023-08-13 11:42:38,414 state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-13 11:42:38,414 dispatch pc=0, inst=NOP(arg=None, lineno=4253)
2023-08-13 11:42:38,414 stack []
2023-08-13 11:42:38,414 dispatch pc=2, inst=COPY_FREE_VARS(arg=1, lineno=4253)
2023-08-13 11:42:38,414 stack []
2023-08-13 11:42:38,414 dispatch pc=4, inst=RESUME(arg=0, lineno=4253)
2023-08-13 11:42:38,415 stack []
2023-08-13 11:42:38,415 dispatch pc=6, inst=LOAD_GLOBAL(arg=1, lineno=4254)
2023-08-13 11:42:38,415 stack []
2023-08-13 11:42:38,415 dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=4254)
2023-08-13 11:42:38,415 stack ['$null$6.1', '$6load_global.0']
2023-08-13 11:42:38,415 dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=4254)
2023-08-13 11:42:38,415 stack ['$null$6.1', '$6load_global.0', '$shape18.2']
2023-08-13 11:42:38,415 dispatch pc=22, inst=LOAD_DEREF(arg=2, lineno=4254)
2023-08-13 11:42:38,415 stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3']
2023-08-13 11:42:38,415 dispatch pc=24, inst=PRECALL(arg=3, lineno=4254)
2023-08-13 11:42:38,415 stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3', '$22load_deref.4']
2023-08-13 11:42:38,415 dispatch pc=28, inst=CALL(arg=3, lineno=4254)
2023-08-13 11:42:38,415 stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3', '$22load_deref.4']
2023-08-13 11:42:38,415 dispatch pc=38, inst=RETURN_VALUE(arg=None, lineno=4254)
2023-08-13 11:42:38,415 stack ['$28call.5']
2023-08-13 11:42:38,415 end state. edges=[]
2023-08-13 11:42:38,416 -------------------------Prune PHIs-------------------------
2023-08-13 11:42:38,416 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-08-13 11:42:38,416 defmap: {}
2023-08-13 11:42:38,416 phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:38,416 changing phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:38,416 keep phismap: {}
2023-08-13 11:42:38,416 new_out: defaultdict(<class 'dict'>, {})
2023-08-13 11:42:38,416 ----------------------DONE Prune PHIs-----------------------
2023-08-13 11:42:38,416 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {}), (6, {'idx': 0, 'res': '$6load_global.0'}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {}), (18, {'res': '$shape18.2'}), (20, {'res': '$dtype20.3'}), (22, {'res': '$22load_deref.4'}), (24, {}), (26, {}), (28, {'func': '$6load_global.0', 'args': ['$shape18.2', '$dtype20.3', '$22load_deref.4'], 'kw_names': None, 'res': '$28call.5'}), (30, {}), (32, {}), (34, {}), (36, {}), (38, {'retval': '$28call.5', 'castval': '$38return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:38,416 label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $6load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$6load_global.0']
    $22load_deref.4 = freevar(retty: array(bool, 1d, C)) ['$22load_deref.4']
    $28call.5 = call $6load_global.0(shape, dtype, $22load_deref.4, func=$6load_global.0, args=[Var(shape, arrayobj.py:4253), Var(dtype, arrayobj.py:4253), Var($22load_deref.4, arrayobj.py:4254)], kws=(), vararg=None, varkwarg=None, target=None) ['$22load_deref.4', '$28call.5', '$6load_global.0', 'dtype', 'shape']
    $38return_value.6 = cast(value=$28call.5) ['$28call.5', '$38return_value.6']
    return $38return_value.6                 ['$38return_value.6']

2023-08-13 11:42:38,420 ==== SSA block analysis pass on 0
2023-08-13 11:42:38,420 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F69621CBD0>
2023-08-13 11:42:38,420 on stmt: shape = arg(0, name=shape)
2023-08-13 11:42:38,420 on stmt: dtype = arg(1, name=dtype)
2023-08-13 11:42:38,422 on stmt: $6load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
2023-08-13 11:42:38,422 on stmt: $22load_deref.4 = freevar(retty: array(bool, 1d, C))
2023-08-13 11:42:38,422 on stmt: $28call.5 = call $6load_global.0(shape, dtype, $22load_deref.4, func=$6load_global.0, args=[Var(shape, arrayobj.py:4253), Var(dtype, arrayobj.py:4253), Var($22load_deref.4, arrayobj.py:4254)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,422 on stmt: $38return_value.6 = cast(value=$28call.5)
2023-08-13 11:42:38,422 on stmt: return $38return_value.6
2023-08-13 11:42:38,422 defs defaultdict(<class 'list'>,
            {'$22load_deref.4': [<numba.core.ir.Assign object at 0x000001F696230ED0>],
             '$28call.5': [<numba.core.ir.Assign object at 0x000001F6962309D0>],
             '$38return_value.6': [<numba.core.ir.Assign object at 0x000001F696230450>],
             '$6load_global.0': [<numba.core.ir.Assign object at 0x000001F696231DD0>],
             'dtype': [<numba.core.ir.Assign object at 0x000001F696231F90>],
             'shape': [<numba.core.ir.Assign object at 0x000001F696232510>]})
2023-08-13 11:42:38,422 SSA violators set()
2023-08-13 11:42:38,437 bytecode dump:
>          0	NOP(arg=None, lineno=4129)
           2	RESUME(arg=0, lineno=4129)
           4	LOAD_FAST(arg=0, lineno=4132)
           6	LOAD_METHOD(arg=0, lineno=4132)
          28	LOAD_FAST(arg=1, lineno=4132)
          30	LOAD_FAST(arg=2, lineno=4132)
          32	PRECALL(arg=2, lineno=4132)
          36	CALL(arg=2, lineno=4132)
          46	RETURN_VALUE(arg=None, lineno=4132)
2023-08-13 11:42:38,437 pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-13 11:42:38,437 stack: []
2023-08-13 11:42:38,437 state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-13 11:42:38,437 dispatch pc=0, inst=NOP(arg=None, lineno=4129)
2023-08-13 11:42:38,437 stack []
2023-08-13 11:42:38,437 dispatch pc=2, inst=RESUME(arg=0, lineno=4129)
2023-08-13 11:42:38,437 stack []
2023-08-13 11:42:38,437 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4132)
2023-08-13 11:42:38,437 stack []
2023-08-13 11:42:38,437 dispatch pc=6, inst=LOAD_METHOD(arg=0, lineno=4132)
2023-08-13 11:42:38,437 stack ['$arrtype4.0']
2023-08-13 11:42:38,438 dispatch pc=28, inst=LOAD_FAST(arg=1, lineno=4132)
2023-08-13 11:42:38,438 stack ['$null$6.1', '$6load_method.2']
2023-08-13 11:42:38,438 dispatch pc=30, inst=LOAD_FAST(arg=2, lineno=4132)
2023-08-13 11:42:38,438 stack ['$null$6.1', '$6load_method.2', '$size28.3']
2023-08-13 11:42:38,438 dispatch pc=32, inst=PRECALL(arg=2, lineno=4132)
2023-08-13 11:42:38,438 stack ['$null$6.1', '$6load_method.2', '$size28.3', '$align30.4']
2023-08-13 11:42:38,438 dispatch pc=36, inst=CALL(arg=2, lineno=4132)
2023-08-13 11:42:38,438 stack ['$null$6.1', '$6load_method.2', '$size28.3', '$align30.4']
2023-08-13 11:42:38,438 dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=4132)
2023-08-13 11:42:38,438 stack ['$36call.5']
2023-08-13 11:42:38,438 end state. edges=[]
2023-08-13 11:42:38,438 -------------------------Prune PHIs-------------------------
2023-08-13 11:42:38,438 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-08-13 11:42:38,438 defmap: {}
2023-08-13 11:42:38,438 phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:38,438 changing phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:38,438 keep phismap: {}
2023-08-13 11:42:38,438 new_out: defaultdict(<class 'dict'>, {})
2023-08-13 11:42:38,438 ----------------------DONE Prune PHIs-----------------------
2023-08-13 11:42:38,439 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$arrtype4.0'}), (6, {'item': '$arrtype4.0', 'res': '$6load_method.2'}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {}), (18, {}), (20, {}), (22, {}), (24, {}), (26, {}), (28, {'res': '$size28.3'}), (30, {'res': '$align30.4'}), (32, {}), (34, {}), (36, {'func': '$6load_method.2', 'args': ['$size28.3', '$align30.4'], 'kw_names': None, 'res': '$36call.5'}), (38, {}), (40, {}), (42, {}), (44, {}), (46, {'retval': '$36call.5', 'castval': '$46return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:38,439 label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $6load_method.2 = getattr(value=arrtype, attr=_allocate) ['$6load_method.2', 'arrtype']
    $36call.5 = call $6load_method.2(size, align, func=$6load_method.2, args=[Var(size, arrayobj.py:4129), Var(align, arrayobj.py:4129)], kws=(), vararg=None, varkwarg=None, target=None) ['$36call.5', '$6load_method.2', 'align', 'size']
    $46return_value.6 = cast(value=$36call.5) ['$36call.5', '$46return_value.6']
    return $46return_value.6                 ['$46return_value.6']

2023-08-13 11:42:38,448 ==== SSA block analysis pass on 0
2023-08-13 11:42:38,448 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696254D10>
2023-08-13 11:42:38,448 on stmt: arrtype = arg(0, name=arrtype)
2023-08-13 11:42:38,448 on stmt: size = arg(1, name=size)
2023-08-13 11:42:38,448 on stmt: align = arg(2, name=align)
2023-08-13 11:42:38,448 on stmt: $6load_method.2 = getattr(value=arrtype, attr=_allocate)
2023-08-13 11:42:38,448 on stmt: $36call.5 = call $6load_method.2(size, align, func=$6load_method.2, args=[Var(size, arrayobj.py:4129), Var(align, arrayobj.py:4129)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,448 on stmt: $46return_value.6 = cast(value=$36call.5)
2023-08-13 11:42:38,449 on stmt: return $46return_value.6
2023-08-13 11:42:38,449 defs defaultdict(<class 'list'>,
            {'$36call.5': [<numba.core.ir.Assign object at 0x000001F696254C50>],
             '$46return_value.6': [<numba.core.ir.Assign object at 0x000001F696254ED0>],
             '$6load_method.2': [<numba.core.ir.Assign object at 0x000001F696254510>],
             'align': [<numba.core.ir.Assign object at 0x000001F696254050>],
             'arrtype': [<numba.core.ir.Assign object at 0x000001F69624FE50>],
             'size': [<numba.core.ir.Assign object at 0x000001F69624FF10>]})
2023-08-13 11:42:38,449 SSA violators set()
2023-08-13 11:42:38,453 bytecode dump:
>          0	NOP(arg=None, lineno=4124)
           2	RESUME(arg=0, lineno=4124)
           4	LOAD_GLOBAL(arg=1, lineno=4125)
          16	LOAD_FAST(arg=1, lineno=4125)
          18	LOAD_FAST(arg=2, lineno=4125)
          20	PRECALL(arg=2, lineno=4125)
          24	CALL(arg=2, lineno=4125)
          34	RETURN_VALUE(arg=None, lineno=4125)
2023-08-13 11:42:38,453 pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-13 11:42:38,453 stack: []
2023-08-13 11:42:38,453 state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-13 11:42:38,454 dispatch pc=0, inst=NOP(arg=None, lineno=4124)
2023-08-13 11:42:38,454 stack []
2023-08-13 11:42:38,454 dispatch pc=2, inst=RESUME(arg=0, lineno=4124)
2023-08-13 11:42:38,454 stack []
2023-08-13 11:42:38,454 dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=4125)
2023-08-13 11:42:38,454 stack []
2023-08-13 11:42:38,454 dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=4125)
2023-08-13 11:42:38,454 stack ['$null$4.1', '$4load_global.0']
2023-08-13 11:42:38,454 dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=4125)
2023-08-13 11:42:38,454 stack ['$null$4.1', '$4load_global.0', '$allocsize16.2']
2023-08-13 11:42:38,454 dispatch pc=20, inst=PRECALL(arg=2, lineno=4125)
2023-08-13 11:42:38,454 stack ['$null$4.1', '$4load_global.0', '$allocsize16.2', '$align18.3']
2023-08-13 11:42:38,454 dispatch pc=24, inst=CALL(arg=2, lineno=4125)
2023-08-13 11:42:38,454 stack ['$null$4.1', '$4load_global.0', '$allocsize16.2', '$align18.3']
2023-08-13 11:42:38,454 dispatch pc=34, inst=RETURN_VALUE(arg=None, lineno=4125)
2023-08-13 11:42:38,454 stack ['$24call.4']
2023-08-13 11:42:38,454 end state. edges=[]
2023-08-13 11:42:38,454 -------------------------Prune PHIs-------------------------
2023-08-13 11:42:38,454 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-08-13 11:42:38,455 defmap: {}
2023-08-13 11:42:38,455 phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:38,455 changing phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:38,455 keep phismap: {}
2023-08-13 11:42:38,455 new_out: defaultdict(<class 'dict'>, {})
2023-08-13 11:42:38,455 ----------------------DONE Prune PHIs-----------------------
2023-08-13 11:42:38,455 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'res': '$allocsize16.2'}), (18, {'res': '$align18.3'}), (20, {}), (22, {}), (24, {'func': '$4load_global.0', 'args': ['$allocsize16.2', '$align18.3'], 'kw_names': None, 'res': '$24call.4'}), (26, {}), (28, {}), (30, {}), (32, {}), (34, {'retval': '$24call.4', 'castval': '$34return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:38,455 label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $4load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$4load_global.0']
    $24call.4 = call $4load_global.0(allocsize, align, func=$4load_global.0, args=[Var(allocsize, arrayobj.py:4124), Var(align, arrayobj.py:4124)], kws=(), vararg=None, varkwarg=None, target=None) ['$24call.4', '$4load_global.0', 'align', 'allocsize']
    $34return_value.5 = cast(value=$24call.4) ['$24call.4', '$34return_value.5']
    return $34return_value.5                 ['$34return_value.5']

2023-08-13 11:42:38,460 ==== SSA block analysis pass on 0
2023-08-13 11:42:38,460 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F69626C4D0>
2023-08-13 11:42:38,460 on stmt: cls = arg(0, name=cls)
2023-08-13 11:42:38,460 on stmt: allocsize = arg(1, name=allocsize)
2023-08-13 11:42:38,460 on stmt: align = arg(2, name=align)
2023-08-13 11:42:38,460 on stmt: $4load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
2023-08-13 11:42:38,460 on stmt: $24call.4 = call $4load_global.0(allocsize, align, func=$4load_global.0, args=[Var(allocsize, arrayobj.py:4124), Var(align, arrayobj.py:4124)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:38,460 on stmt: $34return_value.5 = cast(value=$24call.4)
2023-08-13 11:42:38,460 on stmt: return $34return_value.5
2023-08-13 11:42:38,460 defs defaultdict(<class 'list'>,
            {'$24call.4': [<numba.core.ir.Assign object at 0x000001F696267590>],
             '$34return_value.5': [<numba.core.ir.Assign object at 0x000001F696267850>],
             '$4load_global.0': [<numba.core.ir.Assign object at 0x000001F696266E50>],
             'align': [<numba.core.ir.Assign object at 0x000001F696266BD0>],
             'allocsize': [<numba.core.ir.Assign object at 0x000001F696266A90>],
             'cls': [<numba.core.ir.Assign object at 0x000001F696256390>]})
2023-08-13 11:42:38,460 SSA violators set()
2023-08-13 11:42:39,131 bytecode dump:
>          0	NOP(arg=None, lineno=1161)
           2	RESUME(arg=0, lineno=1161)
           4	LOAD_GLOBAL(arg=1, lineno=1177)
          16	LOAD_FAST(arg=0, lineno=1177)
          18	LOAD_FAST(arg=1, lineno=1177)
          20	LOAD_FAST(arg=2, lineno=1177)
          22	PRECALL(arg=3, lineno=1177)
          26	CALL(arg=3, lineno=1177)
          36	LOAD_FAST(arg=3, lineno=1177)
          38	LOAD_CONST(arg=1, lineno=1177)
          40	LOAD_CONST(arg=1, lineno=1177)
          42	BUILD_SLICE(arg=2, lineno=1177)
          44	STORE_SUBSCR(arg=None, lineno=1177)
          48	LOAD_CONST(arg=1, lineno=1177)
          50	RETURN_VALUE(arg=None, lineno=1177)
2023-08-13 11:42:39,131 pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-13 11:42:39,131 stack: []
2023-08-13 11:42:39,131 state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-13 11:42:39,131 dispatch pc=0, inst=NOP(arg=None, lineno=1161)
2023-08-13 11:42:39,132 stack []
2023-08-13 11:42:39,132 dispatch pc=2, inst=RESUME(arg=0, lineno=1161)
2023-08-13 11:42:39,132 stack []
2023-08-13 11:42:39,132 dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=1177)
2023-08-13 11:42:39,132 stack []
2023-08-13 11:42:39,132 dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1177)
2023-08-13 11:42:39,132 stack ['$null$4.1', '$4load_global.0']
2023-08-13 11:42:39,132 dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=1177)
2023-08-13 11:42:39,132 stack ['$null$4.1', '$4load_global.0', '$x16.2']
2023-08-13 11:42:39,132 dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=1177)
2023-08-13 11:42:39,132 stack ['$null$4.1', '$4load_global.0', '$x16.2', '$threshold18.3']
2023-08-13 11:42:39,132 dispatch pc=22, inst=PRECALL(arg=3, lineno=1177)
2023-08-13 11:42:39,132 stack ['$null$4.1', '$4load_global.0', '$x16.2', '$threshold18.3', '$zero_pos20.4']
2023-08-13 11:42:39,132 dispatch pc=26, inst=CALL(arg=3, lineno=1177)
2023-08-13 11:42:39,132 stack ['$null$4.1', '$4load_global.0', '$x16.2', '$threshold18.3', '$zero_pos20.4']
2023-08-13 11:42:39,133 dispatch pc=36, inst=LOAD_FAST(arg=3, lineno=1177)
2023-08-13 11:42:39,133 stack ['$26call.5']
2023-08-13 11:42:39,133 dispatch pc=38, inst=LOAD_CONST(arg=1, lineno=1177)
2023-08-13 11:42:39,133 stack ['$26call.5', '$y36.6']
2023-08-13 11:42:39,133 dispatch pc=40, inst=LOAD_CONST(arg=1, lineno=1177)
2023-08-13 11:42:39,133 stack ['$26call.5', '$y36.6', '$const38.7']
2023-08-13 11:42:39,133 dispatch pc=42, inst=BUILD_SLICE(arg=2, lineno=1177)
2023-08-13 11:42:39,133 stack ['$26call.5', '$y36.6', '$const38.7', '$const40.8']
2023-08-13 11:42:39,133 dispatch pc=44, inst=STORE_SUBSCR(arg=None, lineno=1177)
2023-08-13 11:42:39,133 stack ['$26call.5', '$y36.6', '$42build_slice.10']
2023-08-13 11:42:39,133 dispatch pc=48, inst=LOAD_CONST(arg=1, lineno=1177)
2023-08-13 11:42:39,133 stack []
2023-08-13 11:42:39,134 dispatch pc=50, inst=RETURN_VALUE(arg=None, lineno=1177)
2023-08-13 11:42:39,134 stack ['$const48.11']
2023-08-13 11:42:39,134 end state. edges=[]
2023-08-13 11:42:39,134 -------------------------Prune PHIs-------------------------
2023-08-13 11:42:39,134 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-08-13 11:42:39,134 defmap: {}
2023-08-13 11:42:39,134 phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:39,134 changing phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:39,134 keep phismap: {}
2023-08-13 11:42:39,135 new_out: defaultdict(<class 'dict'>, {})
2023-08-13 11:42:39,135 ----------------------DONE Prune PHIs-----------------------
2023-08-13 11:42:39,135 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'res': '$x16.2'}), (18, {'res': '$threshold18.3'}), (20, {'res': '$zero_pos20.4'}), (22, {}), (24, {}), (26, {'func': '$4load_global.0', 'args': ['$x16.2', '$threshold18.3', '$zero_pos20.4'], 'kw_names': None, 'res': '$26call.5'}), (28, {}), (30, {}), (32, {}), (34, {}), (36, {'res': '$y36.6'}), (38, {'res': '$const38.7'}), (40, {'res': '$const40.8'}), (42, {'start': '$const38.7', 'stop': '$const40.8', 'step': None, 'res': '$42build_slice.10', 'slicevar': '$42build_slice.9'}), (44, {'target': '$y36.6', 'index': '$42build_slice.10', 'value': '$26call.5'}), (46, {}), (48, {'res': '$const48.11'}), (50, {'retval': '$const48.11', 'castval': '$50return_value.12'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:39,137 label 0:
    x = arg(0, name=x)                       ['x']
    threshold = arg(1, name=threshold)       ['threshold']
    zero_pos = arg(2, name=zero_pos)         ['zero_pos']
    y = arg(3, name=y)                       ['y']
    $4load_global.0 = global(_zc_stencil: <numba.stencils.stencil.StencilFunc object at 0x000001F690DC6590>) ['$4load_global.0']
    $26call.5 = call $4load_global.0(x, threshold, zero_pos, func=$4load_global.0, args=[Var(x, audio.py:1161), Var(threshold, audio.py:1161), Var(zero_pos, audio.py:1161)], kws=(), vararg=None, varkwarg=None, target=None) ['$26call.5', '$4load_global.0', 'threshold', 'x', 'zero_pos']
    $const38.7 = const(NoneType, None)       ['$const38.7']
    $const40.8 = const(NoneType, None)       ['$const40.8']
    $42build_slice.9 = global(slice: <class 'slice'>) ['$42build_slice.9']
    $42build_slice.10 = call $42build_slice.9($const38.7, $const40.8, func=$42build_slice.9, args=(Var($const38.7, audio.py:1177), Var($const40.8, audio.py:1177)), kws=(), vararg=None, varkwarg=None, target=None) ['$42build_slice.10', '$42build_slice.9', '$const38.7', '$const40.8']
    y[$42build_slice.10] = $26call.5         ['$26call.5', '$42build_slice.10', 'y']
    $const48.11 = const(NoneType, None)      ['$const48.11']
    $50return_value.12 = cast(value=$const48.11) ['$50return_value.12', '$const48.11']
    return $50return_value.12                ['$50return_value.12']

2023-08-13 11:42:39,143 ==== SSA block analysis pass on 0
2023-08-13 11:42:39,143 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6966E2590>
2023-08-13 11:42:39,143 on stmt: x = arg(0, name=x)
2023-08-13 11:42:39,143 on stmt: threshold = arg(1, name=threshold)
2023-08-13 11:42:39,143 on stmt: zero_pos = arg(2, name=zero_pos)
2023-08-13 11:42:39,144 on stmt: y = arg(3, name=y)
2023-08-13 11:42:39,144 on stmt: $4load_global.0 = global(_zc_stencil: <numba.stencils.stencil.StencilFunc object at 0x000001F690DC6590>)
2023-08-13 11:42:39,144 on stmt: $26call.5 = call $4load_global.0(x, threshold, zero_pos, func=$4load_global.0, args=[Var(x, audio.py:1161), Var(threshold, audio.py:1161), Var(zero_pos, audio.py:1161)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,144 on stmt: $const38.7 = const(NoneType, None)
2023-08-13 11:42:39,144 on stmt: $const40.8 = const(NoneType, None)
2023-08-13 11:42:39,144 on stmt: $42build_slice.9 = global(slice: <class 'slice'>)
2023-08-13 11:42:39,144 on stmt: $42build_slice.10 = call $42build_slice.9($const38.7, $const40.8, func=$42build_slice.9, args=(Var($const38.7, audio.py:1177), Var($const40.8, audio.py:1177)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,144 on stmt: y[slice(None, None, None)] = $26call.5
2023-08-13 11:42:39,144 on stmt: $const48.11 = const(NoneType, None)
2023-08-13 11:42:39,144 on stmt: $50return_value.12 = cast(value=$const48.11)
2023-08-13 11:42:39,144 on stmt: return $50return_value.12
2023-08-13 11:42:39,144 defs defaultdict(<class 'list'>,
            {'$26call.5': [<numba.core.ir.Assign object at 0x000001F6966E1A10>],
             '$42build_slice.10': [<numba.core.ir.Assign object at 0x000001F6966E0CD0>],
             '$42build_slice.9': [<numba.core.ir.Assign object at 0x000001F6966E0410>],
             '$4load_global.0': [<numba.core.ir.Assign object at 0x000001F6966E2450>],
             '$50return_value.12': [<numba.core.ir.Assign object at 0x000001F6966E0A90>],
             '$const38.7': [<numba.core.ir.Assign object at 0x000001F6966E0B10>],
             '$const40.8': [<numba.core.ir.Assign object at 0x000001F6966E1010>],
             '$const48.11': [<numba.core.ir.Assign object at 0x000001F6966E0C50>],
             'threshold': [<numba.core.ir.Assign object at 0x000001F6966E2A10>],
             'x': [<numba.core.ir.Assign object at 0x000001F6966E2890>],
             'y': [<numba.core.ir.Assign object at 0x000001F6966E2550>],
             'zero_pos': [<numba.core.ir.Assign object at 0x000001F6966E2650>]})
2023-08-13 11:42:39,144 SSA violators set()
2023-08-13 11:42:39,295 bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	RESUME(arg=0, lineno=1)
           4	LOAD_FAST(arg=0, lineno=2)
           6	LOAD_ATTR(arg=0, lineno=2)
          16	STORE_FAST(arg=3, lineno=2)
          18	LOAD_GLOBAL(arg=2, lineno=3)
          30	LOAD_METHOD(arg=2, lineno=3)
          52	LOAD_FAST(arg=3, lineno=3)
          54	LOAD_GLOBAL(arg=2, lineno=3)
          66	LOAD_ATTR(arg=3, lineno=3)
          76	KW_NAMES(arg=1, lineno=3)
          78	PRECALL(arg=2, lineno=3)
          82	CALL(arg=2, lineno=3)
          92	STORE_FAST(arg=4, lineno=3)
          94	LOAD_CONST(arg=2, lineno=4)
          96	LOAD_FAST(arg=4, lineno=4)
          98	LOAD_CONST(arg=0, lineno=4)
         100	LOAD_CONST(arg=3, lineno=4)
         102	BUILD_SLICE(arg=2, lineno=4)
         104	STORE_SUBSCR(arg=None, lineno=4)
         108	LOAD_CONST(arg=2, lineno=5)
         110	LOAD_FAST(arg=4, lineno=5)
         112	LOAD_CONST(arg=2, lineno=5)
         114	LOAD_CONST(arg=0, lineno=5)
         116	BUILD_SLICE(arg=2, lineno=5)
         118	STORE_SUBSCR(arg=None, lineno=5)
         122	LOAD_GLOBAL(arg=9, lineno=6)
         134	LOAD_GLOBAL(arg=11, lineno=6)
         146	LOAD_CONST(arg=2, lineno=6)
         148	LOAD_CONST(arg=4, lineno=6)
         150	PRECALL(arg=2, lineno=6)
         154	CALL(arg=2, lineno=6)
         164	UNARY_NEGATIVE(arg=None, lineno=6)
         166	LOAD_FAST(arg=3, lineno=6)
         168	LOAD_CONST(arg=2, lineno=6)
         170	BINARY_SUBSCR(arg=None, lineno=6)
         180	LOAD_GLOBAL(arg=13, lineno=6)
         192	LOAD_CONST(arg=2, lineno=6)
         194	LOAD_CONST(arg=2, lineno=6)
         196	PRECALL(arg=2, lineno=6)
         200	CALL(arg=2, lineno=6)
         210	BINARY_OP(arg=10, lineno=6)
         214	PRECALL(arg=2, lineno=6)
         218	CALL(arg=2, lineno=6)
         228	GET_ITER(arg=None, lineno=6)
>        230	FOR_ITER(arg=4, lineno=6)
         232	STORE_FAST(arg=5, lineno=6)
         234	LOAD_CONST(arg=2, lineno=7)
         236	STORE_FAST(arg=6, lineno=7)
         238	JUMP_BACKWARD(arg=5, lineno=7)
>        240	LOAD_FAST(arg=4, lineno=8)
         242	RETURN_VALUE(arg=None, lineno=8)
2023-08-13 11:42:39,295 pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-13 11:42:39,296 stack: []
2023-08-13 11:42:39,296 state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-13 11:42:39,296 dispatch pc=0, inst=NOP(arg=None, lineno=1)
2023-08-13 11:42:39,296 stack []
2023-08-13 11:42:39,296 dispatch pc=2, inst=RESUME(arg=0, lineno=1)
2023-08-13 11:42:39,296 stack []
2023-08-13 11:42:39,296 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2)
2023-08-13 11:42:39,296 stack []
2023-08-13 11:42:39,296 dispatch pc=6, inst=LOAD_ATTR(arg=0, lineno=2)
2023-08-13 11:42:39,297 stack ['$x4.0']
2023-08-13 11:42:39,297 dispatch pc=16, inst=STORE_FAST(arg=3, lineno=2)
2023-08-13 11:42:39,297 stack ['$6load_attr.1']
2023-08-13 11:42:39,297 dispatch pc=18, inst=LOAD_GLOBAL(arg=2, lineno=3)
2023-08-13 11:42:39,297 stack []
2023-08-13 11:42:39,297 dispatch pc=30, inst=LOAD_METHOD(arg=2, lineno=3)
2023-08-13 11:42:39,297 stack ['$18load_global.2']
2023-08-13 11:42:39,298 dispatch pc=52, inst=LOAD_FAST(arg=3, lineno=3)
2023-08-13 11:42:39,298 stack ['$null$30.3', '$30load_method.4']
2023-08-13 11:42:39,298 dispatch pc=54, inst=LOAD_GLOBAL(arg=2, lineno=3)
2023-08-13 11:42:39,298 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5']
2023-08-13 11:42:39,298 dispatch pc=66, inst=LOAD_ATTR(arg=3, lineno=3)
2023-08-13 11:42:39,298 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$54load_global.6']
2023-08-13 11:42:39,298 dispatch pc=76, inst=KW_NAMES(arg=1, lineno=3)
2023-08-13 11:42:39,298 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$66load_attr.7']
2023-08-13 11:42:39,298 dispatch pc=78, inst=PRECALL(arg=2, lineno=3)
2023-08-13 11:42:39,299 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$66load_attr.7']
2023-08-13 11:42:39,299 dispatch pc=82, inst=CALL(arg=2, lineno=3)
2023-08-13 11:42:39,299 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$66load_attr.7']
2023-08-13 11:42:39,299 dispatch pc=92, inst=STORE_FAST(arg=4, lineno=3)
2023-08-13 11:42:39,299 stack ['$82call.8']
2023-08-13 11:42:39,299 dispatch pc=94, inst=LOAD_CONST(arg=2, lineno=4)
2023-08-13 11:42:39,299 stack []
2023-08-13 11:42:39,299 dispatch pc=96, inst=LOAD_FAST(arg=4, lineno=4)
2023-08-13 11:42:39,299 stack ['$const94.9']
2023-08-13 11:42:39,299 dispatch pc=98, inst=LOAD_CONST(arg=0, lineno=4)
2023-08-13 11:42:39,299 stack ['$const94.9', '$out096.10']
2023-08-13 11:42:39,299 dispatch pc=100, inst=LOAD_CONST(arg=3, lineno=4)
2023-08-13 11:42:39,300 stack ['$const94.9', '$out096.10', '$const98.11']
2023-08-13 11:42:39,300 dispatch pc=102, inst=BUILD_SLICE(arg=2, lineno=4)
2023-08-13 11:42:39,300 stack ['$const94.9', '$out096.10', '$const98.11', '$const100.12']
2023-08-13 11:42:39,300 dispatch pc=104, inst=STORE_SUBSCR(arg=None, lineno=4)
2023-08-13 11:42:39,300 stack ['$const94.9', '$out096.10', '$102build_slice.14']
2023-08-13 11:42:39,300 dispatch pc=108, inst=LOAD_CONST(arg=2, lineno=5)
2023-08-13 11:42:39,300 stack []
2023-08-13 11:42:39,300 dispatch pc=110, inst=LOAD_FAST(arg=4, lineno=5)
2023-08-13 11:42:39,300 stack ['$const108.15']
2023-08-13 11:42:39,301 dispatch pc=112, inst=LOAD_CONST(arg=2, lineno=5)
2023-08-13 11:42:39,301 stack ['$const108.15', '$out0110.16']
2023-08-13 11:42:39,301 dispatch pc=114, inst=LOAD_CONST(arg=0, lineno=5)
2023-08-13 11:42:39,301 stack ['$const108.15', '$out0110.16', '$const112.17']
2023-08-13 11:42:39,301 dispatch pc=116, inst=BUILD_SLICE(arg=2, lineno=5)
2023-08-13 11:42:39,301 stack ['$const108.15', '$out0110.16', '$const112.17', '$const114.18']
2023-08-13 11:42:39,301 dispatch pc=118, inst=STORE_SUBSCR(arg=None, lineno=5)
2023-08-13 11:42:39,301 stack ['$const108.15', '$out0110.16', '$116build_slice.20']
2023-08-13 11:42:39,302 dispatch pc=122, inst=LOAD_GLOBAL(arg=9, lineno=6)
2023-08-13 11:42:39,302 stack []
2023-08-13 11:42:39,302 dispatch pc=134, inst=LOAD_GLOBAL(arg=11, lineno=6)
2023-08-13 11:42:39,302 stack ['$null$122.22', '$122load_global.21']
2023-08-13 11:42:39,303 dispatch pc=146, inst=LOAD_CONST(arg=2, lineno=6)
2023-08-13 11:42:39,303 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23']
2023-08-13 11:42:39,303 dispatch pc=148, inst=LOAD_CONST(arg=4, lineno=6)
2023-08-13 11:42:39,303 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23', '$const146.25']
2023-08-13 11:42:39,303 dispatch pc=150, inst=PRECALL(arg=2, lineno=6)
2023-08-13 11:42:39,303 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23', '$const146.25', '$const148.26']
2023-08-13 11:42:39,303 dispatch pc=154, inst=CALL(arg=2, lineno=6)
2023-08-13 11:42:39,303 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23', '$const146.25', '$const148.26']
2023-08-13 11:42:39,303 dispatch pc=164, inst=UNARY_NEGATIVE(arg=None, lineno=6)
2023-08-13 11:42:39,304 stack ['$null$122.22', '$122load_global.21', '$154call.27']
2023-08-13 11:42:39,304 dispatch pc=166, inst=LOAD_FAST(arg=3, lineno=6)
2023-08-13 11:42:39,304 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28']
2023-08-13 11:42:39,304 dispatch pc=168, inst=LOAD_CONST(arg=2, lineno=6)
2023-08-13 11:42:39,304 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$full_shape0166.29']
2023-08-13 11:42:39,304 dispatch pc=170, inst=BINARY_SUBSCR(arg=None, lineno=6)
2023-08-13 11:42:39,304 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$full_shape0166.29', '$const168.30']
2023-08-13 11:42:39,304 dispatch pc=180, inst=LOAD_GLOBAL(arg=13, lineno=6)
2023-08-13 11:42:39,305 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31']
2023-08-13 11:42:39,305 dispatch pc=192, inst=LOAD_CONST(arg=2, lineno=6)
2023-08-13 11:42:39,305 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32']
2023-08-13 11:42:39,305 dispatch pc=194, inst=LOAD_CONST(arg=2, lineno=6)
2023-08-13 11:42:39,305 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32', '$const192.34']
2023-08-13 11:42:39,305 dispatch pc=196, inst=PRECALL(arg=2, lineno=6)
2023-08-13 11:42:39,305 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32', '$const192.34', '$const194.35']
2023-08-13 11:42:39,305 dispatch pc=200, inst=CALL(arg=2, lineno=6)
2023-08-13 11:42:39,305 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32', '$const192.34', '$const194.35']
2023-08-13 11:42:39,306 dispatch pc=210, inst=BINARY_OP(arg=10, lineno=6)
2023-08-13 11:42:39,306 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$200call.36']
2023-08-13 11:42:39,306 dispatch pc=214, inst=PRECALL(arg=2, lineno=6)
2023-08-13 11:42:39,306 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$binop_sub210.37']
2023-08-13 11:42:39,306 dispatch pc=218, inst=CALL(arg=2, lineno=6)
2023-08-13 11:42:39,306 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$binop_sub210.37']
2023-08-13 11:42:39,306 dispatch pc=228, inst=GET_ITER(arg=None, lineno=6)
2023-08-13 11:42:39,307 stack ['$218call.38']
2023-08-13 11:42:39,307 end state. edges=[Edge(pc=230, stack=('$228get_iter.39',), blockstack=(), npush=0)]
2023-08-13 11:42:39,307 pending: deque([State(pc_initial=230 nstack_initial=1)])
2023-08-13 11:42:39,307 stack: ['$phi230.0']
2023-08-13 11:42:39,307 state.pc_initial: State(pc_initial=230 nstack_initial=1)
2023-08-13 11:42:39,307 dispatch pc=230, inst=FOR_ITER(arg=4, lineno=6)
2023-08-13 11:42:39,307 stack ['$phi230.0']
2023-08-13 11:42:39,307 end state. edges=[Edge(pc=240, stack=(), blockstack=(), npush=0), Edge(pc=232, stack=('$phi230.0', '$230for_iter.2'), blockstack=(), npush=0)]
2023-08-13 11:42:39,307 pending: deque([State(pc_initial=240 nstack_initial=0), State(pc_initial=232 nstack_initial=2)])
2023-08-13 11:42:39,307 stack: []
2023-08-13 11:42:39,308 state.pc_initial: State(pc_initial=240 nstack_initial=0)
2023-08-13 11:42:39,308 dispatch pc=240, inst=LOAD_FAST(arg=4, lineno=8)
2023-08-13 11:42:39,308 stack []
2023-08-13 11:42:39,308 dispatch pc=242, inst=RETURN_VALUE(arg=None, lineno=8)
2023-08-13 11:42:39,308 stack ['$out0240.0']
2023-08-13 11:42:39,308 end state. edges=[]
2023-08-13 11:42:39,308 pending: deque([State(pc_initial=232 nstack_initial=2)])
2023-08-13 11:42:39,308 stack: ['$phi232.0', '$phi232.1']
2023-08-13 11:42:39,308 state.pc_initial: State(pc_initial=232 nstack_initial=2)
2023-08-13 11:42:39,309 dispatch pc=232, inst=STORE_FAST(arg=5, lineno=6)
2023-08-13 11:42:39,309 stack ['$phi232.0', '$phi232.1']
2023-08-13 11:42:39,309 dispatch pc=234, inst=LOAD_CONST(arg=2, lineno=7)
2023-08-13 11:42:39,309 stack ['$phi232.0']
2023-08-13 11:42:39,309 dispatch pc=236, inst=STORE_FAST(arg=6, lineno=7)
2023-08-13 11:42:39,309 stack ['$phi232.0', '$const234.2']
2023-08-13 11:42:39,310 dispatch pc=238, inst=JUMP_BACKWARD(arg=5, lineno=7)
2023-08-13 11:42:39,310 stack ['$phi232.0']
2023-08-13 11:42:39,310 end state. edges=[Edge(pc=230, stack=('$phi232.0',), blockstack=(), npush=0)]
2023-08-13 11:42:39,311 pending: deque([State(pc_initial=230 nstack_initial=1)])
2023-08-13 11:42:39,311 -------------------------Prune PHIs-------------------------
2023-08-13 11:42:39,311 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=230 nstack_initial=1): {'$phi230.0'},
             State(pc_initial=232 nstack_initial=2): {'$phi232.1'},
             State(pc_initial=240 nstack_initial=0): set()})
2023-08-13 11:42:39,311 defmap: {'$phi230.0': State(pc_initial=0 nstack_initial=0),
 '$phi232.1': State(pc_initial=230 nstack_initial=1)}
2023-08-13 11:42:39,311 phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi232.0',
                            State(pc_initial=232 nstack_initial=2))},
             '$phi232.0': {('$phi230.0',
                            State(pc_initial=230 nstack_initial=1))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:39,312 changing phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi230.0',
                            State(pc_initial=230 nstack_initial=1))},
             '$phi232.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:39,312 changing phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:39,312 changing phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:39,313 keep phismap: {'$phi230.0': {('$228get_iter.39', State(pc_initial=0 nstack_initial=0))},
 '$phi232.1': {('$230for_iter.2', State(pc_initial=230 nstack_initial=1))}}
2023-08-13 11:42:39,313 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi230.0': '$228get_iter.39'},
             State(pc_initial=230 nstack_initial=1): {'$phi232.1': '$230for_iter.2'}})
2023-08-13 11:42:39,313 ----------------------DONE Prune PHIs-----------------------
2023-08-13 11:42:39,313 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$x4.0'}), (6, {'item': '$x4.0', 'res': '$6load_attr.1'}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'value': '$6load_attr.1'}), (18, {'idx': 1, 'res': '$18load_global.2'}), (20, {}), (22, {}), (24, {}), (26, {}), (28, {}), (30, {'item': '$18load_global.2', 'res': '$30load_method.4'}), (32, {}), (34, {}), (36, {}), (38, {}), (40, {}), (42, {}), (44, {}), (46, {}), (48, {}), (50, {}), (52, {'res': '$full_shape052.5'}), (54, {'idx': 1, 'res': '$54load_global.6'}), (56, {}), (58, {}), (60, {}), (62, {}), (64, {}), (66, {'item': '$54load_global.6', 'res': '$66load_attr.7'}), (68, {}), (70, {}), (72, {}), (74, {}), (78, {}), (80, {}), (82, {'func': '$30load_method.4', 'args': ['$full_shape052.5', '$66load_attr.7'], 'kw_names': 1, 'res': '$82call.8'}), (84, {}), (86, {}), (88, {}), (90, {}), (92, {'value': '$82call.8'}), (94, {'res': '$const94.9'}), (96, {'res': '$out096.10'}), (98, {'res': '$const98.11'}), (100, {'res': '$const100.12'}), (102, {'start': '$const98.11', 'stop': '$const100.12', 'step': None, 'res': '$102build_slice.14', 'slicevar': '$102build_slice.13'}), (104, {'target': '$out096.10', 'index': '$102build_slice.14', 'value': '$const94.9'}), (106, {}), (108, {'res': '$const108.15'}), (110, {'res': '$out0110.16'}), (112, {'res': '$const112.17'}), (114, {'res': '$const114.18'}), (116, {'start': '$const112.17', 'stop': '$const114.18', 'step': None, 'res': '$116build_slice.20', 'slicevar': '$116build_slice.19'}), (118, {'target': '$out0110.16', 'index': '$116build_slice.20', 'value': '$const108.15'}), (120, {}), (122, {'idx': 4, 'res': '$122load_global.21'}), (124, {}), (126, {}), (128, {}), (130, {}), (132, {}), (134, {'idx': 5, 'res': '$134load_global.23'}), (136, {}), (138, {}), (140, {}), (142, {}), (144, {}), (146, {'res': '$const146.25'}), (148, {'res': '$const148.26'}), (150, {}), (152, {}), (154, {'func': '$134load_global.23', 'args': ['$const146.25', '$const148.26'], 'kw_names': None, 'res': '$154call.27'}), (156, {}), (158, {}), (160, {}), (162, {}), (164, {'value': '$154call.27', 'res': '$164unary_negative.28'}), (166, {'res': '$full_shape0166.29'}), (168, {'res': '$const168.30'}), (170, {'index': '$const168.30', 'target': '$full_shape0166.29', 'res': '$170binary_subscr.31'}), (172, {}), (174, {}), (176, {}), (178, {}), (180, {'idx': 6, 'res': '$180load_global.32'}), (182, {}), (184, {}), (186, {}), (188, {}), (190, {}), (192, {'res': '$const192.34'}), (194, {'res': '$const194.35'}), (196, {}), (198, {}), (200, {'func': '$180load_global.32', 'args': ['$const192.34', '$const194.35'], 'kw_names': None, 'res': '$200call.36'}), (202, {}), (204, {}), (206, {}), (208, {}), (210, {'op': '-', 'lhs': '$170binary_subscr.31', 'rhs': '$200call.36', 'res': '$binop_sub210.37'}), (212, {}), (214, {}), (216, {}), (218, {'func': '$122load_global.21', 'args': ['$164unary_negative.28', '$binop_sub210.37'], 'kw_names': None, 'res': '$218call.38'}), (220, {}), (222, {}), (224, {}), (226, {}), (228, {'value': '$218call.38', 'res': '$228get_iter.39'})), outgoing_phis={'$phi230.0': '$228get_iter.39'}, blockstack=(), active_try_block=None, outgoing_edgepushed={230: ('$228get_iter.39',)})
2023-08-13 11:42:39,314 block_infos State(pc_initial=230 nstack_initial=1):
AdaptBlockInfo(insts=((230, {'iterator': '$phi230.0', 'pair': '$230for_iter.1', 'indval': '$230for_iter.2', 'pred': '$230for_iter.3'}),), outgoing_phis={'$phi232.1': '$230for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={240: (), 232: ('$phi230.0', '$230for_iter.2')})
2023-08-13 11:42:39,314 block_infos State(pc_initial=232 nstack_initial=2):
AdaptBlockInfo(insts=((232, {'value': '$phi232.1'}), (234, {'res': '$const234.2'}), (236, {'value': '$const234.2'}), (238, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={230: ('$phi232.0',)})
2023-08-13 11:42:39,314 block_infos State(pc_initial=240 nstack_initial=0):
AdaptBlockInfo(insts=((240, {'res': '$out0240.0'}), (242, {'retval': '$out0240.0', 'castval': '$242return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:39,319 label 0:
    x = arg(0, name=x)                       ['x']
    threshold = arg(1, name=threshold)       ['threshold']
    zero_pos = arg(2, name=zero_pos)         ['zero_pos']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $18load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>) ['$18load_global.2']
    $30load_method.4 = getattr(value=$18load_global.2, attr=empty) ['$18load_global.2', '$30load_method.4']
    $54load_global.6 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>) ['$54load_global.6']
    $66load_attr.7 = getattr(value=$54load_global.6, attr=bool_) ['$54load_global.6', '$66load_attr.7']
    out0 = call $30load_method.4(full_shape0, func=$30load_method.4, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($66load_attr.7, <string>:3))], vararg=None, varkwarg=None, target=None) ['$30load_method.4', '$66load_attr.7', 'full_shape0', 'out0']
    $const94.9 = const(int, 0)               ['$const94.9']
    $const98.11 = const(NoneType, None)      ['$const98.11']
    $const100.12 = const(int, 1)             ['$const100.12']
    $102build_slice.13 = global(slice: <class 'slice'>) ['$102build_slice.13']
    $102build_slice.14 = call $102build_slice.13($const98.11, $const100.12, func=$102build_slice.13, args=(Var($const98.11, <string>:4), Var($const100.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$102build_slice.13', '$102build_slice.14', '$const100.12', '$const98.11']
    out0[$102build_slice.14] = $const94.9    ['$102build_slice.14', '$const94.9', 'out0']
    $const108.15 = const(int, 0)             ['$const108.15']
    $const112.17 = const(int, 0)             ['$const112.17']
    $const114.18 = const(NoneType, None)     ['$const114.18']
    $116build_slice.19 = global(slice: <class 'slice'>) ['$116build_slice.19']
    $116build_slice.20 = call $116build_slice.19($const112.17, $const114.18, func=$116build_slice.19, args=(Var($const112.17, <string>:5), Var($const114.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$116build_slice.19', '$116build_slice.20', '$const112.17', '$const114.18']
    out0[$116build_slice.20] = $const108.15  ['$116build_slice.20', '$const108.15', 'out0']
    $122load_global.21 = global(range: <class 'range'>) ['$122load_global.21']
    $134load_global.23 = global(min: <built-in function min>) ['$134load_global.23']
    $const146.25 = const(int, 0)             ['$const146.25']
    $const148.26 = const(int, -1)            ['$const148.26']
    $154call.27 = call $134load_global.23($const146.25, $const148.26, func=$134load_global.23, args=[Var($const146.25, <string>:6), Var($const148.26, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$134load_global.23', '$154call.27', '$const146.25', '$const148.26']
    $164unary_negative.28 = unary(fn=<built-in function neg>, value=$154call.27) ['$154call.27', '$164unary_negative.28']
    $const168.30 = const(int, 0)             ['$const168.30']
    $170binary_subscr.31 = getitem(value=full_shape0, index=$const168.30, fn=<built-in function getitem>) ['$170binary_subscr.31', '$const168.30', 'full_shape0']
    $180load_global.32 = global(max: <built-in function max>) ['$180load_global.32']
    $const192.34 = const(int, 0)             ['$const192.34']
    $const194.35 = const(int, 0)             ['$const194.35']
    $200call.36 = call $180load_global.32($const192.34, $const194.35, func=$180load_global.32, args=[Var($const192.34, <string>:6), Var($const194.35, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$180load_global.32', '$200call.36', '$const192.34', '$const194.35']
    $binop_sub210.37 = $170binary_subscr.31 - $200call.36 ['$170binary_subscr.31', '$200call.36', '$binop_sub210.37']
    $218call.38 = call $122load_global.21($164unary_negative.28, $binop_sub210.37, func=$122load_global.21, args=[Var($164unary_negative.28, <string>:6), Var($binop_sub210.37, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$122load_global.21', '$164unary_negative.28', '$218call.38', '$binop_sub210.37']
    $228get_iter.39 = getiter(value=$218call.38) ['$218call.38', '$228get_iter.39']
    $phi230.0 = $228get_iter.39              ['$228get_iter.39', '$phi230.0']
    jump 230                                 []
label 230:
    $230for_iter.1 = iternext(value=$phi230.0) ['$230for_iter.1', '$phi230.0']
    $230for_iter.2 = pair_first(value=$230for_iter.1) ['$230for_iter.1', '$230for_iter.2']
    $230for_iter.3 = pair_second(value=$230for_iter.1) ['$230for_iter.1', '$230for_iter.3']
    $phi232.1 = $230for_iter.2               ['$230for_iter.2', '$phi232.1']
    branch $230for_iter.3, 232, 240          ['$230for_iter.3']
label 232:
    index00 = $phi232.1                      ['$phi232.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 230                                 []
label 240:
    $242return_value.1 = cast(value=out0)    ['$242return_value.1', 'out0']
    return $242return_value.1                ['$242return_value.1']

2023-08-13 11:42:39,361 ==== SSA block analysis pass on 0
2023-08-13 11:42:39,361 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696AE7ED0>
2023-08-13 11:42:39,361 on stmt: x = arg(0, name=x)
2023-08-13 11:42:39,362 on stmt: threshold = arg(1, name=threshold)
2023-08-13 11:42:39,362 on stmt: zero_pos = arg(2, name=zero_pos)
2023-08-13 11:42:39,362 on stmt: full_shape0 = getattr(value=x, attr=shape)
2023-08-13 11:42:39,362 on stmt: $18load_global.2.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:39,362 on stmt: $30load_method.4.1 = getattr(value=$18load_global.2.1, attr=empty)
2023-08-13 11:42:39,362 on stmt: $54load_global.6.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:39,362 on stmt: $66load_attr.7.1 = getattr(value=$54load_global.6.1, attr=bool_)
2023-08-13 11:42:39,362 on stmt: out0 = call $30load_method.4.1(full_shape0, func=$30load_method.4.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($66load_attr.7.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,362 on stmt: $const94.9.1 = const(int, 0)
2023-08-13 11:42:39,362 on stmt: $const98.11.1 = const(NoneType, None)
2023-08-13 11:42:39,362 on stmt: $const100.12.1 = const(int, 1)
2023-08-13 11:42:39,362 on stmt: $102build_slice.13.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:39,362 on stmt: $102build_slice.14.1 = call $102build_slice.13.1($const98.11.1, $const100.12.1, func=$102build_slice.13.1, args=(Var($const98.11.1, <string>:4), Var($const100.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,362 on stmt: out0[$102build_slice.14.1] = $const94.9.1
2023-08-13 11:42:39,362 on stmt: $const108.15.1 = const(int, 0)
2023-08-13 11:42:39,363 on stmt: $const112.17.1 = const(int, 0)
2023-08-13 11:42:39,363 on stmt: $const114.18.1 = const(NoneType, None)
2023-08-13 11:42:39,363 on stmt: $116build_slice.19.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:39,363 on stmt: $116build_slice.20.1 = call $116build_slice.19.1($const112.17.1, $const114.18.1, func=$116build_slice.19.1, args=(Var($const112.17.1, <string>:5), Var($const114.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,363 on stmt: out0[$116build_slice.20.1] = $const108.15.1
2023-08-13 11:42:39,363 on stmt: $122load_global.21.1 = global(range: <class 'range'>)
2023-08-13 11:42:39,363 on stmt: $134load_global.23.1 = global(min: <built-in function min>)
2023-08-13 11:42:39,364 on stmt: $const146.25.1 = const(int, 0)
2023-08-13 11:42:39,364 on stmt: $const148.26.1 = const(int, -1)
2023-08-13 11:42:39,364 on stmt: $154call.27.1 = call $134load_global.23.1($const146.25.1, $const148.26.1, func=$134load_global.23.1, args=[Var($const146.25.1, <string>:6), Var($const148.26.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,364 on stmt: $164unary_negative.28.1 = unary(fn=<built-in function neg>, value=$154call.27.1)
2023-08-13 11:42:39,364 on stmt: $const168.30.1 = const(int, 0)
2023-08-13 11:42:39,364 on stmt: $170binary_subscr.31.1 = getitem(value=full_shape0, index=$const168.30.1, fn=<built-in function getitem>)
2023-08-13 11:42:39,364 on stmt: $180load_global.32.1 = global(max: <built-in function max>)
2023-08-13 11:42:39,364 on stmt: $const192.34.1 = const(int, 0)
2023-08-13 11:42:39,364 on stmt: $const194.35.1 = const(int, 0)
2023-08-13 11:42:39,365 on stmt: $200call.36.1 = call $180load_global.32.1($const192.34.1, $const194.35.1, func=$180load_global.32.1, args=[Var($const192.34.1, <string>:6), Var($const194.35.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,365 on stmt: $binop_sub210.37.1 = $170binary_subscr.31.1 - $200call.36.1
2023-08-13 11:42:39,365 on stmt: $218call.38.1 = call $122load_global.21.1($164unary_negative.28.1, $binop_sub210.37.1, func=$122load_global.21.1, args=[Var($164unary_negative.28.1, <string>:6), Var($binop_sub210.37.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,365 on stmt: $228get_iter.39.1 = getiter(value=$218call.38.1)
2023-08-13 11:42:39,365 on stmt: $phi230.0.1 = $228get_iter.39.1
2023-08-13 11:42:39,365 on stmt: jump 230
2023-08-13 11:42:39,365 ==== SSA block analysis pass on 230
2023-08-13 11:42:39,365 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696AE7ED0>
2023-08-13 11:42:39,365 on stmt: $230for_iter.1.1 = iternext(value=$phi230.0.1)
2023-08-13 11:42:39,366 on stmt: $230for_iter.2.1 = pair_first(value=$230for_iter.1.1)
2023-08-13 11:42:39,366 on stmt: $230for_iter.3.1 = pair_second(value=$230for_iter.1.1)
2023-08-13 11:42:39,366 on stmt: $phi232.1.1 = $230for_iter.2.1
2023-08-13 11:42:39,366 on stmt: branch $230for_iter.3.1, 232, 442
2023-08-13 11:42:39,366 ==== SSA block analysis pass on 232
2023-08-13 11:42:39,366 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696AE7ED0>
2023-08-13 11:42:39,366 on stmt: index00 = $phi232.1.1
2023-08-13 11:42:39,366 on stmt: jump 240
2023-08-13 11:42:39,366 ==== SSA block analysis pass on 442
2023-08-13 11:42:39,366 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696AE7ED0>
2023-08-13 11:42:39,367 on stmt: $242return_value.1.1 = cast(value=out0)
2023-08-13 11:42:39,367 on stmt: return $242return_value.1.1
2023-08-13 11:42:39,367 ==== SSA block analysis pass on 240
2023-08-13 11:42:39,367 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696AE7ED0>
2023-08-13 11:42:39,367 on stmt: $const6.1 = const(int, 0)
2023-08-13 11:42:39,367 on stmt: stencil_index = $const6.1 + index00
2023-08-13 11:42:39,367 on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:39,367 on stmt: $22unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2023-08-13 11:42:39,367 on stmt: $30compare_op.6 = $22unary_negative.4 <= x0
2023-08-13 11:42:39,367 on stmt: bool36 = global(bool: <class 'bool'>)
2023-08-13 11:42:39,367 on stmt: $36pred = call bool36($30compare_op.6, func=bool36, args=(Var($30compare_op.6, audio.py:1148),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,367 on stmt: $phi38.0 = x0
2023-08-13 11:42:39,367 on stmt: branch $36pred, 241, 291
2023-08-13 11:42:39,368 ==== SSA block analysis pass on 241
2023-08-13 11:42:39,368 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696AE7ED0>
2023-08-13 11:42:39,368 on stmt: $40compare_op.2 = x0 <= threshold
2023-08-13 11:42:39,368 on stmt: bool46 = global(bool: <class 'bool'>)
2023-08-13 11:42:39,368 on stmt: $46pred = call bool46($40compare_op.2, func=bool46, args=(Var($40compare_op.2, audio.py:1148),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,368 on stmt: branch $46pred, 279, 295
2023-08-13 11:42:39,368 ==== SSA block analysis pass on 279
2023-08-13 11:42:39,368 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696AE7ED0>
2023-08-13 11:42:39,368 on stmt: jump 289
2023-08-13 11:42:39,369 ==== SSA block analysis pass on 291
2023-08-13 11:42:39,369 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696AE7ED0>
2023-08-13 11:42:39,369 on stmt: jump 295
2023-08-13 11:42:39,369 ==== SSA block analysis pass on 289
2023-08-13 11:42:39,369 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696AE7ED0>
2023-08-13 11:42:39,370 on stmt: x0 = const(int, 0)
2023-08-13 11:42:39,370 on stmt: jump 295
2023-08-13 11:42:39,370 ==== SSA block analysis pass on 295
2023-08-13 11:42:39,370 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696AE7ED0>
2023-08-13 11:42:39,370 on stmt: $const60.1 = const(int, -1)
2023-08-13 11:42:39,370 on stmt: stencil_index = $const60.1 + index00
2023-08-13 11:42:39,370 on stmt: x1 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:39,370 on stmt: $76unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2023-08-13 11:42:39,370 on stmt: $84compare_op.6 = $76unary_negative.4 <= x1
2023-08-13 11:42:39,371 on stmt: bool90 = global(bool: <class 'bool'>)
2023-08-13 11:42:39,371 on stmt: $90pred = call bool90($84compare_op.6, func=bool90, args=(Var($84compare_op.6, audio.py:1152),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,371 on stmt: $phi92.0 = x1
2023-08-13 11:42:39,371 on stmt: branch $90pred, 299, 345
2023-08-13 11:42:39,371 ==== SSA block analysis pass on 299
2023-08-13 11:42:39,371 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696AE7ED0>
2023-08-13 11:42:39,371 on stmt: $94compare_op.2 = x1 <= threshold
2023-08-13 11:42:39,371 on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-13 11:42:39,371 on stmt: $100pred = call bool100($94compare_op.2, func=bool100, args=(Var($94compare_op.2, audio.py:1152),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,371 on stmt: branch $100pred, 333, 349
2023-08-13 11:42:39,372 ==== SSA block analysis pass on 333
2023-08-13 11:42:39,372 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696AE7ED0>
2023-08-13 11:42:39,372 on stmt: jump 343
2023-08-13 11:42:39,372 ==== SSA block analysis pass on 345
2023-08-13 11:42:39,372 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696AE7ED0>
2023-08-13 11:42:39,372 on stmt: jump 349
2023-08-13 11:42:39,372 ==== SSA block analysis pass on 343
2023-08-13 11:42:39,372 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696AE7ED0>
2023-08-13 11:42:39,372 on stmt: x1 = const(int, 0)
2023-08-13 11:42:39,372 on stmt: jump 349
2023-08-13 11:42:39,372 ==== SSA block analysis pass on 349
2023-08-13 11:42:39,372 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696AE7ED0>
2023-08-13 11:42:39,372 on stmt: bool114 = global(bool: <class 'bool'>)
2023-08-13 11:42:39,372 on stmt: $114pred = call bool114(zero_pos, func=bool114, args=(Var(zero_pos, audio.py:1144),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,373 on stmt: branch $114pred, 353, 357
2023-08-13 11:42:39,373 ==== SSA block analysis pass on 353
2023-08-13 11:42:39,373 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696AE7ED0>
2023-08-13 11:42:39,373 on stmt: $116load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:39,373 on stmt: $128load_attr.2 = getattr(value=$116load_global.0, attr=signbit)
2023-08-13 11:42:39,373 on stmt: $144call.4 = call $128load_attr.2(x0, func=$128load_attr.2, args=[Var(x0, audio.py:1147)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,373 on stmt: $154load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:39,373 on stmt: $166load_attr.7 = getattr(value=$154load_global.5, attr=signbit)
2023-08-13 11:42:39,373 on stmt: $182call.9 = call $166load_attr.7(x1, func=$166load_attr.7, args=[Var(x1, audio.py:1151)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,373 on stmt: $192compare_op.10 = $144call.4 != $182call.9
2023-08-13 11:42:39,373 on stmt: $198return_value.11 = cast(value=$192compare_op.10)
2023-08-13 11:42:39,373 on stmt: out0[index00] = $198return_value.11
2023-08-13 11:42:39,374 on stmt: jump 441
2023-08-13 11:42:39,374 ==== SSA block analysis pass on 357
2023-08-13 11:42:39,374 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696AE7ED0>
2023-08-13 11:42:39,374 on stmt: $200load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:39,374 on stmt: $212load_attr.2 = getattr(value=$200load_global.0, attr=sign)
2023-08-13 11:42:39,374 on stmt: $228call.4 = call $212load_attr.2(x0, func=$212load_attr.2, args=[Var(x0, audio.py:1147)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,374 on stmt: $238load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:39,374 on stmt: $250load_attr.7 = getattr(value=$238load_global.5, attr=sign)
2023-08-13 11:42:39,374 on stmt: $266call.9 = call $250load_attr.7(x1, func=$250load_attr.7, args=[Var(x1, audio.py:1151)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,374 on stmt: $276compare_op.10 = $228call.4 != $266call.9
2023-08-13 11:42:39,374 on stmt: $282return_value.11 = cast(value=$276compare_op.10)
2023-08-13 11:42:39,375 on stmt: out0[index00] = $282return_value.11
2023-08-13 11:42:39,375 on stmt: jump 441
2023-08-13 11:42:39,375 ==== SSA block analysis pass on 441
2023-08-13 11:42:39,375 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696AE7ED0>
2023-08-13 11:42:39,375 on stmt: jump 230
2023-08-13 11:42:39,376 defs defaultdict(<class 'list'>,
            {'$100pred': [<numba.core.ir.Assign object at 0x000001F6967F41D0>],
             '$102build_slice.13.1': [<numba.core.ir.Assign object at 0x000001F696AE0210>],
             '$102build_slice.14.1': [<numba.core.ir.Assign object at 0x000001F696AE0390>],
             '$114pred': [<numba.core.ir.Assign object at 0x000001F696A2D390>],
             '$116build_slice.19.1': [<numba.core.ir.Assign object at 0x000001F696AE0D10>],
             '$116build_slice.20.1': [<numba.core.ir.Assign object at 0x000001F696AE0E90>],
             '$116load_global.0': [<numba.core.ir.Assign object at 0x000001F696A44150>],
             '$122load_global.21.1': [<numba.core.ir.Assign object at 0x000001F696AE10D0>],
             '$128load_attr.2': [<numba.core.ir.Assign object at 0x000001F696A47A90>],
             '$134load_global.23.1': [<numba.core.ir.Assign object at 0x000001F696AE1350>],
             '$144call.4': [<numba.core.ir.Assign object at 0x000001F696A4F590>],
             '$154call.27.1': [<numba.core.ir.Assign object at 0x000001F696AE19D0>],
             '$154load_global.5': [<numba.core.ir.Assign object at 0x000001F696A56ED0>],
             '$164unary_negative.28.1': [<numba.core.ir.Assign object at 0x000001F696AE1C90>],
             '$166load_attr.7': [<numba.core.ir.Assign object at 0x000001F696A5E8D0>],
             '$170binary_subscr.31.1': [<numba.core.ir.Assign object at 0x000001F696AE2190>],
             '$180load_global.32.1': [<numba.core.ir.Assign object at 0x000001F696AE23D0>],
             '$182call.9': [<numba.core.ir.Assign object at 0x000001F696A6F6D0>],
             '$18load_global.2.1': [<numba.core.ir.Assign object at 0x000001F696ADE9D0>],
             '$192compare_op.10': [<numba.core.ir.Assign object at 0x000001F696A6DCD0>],
             '$198return_value.11': [<numba.core.ir.Assign object at 0x000001F696A75790>],
             '$200call.36.1': [<numba.core.ir.Assign object at 0x000001F696AE2B10>],
             '$200load_global.0': [<numba.core.ir.Assign object at 0x000001F696A8C5D0>],
             '$212load_attr.2': [<numba.core.ir.Assign object at 0x000001F696A8FED0>],
             '$218call.38.1': [<numba.core.ir.Assign object at 0x000001F696AE3090>],
             '$228call.4': [<numba.core.ir.Assign object at 0x000001F696A979D0>],
             '$228get_iter.39.1': [<numba.core.ir.Assign object at 0x000001F696AE3290>],
             '$22unary_negative.4': [<numba.core.ir.Assign object at 0x000001F69663E2D0>],
             '$230for_iter.1.1': [<numba.core.ir.Assign object at 0x000001F696AE3450>],
             '$230for_iter.2.1': [<numba.core.ir.Assign object at 0x000001F696AE35D0>],
             '$230for_iter.3.1': [<numba.core.ir.Assign object at 0x000001F696AE3750>],
             '$238load_global.5': [<numba.core.ir.Assign object at 0x000001F696A9B310>],
             '$242return_value.1.1': [<numba.core.ir.Assign object at 0x000001F696AE4350>],
             '$250load_attr.7': [<numba.core.ir.Assign object at 0x000001F696AA6D10>],
             '$266call.9': [<numba.core.ir.Assign object at 0x000001F696AB7B10>],
             '$276compare_op.10': [<numba.core.ir.Assign object at 0x000001F696AB6110>],
             '$282return_value.11': [<numba.core.ir.Assign object at 0x000001F696ABDB50>],
             '$30compare_op.6': [<numba.core.ir.Assign object at 0x000001F69663E9D0>],
             '$30load_method.4.1': [<numba.core.ir.Assign object at 0x000001F696ADED10>],
             '$36pred': [<numba.core.ir.Assign object at 0x000001F696621310>],
             '$40compare_op.2': [<numba.core.ir.Assign object at 0x000001F69662D990>],
             '$46pred': [<numba.core.ir.Assign object at 0x000001F696629390>],
             '$54load_global.6.1': [<numba.core.ir.Assign object at 0x000001F696ADF110>],
             '$66load_attr.7.1': [<numba.core.ir.Assign object at 0x000001F696ADF410>],
             '$76unary_negative.4': [<numba.core.ir.Assign object at 0x000001F6967AF8D0>],
             '$84compare_op.6': [<numba.core.ir.Assign object at 0x000001F6967B7350>],
             '$90pred': [<numba.core.ir.Assign object at 0x000001F6967CFAD0>],
             '$94compare_op.2': [<numba.core.ir.Assign object at 0x000001F6967E66D0>],
             '$binop_sub210.37.1': [<numba.core.ir.Assign object at 0x000001F696AE2D90>],
             '$const100.12.1': [<numba.core.ir.Assign object at 0x000001F696ADFFD0>],
             '$const108.15.1': [<numba.core.ir.Assign object at 0x000001F696AE0650>],
             '$const112.17.1': [<numba.core.ir.Assign object at 0x000001F696AE0990>],
             '$const114.18.1': [<numba.core.ir.Assign object at 0x000001F696AE0B50>],
             '$const146.25.1': [<numba.core.ir.Assign object at 0x000001F696AE1550>],
             '$const148.26.1': [<numba.core.ir.Assign object at 0x000001F696AE1710>],
             '$const168.30.1': [<numba.core.ir.Assign object at 0x000001F696AE1F90>],
             '$const192.34.1': [<numba.core.ir.Assign object at 0x000001F696AE26D0>],
             '$const194.35.1': [<numba.core.ir.Assign object at 0x000001F696AE2890>],
             '$const6.1': [<numba.core.ir.Assign object at 0x000001F696645650>],
             '$const60.1': [<numba.core.ir.Assign object at 0x000001F6967A5B50>],
             '$const94.9.1': [<numba.core.ir.Assign object at 0x000001F696ADFA90>],
             '$const98.11.1': [<numba.core.ir.Assign object at 0x000001F696ADFE10>],
             '$phi230.0.1': [<numba.core.ir.Assign object at 0x000001F696ADE810>],
             '$phi232.1.1': [<numba.core.ir.Assign object at 0x000001F696AE3810>],
             '$phi38.0': [<numba.core.ir.Assign object at 0x000001F696649ED0>],
             '$phi92.0': [<numba.core.ir.Assign object at 0x000001F6967CE210>],
             'bool100': [<numba.core.ir.Assign object at 0x000001F6967EC850>],
             'bool114': [<numba.core.ir.Assign object at 0x000001F696A25910>],
             'bool36': [<numba.core.ir.Assign object at 0x000001F6963898D0>],
             'bool46': [<numba.core.ir.Assign object at 0x000001F6966114D0>],
             'bool90': [<numba.core.ir.Assign object at 0x000001F6967BED50>],
             'full_shape0': [<numba.core.ir.Assign object at 0x000001F696ADE590>],
             'index00': [<numba.core.ir.Assign object at 0x000001F696AE3A90>],
             'out0': [<numba.core.ir.Assign object at 0x000001F696ADF6D0>],
             'stencil_index': [<numba.core.ir.Assign object at 0x000001F696AD5250>,
                               <numba.core.ir.Assign object at 0x000001F696AD5010>],
             'threshold': [<numba.core.ir.Assign object at 0x000001F696ADDC10>],
             'x': [<numba.core.ir.Assign object at 0x000001F696ADDA50>],
             'x0': [<numba.core.ir.Assign object at 0x000001F696AD50D0>,
                    <numba.core.ir.Assign object at 0x000001F696796B10>],
             'x1': [<numba.core.ir.Assign object at 0x000001F696AD4E90>,
                    <numba.core.ir.Assign object at 0x000001F696A16410>],
             'zero_pos': [<numba.core.ir.Assign object at 0x000001F696ADE150>]})
2023-08-13 11:42:39,376 SSA violators {'x1', 'stencil_index', 'x0'}
2023-08-13 11:42:39,376 Fix SSA violator on var x1
2023-08-13 11:42:39,376 ==== SSA block rewrite pass on 0
2023-08-13 11:42:39,376 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696ADCA10>
2023-08-13 11:42:39,377 on stmt: x = arg(0, name=x)
2023-08-13 11:42:39,377 on stmt: threshold = arg(1, name=threshold)
2023-08-13 11:42:39,377 on stmt: zero_pos = arg(2, name=zero_pos)
2023-08-13 11:42:39,377 on stmt: full_shape0 = getattr(value=x, attr=shape)
2023-08-13 11:42:39,377 on stmt: $18load_global.2.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:39,377 on stmt: $30load_method.4.1 = getattr(value=$18load_global.2.1, attr=empty)
2023-08-13 11:42:39,377 on stmt: $54load_global.6.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:39,377 on stmt: $66load_attr.7.1 = getattr(value=$54load_global.6.1, attr=bool_)
2023-08-13 11:42:39,377 on stmt: out0 = call $30load_method.4.1(full_shape0, func=$30load_method.4.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($66load_attr.7.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,377 on stmt: $const94.9.1 = const(int, 0)
2023-08-13 11:42:39,377 on stmt: $const98.11.1 = const(NoneType, None)
2023-08-13 11:42:39,377 on stmt: $const100.12.1 = const(int, 1)
2023-08-13 11:42:39,378 on stmt: $102build_slice.13.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:39,378 on stmt: $102build_slice.14.1 = call $102build_slice.13.1($const98.11.1, $const100.12.1, func=$102build_slice.13.1, args=(Var($const98.11.1, <string>:4), Var($const100.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,378 on stmt: out0[$102build_slice.14.1] = $const94.9.1
2023-08-13 11:42:39,378 on stmt: $const108.15.1 = const(int, 0)
2023-08-13 11:42:39,378 on stmt: $const112.17.1 = const(int, 0)
2023-08-13 11:42:39,378 on stmt: $const114.18.1 = const(NoneType, None)
2023-08-13 11:42:39,378 on stmt: $116build_slice.19.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:39,378 on stmt: $116build_slice.20.1 = call $116build_slice.19.1($const112.17.1, $const114.18.1, func=$116build_slice.19.1, args=(Var($const112.17.1, <string>:5), Var($const114.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,378 on stmt: out0[$116build_slice.20.1] = $const108.15.1
2023-08-13 11:42:39,378 on stmt: $122load_global.21.1 = global(range: <class 'range'>)
2023-08-13 11:42:39,378 on stmt: $134load_global.23.1 = global(min: <built-in function min>)
2023-08-13 11:42:39,378 on stmt: $const146.25.1 = const(int, 0)
2023-08-13 11:42:39,379 on stmt: $const148.26.1 = const(int, -1)
2023-08-13 11:42:39,379 on stmt: $154call.27.1 = call $134load_global.23.1($const146.25.1, $const148.26.1, func=$134load_global.23.1, args=[Var($const146.25.1, <string>:6), Var($const148.26.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,379 on stmt: $164unary_negative.28.1 = unary(fn=<built-in function neg>, value=$154call.27.1)
2023-08-13 11:42:39,379 on stmt: $const168.30.1 = const(int, 0)
2023-08-13 11:42:39,379 on stmt: $170binary_subscr.31.1 = getitem(value=full_shape0, index=$const168.30.1, fn=<built-in function getitem>)
2023-08-13 11:42:39,379 on stmt: $180load_global.32.1 = global(max: <built-in function max>)
2023-08-13 11:42:39,379 on stmt: $const192.34.1 = const(int, 0)
2023-08-13 11:42:39,379 on stmt: $const194.35.1 = const(int, 0)
2023-08-13 11:42:39,379 on stmt: $200call.36.1 = call $180load_global.32.1($const192.34.1, $const194.35.1, func=$180load_global.32.1, args=[Var($const192.34.1, <string>:6), Var($const194.35.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,379 on stmt: $binop_sub210.37.1 = $170binary_subscr.31.1 - $200call.36.1
2023-08-13 11:42:39,380 on stmt: $218call.38.1 = call $122load_global.21.1($164unary_negative.28.1, $binop_sub210.37.1, func=$122load_global.21.1, args=[Var($164unary_negative.28.1, <string>:6), Var($binop_sub210.37.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,380 on stmt: $228get_iter.39.1 = getiter(value=$218call.38.1)
2023-08-13 11:42:39,380 on stmt: $phi230.0.1 = $228get_iter.39.1
2023-08-13 11:42:39,380 on stmt: jump 230
2023-08-13 11:42:39,380 ==== SSA block rewrite pass on 230
2023-08-13 11:42:39,380 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696ADCA10>
2023-08-13 11:42:39,380 on stmt: $230for_iter.1.1 = iternext(value=$phi230.0.1)
2023-08-13 11:42:39,380 on stmt: $230for_iter.2.1 = pair_first(value=$230for_iter.1.1)
2023-08-13 11:42:39,381 on stmt: $230for_iter.3.1 = pair_second(value=$230for_iter.1.1)
2023-08-13 11:42:39,381 on stmt: $phi232.1.1 = $230for_iter.2.1
2023-08-13 11:42:39,381 on stmt: branch $230for_iter.3.1, 232, 442
2023-08-13 11:42:39,381 ==== SSA block rewrite pass on 232
2023-08-13 11:42:39,381 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696ADCA10>
2023-08-13 11:42:39,381 on stmt: index00 = $phi232.1.1
2023-08-13 11:42:39,381 on stmt: jump 240
2023-08-13 11:42:39,381 ==== SSA block rewrite pass on 442
2023-08-13 11:42:39,381 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696ADCA10>
2023-08-13 11:42:39,381 on stmt: $242return_value.1.1 = cast(value=out0)
2023-08-13 11:42:39,382 on stmt: return $242return_value.1.1
2023-08-13 11:42:39,382 ==== SSA block rewrite pass on 240
2023-08-13 11:42:39,382 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696ADCA10>
2023-08-13 11:42:39,382 on stmt: $const6.1 = const(int, 0)
2023-08-13 11:42:39,382 on stmt: stencil_index = $const6.1 + index00
2023-08-13 11:42:39,382 on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:39,382 on stmt: $22unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2023-08-13 11:42:39,382 on stmt: $30compare_op.6 = $22unary_negative.4 <= x0
2023-08-13 11:42:39,382 on stmt: bool36 = global(bool: <class 'bool'>)
2023-08-13 11:42:39,382 on stmt: $36pred = call bool36($30compare_op.6, func=bool36, args=(Var($30compare_op.6, audio.py:1148),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,383 on stmt: $phi38.0 = x0
2023-08-13 11:42:39,383 on stmt: branch $36pred, 241, 291
2023-08-13 11:42:39,383 ==== SSA block rewrite pass on 241
2023-08-13 11:42:39,383 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696ADCA10>
2023-08-13 11:42:39,383 on stmt: $40compare_op.2 = x0 <= threshold
2023-08-13 11:42:39,383 on stmt: bool46 = global(bool: <class 'bool'>)
2023-08-13 11:42:39,383 on stmt: $46pred = call bool46($40compare_op.2, func=bool46, args=(Var($40compare_op.2, audio.py:1148),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,383 on stmt: branch $46pred, 279, 295
2023-08-13 11:42:39,383 ==== SSA block rewrite pass on 279
2023-08-13 11:42:39,383 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696ADCA10>
2023-08-13 11:42:39,383 on stmt: jump 289
2023-08-13 11:42:39,383 ==== SSA block rewrite pass on 291
2023-08-13 11:42:39,384 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696ADCA10>
2023-08-13 11:42:39,384 on stmt: jump 295
2023-08-13 11:42:39,384 ==== SSA block rewrite pass on 289
2023-08-13 11:42:39,384 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696ADCA10>
2023-08-13 11:42:39,384 on stmt: x0 = const(int, 0)
2023-08-13 11:42:39,384 on stmt: jump 295
2023-08-13 11:42:39,384 ==== SSA block rewrite pass on 295
2023-08-13 11:42:39,384 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696ADCA10>
2023-08-13 11:42:39,384 on stmt: $const60.1 = const(int, -1)
2023-08-13 11:42:39,384 on stmt: stencil_index = $const60.1 + index00
2023-08-13 11:42:39,385 on stmt: x1 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:39,385 first assign: x1
2023-08-13 11:42:39,385 replaced with: x1 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:39,385 on stmt: $76unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2023-08-13 11:42:39,385 on stmt: $84compare_op.6 = $76unary_negative.4 <= x1
2023-08-13 11:42:39,385 on stmt: bool90 = global(bool: <class 'bool'>)
2023-08-13 11:42:39,386 on stmt: $90pred = call bool90($84compare_op.6, func=bool90, args=(Var($84compare_op.6, audio.py:1152),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,386 on stmt: $phi92.0 = x1
2023-08-13 11:42:39,386 on stmt: branch $90pred, 299, 345
2023-08-13 11:42:39,386 ==== SSA block rewrite pass on 299
2023-08-13 11:42:39,386 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696ADCA10>
2023-08-13 11:42:39,386 on stmt: $94compare_op.2 = x1 <= threshold
2023-08-13 11:42:39,387 on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-13 11:42:39,387 on stmt: $100pred = call bool100($94compare_op.2, func=bool100, args=(Var($94compare_op.2, audio.py:1152),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,387 on stmt: branch $100pred, 333, 349
2023-08-13 11:42:39,387 ==== SSA block rewrite pass on 333
2023-08-13 11:42:39,387 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696ADCA10>
2023-08-13 11:42:39,387 on stmt: jump 343
2023-08-13 11:42:39,387 ==== SSA block rewrite pass on 345
2023-08-13 11:42:39,387 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696ADCA10>
2023-08-13 11:42:39,387 on stmt: jump 349
2023-08-13 11:42:39,387 ==== SSA block rewrite pass on 343
2023-08-13 11:42:39,387 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696ADCA10>
2023-08-13 11:42:39,388 on stmt: x1 = const(int, 0)
2023-08-13 11:42:39,388 replaced with: x1.1 = const(int, 0)
2023-08-13 11:42:39,388 on stmt: jump 349
2023-08-13 11:42:39,388 ==== SSA block rewrite pass on 349
2023-08-13 11:42:39,388 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696ADCA10>
2023-08-13 11:42:39,388 on stmt: bool114 = global(bool: <class 'bool'>)
2023-08-13 11:42:39,388 on stmt: $114pred = call bool114(zero_pos, func=bool114, args=(Var(zero_pos, audio.py:1144),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,388 on stmt: branch $114pred, 353, 357
2023-08-13 11:42:39,388 ==== SSA block rewrite pass on 353
2023-08-13 11:42:39,388 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696ADCA10>
2023-08-13 11:42:39,388 on stmt: $116load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:39,389 on stmt: $128load_attr.2 = getattr(value=$116load_global.0, attr=signbit)
2023-08-13 11:42:39,389 on stmt: $144call.4 = call $128load_attr.2(x0, func=$128load_attr.2, args=[Var(x0, audio.py:1147)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,389 on stmt: $154load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:39,389 on stmt: $166load_attr.7 = getattr(value=$154load_global.5, attr=signbit)
2023-08-13 11:42:39,389 on stmt: $182call.9 = call $166load_attr.7(x1, func=$166load_attr.7, args=[Var(x1, audio.py:1151)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,389 on stmt: $192compare_op.10 = $144call.4 != $182call.9
2023-08-13 11:42:39,389 on stmt: $198return_value.11 = cast(value=$192compare_op.10)
2023-08-13 11:42:39,389 on stmt: out0[index00] = $198return_value.11
2023-08-13 11:42:39,389 on stmt: jump 441
2023-08-13 11:42:39,389 ==== SSA block rewrite pass on 357
2023-08-13 11:42:39,390 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696ADCA10>
2023-08-13 11:42:39,390 on stmt: $200load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:39,390 on stmt: $212load_attr.2 = getattr(value=$200load_global.0, attr=sign)
2023-08-13 11:42:39,390 on stmt: $228call.4 = call $212load_attr.2(x0, func=$212load_attr.2, args=[Var(x0, audio.py:1147)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,390 on stmt: $238load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:39,390 on stmt: $250load_attr.7 = getattr(value=$238load_global.5, attr=sign)
2023-08-13 11:42:39,390 on stmt: $266call.9 = call $250load_attr.7(x1, func=$250load_attr.7, args=[Var(x1, audio.py:1151)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,390 on stmt: $276compare_op.10 = $228call.4 != $266call.9
2023-08-13 11:42:39,390 on stmt: $282return_value.11 = cast(value=$276compare_op.10)
2023-08-13 11:42:39,390 on stmt: out0[index00] = $282return_value.11
2023-08-13 11:42:39,390 on stmt: jump 441
2023-08-13 11:42:39,391 ==== SSA block rewrite pass on 441
2023-08-13 11:42:39,391 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696ADCA10>
2023-08-13 11:42:39,391 on stmt: jump 230
2023-08-13 11:42:39,391 Replaced assignments: defaultdict(<class 'list'>,
            {295: [<numba.core.ir.Assign object at 0x000001F696ADCDD0>],
             343: [<numba.core.ir.Assign object at 0x000001F696AFAD50>]})
2023-08-13 11:42:39,391 ==== SSA block rewrite pass on 0
2023-08-13 11:42:39,391 Running <numba.core.ssa._FixSSAVars object at 0x000001F696AFBA90>
2023-08-13 11:42:39,391 on stmt: x = arg(0, name=x)
2023-08-13 11:42:39,391 on stmt: threshold = arg(1, name=threshold)
2023-08-13 11:42:39,391 on stmt: zero_pos = arg(2, name=zero_pos)
2023-08-13 11:42:39,391 on stmt: full_shape0 = getattr(value=x, attr=shape)
2023-08-13 11:42:39,391 on stmt: $18load_global.2.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:39,392 on stmt: $30load_method.4.1 = getattr(value=$18load_global.2.1, attr=empty)
2023-08-13 11:42:39,392 on stmt: $54load_global.6.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:39,392 on stmt: $66load_attr.7.1 = getattr(value=$54load_global.6.1, attr=bool_)
2023-08-13 11:42:39,392 on stmt: out0 = call $30load_method.4.1(full_shape0, func=$30load_method.4.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($66load_attr.7.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,392 on stmt: $const94.9.1 = const(int, 0)
2023-08-13 11:42:39,392 on stmt: $const98.11.1 = const(NoneType, None)
2023-08-13 11:42:39,392 on stmt: $const100.12.1 = const(int, 1)
2023-08-13 11:42:39,392 on stmt: $102build_slice.13.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:39,392 on stmt: $102build_slice.14.1 = call $102build_slice.13.1($const98.11.1, $const100.12.1, func=$102build_slice.13.1, args=(Var($const98.11.1, <string>:4), Var($const100.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,392 on stmt: out0[$102build_slice.14.1] = $const94.9.1
2023-08-13 11:42:39,392 on stmt: $const108.15.1 = const(int, 0)
2023-08-13 11:42:39,393 on stmt: $const112.17.1 = const(int, 0)
2023-08-13 11:42:39,393 on stmt: $const114.18.1 = const(NoneType, None)
2023-08-13 11:42:39,393 on stmt: $116build_slice.19.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:39,393 on stmt: $116build_slice.20.1 = call $116build_slice.19.1($const112.17.1, $const114.18.1, func=$116build_slice.19.1, args=(Var($const112.17.1, <string>:5), Var($const114.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,393 on stmt: out0[$116build_slice.20.1] = $const108.15.1
2023-08-13 11:42:39,393 on stmt: $122load_global.21.1 = global(range: <class 'range'>)
2023-08-13 11:42:39,393 on stmt: $134load_global.23.1 = global(min: <built-in function min>)
2023-08-13 11:42:39,393 on stmt: $const146.25.1 = const(int, 0)
2023-08-13 11:42:39,393 on stmt: $const148.26.1 = const(int, -1)
2023-08-13 11:42:39,393 on stmt: $154call.27.1 = call $134load_global.23.1($const146.25.1, $const148.26.1, func=$134load_global.23.1, args=[Var($const146.25.1, <string>:6), Var($const148.26.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,393 on stmt: $164unary_negative.28.1 = unary(fn=<built-in function neg>, value=$154call.27.1)
2023-08-13 11:42:39,393 on stmt: $const168.30.1 = const(int, 0)
2023-08-13 11:42:39,394 on stmt: $170binary_subscr.31.1 = getitem(value=full_shape0, index=$const168.30.1, fn=<built-in function getitem>)
2023-08-13 11:42:39,394 on stmt: $180load_global.32.1 = global(max: <built-in function max>)
2023-08-13 11:42:39,394 on stmt: $const192.34.1 = const(int, 0)
2023-08-13 11:42:39,394 on stmt: $const194.35.1 = const(int, 0)
2023-08-13 11:42:39,394 on stmt: $200call.36.1 = call $180load_global.32.1($const192.34.1, $const194.35.1, func=$180load_global.32.1, args=[Var($const192.34.1, <string>:6), Var($const194.35.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,394 on stmt: $binop_sub210.37.1 = $170binary_subscr.31.1 - $200call.36.1
2023-08-13 11:42:39,394 on stmt: $218call.38.1 = call $122load_global.21.1($164unary_negative.28.1, $binop_sub210.37.1, func=$122load_global.21.1, args=[Var($164unary_negative.28.1, <string>:6), Var($binop_sub210.37.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,394 on stmt: $228get_iter.39.1 = getiter(value=$218call.38.1)
2023-08-13 11:42:39,394 on stmt: $phi230.0.1 = $228get_iter.39.1
2023-08-13 11:42:39,395 on stmt: jump 230
2023-08-13 11:42:39,395 ==== SSA block rewrite pass on 230
2023-08-13 11:42:39,395 Running <numba.core.ssa._FixSSAVars object at 0x000001F696AFBA90>
2023-08-13 11:42:39,395 on stmt: $230for_iter.1.1 = iternext(value=$phi230.0.1)
2023-08-13 11:42:39,395 on stmt: $230for_iter.2.1 = pair_first(value=$230for_iter.1.1)
2023-08-13 11:42:39,395 on stmt: $230for_iter.3.1 = pair_second(value=$230for_iter.1.1)
2023-08-13 11:42:39,395 on stmt: $phi232.1.1 = $230for_iter.2.1
2023-08-13 11:42:39,395 on stmt: branch $230for_iter.3.1, 232, 442
2023-08-13 11:42:39,395 ==== SSA block rewrite pass on 232
2023-08-13 11:42:39,395 Running <numba.core.ssa._FixSSAVars object at 0x000001F696AFBA90>
2023-08-13 11:42:39,395 on stmt: index00 = $phi232.1.1
2023-08-13 11:42:39,395 on stmt: jump 240
2023-08-13 11:42:39,395 ==== SSA block rewrite pass on 442
2023-08-13 11:42:39,395 Running <numba.core.ssa._FixSSAVars object at 0x000001F696AFBA90>
2023-08-13 11:42:39,396 on stmt: $242return_value.1.1 = cast(value=out0)
2023-08-13 11:42:39,396 on stmt: return $242return_value.1.1
2023-08-13 11:42:39,396 ==== SSA block rewrite pass on 240
2023-08-13 11:42:39,396 Running <numba.core.ssa._FixSSAVars object at 0x000001F696AFBA90>
2023-08-13 11:42:39,396 on stmt: $const6.1 = const(int, 0)
2023-08-13 11:42:39,396 on stmt: stencil_index = $const6.1 + index00
2023-08-13 11:42:39,396 on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:39,396 on stmt: $22unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2023-08-13 11:42:39,396 on stmt: $30compare_op.6 = $22unary_negative.4 <= x0
2023-08-13 11:42:39,396 on stmt: bool36 = global(bool: <class 'bool'>)
2023-08-13 11:42:39,396 on stmt: $36pred = call bool36($30compare_op.6, func=bool36, args=(Var($30compare_op.6, audio.py:1148),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,396 on stmt: $phi38.0 = x0
2023-08-13 11:42:39,397 on stmt: branch $36pred, 241, 291
2023-08-13 11:42:39,397 ==== SSA block rewrite pass on 241
2023-08-13 11:42:39,397 Running <numba.core.ssa._FixSSAVars object at 0x000001F696AFBA90>
2023-08-13 11:42:39,397 on stmt: $40compare_op.2 = x0 <= threshold
2023-08-13 11:42:39,397 on stmt: bool46 = global(bool: <class 'bool'>)
2023-08-13 11:42:39,397 on stmt: $46pred = call bool46($40compare_op.2, func=bool46, args=(Var($40compare_op.2, audio.py:1148),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,397 on stmt: branch $46pred, 279, 295
2023-08-13 11:42:39,397 ==== SSA block rewrite pass on 279
2023-08-13 11:42:39,397 Running <numba.core.ssa._FixSSAVars object at 0x000001F696AFBA90>
2023-08-13 11:42:39,397 on stmt: jump 289
2023-08-13 11:42:39,398 ==== SSA block rewrite pass on 291
2023-08-13 11:42:39,398 Running <numba.core.ssa._FixSSAVars object at 0x000001F696AFBA90>
2023-08-13 11:42:39,398 on stmt: jump 295
2023-08-13 11:42:39,398 ==== SSA block rewrite pass on 289
2023-08-13 11:42:39,398 Running <numba.core.ssa._FixSSAVars object at 0x000001F696AFBA90>
2023-08-13 11:42:39,398 on stmt: x0 = const(int, 0)
2023-08-13 11:42:39,398 on stmt: jump 295
2023-08-13 11:42:39,398 ==== SSA block rewrite pass on 295
2023-08-13 11:42:39,398 Running <numba.core.ssa._FixSSAVars object at 0x000001F696AFBA90>
2023-08-13 11:42:39,398 on stmt: $const60.1 = const(int, -1)
2023-08-13 11:42:39,398 on stmt: stencil_index = $const60.1 + index00
2023-08-13 11:42:39,399 on stmt: x1 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:39,399 on stmt: $76unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2023-08-13 11:42:39,399 on stmt: $84compare_op.6 = $76unary_negative.4 <= x1
2023-08-13 11:42:39,399 find_def var='x1' stmt=$84compare_op.6 = $76unary_negative.4 <= x1
2023-08-13 11:42:39,399 on stmt: bool90 = global(bool: <class 'bool'>)
2023-08-13 11:42:39,399 on stmt: $90pred = call bool90($84compare_op.6, func=bool90, args=(Var($84compare_op.6, audio.py:1152),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,399 on stmt: $phi92.0 = x1
2023-08-13 11:42:39,399 find_def var='x1' stmt=$phi92.0 = x1
2023-08-13 11:42:39,399 on stmt: branch $90pred, 299, 345
2023-08-13 11:42:39,399 ==== SSA block rewrite pass on 299
2023-08-13 11:42:39,400 Running <numba.core.ssa._FixSSAVars object at 0x000001F696AFBA90>
2023-08-13 11:42:39,400 on stmt: $94compare_op.2 = x1 <= threshold
2023-08-13 11:42:39,400 find_def var='x1' stmt=$94compare_op.2 = x1 <= threshold
2023-08-13 11:42:39,400 find_def_from_top label 299
2023-08-13 11:42:39,400 idom 295 from label 299
2023-08-13 11:42:39,400 find_def_from_bottom label 295
2023-08-13 11:42:39,400 on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-13 11:42:39,400 on stmt: $100pred = call bool100($94compare_op.2, func=bool100, args=(Var($94compare_op.2, audio.py:1152),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,400 on stmt: branch $100pred, 333, 349
2023-08-13 11:42:39,400 ==== SSA block rewrite pass on 333
2023-08-13 11:42:39,400 Running <numba.core.ssa._FixSSAVars object at 0x000001F696AFBA90>
2023-08-13 11:42:39,400 on stmt: jump 343
2023-08-13 11:42:39,401 ==== SSA block rewrite pass on 345
2023-08-13 11:42:39,401 Running <numba.core.ssa._FixSSAVars object at 0x000001F696AFBA90>
2023-08-13 11:42:39,401 on stmt: jump 349
2023-08-13 11:42:39,401 ==== SSA block rewrite pass on 343
2023-08-13 11:42:39,401 Running <numba.core.ssa._FixSSAVars object at 0x000001F696AFBA90>
2023-08-13 11:42:39,401 on stmt: x1.1 = const(int, 0)
2023-08-13 11:42:39,401 on stmt: jump 349
2023-08-13 11:42:39,401 ==== SSA block rewrite pass on 349
2023-08-13 11:42:39,401 Running <numba.core.ssa._FixSSAVars object at 0x000001F696AFBA90>
2023-08-13 11:42:39,401 on stmt: bool114 = global(bool: <class 'bool'>)
2023-08-13 11:42:39,401 on stmt: $114pred = call bool114(zero_pos, func=bool114, args=(Var(zero_pos, audio.py:1144),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,401 on stmt: branch $114pred, 353, 357
2023-08-13 11:42:39,402 ==== SSA block rewrite pass on 353
2023-08-13 11:42:39,402 Running <numba.core.ssa._FixSSAVars object at 0x000001F696AFBA90>
2023-08-13 11:42:39,402 on stmt: $116load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:39,402 on stmt: $128load_attr.2 = getattr(value=$116load_global.0, attr=signbit)
2023-08-13 11:42:39,403 on stmt: $144call.4 = call $128load_attr.2(x0, func=$128load_attr.2, args=[Var(x0, audio.py:1147)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,403 on stmt: $154load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:39,403 on stmt: $166load_attr.7 = getattr(value=$154load_global.5, attr=signbit)
2023-08-13 11:42:39,403 on stmt: $182call.9 = call $166load_attr.7(x1, func=$166load_attr.7, args=[Var(x1, audio.py:1151)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,403 find_def var='x1' stmt=$182call.9 = call $166load_attr.7(x1, func=$166load_attr.7, args=[Var(x1, audio.py:1151)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,403 find_def_from_top label 353
2023-08-13 11:42:39,403 idom 349 from label 353
2023-08-13 11:42:39,403 find_def_from_bottom label 349
2023-08-13 11:42:39,404 find_def_from_top label 349
2023-08-13 11:42:39,404 insert phi node x1.2 = phi(incoming_values=[], incoming_blocks=[]) at 349
2023-08-13 11:42:39,404 find_def_from_bottom label 345
2023-08-13 11:42:39,404 find_def_from_top label 345
2023-08-13 11:42:39,404 idom 295 from label 345
2023-08-13 11:42:39,404 find_def_from_bottom label 295
2023-08-13 11:42:39,404 incoming_def x1 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:39,404 find_def_from_bottom label 299
2023-08-13 11:42:39,404 find_def_from_top label 299
2023-08-13 11:42:39,404 idom 295 from label 299
2023-08-13 11:42:39,404 find_def_from_bottom label 295
2023-08-13 11:42:39,404 incoming_def x1 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:39,404 find_def_from_bottom label 343
2023-08-13 11:42:39,404 incoming_def x1.1 = const(int, 0)
2023-08-13 11:42:39,405 replaced with: $182call.9 = call $166load_attr.7(x1.2, func=$166load_attr.7, args=[Var(x1.2, audio.py:1156)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,405 on stmt: $192compare_op.10 = $144call.4 != $182call.9
2023-08-13 11:42:39,405 on stmt: $198return_value.11 = cast(value=$192compare_op.10)
2023-08-13 11:42:39,405 on stmt: out0[index00] = $198return_value.11
2023-08-13 11:42:39,405 on stmt: jump 441
2023-08-13 11:42:39,405 ==== SSA block rewrite pass on 357
2023-08-13 11:42:39,405 Running <numba.core.ssa._FixSSAVars object at 0x000001F696AFBA90>
2023-08-13 11:42:39,405 on stmt: $200load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:39,405 on stmt: $212load_attr.2 = getattr(value=$200load_global.0, attr=sign)
2023-08-13 11:42:39,405 on stmt: $228call.4 = call $212load_attr.2(x0, func=$212load_attr.2, args=[Var(x0, audio.py:1147)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,406 on stmt: $238load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:39,406 on stmt: $250load_attr.7 = getattr(value=$238load_global.5, attr=sign)
2023-08-13 11:42:39,406 on stmt: $266call.9 = call $250load_attr.7(x1, func=$250load_attr.7, args=[Var(x1, audio.py:1151)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,406 find_def var='x1' stmt=$266call.9 = call $250load_attr.7(x1, func=$250load_attr.7, args=[Var(x1, audio.py:1151)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,406 find_def_from_top label 357
2023-08-13 11:42:39,406 idom 349 from label 357
2023-08-13 11:42:39,406 find_def_from_bottom label 349
2023-08-13 11:42:39,406 replaced with: $266call.9 = call $250load_attr.7(x1.2, func=$250load_attr.7, args=[Var(x1.2, audio.py:1156)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,406 on stmt: $276compare_op.10 = $228call.4 != $266call.9
2023-08-13 11:42:39,406 on stmt: $282return_value.11 = cast(value=$276compare_op.10)
2023-08-13 11:42:39,407 on stmt: out0[index00] = $282return_value.11
2023-08-13 11:42:39,407 on stmt: jump 441
2023-08-13 11:42:39,407 ==== SSA block rewrite pass on 441
2023-08-13 11:42:39,407 Running <numba.core.ssa._FixSSAVars object at 0x000001F696AFBA90>
2023-08-13 11:42:39,407 on stmt: jump 230
2023-08-13 11:42:39,407 Fix SSA violator on var stencil_index
2023-08-13 11:42:39,407 ==== SSA block rewrite pass on 0
2023-08-13 11:42:39,407 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696ADF710>
2023-08-13 11:42:39,407 on stmt: x = arg(0, name=x)
2023-08-13 11:42:39,407 on stmt: threshold = arg(1, name=threshold)
2023-08-13 11:42:39,407 on stmt: zero_pos = arg(2, name=zero_pos)
2023-08-13 11:42:39,407 on stmt: full_shape0 = getattr(value=x, attr=shape)
2023-08-13 11:42:39,408 on stmt: $18load_global.2.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:39,408 on stmt: $30load_method.4.1 = getattr(value=$18load_global.2.1, attr=empty)
2023-08-13 11:42:39,408 on stmt: $54load_global.6.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:39,408 on stmt: $66load_attr.7.1 = getattr(value=$54load_global.6.1, attr=bool_)
2023-08-13 11:42:39,408 on stmt: out0 = call $30load_method.4.1(full_shape0, func=$30load_method.4.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($66load_attr.7.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,408 on stmt: $const94.9.1 = const(int, 0)
2023-08-13 11:42:39,408 on stmt: $const98.11.1 = const(NoneType, None)
2023-08-13 11:42:39,408 on stmt: $const100.12.1 = const(int, 1)
2023-08-13 11:42:39,408 on stmt: $102build_slice.13.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:39,408 on stmt: $102build_slice.14.1 = call $102build_slice.13.1($const98.11.1, $const100.12.1, func=$102build_slice.13.1, args=(Var($const98.11.1, <string>:4), Var($const100.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,408 on stmt: out0[$102build_slice.14.1] = $const94.9.1
2023-08-13 11:42:39,409 on stmt: $const108.15.1 = const(int, 0)
2023-08-13 11:42:39,409 on stmt: $const112.17.1 = const(int, 0)
2023-08-13 11:42:39,409 on stmt: $const114.18.1 = const(NoneType, None)
2023-08-13 11:42:39,409 on stmt: $116build_slice.19.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:39,409 on stmt: $116build_slice.20.1 = call $116build_slice.19.1($const112.17.1, $const114.18.1, func=$116build_slice.19.1, args=(Var($const112.17.1, <string>:5), Var($const114.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,409 on stmt: out0[$116build_slice.20.1] = $const108.15.1
2023-08-13 11:42:39,409 on stmt: $122load_global.21.1 = global(range: <class 'range'>)
2023-08-13 11:42:39,409 on stmt: $134load_global.23.1 = global(min: <built-in function min>)
2023-08-13 11:42:39,409 on stmt: $const146.25.1 = const(int, 0)
2023-08-13 11:42:39,409 on stmt: $const148.26.1 = const(int, -1)
2023-08-13 11:42:39,409 on stmt: $154call.27.1 = call $134load_global.23.1($const146.25.1, $const148.26.1, func=$134load_global.23.1, args=[Var($const146.25.1, <string>:6), Var($const148.26.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,410 on stmt: $164unary_negative.28.1 = unary(fn=<built-in function neg>, value=$154call.27.1)
2023-08-13 11:42:39,410 on stmt: $const168.30.1 = const(int, 0)
2023-08-13 11:42:39,410 on stmt: $170binary_subscr.31.1 = getitem(value=full_shape0, index=$const168.30.1, fn=<built-in function getitem>)
2023-08-13 11:42:39,410 on stmt: $180load_global.32.1 = global(max: <built-in function max>)
2023-08-13 11:42:39,410 on stmt: $const192.34.1 = const(int, 0)
2023-08-13 11:42:39,410 on stmt: $const194.35.1 = const(int, 0)
2023-08-13 11:42:39,410 on stmt: $200call.36.1 = call $180load_global.32.1($const192.34.1, $const194.35.1, func=$180load_global.32.1, args=[Var($const192.34.1, <string>:6), Var($const194.35.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,410 on stmt: $binop_sub210.37.1 = $170binary_subscr.31.1 - $200call.36.1
2023-08-13 11:42:39,410 on stmt: $218call.38.1 = call $122load_global.21.1($164unary_negative.28.1, $binop_sub210.37.1, func=$122load_global.21.1, args=[Var($164unary_negative.28.1, <string>:6), Var($binop_sub210.37.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,410 on stmt: $228get_iter.39.1 = getiter(value=$218call.38.1)
2023-08-13 11:42:39,410 on stmt: $phi230.0.1 = $228get_iter.39.1
2023-08-13 11:42:39,411 on stmt: jump 230
2023-08-13 11:42:39,411 ==== SSA block rewrite pass on 230
2023-08-13 11:42:39,411 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696ADF710>
2023-08-13 11:42:39,411 on stmt: $230for_iter.1.1 = iternext(value=$phi230.0.1)
2023-08-13 11:42:39,411 on stmt: $230for_iter.2.1 = pair_first(value=$230for_iter.1.1)
2023-08-13 11:42:39,411 on stmt: $230for_iter.3.1 = pair_second(value=$230for_iter.1.1)
2023-08-13 11:42:39,411 on stmt: $phi232.1.1 = $230for_iter.2.1
2023-08-13 11:42:39,411 on stmt: branch $230for_iter.3.1, 232, 442
2023-08-13 11:42:39,411 ==== SSA block rewrite pass on 232
2023-08-13 11:42:39,411 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696ADF710>
2023-08-13 11:42:39,411 on stmt: index00 = $phi232.1.1
2023-08-13 11:42:39,411 on stmt: jump 240
2023-08-13 11:42:39,411 ==== SSA block rewrite pass on 442
2023-08-13 11:42:39,412 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696ADF710>
2023-08-13 11:42:39,412 on stmt: $242return_value.1.1 = cast(value=out0)
2023-08-13 11:42:39,412 on stmt: return $242return_value.1.1
2023-08-13 11:42:39,412 ==== SSA block rewrite pass on 240
2023-08-13 11:42:39,412 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696ADF710>
2023-08-13 11:42:39,412 on stmt: $const6.1 = const(int, 0)
2023-08-13 11:42:39,412 on stmt: stencil_index = $const6.1 + index00
2023-08-13 11:42:39,412 first assign: stencil_index
2023-08-13 11:42:39,412 replaced with: stencil_index = $const6.1 + index00
2023-08-13 11:42:39,412 on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:39,412 on stmt: $22unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2023-08-13 11:42:39,412 on stmt: $30compare_op.6 = $22unary_negative.4 <= x0
2023-08-13 11:42:39,413 on stmt: bool36 = global(bool: <class 'bool'>)
2023-08-13 11:42:39,413 on stmt: $36pred = call bool36($30compare_op.6, func=bool36, args=(Var($30compare_op.6, audio.py:1148),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,413 on stmt: $phi38.0 = x0
2023-08-13 11:42:39,413 on stmt: branch $36pred, 241, 291
2023-08-13 11:42:39,413 ==== SSA block rewrite pass on 241
2023-08-13 11:42:39,413 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696ADF710>
2023-08-13 11:42:39,413 on stmt: $40compare_op.2 = x0 <= threshold
2023-08-13 11:42:39,413 on stmt: bool46 = global(bool: <class 'bool'>)
2023-08-13 11:42:39,413 on stmt: $46pred = call bool46($40compare_op.2, func=bool46, args=(Var($40compare_op.2, audio.py:1148),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,413 on stmt: branch $46pred, 279, 295
2023-08-13 11:42:39,413 ==== SSA block rewrite pass on 279
2023-08-13 11:42:39,413 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696ADF710>
2023-08-13 11:42:39,414 on stmt: jump 289
2023-08-13 11:42:39,414 ==== SSA block rewrite pass on 291
2023-08-13 11:42:39,414 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696ADF710>
2023-08-13 11:42:39,414 on stmt: jump 295
2023-08-13 11:42:39,414 ==== SSA block rewrite pass on 289
2023-08-13 11:42:39,414 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696ADF710>
2023-08-13 11:42:39,414 on stmt: x0 = const(int, 0)
2023-08-13 11:42:39,414 on stmt: jump 295
2023-08-13 11:42:39,415 ==== SSA block rewrite pass on 295
2023-08-13 11:42:39,415 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696ADF710>
2023-08-13 11:42:39,415 on stmt: $const60.1 = const(int, -1)
2023-08-13 11:42:39,415 on stmt: stencil_index = $const60.1 + index00
2023-08-13 11:42:39,415 replaced with: stencil_index.1 = $const60.1 + index00
2023-08-13 11:42:39,415 on stmt: x1 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:39,416 on stmt: $76unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2023-08-13 11:42:39,416 on stmt: $84compare_op.6 = $76unary_negative.4 <= x1
2023-08-13 11:42:39,416 on stmt: bool90 = global(bool: <class 'bool'>)
2023-08-13 11:42:39,416 on stmt: $90pred = call bool90($84compare_op.6, func=bool90, args=(Var($84compare_op.6, audio.py:1152),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,416 on stmt: $phi92.0 = x1
2023-08-13 11:42:39,416 on stmt: branch $90pred, 299, 345
2023-08-13 11:42:39,416 ==== SSA block rewrite pass on 299
2023-08-13 11:42:39,416 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696ADF710>
2023-08-13 11:42:39,416 on stmt: $94compare_op.2 = x1 <= threshold
2023-08-13 11:42:39,416 on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-13 11:42:39,416 on stmt: $100pred = call bool100($94compare_op.2, func=bool100, args=(Var($94compare_op.2, audio.py:1152),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,416 on stmt: branch $100pred, 333, 349
2023-08-13 11:42:39,416 ==== SSA block rewrite pass on 333
2023-08-13 11:42:39,416 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696ADF710>
2023-08-13 11:42:39,417 on stmt: jump 343
2023-08-13 11:42:39,417 ==== SSA block rewrite pass on 345
2023-08-13 11:42:39,417 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696ADF710>
2023-08-13 11:42:39,417 on stmt: jump 349
2023-08-13 11:42:39,417 ==== SSA block rewrite pass on 343
2023-08-13 11:42:39,417 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696ADF710>
2023-08-13 11:42:39,417 on stmt: x1.1 = const(int, 0)
2023-08-13 11:42:39,417 on stmt: jump 349
2023-08-13 11:42:39,417 ==== SSA block rewrite pass on 349
2023-08-13 11:42:39,417 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696ADF710>
2023-08-13 11:42:39,417 on stmt: x1.2 = phi(incoming_values=[Var(x1, audio.py:1151), Var(x1, audio.py:1151), Var(x1.1, audio.py:1153)], incoming_blocks=[345, 299, 343])
2023-08-13 11:42:39,418 on stmt: bool114 = global(bool: <class 'bool'>)
2023-08-13 11:42:39,418 on stmt: $114pred = call bool114(zero_pos, func=bool114, args=(Var(zero_pos, audio.py:1144),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,418 on stmt: branch $114pred, 353, 357
2023-08-13 11:42:39,418 ==== SSA block rewrite pass on 353
2023-08-13 11:42:39,418 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696ADF710>
2023-08-13 11:42:39,418 on stmt: $116load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:39,418 on stmt: $128load_attr.2 = getattr(value=$116load_global.0, attr=signbit)
2023-08-13 11:42:39,418 on stmt: $144call.4 = call $128load_attr.2(x0, func=$128load_attr.2, args=[Var(x0, audio.py:1147)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,418 on stmt: $154load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:39,419 on stmt: $166load_attr.7 = getattr(value=$154load_global.5, attr=signbit)
2023-08-13 11:42:39,419 on stmt: $182call.9 = call $166load_attr.7(x1.2, func=$166load_attr.7, args=[Var(x1.2, audio.py:1156)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,419 on stmt: $192compare_op.10 = $144call.4 != $182call.9
2023-08-13 11:42:39,419 on stmt: $198return_value.11 = cast(value=$192compare_op.10)
2023-08-13 11:42:39,419 on stmt: out0[index00] = $198return_value.11
2023-08-13 11:42:39,419 on stmt: jump 441
2023-08-13 11:42:39,420 ==== SSA block rewrite pass on 357
2023-08-13 11:42:39,420 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696ADF710>
2023-08-13 11:42:39,420 on stmt: $200load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:39,420 on stmt: $212load_attr.2 = getattr(value=$200load_global.0, attr=sign)
2023-08-13 11:42:39,420 on stmt: $228call.4 = call $212load_attr.2(x0, func=$212load_attr.2, args=[Var(x0, audio.py:1147)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,420 on stmt: $238load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:39,421 on stmt: $250load_attr.7 = getattr(value=$238load_global.5, attr=sign)
2023-08-13 11:42:39,421 on stmt: $266call.9 = call $250load_attr.7(x1.2, func=$250load_attr.7, args=[Var(x1.2, audio.py:1156)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,421 on stmt: $276compare_op.10 = $228call.4 != $266call.9
2023-08-13 11:42:39,421 on stmt: $282return_value.11 = cast(value=$276compare_op.10)
2023-08-13 11:42:39,421 on stmt: out0[index00] = $282return_value.11
2023-08-13 11:42:39,421 on stmt: jump 441
2023-08-13 11:42:39,421 ==== SSA block rewrite pass on 441
2023-08-13 11:42:39,421 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696ADF710>
2023-08-13 11:42:39,421 on stmt: jump 230
2023-08-13 11:42:39,421 Replaced assignments: defaultdict(<class 'list'>,
            {240: [<numba.core.ir.Assign object at 0x000001F6966E2210>],
             295: [<numba.core.ir.Assign object at 0x000001F6966D94D0>]})
2023-08-13 11:42:39,421 ==== SSA block rewrite pass on 0
2023-08-13 11:42:39,422 Running <numba.core.ssa._FixSSAVars object at 0x000001F696ADF710>
2023-08-13 11:42:39,422 on stmt: x = arg(0, name=x)
2023-08-13 11:42:39,422 on stmt: threshold = arg(1, name=threshold)
2023-08-13 11:42:39,422 on stmt: zero_pos = arg(2, name=zero_pos)
2023-08-13 11:42:39,422 on stmt: full_shape0 = getattr(value=x, attr=shape)
2023-08-13 11:42:39,422 on stmt: $18load_global.2.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:39,422 on stmt: $30load_method.4.1 = getattr(value=$18load_global.2.1, attr=empty)
2023-08-13 11:42:39,422 on stmt: $54load_global.6.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:39,422 on stmt: $66load_attr.7.1 = getattr(value=$54load_global.6.1, attr=bool_)
2023-08-13 11:42:39,422 on stmt: out0 = call $30load_method.4.1(full_shape0, func=$30load_method.4.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($66load_attr.7.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,422 on stmt: $const94.9.1 = const(int, 0)
2023-08-13 11:42:39,422 on stmt: $const98.11.1 = const(NoneType, None)
2023-08-13 11:42:39,423 on stmt: $const100.12.1 = const(int, 1)
2023-08-13 11:42:39,423 on stmt: $102build_slice.13.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:39,423 on stmt: $102build_slice.14.1 = call $102build_slice.13.1($const98.11.1, $const100.12.1, func=$102build_slice.13.1, args=(Var($const98.11.1, <string>:4), Var($const100.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,423 on stmt: out0[$102build_slice.14.1] = $const94.9.1
2023-08-13 11:42:39,423 on stmt: $const108.15.1 = const(int, 0)
2023-08-13 11:42:39,423 on stmt: $const112.17.1 = const(int, 0)
2023-08-13 11:42:39,423 on stmt: $const114.18.1 = const(NoneType, None)
2023-08-13 11:42:39,423 on stmt: $116build_slice.19.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:39,423 on stmt: $116build_slice.20.1 = call $116build_slice.19.1($const112.17.1, $const114.18.1, func=$116build_slice.19.1, args=(Var($const112.17.1, <string>:5), Var($const114.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,423 on stmt: out0[$116build_slice.20.1] = $const108.15.1
2023-08-13 11:42:39,423 on stmt: $122load_global.21.1 = global(range: <class 'range'>)
2023-08-13 11:42:39,423 on stmt: $134load_global.23.1 = global(min: <built-in function min>)
2023-08-13 11:42:39,424 on stmt: $const146.25.1 = const(int, 0)
2023-08-13 11:42:39,424 on stmt: $const148.26.1 = const(int, -1)
2023-08-13 11:42:39,424 on stmt: $154call.27.1 = call $134load_global.23.1($const146.25.1, $const148.26.1, func=$134load_global.23.1, args=[Var($const146.25.1, <string>:6), Var($const148.26.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,424 on stmt: $164unary_negative.28.1 = unary(fn=<built-in function neg>, value=$154call.27.1)
2023-08-13 11:42:39,424 on stmt: $const168.30.1 = const(int, 0)
2023-08-13 11:42:39,424 on stmt: $170binary_subscr.31.1 = getitem(value=full_shape0, index=$const168.30.1, fn=<built-in function getitem>)
2023-08-13 11:42:39,424 on stmt: $180load_global.32.1 = global(max: <built-in function max>)
2023-08-13 11:42:39,424 on stmt: $const192.34.1 = const(int, 0)
2023-08-13 11:42:39,424 on stmt: $const194.35.1 = const(int, 0)
2023-08-13 11:42:39,424 on stmt: $200call.36.1 = call $180load_global.32.1($const192.34.1, $const194.35.1, func=$180load_global.32.1, args=[Var($const192.34.1, <string>:6), Var($const194.35.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,424 on stmt: $binop_sub210.37.1 = $170binary_subscr.31.1 - $200call.36.1
2023-08-13 11:42:39,424 on stmt: $218call.38.1 = call $122load_global.21.1($164unary_negative.28.1, $binop_sub210.37.1, func=$122load_global.21.1, args=[Var($164unary_negative.28.1, <string>:6), Var($binop_sub210.37.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,425 on stmt: $228get_iter.39.1 = getiter(value=$218call.38.1)
2023-08-13 11:42:39,425 on stmt: $phi230.0.1 = $228get_iter.39.1
2023-08-13 11:42:39,425 on stmt: jump 230
2023-08-13 11:42:39,425 ==== SSA block rewrite pass on 230
2023-08-13 11:42:39,425 Running <numba.core.ssa._FixSSAVars object at 0x000001F696ADF710>
2023-08-13 11:42:39,425 on stmt: $230for_iter.1.1 = iternext(value=$phi230.0.1)
2023-08-13 11:42:39,425 on stmt: $230for_iter.2.1 = pair_first(value=$230for_iter.1.1)
2023-08-13 11:42:39,425 on stmt: $230for_iter.3.1 = pair_second(value=$230for_iter.1.1)
2023-08-13 11:42:39,425 on stmt: $phi232.1.1 = $230for_iter.2.1
2023-08-13 11:42:39,425 on stmt: branch $230for_iter.3.1, 232, 442
2023-08-13 11:42:39,425 ==== SSA block rewrite pass on 232
2023-08-13 11:42:39,425 Running <numba.core.ssa._FixSSAVars object at 0x000001F696ADF710>
2023-08-13 11:42:39,425 on stmt: index00 = $phi232.1.1
2023-08-13 11:42:39,425 on stmt: jump 240
2023-08-13 11:42:39,426 ==== SSA block rewrite pass on 442
2023-08-13 11:42:39,426 Running <numba.core.ssa._FixSSAVars object at 0x000001F696ADF710>
2023-08-13 11:42:39,426 on stmt: $242return_value.1.1 = cast(value=out0)
2023-08-13 11:42:39,426 on stmt: return $242return_value.1.1
2023-08-13 11:42:39,426 ==== SSA block rewrite pass on 240
2023-08-13 11:42:39,426 Running <numba.core.ssa._FixSSAVars object at 0x000001F696ADF710>
2023-08-13 11:42:39,426 on stmt: $const6.1 = const(int, 0)
2023-08-13 11:42:39,426 on stmt: stencil_index = $const6.1 + index00
2023-08-13 11:42:39,426 on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:39,426 find_def var='stencil_index' stmt=x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:39,426 on stmt: $22unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2023-08-13 11:42:39,427 on stmt: $30compare_op.6 = $22unary_negative.4 <= x0
2023-08-13 11:42:39,427 on stmt: bool36 = global(bool: <class 'bool'>)
2023-08-13 11:42:39,427 on stmt: $36pred = call bool36($30compare_op.6, func=bool36, args=(Var($30compare_op.6, audio.py:1148),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,427 on stmt: $phi38.0 = x0
2023-08-13 11:42:39,427 on stmt: branch $36pred, 241, 291
2023-08-13 11:42:39,427 ==== SSA block rewrite pass on 241
2023-08-13 11:42:39,427 Running <numba.core.ssa._FixSSAVars object at 0x000001F696ADF710>
2023-08-13 11:42:39,427 on stmt: $40compare_op.2 = x0 <= threshold
2023-08-13 11:42:39,427 on stmt: bool46 = global(bool: <class 'bool'>)
2023-08-13 11:42:39,427 on stmt: $46pred = call bool46($40compare_op.2, func=bool46, args=(Var($40compare_op.2, audio.py:1148),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,427 on stmt: branch $46pred, 279, 295
2023-08-13 11:42:39,428 ==== SSA block rewrite pass on 279
2023-08-13 11:42:39,428 Running <numba.core.ssa._FixSSAVars object at 0x000001F696ADF710>
2023-08-13 11:42:39,428 on stmt: jump 289
2023-08-13 11:42:39,428 ==== SSA block rewrite pass on 291
2023-08-13 11:42:39,428 Running <numba.core.ssa._FixSSAVars object at 0x000001F696ADF710>
2023-08-13 11:42:39,428 on stmt: jump 295
2023-08-13 11:42:39,428 ==== SSA block rewrite pass on 289
2023-08-13 11:42:39,428 Running <numba.core.ssa._FixSSAVars object at 0x000001F696ADF710>
2023-08-13 11:42:39,428 on stmt: x0 = const(int, 0)
2023-08-13 11:42:39,428 on stmt: jump 295
2023-08-13 11:42:39,428 ==== SSA block rewrite pass on 295
2023-08-13 11:42:39,428 Running <numba.core.ssa._FixSSAVars object at 0x000001F696ADF710>
2023-08-13 11:42:39,428 on stmt: $const60.1 = const(int, -1)
2023-08-13 11:42:39,428 on stmt: stencil_index.1 = $const60.1 + index00
2023-08-13 11:42:39,429 on stmt: x1 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:39,429 find_def var='stencil_index' stmt=x1 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:39,429 replaced with: x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2023-08-13 11:42:39,429 on stmt: $76unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2023-08-13 11:42:39,429 on stmt: $84compare_op.6 = $76unary_negative.4 <= x1
2023-08-13 11:42:39,429 on stmt: bool90 = global(bool: <class 'bool'>)
2023-08-13 11:42:39,429 on stmt: $90pred = call bool90($84compare_op.6, func=bool90, args=(Var($84compare_op.6, audio.py:1152),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,429 on stmt: $phi92.0 = x1
2023-08-13 11:42:39,430 on stmt: branch $90pred, 299, 345
2023-08-13 11:42:39,430 ==== SSA block rewrite pass on 299
2023-08-13 11:42:39,430 Running <numba.core.ssa._FixSSAVars object at 0x000001F696ADF710>
2023-08-13 11:42:39,430 on stmt: $94compare_op.2 = x1 <= threshold
2023-08-13 11:42:39,430 on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-13 11:42:39,430 on stmt: $100pred = call bool100($94compare_op.2, func=bool100, args=(Var($94compare_op.2, audio.py:1152),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,430 on stmt: branch $100pred, 333, 349
2023-08-13 11:42:39,430 ==== SSA block rewrite pass on 333
2023-08-13 11:42:39,430 Running <numba.core.ssa._FixSSAVars object at 0x000001F696ADF710>
2023-08-13 11:42:39,430 on stmt: jump 343
2023-08-13 11:42:39,431 ==== SSA block rewrite pass on 345
2023-08-13 11:42:39,431 Running <numba.core.ssa._FixSSAVars object at 0x000001F696ADF710>
2023-08-13 11:42:39,431 on stmt: jump 349
2023-08-13 11:42:39,431 ==== SSA block rewrite pass on 343
2023-08-13 11:42:39,431 Running <numba.core.ssa._FixSSAVars object at 0x000001F696ADF710>
2023-08-13 11:42:39,431 on stmt: x1.1 = const(int, 0)
2023-08-13 11:42:39,431 on stmt: jump 349
2023-08-13 11:42:39,432 ==== SSA block rewrite pass on 349
2023-08-13 11:42:39,432 Running <numba.core.ssa._FixSSAVars object at 0x000001F696ADF710>
2023-08-13 11:42:39,432 on stmt: x1.2 = phi(incoming_values=[Var(x1, audio.py:1151), Var(x1, audio.py:1151), Var(x1.1, audio.py:1153)], incoming_blocks=[345, 299, 343])
2023-08-13 11:42:39,432 on stmt: bool114 = global(bool: <class 'bool'>)
2023-08-13 11:42:39,432 on stmt: $114pred = call bool114(zero_pos, func=bool114, args=(Var(zero_pos, audio.py:1144),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,432 on stmt: branch $114pred, 353, 357
2023-08-13 11:42:39,432 ==== SSA block rewrite pass on 353
2023-08-13 11:42:39,432 Running <numba.core.ssa._FixSSAVars object at 0x000001F696ADF710>
2023-08-13 11:42:39,432 on stmt: $116load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:39,432 on stmt: $128load_attr.2 = getattr(value=$116load_global.0, attr=signbit)
2023-08-13 11:42:39,432 on stmt: $144call.4 = call $128load_attr.2(x0, func=$128load_attr.2, args=[Var(x0, audio.py:1147)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,433 on stmt: $154load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:39,433 on stmt: $166load_attr.7 = getattr(value=$154load_global.5, attr=signbit)
2023-08-13 11:42:39,433 on stmt: $182call.9 = call $166load_attr.7(x1.2, func=$166load_attr.7, args=[Var(x1.2, audio.py:1156)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,433 on stmt: $192compare_op.10 = $144call.4 != $182call.9
2023-08-13 11:42:39,433 on stmt: $198return_value.11 = cast(value=$192compare_op.10)
2023-08-13 11:42:39,433 on stmt: out0[index00] = $198return_value.11
2023-08-13 11:42:39,434 on stmt: jump 441
2023-08-13 11:42:39,434 ==== SSA block rewrite pass on 357
2023-08-13 11:42:39,434 Running <numba.core.ssa._FixSSAVars object at 0x000001F696ADF710>
2023-08-13 11:42:39,434 on stmt: $200load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:39,434 on stmt: $212load_attr.2 = getattr(value=$200load_global.0, attr=sign)
2023-08-13 11:42:39,434 on stmt: $228call.4 = call $212load_attr.2(x0, func=$212load_attr.2, args=[Var(x0, audio.py:1147)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,434 on stmt: $238load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:39,435 on stmt: $250load_attr.7 = getattr(value=$238load_global.5, attr=sign)
2023-08-13 11:42:39,435 on stmt: $266call.9 = call $250load_attr.7(x1.2, func=$250load_attr.7, args=[Var(x1.2, audio.py:1156)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,435 on stmt: $276compare_op.10 = $228call.4 != $266call.9
2023-08-13 11:42:39,436 on stmt: $282return_value.11 = cast(value=$276compare_op.10)
2023-08-13 11:42:39,436 on stmt: out0[index00] = $282return_value.11
2023-08-13 11:42:39,437 on stmt: jump 441
2023-08-13 11:42:39,437 ==== SSA block rewrite pass on 441
2023-08-13 11:42:39,437 Running <numba.core.ssa._FixSSAVars object at 0x000001F696ADF710>
2023-08-13 11:42:39,437 on stmt: jump 230
2023-08-13 11:42:39,437 Fix SSA violator on var x0
2023-08-13 11:42:39,437 ==== SSA block rewrite pass on 0
2023-08-13 11:42:39,437 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6963D3B50>
2023-08-13 11:42:39,437 on stmt: x = arg(0, name=x)
2023-08-13 11:42:39,437 on stmt: threshold = arg(1, name=threshold)
2023-08-13 11:42:39,437 on stmt: zero_pos = arg(2, name=zero_pos)
2023-08-13 11:42:39,437 on stmt: full_shape0 = getattr(value=x, attr=shape)
2023-08-13 11:42:39,438 on stmt: $18load_global.2.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:39,438 on stmt: $30load_method.4.1 = getattr(value=$18load_global.2.1, attr=empty)
2023-08-13 11:42:39,438 on stmt: $54load_global.6.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:39,438 on stmt: $66load_attr.7.1 = getattr(value=$54load_global.6.1, attr=bool_)
2023-08-13 11:42:39,438 on stmt: out0 = call $30load_method.4.1(full_shape0, func=$30load_method.4.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($66load_attr.7.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,438 on stmt: $const94.9.1 = const(int, 0)
2023-08-13 11:42:39,438 on stmt: $const98.11.1 = const(NoneType, None)
2023-08-13 11:42:39,438 on stmt: $const100.12.1 = const(int, 1)
2023-08-13 11:42:39,438 on stmt: $102build_slice.13.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:39,438 on stmt: $102build_slice.14.1 = call $102build_slice.13.1($const98.11.1, $const100.12.1, func=$102build_slice.13.1, args=(Var($const98.11.1, <string>:4), Var($const100.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,438 on stmt: out0[$102build_slice.14.1] = $const94.9.1
2023-08-13 11:42:39,439 on stmt: $const108.15.1 = const(int, 0)
2023-08-13 11:42:39,439 on stmt: $const112.17.1 = const(int, 0)
2023-08-13 11:42:39,439 on stmt: $const114.18.1 = const(NoneType, None)
2023-08-13 11:42:39,439 on stmt: $116build_slice.19.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:39,439 on stmt: $116build_slice.20.1 = call $116build_slice.19.1($const112.17.1, $const114.18.1, func=$116build_slice.19.1, args=(Var($const112.17.1, <string>:5), Var($const114.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,439 on stmt: out0[$116build_slice.20.1] = $const108.15.1
2023-08-13 11:42:39,439 on stmt: $122load_global.21.1 = global(range: <class 'range'>)
2023-08-13 11:42:39,439 on stmt: $134load_global.23.1 = global(min: <built-in function min>)
2023-08-13 11:42:39,439 on stmt: $const146.25.1 = const(int, 0)
2023-08-13 11:42:39,439 on stmt: $const148.26.1 = const(int, -1)
2023-08-13 11:42:39,439 on stmt: $154call.27.1 = call $134load_global.23.1($const146.25.1, $const148.26.1, func=$134load_global.23.1, args=[Var($const146.25.1, <string>:6), Var($const148.26.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,440 on stmt: $164unary_negative.28.1 = unary(fn=<built-in function neg>, value=$154call.27.1)
2023-08-13 11:42:39,440 on stmt: $const168.30.1 = const(int, 0)
2023-08-13 11:42:39,440 on stmt: $170binary_subscr.31.1 = getitem(value=full_shape0, index=$const168.30.1, fn=<built-in function getitem>)
2023-08-13 11:42:39,440 on stmt: $180load_global.32.1 = global(max: <built-in function max>)
2023-08-13 11:42:39,440 on stmt: $const192.34.1 = const(int, 0)
2023-08-13 11:42:39,440 on stmt: $const194.35.1 = const(int, 0)
2023-08-13 11:42:39,440 on stmt: $200call.36.1 = call $180load_global.32.1($const192.34.1, $const194.35.1, func=$180load_global.32.1, args=[Var($const192.34.1, <string>:6), Var($const194.35.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,441 on stmt: $binop_sub210.37.1 = $170binary_subscr.31.1 - $200call.36.1
2023-08-13 11:42:39,441 on stmt: $218call.38.1 = call $122load_global.21.1($164unary_negative.28.1, $binop_sub210.37.1, func=$122load_global.21.1, args=[Var($164unary_negative.28.1, <string>:6), Var($binop_sub210.37.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,441 on stmt: $228get_iter.39.1 = getiter(value=$218call.38.1)
2023-08-13 11:42:39,441 on stmt: $phi230.0.1 = $228get_iter.39.1
2023-08-13 11:42:39,441 on stmt: jump 230
2023-08-13 11:42:39,441 ==== SSA block rewrite pass on 230
2023-08-13 11:42:39,441 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6963D3B50>
2023-08-13 11:42:39,441 on stmt: $230for_iter.1.1 = iternext(value=$phi230.0.1)
2023-08-13 11:42:39,441 on stmt: $230for_iter.2.1 = pair_first(value=$230for_iter.1.1)
2023-08-13 11:42:39,441 on stmt: $230for_iter.3.1 = pair_second(value=$230for_iter.1.1)
2023-08-13 11:42:39,442 on stmt: $phi232.1.1 = $230for_iter.2.1
2023-08-13 11:42:39,442 on stmt: branch $230for_iter.3.1, 232, 442
2023-08-13 11:42:39,442 ==== SSA block rewrite pass on 232
2023-08-13 11:42:39,442 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6963D3B50>
2023-08-13 11:42:39,442 on stmt: index00 = $phi232.1.1
2023-08-13 11:42:39,442 on stmt: jump 240
2023-08-13 11:42:39,442 ==== SSA block rewrite pass on 442
2023-08-13 11:42:39,442 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6963D3B50>
2023-08-13 11:42:39,442 on stmt: $242return_value.1.1 = cast(value=out0)
2023-08-13 11:42:39,442 on stmt: return $242return_value.1.1
2023-08-13 11:42:39,442 ==== SSA block rewrite pass on 240
2023-08-13 11:42:39,443 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6963D3B50>
2023-08-13 11:42:39,443 on stmt: $const6.1 = const(int, 0)
2023-08-13 11:42:39,443 on stmt: stencil_index = $const6.1 + index00
2023-08-13 11:42:39,443 on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:39,443 first assign: x0
2023-08-13 11:42:39,443 replaced with: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:39,443 on stmt: $22unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2023-08-13 11:42:39,443 on stmt: $30compare_op.6 = $22unary_negative.4 <= x0
2023-08-13 11:42:39,443 on stmt: bool36 = global(bool: <class 'bool'>)
2023-08-13 11:42:39,443 on stmt: $36pred = call bool36($30compare_op.6, func=bool36, args=(Var($30compare_op.6, audio.py:1148),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,443 on stmt: $phi38.0 = x0
2023-08-13 11:42:39,444 on stmt: branch $36pred, 241, 291
2023-08-13 11:42:39,444 ==== SSA block rewrite pass on 241
2023-08-13 11:42:39,444 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6963D3B50>
2023-08-13 11:42:39,444 on stmt: $40compare_op.2 = x0 <= threshold
2023-08-13 11:42:39,444 on stmt: bool46 = global(bool: <class 'bool'>)
2023-08-13 11:42:39,444 on stmt: $46pred = call bool46($40compare_op.2, func=bool46, args=(Var($40compare_op.2, audio.py:1148),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,444 on stmt: branch $46pred, 279, 295
2023-08-13 11:42:39,444 ==== SSA block rewrite pass on 279
2023-08-13 11:42:39,444 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6963D3B50>
2023-08-13 11:42:39,444 on stmt: jump 289
2023-08-13 11:42:39,444 ==== SSA block rewrite pass on 291
2023-08-13 11:42:39,444 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6963D3B50>
2023-08-13 11:42:39,444 on stmt: jump 295
2023-08-13 11:42:39,445 ==== SSA block rewrite pass on 289
2023-08-13 11:42:39,445 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6963D3B50>
2023-08-13 11:42:39,445 on stmt: x0 = const(int, 0)
2023-08-13 11:42:39,445 replaced with: x0.1 = const(int, 0)
2023-08-13 11:42:39,445 on stmt: jump 295
2023-08-13 11:42:39,445 ==== SSA block rewrite pass on 295
2023-08-13 11:42:39,445 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6963D3B50>
2023-08-13 11:42:39,445 on stmt: $const60.1 = const(int, -1)
2023-08-13 11:42:39,445 on stmt: stencil_index.1 = $const60.1 + index00
2023-08-13 11:42:39,445 on stmt: x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2023-08-13 11:42:39,445 on stmt: $76unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2023-08-13 11:42:39,445 on stmt: $84compare_op.6 = $76unary_negative.4 <= x1
2023-08-13 11:42:39,445 on stmt: bool90 = global(bool: <class 'bool'>)
2023-08-13 11:42:39,446 on stmt: $90pred = call bool90($84compare_op.6, func=bool90, args=(Var($84compare_op.6, audio.py:1152),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,446 on stmt: $phi92.0 = x1
2023-08-13 11:42:39,446 on stmt: branch $90pred, 299, 345
2023-08-13 11:42:39,446 ==== SSA block rewrite pass on 299
2023-08-13 11:42:39,446 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6963D3B50>
2023-08-13 11:42:39,446 on stmt: $94compare_op.2 = x1 <= threshold
2023-08-13 11:42:39,446 on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-13 11:42:39,446 on stmt: $100pred = call bool100($94compare_op.2, func=bool100, args=(Var($94compare_op.2, audio.py:1152),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,446 on stmt: branch $100pred, 333, 349
2023-08-13 11:42:39,446 ==== SSA block rewrite pass on 333
2023-08-13 11:42:39,446 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6963D3B50>
2023-08-13 11:42:39,446 on stmt: jump 343
2023-08-13 11:42:39,446 ==== SSA block rewrite pass on 345
2023-08-13 11:42:39,447 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6963D3B50>
2023-08-13 11:42:39,447 on stmt: jump 349
2023-08-13 11:42:39,447 ==== SSA block rewrite pass on 343
2023-08-13 11:42:39,447 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6963D3B50>
2023-08-13 11:42:39,447 on stmt: x1.1 = const(int, 0)
2023-08-13 11:42:39,447 on stmt: jump 349
2023-08-13 11:42:39,447 ==== SSA block rewrite pass on 349
2023-08-13 11:42:39,447 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6963D3B50>
2023-08-13 11:42:39,447 on stmt: x1.2 = phi(incoming_values=[Var(x1, audio.py:1151), Var(x1, audio.py:1151), Var(x1.1, audio.py:1153)], incoming_blocks=[345, 299, 343])
2023-08-13 11:42:39,448 on stmt: bool114 = global(bool: <class 'bool'>)
2023-08-13 11:42:39,448 on stmt: $114pred = call bool114(zero_pos, func=bool114, args=(Var(zero_pos, audio.py:1144),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,448 on stmt: branch $114pred, 353, 357
2023-08-13 11:42:39,448 ==== SSA block rewrite pass on 353
2023-08-13 11:42:39,448 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6963D3B50>
2023-08-13 11:42:39,448 on stmt: $116load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:39,448 on stmt: $128load_attr.2 = getattr(value=$116load_global.0, attr=signbit)
2023-08-13 11:42:39,448 on stmt: $144call.4 = call $128load_attr.2(x0, func=$128load_attr.2, args=[Var(x0, audio.py:1147)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,448 on stmt: $154load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:39,449 on stmt: $166load_attr.7 = getattr(value=$154load_global.5, attr=signbit)
2023-08-13 11:42:39,449 on stmt: $182call.9 = call $166load_attr.7(x1.2, func=$166load_attr.7, args=[Var(x1.2, audio.py:1156)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,449 on stmt: $192compare_op.10 = $144call.4 != $182call.9
2023-08-13 11:42:39,449 on stmt: $198return_value.11 = cast(value=$192compare_op.10)
2023-08-13 11:42:39,449 on stmt: out0[index00] = $198return_value.11
2023-08-13 11:42:39,449 on stmt: jump 441
2023-08-13 11:42:39,449 ==== SSA block rewrite pass on 357
2023-08-13 11:42:39,449 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6963D3B50>
2023-08-13 11:42:39,449 on stmt: $200load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:39,450 on stmt: $212load_attr.2 = getattr(value=$200load_global.0, attr=sign)
2023-08-13 11:42:39,450 on stmt: $228call.4 = call $212load_attr.2(x0, func=$212load_attr.2, args=[Var(x0, audio.py:1147)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,450 on stmt: $238load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:39,450 on stmt: $250load_attr.7 = getattr(value=$238load_global.5, attr=sign)
2023-08-13 11:42:39,450 on stmt: $266call.9 = call $250load_attr.7(x1.2, func=$250load_attr.7, args=[Var(x1.2, audio.py:1156)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,450 on stmt: $276compare_op.10 = $228call.4 != $266call.9
2023-08-13 11:42:39,450 on stmt: $282return_value.11 = cast(value=$276compare_op.10)
2023-08-13 11:42:39,450 on stmt: out0[index00] = $282return_value.11
2023-08-13 11:42:39,450 on stmt: jump 441
2023-08-13 11:42:39,450 ==== SSA block rewrite pass on 441
2023-08-13 11:42:39,450 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6963D3B50>
2023-08-13 11:42:39,451 on stmt: jump 230
2023-08-13 11:42:39,451 Replaced assignments: defaultdict(<class 'list'>,
            {240: [<numba.core.ir.Assign object at 0x000001F6963717D0>],
             289: [<numba.core.ir.Assign object at 0x000001F6966F2150>]})
2023-08-13 11:42:39,451 ==== SSA block rewrite pass on 0
2023-08-13 11:42:39,451 Running <numba.core.ssa._FixSSAVars object at 0x000001F6963D3B50>
2023-08-13 11:42:39,451 on stmt: x = arg(0, name=x)
2023-08-13 11:42:39,451 on stmt: threshold = arg(1, name=threshold)
2023-08-13 11:42:39,451 on stmt: zero_pos = arg(2, name=zero_pos)
2023-08-13 11:42:39,451 on stmt: full_shape0 = getattr(value=x, attr=shape)
2023-08-13 11:42:39,451 on stmt: $18load_global.2.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:39,452 on stmt: $30load_method.4.1 = getattr(value=$18load_global.2.1, attr=empty)
2023-08-13 11:42:39,452 on stmt: $54load_global.6.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:39,452 on stmt: $66load_attr.7.1 = getattr(value=$54load_global.6.1, attr=bool_)
2023-08-13 11:42:39,452 on stmt: out0 = call $30load_method.4.1(full_shape0, func=$30load_method.4.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($66load_attr.7.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,452 on stmt: $const94.9.1 = const(int, 0)
2023-08-13 11:42:39,453 on stmt: $const98.11.1 = const(NoneType, None)
2023-08-13 11:42:39,453 on stmt: $const100.12.1 = const(int, 1)
2023-08-13 11:42:39,453 on stmt: $102build_slice.13.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:39,453 on stmt: $102build_slice.14.1 = call $102build_slice.13.1($const98.11.1, $const100.12.1, func=$102build_slice.13.1, args=(Var($const98.11.1, <string>:4), Var($const100.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,453 on stmt: out0[$102build_slice.14.1] = $const94.9.1
2023-08-13 11:42:39,453 on stmt: $const108.15.1 = const(int, 0)
2023-08-13 11:42:39,453 on stmt: $const112.17.1 = const(int, 0)
2023-08-13 11:42:39,453 on stmt: $const114.18.1 = const(NoneType, None)
2023-08-13 11:42:39,453 on stmt: $116build_slice.19.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:39,453 on stmt: $116build_slice.20.1 = call $116build_slice.19.1($const112.17.1, $const114.18.1, func=$116build_slice.19.1, args=(Var($const112.17.1, <string>:5), Var($const114.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,454 on stmt: out0[$116build_slice.20.1] = $const108.15.1
2023-08-13 11:42:39,454 on stmt: $122load_global.21.1 = global(range: <class 'range'>)
2023-08-13 11:42:39,454 on stmt: $134load_global.23.1 = global(min: <built-in function min>)
2023-08-13 11:42:39,454 on stmt: $const146.25.1 = const(int, 0)
2023-08-13 11:42:39,454 on stmt: $const148.26.1 = const(int, -1)
2023-08-13 11:42:39,454 on stmt: $154call.27.1 = call $134load_global.23.1($const146.25.1, $const148.26.1, func=$134load_global.23.1, args=[Var($const146.25.1, <string>:6), Var($const148.26.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,454 on stmt: $164unary_negative.28.1 = unary(fn=<built-in function neg>, value=$154call.27.1)
2023-08-13 11:42:39,454 on stmt: $const168.30.1 = const(int, 0)
2023-08-13 11:42:39,454 on stmt: $170binary_subscr.31.1 = getitem(value=full_shape0, index=$const168.30.1, fn=<built-in function getitem>)
2023-08-13 11:42:39,454 on stmt: $180load_global.32.1 = global(max: <built-in function max>)
2023-08-13 11:42:39,454 on stmt: $const192.34.1 = const(int, 0)
2023-08-13 11:42:39,454 on stmt: $const194.35.1 = const(int, 0)
2023-08-13 11:42:39,454 on stmt: $200call.36.1 = call $180load_global.32.1($const192.34.1, $const194.35.1, func=$180load_global.32.1, args=[Var($const192.34.1, <string>:6), Var($const194.35.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,455 on stmt: $binop_sub210.37.1 = $170binary_subscr.31.1 - $200call.36.1
2023-08-13 11:42:39,455 on stmt: $218call.38.1 = call $122load_global.21.1($164unary_negative.28.1, $binop_sub210.37.1, func=$122load_global.21.1, args=[Var($164unary_negative.28.1, <string>:6), Var($binop_sub210.37.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,455 on stmt: $228get_iter.39.1 = getiter(value=$218call.38.1)
2023-08-13 11:42:39,455 on stmt: $phi230.0.1 = $228get_iter.39.1
2023-08-13 11:42:39,455 on stmt: jump 230
2023-08-13 11:42:39,455 ==== SSA block rewrite pass on 230
2023-08-13 11:42:39,455 Running <numba.core.ssa._FixSSAVars object at 0x000001F6963D3B50>
2023-08-13 11:42:39,455 on stmt: $230for_iter.1.1 = iternext(value=$phi230.0.1)
2023-08-13 11:42:39,455 on stmt: $230for_iter.2.1 = pair_first(value=$230for_iter.1.1)
2023-08-13 11:42:39,455 on stmt: $230for_iter.3.1 = pair_second(value=$230for_iter.1.1)
2023-08-13 11:42:39,455 on stmt: $phi232.1.1 = $230for_iter.2.1
2023-08-13 11:42:39,455 on stmt: branch $230for_iter.3.1, 232, 442
2023-08-13 11:42:39,456 ==== SSA block rewrite pass on 232
2023-08-13 11:42:39,456 Running <numba.core.ssa._FixSSAVars object at 0x000001F6963D3B50>
2023-08-13 11:42:39,456 on stmt: index00 = $phi232.1.1
2023-08-13 11:42:39,456 on stmt: jump 240
2023-08-13 11:42:39,456 ==== SSA block rewrite pass on 442
2023-08-13 11:42:39,456 Running <numba.core.ssa._FixSSAVars object at 0x000001F6963D3B50>
2023-08-13 11:42:39,456 on stmt: $242return_value.1.1 = cast(value=out0)
2023-08-13 11:42:39,456 on stmt: return $242return_value.1.1
2023-08-13 11:42:39,456 ==== SSA block rewrite pass on 240
2023-08-13 11:42:39,456 Running <numba.core.ssa._FixSSAVars object at 0x000001F6963D3B50>
2023-08-13 11:42:39,456 on stmt: $const6.1 = const(int, 0)
2023-08-13 11:42:39,456 on stmt: stencil_index = $const6.1 + index00
2023-08-13 11:42:39,457 on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:39,457 on stmt: $22unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2023-08-13 11:42:39,457 on stmt: $30compare_op.6 = $22unary_negative.4 <= x0
2023-08-13 11:42:39,457 find_def var='x0' stmt=$30compare_op.6 = $22unary_negative.4 <= x0
2023-08-13 11:42:39,457 on stmt: bool36 = global(bool: <class 'bool'>)
2023-08-13 11:42:39,457 on stmt: $36pred = call bool36($30compare_op.6, func=bool36, args=(Var($30compare_op.6, audio.py:1148),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,457 on stmt: $phi38.0 = x0
2023-08-13 11:42:39,457 find_def var='x0' stmt=$phi38.0 = x0
2023-08-13 11:42:39,457 on stmt: branch $36pred, 241, 291
2023-08-13 11:42:39,457 ==== SSA block rewrite pass on 241
2023-08-13 11:42:39,457 Running <numba.core.ssa._FixSSAVars object at 0x000001F6963D3B50>
2023-08-13 11:42:39,458 on stmt: $40compare_op.2 = x0 <= threshold
2023-08-13 11:42:39,458 find_def var='x0' stmt=$40compare_op.2 = x0 <= threshold
2023-08-13 11:42:39,458 find_def_from_top label 241
2023-08-13 11:42:39,458 idom 240 from label 241
2023-08-13 11:42:39,458 find_def_from_bottom label 240
2023-08-13 11:42:39,458 on stmt: bool46 = global(bool: <class 'bool'>)
2023-08-13 11:42:39,458 on stmt: $46pred = call bool46($40compare_op.2, func=bool46, args=(Var($40compare_op.2, audio.py:1148),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,458 on stmt: branch $46pred, 279, 295
2023-08-13 11:42:39,458 ==== SSA block rewrite pass on 279
2023-08-13 11:42:39,458 Running <numba.core.ssa._FixSSAVars object at 0x000001F6963D3B50>
2023-08-13 11:42:39,458 on stmt: jump 289
2023-08-13 11:42:39,458 ==== SSA block rewrite pass on 291
2023-08-13 11:42:39,458 Running <numba.core.ssa._FixSSAVars object at 0x000001F6963D3B50>
2023-08-13 11:42:39,458 on stmt: jump 295
2023-08-13 11:42:39,459 ==== SSA block rewrite pass on 289
2023-08-13 11:42:39,459 Running <numba.core.ssa._FixSSAVars object at 0x000001F6963D3B50>
2023-08-13 11:42:39,459 on stmt: x0.1 = const(int, 0)
2023-08-13 11:42:39,459 on stmt: jump 295
2023-08-13 11:42:39,459 ==== SSA block rewrite pass on 295
2023-08-13 11:42:39,459 Running <numba.core.ssa._FixSSAVars object at 0x000001F6963D3B50>
2023-08-13 11:42:39,459 on stmt: $const60.1 = const(int, -1)
2023-08-13 11:42:39,459 on stmt: stencil_index.1 = $const60.1 + index00
2023-08-13 11:42:39,459 on stmt: x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2023-08-13 11:42:39,459 on stmt: $76unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2023-08-13 11:42:39,459 on stmt: $84compare_op.6 = $76unary_negative.4 <= x1
2023-08-13 11:42:39,459 on stmt: bool90 = global(bool: <class 'bool'>)
2023-08-13 11:42:39,460 on stmt: $90pred = call bool90($84compare_op.6, func=bool90, args=(Var($84compare_op.6, audio.py:1152),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,460 on stmt: $phi92.0 = x1
2023-08-13 11:42:39,460 on stmt: branch $90pred, 299, 345
2023-08-13 11:42:39,460 ==== SSA block rewrite pass on 299
2023-08-13 11:42:39,460 Running <numba.core.ssa._FixSSAVars object at 0x000001F6963D3B50>
2023-08-13 11:42:39,460 on stmt: $94compare_op.2 = x1 <= threshold
2023-08-13 11:42:39,460 on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-13 11:42:39,460 on stmt: $100pred = call bool100($94compare_op.2, func=bool100, args=(Var($94compare_op.2, audio.py:1152),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,460 on stmt: branch $100pred, 333, 349
2023-08-13 11:42:39,461 ==== SSA block rewrite pass on 333
2023-08-13 11:42:39,461 Running <numba.core.ssa._FixSSAVars object at 0x000001F6963D3B50>
2023-08-13 11:42:39,461 on stmt: jump 343
2023-08-13 11:42:39,461 ==== SSA block rewrite pass on 345
2023-08-13 11:42:39,461 Running <numba.core.ssa._FixSSAVars object at 0x000001F6963D3B50>
2023-08-13 11:42:39,461 on stmt: jump 349
2023-08-13 11:42:39,461 ==== SSA block rewrite pass on 343
2023-08-13 11:42:39,461 Running <numba.core.ssa._FixSSAVars object at 0x000001F6963D3B50>
2023-08-13 11:42:39,461 on stmt: x1.1 = const(int, 0)
2023-08-13 11:42:39,461 on stmt: jump 349
2023-08-13 11:42:39,461 ==== SSA block rewrite pass on 349
2023-08-13 11:42:39,461 Running <numba.core.ssa._FixSSAVars object at 0x000001F6963D3B50>
2023-08-13 11:42:39,461 on stmt: x1.2 = phi(incoming_values=[Var(x1, audio.py:1151), Var(x1, audio.py:1151), Var(x1.1, audio.py:1153)], incoming_blocks=[345, 299, 343])
2023-08-13 11:42:39,461 on stmt: bool114 = global(bool: <class 'bool'>)
2023-08-13 11:42:39,461 on stmt: $114pred = call bool114(zero_pos, func=bool114, args=(Var(zero_pos, audio.py:1144),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,462 on stmt: branch $114pred, 353, 357
2023-08-13 11:42:39,462 ==== SSA block rewrite pass on 353
2023-08-13 11:42:39,462 Running <numba.core.ssa._FixSSAVars object at 0x000001F6963D3B50>
2023-08-13 11:42:39,462 on stmt: $116load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:39,462 on stmt: $128load_attr.2 = getattr(value=$116load_global.0, attr=signbit)
2023-08-13 11:42:39,462 on stmt: $144call.4 = call $128load_attr.2(x0, func=$128load_attr.2, args=[Var(x0, audio.py:1147)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,462 find_def var='x0' stmt=$144call.4 = call $128load_attr.2(x0, func=$128load_attr.2, args=[Var(x0, audio.py:1147)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,462 find_def_from_top label 353
2023-08-13 11:42:39,462 idom 349 from label 353
2023-08-13 11:42:39,462 find_def_from_bottom label 349
2023-08-13 11:42:39,462 find_def_from_top label 349
2023-08-13 11:42:39,462 idom 295 from label 349
2023-08-13 11:42:39,463 find_def_from_bottom label 295
2023-08-13 11:42:39,463 find_def_from_top label 295
2023-08-13 11:42:39,463 insert phi node x0.2 = phi(incoming_values=[], incoming_blocks=[]) at 295
2023-08-13 11:42:39,463 find_def_from_bottom label 241
2023-08-13 11:42:39,463 find_def_from_top label 241
2023-08-13 11:42:39,463 idom 240 from label 241
2023-08-13 11:42:39,463 find_def_from_bottom label 240
2023-08-13 11:42:39,463 incoming_def x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:39,463 find_def_from_bottom label 291
2023-08-13 11:42:39,463 find_def_from_top label 291
2023-08-13 11:42:39,463 idom 240 from label 291
2023-08-13 11:42:39,464 find_def_from_bottom label 240
2023-08-13 11:42:39,464 incoming_def x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:39,464 find_def_from_bottom label 289
2023-08-13 11:42:39,464 incoming_def x0.1 = const(int, 0)
2023-08-13 11:42:39,464 replaced with: $144call.4 = call $128load_attr.2(x0.2, func=$128load_attr.2, args=[Var(x0.2, audio.py:1156)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,464 on stmt: $154load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:39,465 on stmt: $166load_attr.7 = getattr(value=$154load_global.5, attr=signbit)
2023-08-13 11:42:39,465 on stmt: $182call.9 = call $166load_attr.7(x1.2, func=$166load_attr.7, args=[Var(x1.2, audio.py:1156)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,465 on stmt: $192compare_op.10 = $144call.4 != $182call.9
2023-08-13 11:42:39,465 on stmt: $198return_value.11 = cast(value=$192compare_op.10)
2023-08-13 11:42:39,465 on stmt: out0[index00] = $198return_value.11
2023-08-13 11:42:39,465 on stmt: jump 441
2023-08-13 11:42:39,465 ==== SSA block rewrite pass on 357
2023-08-13 11:42:39,465 Running <numba.core.ssa._FixSSAVars object at 0x000001F6963D3B50>
2023-08-13 11:42:39,465 on stmt: $200load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:39,466 on stmt: $212load_attr.2 = getattr(value=$200load_global.0, attr=sign)
2023-08-13 11:42:39,466 on stmt: $228call.4 = call $212load_attr.2(x0, func=$212load_attr.2, args=[Var(x0, audio.py:1147)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,466 find_def var='x0' stmt=$228call.4 = call $212load_attr.2(x0, func=$212load_attr.2, args=[Var(x0, audio.py:1147)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,466 find_def_from_top label 357
2023-08-13 11:42:39,466 idom 349 from label 357
2023-08-13 11:42:39,466 find_def_from_bottom label 349
2023-08-13 11:42:39,466 find_def_from_top label 349
2023-08-13 11:42:39,466 idom 295 from label 349
2023-08-13 11:42:39,466 find_def_from_bottom label 295
2023-08-13 11:42:39,466 replaced with: $228call.4 = call $212load_attr.2(x0.2, func=$212load_attr.2, args=[Var(x0.2, audio.py:1156)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,466 on stmt: $238load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:39,466 on stmt: $250load_attr.7 = getattr(value=$238load_global.5, attr=sign)
2023-08-13 11:42:39,467 on stmt: $266call.9 = call $250load_attr.7(x1.2, func=$250load_attr.7, args=[Var(x1.2, audio.py:1156)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:39,467 on stmt: $276compare_op.10 = $228call.4 != $266call.9
2023-08-13 11:42:39,467 on stmt: $282return_value.11 = cast(value=$276compare_op.10)
2023-08-13 11:42:39,467 on stmt: out0[index00] = $282return_value.11
2023-08-13 11:42:39,467 on stmt: jump 441
2023-08-13 11:42:39,467 ==== SSA block rewrite pass on 441
2023-08-13 11:42:39,467 Running <numba.core.ssa._FixSSAVars object at 0x000001F6963D3B50>
2023-08-13 11:42:39,467 on stmt: jump 230
2023-08-13 11:42:40,373 bytecode dump:
>          0	NOP(arg=None, lineno=1051)
           2	RESUME(arg=0, lineno=1051)
           4	LOAD_FAST(arg=0, lineno=1054)
           6	LOAD_CONST(arg=1, lineno=1054)
           8	BINARY_SUBSCR(arg=None, lineno=1054)
          18	LOAD_FAST(arg=0, lineno=1054)
          20	LOAD_CONST(arg=2, lineno=1054)
          22	BINARY_SUBSCR(arg=None, lineno=1054)
          32	COMPARE_OP(arg=4, lineno=1054)
          38	LOAD_FAST(arg=0, lineno=1054)
          40	LOAD_CONST(arg=1, lineno=1054)
          42	BINARY_SUBSCR(arg=None, lineno=1054)
          52	LOAD_FAST(arg=0, lineno=1054)
          54	LOAD_CONST(arg=3, lineno=1054)
          56	BINARY_SUBSCR(arg=None, lineno=1054)
          66	COMPARE_OP(arg=5, lineno=1054)
          72	BINARY_OP(arg=1, lineno=1054)
          76	RETURN_VALUE(arg=None, lineno=1054)
2023-08-13 11:42:40,373 pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-13 11:42:40,373 stack: []
2023-08-13 11:42:40,373 state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-13 11:42:40,373 dispatch pc=0, inst=NOP(arg=None, lineno=1051)
2023-08-13 11:42:40,373 stack []
2023-08-13 11:42:40,373 dispatch pc=2, inst=RESUME(arg=0, lineno=1051)
2023-08-13 11:42:40,373 stack []
2023-08-13 11:42:40,373 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1054)
2023-08-13 11:42:40,373 stack []
2023-08-13 11:42:40,374 dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=1054)
2023-08-13 11:42:40,374 stack ['$x4.0']
2023-08-13 11:42:40,374 dispatch pc=8, inst=BINARY_SUBSCR(arg=None, lineno=1054)
2023-08-13 11:42:40,374 stack ['$x4.0', '$const6.1']
2023-08-13 11:42:40,374 dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=1054)
2023-08-13 11:42:40,374 stack ['$8binary_subscr.2']
2023-08-13 11:42:40,374 dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=1054)
2023-08-13 11:42:40,374 stack ['$8binary_subscr.2', '$x18.3']
2023-08-13 11:42:40,374 dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=1054)
2023-08-13 11:42:40,374 stack ['$8binary_subscr.2', '$x18.3', '$const20.4']
2023-08-13 11:42:40,374 dispatch pc=32, inst=COMPARE_OP(arg=4, lineno=1054)
2023-08-13 11:42:40,374 stack ['$8binary_subscr.2', '$22binary_subscr.5']
2023-08-13 11:42:40,374 dispatch pc=38, inst=LOAD_FAST(arg=0, lineno=1054)
2023-08-13 11:42:40,375 stack ['$32compare_op.6']
2023-08-13 11:42:40,375 dispatch pc=40, inst=LOAD_CONST(arg=1, lineno=1054)
2023-08-13 11:42:40,375 stack ['$32compare_op.6', '$x38.7']
2023-08-13 11:42:40,375 dispatch pc=42, inst=BINARY_SUBSCR(arg=None, lineno=1054)
2023-08-13 11:42:40,375 stack ['$32compare_op.6', '$x38.7', '$const40.8']
2023-08-13 11:42:40,375 dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=1054)
2023-08-13 11:42:40,375 stack ['$32compare_op.6', '$42binary_subscr.9']
2023-08-13 11:42:40,375 dispatch pc=54, inst=LOAD_CONST(arg=3, lineno=1054)
2023-08-13 11:42:40,375 stack ['$32compare_op.6', '$42binary_subscr.9', '$x52.10']
2023-08-13 11:42:40,375 dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=1054)
2023-08-13 11:42:40,375 stack ['$32compare_op.6', '$42binary_subscr.9', '$x52.10', '$const54.11']
2023-08-13 11:42:40,375 dispatch pc=66, inst=COMPARE_OP(arg=5, lineno=1054)
2023-08-13 11:42:40,375 stack ['$32compare_op.6', '$42binary_subscr.9', '$56binary_subscr.12']
2023-08-13 11:42:40,375 dispatch pc=72, inst=BINARY_OP(arg=1, lineno=1054)
2023-08-13 11:42:40,375 stack ['$32compare_op.6', '$66compare_op.13']
2023-08-13 11:42:40,376 dispatch pc=76, inst=RETURN_VALUE(arg=None, lineno=1054)
2023-08-13 11:42:40,376 stack ['$binop_and_72.14']
2023-08-13 11:42:40,376 end state. edges=[]
2023-08-13 11:42:40,376 -------------------------Prune PHIs-------------------------
2023-08-13 11:42:40,376 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-08-13 11:42:40,376 defmap: {}
2023-08-13 11:42:40,376 phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:40,376 changing phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:40,376 keep phismap: {}
2023-08-13 11:42:40,376 new_out: defaultdict(<class 'dict'>, {})
2023-08-13 11:42:40,376 ----------------------DONE Prune PHIs-----------------------
2023-08-13 11:42:40,376 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$x4.0'}), (6, {'res': '$const6.1'}), (8, {'index': '$const6.1', 'target': '$x4.0', 'res': '$8binary_subscr.2'}), (10, {}), (12, {}), (14, {}), (16, {}), (18, {'res': '$x18.3'}), (20, {'res': '$const20.4'}), (22, {'index': '$const20.4', 'target': '$x18.3', 'res': '$22binary_subscr.5'}), (24, {}), (26, {}), (28, {}), (30, {}), (32, {'lhs': '$8binary_subscr.2', 'rhs': '$22binary_subscr.5', 'res': '$32compare_op.6'}), (34, {}), (36, {}), (38, {'res': '$x38.7'}), (40, {'res': '$const40.8'}), (42, {'index': '$const40.8', 'target': '$x38.7', 'res': '$42binary_subscr.9'}), (44, {}), (46, {}), (48, {}), (50, {}), (52, {'res': '$x52.10'}), (54, {'res': '$const54.11'}), (56, {'index': '$const54.11', 'target': '$x52.10', 'res': '$56binary_subscr.12'}), (58, {}), (60, {}), (62, {}), (64, {}), (66, {'lhs': '$42binary_subscr.9', 'rhs': '$56binary_subscr.12', 'res': '$66compare_op.13'}), (68, {}), (70, {}), (72, {'op': '&', 'lhs': '$32compare_op.6', 'rhs': '$66compare_op.13', 'res': '$binop_and_72.14'}), (74, {}), (76, {'retval': '$binop_and_72.14', 'castval': '$76return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:40,377 label 0:
    x = arg(0, name=x)                       ['x']
    $const6.1 = const(int, 0)                ['$const6.1']
    $8binary_subscr.2 = getitem(value=x, index=$const6.1, fn=<built-in function getitem>) ['$8binary_subscr.2', '$const6.1', 'x']
    $const20.4 = const(int, -1)              ['$const20.4']
    $22binary_subscr.5 = getitem(value=x, index=$const20.4, fn=<built-in function getitem>) ['$22binary_subscr.5', '$const20.4', 'x']
    $32compare_op.6 = $8binary_subscr.2 > $22binary_subscr.5 ['$22binary_subscr.5', '$32compare_op.6', '$8binary_subscr.2']
    $const40.8 = const(int, 0)               ['$const40.8']
    $42binary_subscr.9 = getitem(value=x, index=$const40.8, fn=<built-in function getitem>) ['$42binary_subscr.9', '$const40.8', 'x']
    $const54.11 = const(int, 1)              ['$const54.11']
    $56binary_subscr.12 = getitem(value=x, index=$const54.11, fn=<built-in function getitem>) ['$56binary_subscr.12', '$const54.11', 'x']
    $66compare_op.13 = $42binary_subscr.9 >= $56binary_subscr.12 ['$42binary_subscr.9', '$56binary_subscr.12', '$66compare_op.13']
    $binop_and_72.14 = $32compare_op.6 & $66compare_op.13 ['$32compare_op.6', '$66compare_op.13', '$binop_and_72.14']
    $76return_value.15 = cast(value=$binop_and_72.14) ['$76return_value.15', '$binop_and_72.14']
    return $76return_value.15                ['$76return_value.15']

2023-08-13 11:42:40,378 bytecode dump:
>          0	NOP(arg=None, lineno=1057)
           2	RESUME(arg=0, lineno=1057)
           4	LOAD_FAST(arg=0, lineno=1060)
           6	LOAD_CONST(arg=1, lineno=1060)
           8	BINARY_SUBSCR(arg=None, lineno=1060)
          18	LOAD_FAST(arg=0, lineno=1060)
          20	LOAD_CONST(arg=2, lineno=1060)
          22	BINARY_SUBSCR(arg=None, lineno=1060)
          32	COMPARE_OP(arg=0, lineno=1060)
          38	LOAD_FAST(arg=0, lineno=1060)
          40	LOAD_CONST(arg=1, lineno=1060)
          42	BINARY_SUBSCR(arg=None, lineno=1060)
          52	LOAD_FAST(arg=0, lineno=1060)
          54	LOAD_CONST(arg=3, lineno=1060)
          56	BINARY_SUBSCR(arg=None, lineno=1060)
          66	COMPARE_OP(arg=1, lineno=1060)
          72	BINARY_OP(arg=1, lineno=1060)
          76	RETURN_VALUE(arg=None, lineno=1060)
2023-08-13 11:42:40,378 pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-13 11:42:40,378 stack: []
2023-08-13 11:42:40,378 state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-13 11:42:40,378 dispatch pc=0, inst=NOP(arg=None, lineno=1057)
2023-08-13 11:42:40,378 stack []
2023-08-13 11:42:40,378 dispatch pc=2, inst=RESUME(arg=0, lineno=1057)
2023-08-13 11:42:40,378 stack []
2023-08-13 11:42:40,378 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1060)
2023-08-13 11:42:40,379 stack []
2023-08-13 11:42:40,379 dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=1060)
2023-08-13 11:42:40,379 stack ['$x4.0']
2023-08-13 11:42:40,379 dispatch pc=8, inst=BINARY_SUBSCR(arg=None, lineno=1060)
2023-08-13 11:42:40,379 stack ['$x4.0', '$const6.1']
2023-08-13 11:42:40,379 dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=1060)
2023-08-13 11:42:40,379 stack ['$8binary_subscr.2']
2023-08-13 11:42:40,379 dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=1060)
2023-08-13 11:42:40,379 stack ['$8binary_subscr.2', '$x18.3']
2023-08-13 11:42:40,379 dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=1060)
2023-08-13 11:42:40,379 stack ['$8binary_subscr.2', '$x18.3', '$const20.4']
2023-08-13 11:42:40,380 dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=1060)
2023-08-13 11:42:40,380 stack ['$8binary_subscr.2', '$22binary_subscr.5']
2023-08-13 11:42:40,380 dispatch pc=38, inst=LOAD_FAST(arg=0, lineno=1060)
2023-08-13 11:42:40,380 stack ['$32compare_op.6']
2023-08-13 11:42:40,380 dispatch pc=40, inst=LOAD_CONST(arg=1, lineno=1060)
2023-08-13 11:42:40,380 stack ['$32compare_op.6', '$x38.7']
2023-08-13 11:42:40,380 dispatch pc=42, inst=BINARY_SUBSCR(arg=None, lineno=1060)
2023-08-13 11:42:40,380 stack ['$32compare_op.6', '$x38.7', '$const40.8']
2023-08-13 11:42:40,381 dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=1060)
2023-08-13 11:42:40,381 stack ['$32compare_op.6', '$42binary_subscr.9']
2023-08-13 11:42:40,381 dispatch pc=54, inst=LOAD_CONST(arg=3, lineno=1060)
2023-08-13 11:42:40,381 stack ['$32compare_op.6', '$42binary_subscr.9', '$x52.10']
2023-08-13 11:42:40,381 dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=1060)
2023-08-13 11:42:40,381 stack ['$32compare_op.6', '$42binary_subscr.9', '$x52.10', '$const54.11']
2023-08-13 11:42:40,381 dispatch pc=66, inst=COMPARE_OP(arg=1, lineno=1060)
2023-08-13 11:42:40,381 stack ['$32compare_op.6', '$42binary_subscr.9', '$56binary_subscr.12']
2023-08-13 11:42:40,381 dispatch pc=72, inst=BINARY_OP(arg=1, lineno=1060)
2023-08-13 11:42:40,381 stack ['$32compare_op.6', '$66compare_op.13']
2023-08-13 11:42:40,382 dispatch pc=76, inst=RETURN_VALUE(arg=None, lineno=1060)
2023-08-13 11:42:40,382 stack ['$binop_and_72.14']
2023-08-13 11:42:40,382 end state. edges=[]
2023-08-13 11:42:40,382 -------------------------Prune PHIs-------------------------
2023-08-13 11:42:40,382 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-08-13 11:42:40,382 defmap: {}
2023-08-13 11:42:40,382 phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:40,382 changing phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:40,382 keep phismap: {}
2023-08-13 11:42:40,382 new_out: defaultdict(<class 'dict'>, {})
2023-08-13 11:42:40,382 ----------------------DONE Prune PHIs-----------------------
2023-08-13 11:42:40,383 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$x4.0'}), (6, {'res': '$const6.1'}), (8, {'index': '$const6.1', 'target': '$x4.0', 'res': '$8binary_subscr.2'}), (10, {}), (12, {}), (14, {}), (16, {}), (18, {'res': '$x18.3'}), (20, {'res': '$const20.4'}), (22, {'index': '$const20.4', 'target': '$x18.3', 'res': '$22binary_subscr.5'}), (24, {}), (26, {}), (28, {}), (30, {}), (32, {'lhs': '$8binary_subscr.2', 'rhs': '$22binary_subscr.5', 'res': '$32compare_op.6'}), (34, {}), (36, {}), (38, {'res': '$x38.7'}), (40, {'res': '$const40.8'}), (42, {'index': '$const40.8', 'target': '$x38.7', 'res': '$42binary_subscr.9'}), (44, {}), (46, {}), (48, {}), (50, {}), (52, {'res': '$x52.10'}), (54, {'res': '$const54.11'}), (56, {'index': '$const54.11', 'target': '$x52.10', 'res': '$56binary_subscr.12'}), (58, {}), (60, {}), (62, {}), (64, {}), (66, {'lhs': '$42binary_subscr.9', 'rhs': '$56binary_subscr.12', 'res': '$66compare_op.13'}), (68, {}), (70, {}), (72, {'op': '&', 'lhs': '$32compare_op.6', 'rhs': '$66compare_op.13', 'res': '$binop_and_72.14'}), (74, {}), (76, {'retval': '$binop_and_72.14', 'castval': '$76return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:40,383 label 0:
    x = arg(0, name=x)                       ['x']
    $const6.1 = const(int, 0)                ['$const6.1']
    $8binary_subscr.2 = getitem(value=x, index=$const6.1, fn=<built-in function getitem>) ['$8binary_subscr.2', '$const6.1', 'x']
    $const20.4 = const(int, -1)              ['$const20.4']
    $22binary_subscr.5 = getitem(value=x, index=$const20.4, fn=<built-in function getitem>) ['$22binary_subscr.5', '$const20.4', 'x']
    $32compare_op.6 = $8binary_subscr.2 < $22binary_subscr.5 ['$22binary_subscr.5', '$32compare_op.6', '$8binary_subscr.2']
    $const40.8 = const(int, 0)               ['$const40.8']
    $42binary_subscr.9 = getitem(value=x, index=$const40.8, fn=<built-in function getitem>) ['$42binary_subscr.9', '$const40.8', 'x']
    $const54.11 = const(int, 1)              ['$const54.11']
    $56binary_subscr.12 = getitem(value=x, index=$const54.11, fn=<built-in function getitem>) ['$56binary_subscr.12', '$const54.11', 'x']
    $66compare_op.13 = $42binary_subscr.9 <= $56binary_subscr.12 ['$42binary_subscr.9', '$56binary_subscr.12', '$66compare_op.13']
    $binop_and_72.14 = $32compare_op.6 & $66compare_op.13 ['$32compare_op.6', '$66compare_op.13', '$binop_and_72.14']
    $76return_value.15 = cast(value=$binop_and_72.14) ['$76return_value.15', '$binop_and_72.14']
    return $76return_value.15                ['$76return_value.15']

2023-08-13 11:42:40,388 bytecode dump:
>          0	NOP(arg=None, lineno=1063)
           2	RESUME(arg=0, lineno=1063)
           4	LOAD_GLOBAL(arg=1, lineno=1077)
          16	LOAD_FAST(arg=0, lineno=1077)
          18	PRECALL(arg=1, lineno=1077)
          22	CALL(arg=1, lineno=1077)
          32	LOAD_FAST(arg=1, lineno=1077)
          34	LOAD_CONST(arg=1, lineno=1077)
          36	LOAD_CONST(arg=1, lineno=1077)
          38	BUILD_SLICE(arg=2, lineno=1077)
          40	STORE_SUBSCR(arg=None, lineno=1077)
          44	LOAD_CONST(arg=1, lineno=1077)
          46	RETURN_VALUE(arg=None, lineno=1077)
2023-08-13 11:42:40,388 pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-13 11:42:40,389 stack: []
2023-08-13 11:42:40,389 state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-13 11:42:40,389 dispatch pc=0, inst=NOP(arg=None, lineno=1063)
2023-08-13 11:42:40,389 stack []
2023-08-13 11:42:40,389 dispatch pc=2, inst=RESUME(arg=0, lineno=1063)
2023-08-13 11:42:40,389 stack []
2023-08-13 11:42:40,389 dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=1077)
2023-08-13 11:42:40,389 stack []
2023-08-13 11:42:40,389 dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1077)
2023-08-13 11:42:40,389 stack ['$null$4.1', '$4load_global.0']
2023-08-13 11:42:40,389 dispatch pc=18, inst=PRECALL(arg=1, lineno=1077)
2023-08-13 11:42:40,389 stack ['$null$4.1', '$4load_global.0', '$x16.2']
2023-08-13 11:42:40,389 dispatch pc=22, inst=CALL(arg=1, lineno=1077)
2023-08-13 11:42:40,390 stack ['$null$4.1', '$4load_global.0', '$x16.2']
2023-08-13 11:42:40,390 dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=1077)
2023-08-13 11:42:40,390 stack ['$22call.3']
2023-08-13 11:42:40,390 dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=1077)
2023-08-13 11:42:40,390 stack ['$22call.3', '$y32.4']
2023-08-13 11:42:40,390 dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=1077)
2023-08-13 11:42:40,390 stack ['$22call.3', '$y32.4', '$const34.5']
2023-08-13 11:42:40,390 dispatch pc=38, inst=BUILD_SLICE(arg=2, lineno=1077)
2023-08-13 11:42:40,390 stack ['$22call.3', '$y32.4', '$const34.5', '$const36.6']
2023-08-13 11:42:40,390 dispatch pc=40, inst=STORE_SUBSCR(arg=None, lineno=1077)
2023-08-13 11:42:40,390 stack ['$22call.3', '$y32.4', '$38build_slice.8']
2023-08-13 11:42:40,390 dispatch pc=44, inst=LOAD_CONST(arg=1, lineno=1077)
2023-08-13 11:42:40,390 stack []
2023-08-13 11:42:40,391 dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=1077)
2023-08-13 11:42:40,391 stack ['$const44.9']
2023-08-13 11:42:40,391 end state. edges=[]
2023-08-13 11:42:40,391 -------------------------Prune PHIs-------------------------
2023-08-13 11:42:40,391 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-08-13 11:42:40,391 defmap: {}
2023-08-13 11:42:40,391 phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:40,391 changing phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:40,391 keep phismap: {}
2023-08-13 11:42:40,391 new_out: defaultdict(<class 'dict'>, {})
2023-08-13 11:42:40,391 ----------------------DONE Prune PHIs-----------------------
2023-08-13 11:42:40,391 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'res': '$x16.2'}), (18, {}), (20, {}), (22, {'func': '$4load_global.0', 'args': ['$x16.2'], 'kw_names': None, 'res': '$22call.3'}), (24, {}), (26, {}), (28, {}), (30, {}), (32, {'res': '$y32.4'}), (34, {'res': '$const34.5'}), (36, {'res': '$const36.6'}), (38, {'start': '$const34.5', 'stop': '$const36.6', 'step': None, 'res': '$38build_slice.8', 'slicevar': '$38build_slice.7'}), (40, {'target': '$y32.4', 'index': '$38build_slice.8', 'value': '$22call.3'}), (42, {}), (44, {'res': '$const44.9'}), (46, {'retval': '$const44.9', 'castval': '$46return_value.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:40,392 label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $4load_global.0 = global(_localmax_sten: <numba.stencils.stencil.StencilFunc object at 0x000001F696E760D0>) ['$4load_global.0']
    $22call.3 = call $4load_global.0(x, func=$4load_global.0, args=[Var(x, utils.py:1063)], kws=(), vararg=None, varkwarg=None, target=None) ['$22call.3', '$4load_global.0', 'x']
    $const34.5 = const(NoneType, None)       ['$const34.5']
    $const36.6 = const(NoneType, None)       ['$const36.6']
    $38build_slice.7 = global(slice: <class 'slice'>) ['$38build_slice.7']
    $38build_slice.8 = call $38build_slice.7($const34.5, $const36.6, func=$38build_slice.7, args=(Var($const34.5, utils.py:1077), Var($const36.6, utils.py:1077)), kws=(), vararg=None, varkwarg=None, target=None) ['$38build_slice.7', '$38build_slice.8', '$const34.5', '$const36.6']
    y[$38build_slice.8] = $22call.3          ['$22call.3', '$38build_slice.8', 'y']
    $const44.9 = const(NoneType, None)       ['$const44.9']
    $46return_value.10 = cast(value=$const44.9) ['$46return_value.10', '$const44.9']
    return $46return_value.10                ['$46return_value.10']

2023-08-13 11:42:40,399 ==== SSA block analysis pass on 0
2023-08-13 11:42:40,399 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696E9A5D0>
2023-08-13 11:42:40,399 on stmt: x = arg(0, name=x)
2023-08-13 11:42:40,399 on stmt: y = arg(1, name=y)
2023-08-13 11:42:40,399 on stmt: $4load_global.0 = global(_localmax_sten: <numba.stencils.stencil.StencilFunc object at 0x000001F696E760D0>)
2023-08-13 11:42:40,399 on stmt: $22call.3 = call $4load_global.0(x, func=$4load_global.0, args=[Var(x, utils.py:1063)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:40,399 on stmt: $const34.5 = const(NoneType, None)
2023-08-13 11:42:40,399 on stmt: $const36.6 = const(NoneType, None)
2023-08-13 11:42:40,400 on stmt: $38build_slice.7 = global(slice: <class 'slice'>)
2023-08-13 11:42:40,400 on stmt: $38build_slice.8 = call $38build_slice.7($const34.5, $const36.6, func=$38build_slice.7, args=(Var($const34.5, utils.py:1077), Var($const36.6, utils.py:1077)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:40,400 on stmt: y[slice(None, None, None)] = $22call.3
2023-08-13 11:42:40,400 on stmt: $const44.9 = const(NoneType, None)
2023-08-13 11:42:40,400 on stmt: $46return_value.10 = cast(value=$const44.9)
2023-08-13 11:42:40,400 on stmt: return $46return_value.10
2023-08-13 11:42:40,400 defs defaultdict(<class 'list'>,
            {'$22call.3': [<numba.core.ir.Assign object at 0x000001F696E98150>],
             '$38build_slice.7': [<numba.core.ir.Assign object at 0x000001F696E989D0>],
             '$38build_slice.8': [<numba.core.ir.Assign object at 0x000001F696E98B10>],
             '$46return_value.10': [<numba.core.ir.Assign object at 0x000001F696E98FD0>],
             '$4load_global.0': [<numba.core.ir.Assign object at 0x000001F696E8FC10>],
             '$const34.5': [<numba.core.ir.Assign object at 0x000001F696E98610>],
             '$const36.6': [<numba.core.ir.Assign object at 0x000001F696E987D0>],
             '$const44.9': [<numba.core.ir.Assign object at 0x000001F696E98D90>],
             'x': [<numba.core.ir.Assign object at 0x000001F696E8F890>],
             'y': [<numba.core.ir.Assign object at 0x000001F696E8F990>]})
2023-08-13 11:42:40,400 SSA violators set()
2023-08-13 11:42:40,426 bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	RESUME(arg=0, lineno=1)
           4	LOAD_FAST(arg=0, lineno=2)
           6	LOAD_ATTR(arg=0, lineno=2)
          16	STORE_FAST(arg=1, lineno=2)
          18	LOAD_GLOBAL(arg=2, lineno=3)
          30	LOAD_METHOD(arg=2, lineno=3)
          52	LOAD_FAST(arg=1, lineno=3)
          54	LOAD_GLOBAL(arg=2, lineno=3)
          66	LOAD_ATTR(arg=3, lineno=3)
          76	KW_NAMES(arg=1, lineno=3)
          78	PRECALL(arg=2, lineno=3)
          82	CALL(arg=2, lineno=3)
          92	STORE_FAST(arg=2, lineno=3)
          94	LOAD_CONST(arg=2, lineno=4)
          96	LOAD_FAST(arg=2, lineno=4)
          98	LOAD_CONST(arg=0, lineno=4)
         100	LOAD_CONST(arg=3, lineno=4)
         102	BUILD_SLICE(arg=2, lineno=4)
         104	STORE_SUBSCR(arg=None, lineno=4)
         108	LOAD_CONST(arg=2, lineno=5)
         110	LOAD_FAST(arg=2, lineno=5)
         112	LOAD_CONST(arg=4, lineno=5)
         114	LOAD_CONST(arg=0, lineno=5)
         116	BUILD_SLICE(arg=2, lineno=5)
         118	STORE_SUBSCR(arg=None, lineno=5)
         122	LOAD_GLOBAL(arg=9, lineno=6)
         134	LOAD_GLOBAL(arg=11, lineno=6)
         146	LOAD_CONST(arg=2, lineno=6)
         148	LOAD_CONST(arg=4, lineno=6)
         150	PRECALL(arg=2, lineno=6)
         154	CALL(arg=2, lineno=6)
         164	UNARY_NEGATIVE(arg=None, lineno=6)
         166	LOAD_FAST(arg=1, lineno=6)
         168	LOAD_CONST(arg=2, lineno=6)
         170	BINARY_SUBSCR(arg=None, lineno=6)
         180	LOAD_GLOBAL(arg=13, lineno=6)
         192	LOAD_CONST(arg=2, lineno=6)
         194	LOAD_CONST(arg=3, lineno=6)
         196	PRECALL(arg=2, lineno=6)
         200	CALL(arg=2, lineno=6)
         210	BINARY_OP(arg=10, lineno=6)
         214	PRECALL(arg=2, lineno=6)
         218	CALL(arg=2, lineno=6)
         228	GET_ITER(arg=None, lineno=6)
>        230	FOR_ITER(arg=4, lineno=6)
         232	STORE_FAST(arg=3, lineno=6)
         234	LOAD_CONST(arg=2, lineno=7)
         236	STORE_FAST(arg=4, lineno=7)
         238	JUMP_BACKWARD(arg=5, lineno=7)
>        240	LOAD_FAST(arg=2, lineno=8)
         242	RETURN_VALUE(arg=None, lineno=8)
2023-08-13 11:42:40,426 pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-13 11:42:40,426 stack: []
2023-08-13 11:42:40,426 state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-13 11:42:40,426 dispatch pc=0, inst=NOP(arg=None, lineno=1)
2023-08-13 11:42:40,426 stack []
2023-08-13 11:42:40,426 dispatch pc=2, inst=RESUME(arg=0, lineno=1)
2023-08-13 11:42:40,426 stack []
2023-08-13 11:42:40,427 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2)
2023-08-13 11:42:40,427 stack []
2023-08-13 11:42:40,427 dispatch pc=6, inst=LOAD_ATTR(arg=0, lineno=2)
2023-08-13 11:42:40,427 stack ['$x4.0']
2023-08-13 11:42:40,427 dispatch pc=16, inst=STORE_FAST(arg=1, lineno=2)
2023-08-13 11:42:40,427 stack ['$6load_attr.1']
2023-08-13 11:42:40,427 dispatch pc=18, inst=LOAD_GLOBAL(arg=2, lineno=3)
2023-08-13 11:42:40,427 stack []
2023-08-13 11:42:40,427 dispatch pc=30, inst=LOAD_METHOD(arg=2, lineno=3)
2023-08-13 11:42:40,427 stack ['$18load_global.2']
2023-08-13 11:42:40,427 dispatch pc=52, inst=LOAD_FAST(arg=1, lineno=3)
2023-08-13 11:42:40,427 stack ['$null$30.3', '$30load_method.4']
2023-08-13 11:42:40,427 dispatch pc=54, inst=LOAD_GLOBAL(arg=2, lineno=3)
2023-08-13 11:42:40,427 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5']
2023-08-13 11:42:40,427 dispatch pc=66, inst=LOAD_ATTR(arg=3, lineno=3)
2023-08-13 11:42:40,428 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$54load_global.6']
2023-08-13 11:42:40,428 dispatch pc=76, inst=KW_NAMES(arg=1, lineno=3)
2023-08-13 11:42:40,428 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$66load_attr.7']
2023-08-13 11:42:40,428 dispatch pc=78, inst=PRECALL(arg=2, lineno=3)
2023-08-13 11:42:40,428 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$66load_attr.7']
2023-08-13 11:42:40,428 dispatch pc=82, inst=CALL(arg=2, lineno=3)
2023-08-13 11:42:40,428 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$66load_attr.7']
2023-08-13 11:42:40,428 dispatch pc=92, inst=STORE_FAST(arg=2, lineno=3)
2023-08-13 11:42:40,428 stack ['$82call.8']
2023-08-13 11:42:40,428 dispatch pc=94, inst=LOAD_CONST(arg=2, lineno=4)
2023-08-13 11:42:40,428 stack []
2023-08-13 11:42:40,428 dispatch pc=96, inst=LOAD_FAST(arg=2, lineno=4)
2023-08-13 11:42:40,428 stack ['$const94.9']
2023-08-13 11:42:40,429 dispatch pc=98, inst=LOAD_CONST(arg=0, lineno=4)
2023-08-13 11:42:40,429 stack ['$const94.9', '$out096.10']
2023-08-13 11:42:40,429 dispatch pc=100, inst=LOAD_CONST(arg=3, lineno=4)
2023-08-13 11:42:40,429 stack ['$const94.9', '$out096.10', '$const98.11']
2023-08-13 11:42:40,429 dispatch pc=102, inst=BUILD_SLICE(arg=2, lineno=4)
2023-08-13 11:42:40,429 stack ['$const94.9', '$out096.10', '$const98.11', '$const100.12']
2023-08-13 11:42:40,429 dispatch pc=104, inst=STORE_SUBSCR(arg=None, lineno=4)
2023-08-13 11:42:40,429 stack ['$const94.9', '$out096.10', '$102build_slice.14']
2023-08-13 11:42:40,429 dispatch pc=108, inst=LOAD_CONST(arg=2, lineno=5)
2023-08-13 11:42:40,429 stack []
2023-08-13 11:42:40,429 dispatch pc=110, inst=LOAD_FAST(arg=2, lineno=5)
2023-08-13 11:42:40,429 stack ['$const108.15']
2023-08-13 11:42:40,429 dispatch pc=112, inst=LOAD_CONST(arg=4, lineno=5)
2023-08-13 11:42:40,429 stack ['$const108.15', '$out0110.16']
2023-08-13 11:42:40,430 dispatch pc=114, inst=LOAD_CONST(arg=0, lineno=5)
2023-08-13 11:42:40,430 stack ['$const108.15', '$out0110.16', '$const112.17']
2023-08-13 11:42:40,430 dispatch pc=116, inst=BUILD_SLICE(arg=2, lineno=5)
2023-08-13 11:42:40,430 stack ['$const108.15', '$out0110.16', '$const112.17', '$const114.18']
2023-08-13 11:42:40,430 dispatch pc=118, inst=STORE_SUBSCR(arg=None, lineno=5)
2023-08-13 11:42:40,430 stack ['$const108.15', '$out0110.16', '$116build_slice.20']
2023-08-13 11:42:40,430 dispatch pc=122, inst=LOAD_GLOBAL(arg=9, lineno=6)
2023-08-13 11:42:40,430 stack []
2023-08-13 11:42:40,431 dispatch pc=134, inst=LOAD_GLOBAL(arg=11, lineno=6)
2023-08-13 11:42:40,431 stack ['$null$122.22', '$122load_global.21']
2023-08-13 11:42:40,431 dispatch pc=146, inst=LOAD_CONST(arg=2, lineno=6)
2023-08-13 11:42:40,431 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23']
2023-08-13 11:42:40,431 dispatch pc=148, inst=LOAD_CONST(arg=4, lineno=6)
2023-08-13 11:42:40,431 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23', '$const146.25']
2023-08-13 11:42:40,431 dispatch pc=150, inst=PRECALL(arg=2, lineno=6)
2023-08-13 11:42:40,431 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23', '$const146.25', '$const148.26']
2023-08-13 11:42:40,431 dispatch pc=154, inst=CALL(arg=2, lineno=6)
2023-08-13 11:42:40,431 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23', '$const146.25', '$const148.26']
2023-08-13 11:42:40,431 dispatch pc=164, inst=UNARY_NEGATIVE(arg=None, lineno=6)
2023-08-13 11:42:40,431 stack ['$null$122.22', '$122load_global.21', '$154call.27']
2023-08-13 11:42:40,432 dispatch pc=166, inst=LOAD_FAST(arg=1, lineno=6)
2023-08-13 11:42:40,432 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28']
2023-08-13 11:42:40,432 dispatch pc=168, inst=LOAD_CONST(arg=2, lineno=6)
2023-08-13 11:42:40,432 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$full_shape0166.29']
2023-08-13 11:42:40,432 dispatch pc=170, inst=BINARY_SUBSCR(arg=None, lineno=6)
2023-08-13 11:42:40,432 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$full_shape0166.29', '$const168.30']
2023-08-13 11:42:40,432 dispatch pc=180, inst=LOAD_GLOBAL(arg=13, lineno=6)
2023-08-13 11:42:40,432 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31']
2023-08-13 11:42:40,432 dispatch pc=192, inst=LOAD_CONST(arg=2, lineno=6)
2023-08-13 11:42:40,432 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32']
2023-08-13 11:42:40,432 dispatch pc=194, inst=LOAD_CONST(arg=3, lineno=6)
2023-08-13 11:42:40,432 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32', '$const192.34']
2023-08-13 11:42:40,432 dispatch pc=196, inst=PRECALL(arg=2, lineno=6)
2023-08-13 11:42:40,432 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32', '$const192.34', '$const194.35']
2023-08-13 11:42:40,432 dispatch pc=200, inst=CALL(arg=2, lineno=6)
2023-08-13 11:42:40,432 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32', '$const192.34', '$const194.35']
2023-08-13 11:42:40,432 dispatch pc=210, inst=BINARY_OP(arg=10, lineno=6)
2023-08-13 11:42:40,432 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$200call.36']
2023-08-13 11:42:40,432 dispatch pc=214, inst=PRECALL(arg=2, lineno=6)
2023-08-13 11:42:40,432 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$binop_sub210.37']
2023-08-13 11:42:40,432 dispatch pc=218, inst=CALL(arg=2, lineno=6)
2023-08-13 11:42:40,432 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$binop_sub210.37']
2023-08-13 11:42:40,432 dispatch pc=228, inst=GET_ITER(arg=None, lineno=6)
2023-08-13 11:42:40,432 stack ['$218call.38']
2023-08-13 11:42:40,432 end state. edges=[Edge(pc=230, stack=('$228get_iter.39',), blockstack=(), npush=0)]
2023-08-13 11:42:40,432 pending: deque([State(pc_initial=230 nstack_initial=1)])
2023-08-13 11:42:40,432 stack: ['$phi230.0']
2023-08-13 11:42:40,432 state.pc_initial: State(pc_initial=230 nstack_initial=1)
2023-08-13 11:42:40,432 dispatch pc=230, inst=FOR_ITER(arg=4, lineno=6)
2023-08-13 11:42:40,433 stack ['$phi230.0']
2023-08-13 11:42:40,433 end state. edges=[Edge(pc=240, stack=(), blockstack=(), npush=0), Edge(pc=232, stack=('$phi230.0', '$230for_iter.2'), blockstack=(), npush=0)]
2023-08-13 11:42:40,433 pending: deque([State(pc_initial=240 nstack_initial=0), State(pc_initial=232 nstack_initial=2)])
2023-08-13 11:42:40,433 stack: []
2023-08-13 11:42:40,433 state.pc_initial: State(pc_initial=240 nstack_initial=0)
2023-08-13 11:42:40,433 dispatch pc=240, inst=LOAD_FAST(arg=2, lineno=8)
2023-08-13 11:42:40,433 stack []
2023-08-13 11:42:40,433 dispatch pc=242, inst=RETURN_VALUE(arg=None, lineno=8)
2023-08-13 11:42:40,433 stack ['$out0240.0']
2023-08-13 11:42:40,433 end state. edges=[]
2023-08-13 11:42:40,433 pending: deque([State(pc_initial=232 nstack_initial=2)])
2023-08-13 11:42:40,433 stack: ['$phi232.0', '$phi232.1']
2023-08-13 11:42:40,433 state.pc_initial: State(pc_initial=232 nstack_initial=2)
2023-08-13 11:42:40,434 dispatch pc=232, inst=STORE_FAST(arg=3, lineno=6)
2023-08-13 11:42:40,434 stack ['$phi232.0', '$phi232.1']
2023-08-13 11:42:40,434 dispatch pc=234, inst=LOAD_CONST(arg=2, lineno=7)
2023-08-13 11:42:40,434 stack ['$phi232.0']
2023-08-13 11:42:40,435 dispatch pc=236, inst=STORE_FAST(arg=4, lineno=7)
2023-08-13 11:42:40,435 stack ['$phi232.0', '$const234.2']
2023-08-13 11:42:40,435 dispatch pc=238, inst=JUMP_BACKWARD(arg=5, lineno=7)
2023-08-13 11:42:40,435 stack ['$phi232.0']
2023-08-13 11:42:40,435 end state. edges=[Edge(pc=230, stack=('$phi232.0',), blockstack=(), npush=0)]
2023-08-13 11:42:40,435 pending: deque([State(pc_initial=230 nstack_initial=1)])
2023-08-13 11:42:40,435 -------------------------Prune PHIs-------------------------
2023-08-13 11:42:40,436 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=230 nstack_initial=1): {'$phi230.0'},
             State(pc_initial=232 nstack_initial=2): {'$phi232.1'},
             State(pc_initial=240 nstack_initial=0): set()})
2023-08-13 11:42:40,436 defmap: {'$phi230.0': State(pc_initial=0 nstack_initial=0),
 '$phi232.1': State(pc_initial=230 nstack_initial=1)}
2023-08-13 11:42:40,436 phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi232.0',
                            State(pc_initial=232 nstack_initial=2))},
             '$phi232.0': {('$phi230.0',
                            State(pc_initial=230 nstack_initial=1))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:40,436 changing phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi230.0',
                            State(pc_initial=230 nstack_initial=1))},
             '$phi232.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:40,436 changing phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:40,437 changing phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:40,437 keep phismap: {'$phi230.0': {('$228get_iter.39', State(pc_initial=0 nstack_initial=0))},
 '$phi232.1': {('$230for_iter.2', State(pc_initial=230 nstack_initial=1))}}
2023-08-13 11:42:40,437 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi230.0': '$228get_iter.39'},
             State(pc_initial=230 nstack_initial=1): {'$phi232.1': '$230for_iter.2'}})
2023-08-13 11:42:40,437 ----------------------DONE Prune PHIs-----------------------
2023-08-13 11:42:40,437 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$x4.0'}), (6, {'item': '$x4.0', 'res': '$6load_attr.1'}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'value': '$6load_attr.1'}), (18, {'idx': 1, 'res': '$18load_global.2'}), (20, {}), (22, {}), (24, {}), (26, {}), (28, {}), (30, {'item': '$18load_global.2', 'res': '$30load_method.4'}), (32, {}), (34, {}), (36, {}), (38, {}), (40, {}), (42, {}), (44, {}), (46, {}), (48, {}), (50, {}), (52, {'res': '$full_shape052.5'}), (54, {'idx': 1, 'res': '$54load_global.6'}), (56, {}), (58, {}), (60, {}), (62, {}), (64, {}), (66, {'item': '$54load_global.6', 'res': '$66load_attr.7'}), (68, {}), (70, {}), (72, {}), (74, {}), (78, {}), (80, {}), (82, {'func': '$30load_method.4', 'args': ['$full_shape052.5', '$66load_attr.7'], 'kw_names': 1, 'res': '$82call.8'}), (84, {}), (86, {}), (88, {}), (90, {}), (92, {'value': '$82call.8'}), (94, {'res': '$const94.9'}), (96, {'res': '$out096.10'}), (98, {'res': '$const98.11'}), (100, {'res': '$const100.12'}), (102, {'start': '$const98.11', 'stop': '$const100.12', 'step': None, 'res': '$102build_slice.14', 'slicevar': '$102build_slice.13'}), (104, {'target': '$out096.10', 'index': '$102build_slice.14', 'value': '$const94.9'}), (106, {}), (108, {'res': '$const108.15'}), (110, {'res': '$out0110.16'}), (112, {'res': '$const112.17'}), (114, {'res': '$const114.18'}), (116, {'start': '$const112.17', 'stop': '$const114.18', 'step': None, 'res': '$116build_slice.20', 'slicevar': '$116build_slice.19'}), (118, {'target': '$out0110.16', 'index': '$116build_slice.20', 'value': '$const108.15'}), (120, {}), (122, {'idx': 4, 'res': '$122load_global.21'}), (124, {}), (126, {}), (128, {}), (130, {}), (132, {}), (134, {'idx': 5, 'res': '$134load_global.23'}), (136, {}), (138, {}), (140, {}), (142, {}), (144, {}), (146, {'res': '$const146.25'}), (148, {'res': '$const148.26'}), (150, {}), (152, {}), (154, {'func': '$134load_global.23', 'args': ['$const146.25', '$const148.26'], 'kw_names': None, 'res': '$154call.27'}), (156, {}), (158, {}), (160, {}), (162, {}), (164, {'value': '$154call.27', 'res': '$164unary_negative.28'}), (166, {'res': '$full_shape0166.29'}), (168, {'res': '$const168.30'}), (170, {'index': '$const168.30', 'target': '$full_shape0166.29', 'res': '$170binary_subscr.31'}), (172, {}), (174, {}), (176, {}), (178, {}), (180, {'idx': 6, 'res': '$180load_global.32'}), (182, {}), (184, {}), (186, {}), (188, {}), (190, {}), (192, {'res': '$const192.34'}), (194, {'res': '$const194.35'}), (196, {}), (198, {}), (200, {'func': '$180load_global.32', 'args': ['$const192.34', '$const194.35'], 'kw_names': None, 'res': '$200call.36'}), (202, {}), (204, {}), (206, {}), (208, {}), (210, {'op': '-', 'lhs': '$170binary_subscr.31', 'rhs': '$200call.36', 'res': '$binop_sub210.37'}), (212, {}), (214, {}), (216, {}), (218, {'func': '$122load_global.21', 'args': ['$164unary_negative.28', '$binop_sub210.37'], 'kw_names': None, 'res': '$218call.38'}), (220, {}), (222, {}), (224, {}), (226, {}), (228, {'value': '$218call.38', 'res': '$228get_iter.39'})), outgoing_phis={'$phi230.0': '$228get_iter.39'}, blockstack=(), active_try_block=None, outgoing_edgepushed={230: ('$228get_iter.39',)})
2023-08-13 11:42:40,437 block_infos State(pc_initial=230 nstack_initial=1):
AdaptBlockInfo(insts=((230, {'iterator': '$phi230.0', 'pair': '$230for_iter.1', 'indval': '$230for_iter.2', 'pred': '$230for_iter.3'}),), outgoing_phis={'$phi232.1': '$230for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={240: (), 232: ('$phi230.0', '$230for_iter.2')})
2023-08-13 11:42:40,437 block_infos State(pc_initial=232 nstack_initial=2):
AdaptBlockInfo(insts=((232, {'value': '$phi232.1'}), (234, {'res': '$const234.2'}), (236, {'value': '$const234.2'}), (238, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={230: ('$phi232.0',)})
2023-08-13 11:42:40,438 block_infos State(pc_initial=240 nstack_initial=0):
AdaptBlockInfo(insts=((240, {'res': '$out0240.0'}), (242, {'retval': '$out0240.0', 'castval': '$242return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:40,439 label 0:
    x = arg(0, name=x)                       ['x']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $18load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>) ['$18load_global.2']
    $30load_method.4 = getattr(value=$18load_global.2, attr=empty) ['$18load_global.2', '$30load_method.4']
    $54load_global.6 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>) ['$54load_global.6']
    $66load_attr.7 = getattr(value=$54load_global.6, attr=bool_) ['$54load_global.6', '$66load_attr.7']
    out0 = call $30load_method.4(full_shape0, func=$30load_method.4, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($66load_attr.7, <string>:3))], vararg=None, varkwarg=None, target=None) ['$30load_method.4', '$66load_attr.7', 'full_shape0', 'out0']
    $const94.9 = const(int, 0)               ['$const94.9']
    $const98.11 = const(NoneType, None)      ['$const98.11']
    $const100.12 = const(int, 1)             ['$const100.12']
    $102build_slice.13 = global(slice: <class 'slice'>) ['$102build_slice.13']
    $102build_slice.14 = call $102build_slice.13($const98.11, $const100.12, func=$102build_slice.13, args=(Var($const98.11, <string>:4), Var($const100.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$102build_slice.13', '$102build_slice.14', '$const100.12', '$const98.11']
    out0[$102build_slice.14] = $const94.9    ['$102build_slice.14', '$const94.9', 'out0']
    $const108.15 = const(int, 0)             ['$const108.15']
    $const112.17 = const(int, -1)            ['$const112.17']
    $const114.18 = const(NoneType, None)     ['$const114.18']
    $116build_slice.19 = global(slice: <class 'slice'>) ['$116build_slice.19']
    $116build_slice.20 = call $116build_slice.19($const112.17, $const114.18, func=$116build_slice.19, args=(Var($const112.17, <string>:5), Var($const114.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$116build_slice.19', '$116build_slice.20', '$const112.17', '$const114.18']
    out0[$116build_slice.20] = $const108.15  ['$116build_slice.20', '$const108.15', 'out0']
    $122load_global.21 = global(range: <class 'range'>) ['$122load_global.21']
    $134load_global.23 = global(min: <built-in function min>) ['$134load_global.23']
    $const146.25 = const(int, 0)             ['$const146.25']
    $const148.26 = const(int, -1)            ['$const148.26']
    $154call.27 = call $134load_global.23($const146.25, $const148.26, func=$134load_global.23, args=[Var($const146.25, <string>:6), Var($const148.26, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$134load_global.23', '$154call.27', '$const146.25', '$const148.26']
    $164unary_negative.28 = unary(fn=<built-in function neg>, value=$154call.27) ['$154call.27', '$164unary_negative.28']
    $const168.30 = const(int, 0)             ['$const168.30']
    $170binary_subscr.31 = getitem(value=full_shape0, index=$const168.30, fn=<built-in function getitem>) ['$170binary_subscr.31', '$const168.30', 'full_shape0']
    $180load_global.32 = global(max: <built-in function max>) ['$180load_global.32']
    $const192.34 = const(int, 0)             ['$const192.34']
    $const194.35 = const(int, 1)             ['$const194.35']
    $200call.36 = call $180load_global.32($const192.34, $const194.35, func=$180load_global.32, args=[Var($const192.34, <string>:6), Var($const194.35, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$180load_global.32', '$200call.36', '$const192.34', '$const194.35']
    $binop_sub210.37 = $170binary_subscr.31 - $200call.36 ['$170binary_subscr.31', '$200call.36', '$binop_sub210.37']
    $218call.38 = call $122load_global.21($164unary_negative.28, $binop_sub210.37, func=$122load_global.21, args=[Var($164unary_negative.28, <string>:6), Var($binop_sub210.37, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$122load_global.21', '$164unary_negative.28', '$218call.38', '$binop_sub210.37']
    $228get_iter.39 = getiter(value=$218call.38) ['$218call.38', '$228get_iter.39']
    $phi230.0 = $228get_iter.39              ['$228get_iter.39', '$phi230.0']
    jump 230                                 []
label 230:
    $230for_iter.1 = iternext(value=$phi230.0) ['$230for_iter.1', '$phi230.0']
    $230for_iter.2 = pair_first(value=$230for_iter.1) ['$230for_iter.1', '$230for_iter.2']
    $230for_iter.3 = pair_second(value=$230for_iter.1) ['$230for_iter.1', '$230for_iter.3']
    $phi232.1 = $230for_iter.2               ['$230for_iter.2', '$phi232.1']
    branch $230for_iter.3, 232, 240          ['$230for_iter.3']
label 232:
    index00 = $phi232.1                      ['$phi232.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 230                                 []
label 240:
    $242return_value.1 = cast(value=out0)    ['$242return_value.1', 'out0']
    return $242return_value.1                ['$242return_value.1']

2023-08-13 11:42:40,461 ==== SSA block analysis pass on 0
2023-08-13 11:42:40,461 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696EF9B90>
2023-08-13 11:42:40,461 on stmt: x = arg(0, name=x)
2023-08-13 11:42:40,461 on stmt: full_shape0 = getattr(value=x, attr=shape)
2023-08-13 11:42:40,461 on stmt: $18load_global.2.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:40,461 on stmt: $30load_method.4.1 = getattr(value=$18load_global.2.1, attr=empty)
2023-08-13 11:42:40,461 on stmt: $54load_global.6.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:40,461 on stmt: $66load_attr.7.1 = getattr(value=$54load_global.6.1, attr=bool_)
2023-08-13 11:42:40,461 on stmt: out0 = call $30load_method.4.1(full_shape0, func=$30load_method.4.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($66load_attr.7.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:40,462 on stmt: $const94.9.1 = const(int, 0)
2023-08-13 11:42:40,462 on stmt: $const98.11.1 = const(NoneType, None)
2023-08-13 11:42:40,462 on stmt: $const100.12.1 = const(int, 1)
2023-08-13 11:42:40,462 on stmt: $102build_slice.13.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:40,462 on stmt: $102build_slice.14.1 = call $102build_slice.13.1($const98.11.1, $const100.12.1, func=$102build_slice.13.1, args=(Var($const98.11.1, <string>:4), Var($const100.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:40,462 on stmt: out0[$102build_slice.14.1] = $const94.9.1
2023-08-13 11:42:40,462 on stmt: $const108.15.1 = const(int, 0)
2023-08-13 11:42:40,462 on stmt: $const112.17.1 = const(int, -1)
2023-08-13 11:42:40,462 on stmt: $const114.18.1 = const(NoneType, None)
2023-08-13 11:42:40,462 on stmt: $116build_slice.19.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:40,462 on stmt: $116build_slice.20.1 = call $116build_slice.19.1($const112.17.1, $const114.18.1, func=$116build_slice.19.1, args=(Var($const112.17.1, <string>:5), Var($const114.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:40,463 on stmt: out0[$116build_slice.20.1] = $const108.15.1
2023-08-13 11:42:40,463 on stmt: $122load_global.21.1 = global(range: <class 'range'>)
2023-08-13 11:42:40,463 on stmt: $134load_global.23.1 = global(min: <built-in function min>)
2023-08-13 11:42:40,463 on stmt: $const146.25.1 = const(int, 0)
2023-08-13 11:42:40,463 on stmt: $const148.26.1 = const(int, -1)
2023-08-13 11:42:40,463 on stmt: $154call.27.1 = call $134load_global.23.1($const146.25.1, $const148.26.1, func=$134load_global.23.1, args=[Var($const146.25.1, <string>:6), Var($const148.26.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:40,463 on stmt: $164unary_negative.28.1 = unary(fn=<built-in function neg>, value=$154call.27.1)
2023-08-13 11:42:40,463 on stmt: $const168.30.1 = const(int, 0)
2023-08-13 11:42:40,463 on stmt: $170binary_subscr.31.1 = getitem(value=full_shape0, index=$const168.30.1, fn=<built-in function getitem>)
2023-08-13 11:42:40,464 on stmt: $180load_global.32.1 = global(max: <built-in function max>)
2023-08-13 11:42:40,464 on stmt: $const192.34.1 = const(int, 0)
2023-08-13 11:42:40,464 on stmt: $const194.35.1 = const(int, 1)
2023-08-13 11:42:40,464 on stmt: $200call.36.1 = call $180load_global.32.1($const192.34.1, $const194.35.1, func=$180load_global.32.1, args=[Var($const192.34.1, <string>:6), Var($const194.35.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:40,464 on stmt: $binop_sub210.37.1 = $170binary_subscr.31.1 - $200call.36.1
2023-08-13 11:42:40,464 on stmt: $218call.38.1 = call $122load_global.21.1($164unary_negative.28.1, $binop_sub210.37.1, func=$122load_global.21.1, args=[Var($164unary_negative.28.1, <string>:6), Var($binop_sub210.37.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:40,464 on stmt: $228get_iter.39.1 = getiter(value=$218call.38.1)
2023-08-13 11:42:40,464 on stmt: $phi230.0.1 = $228get_iter.39.1
2023-08-13 11:42:40,464 on stmt: jump 230
2023-08-13 11:42:40,464 ==== SSA block analysis pass on 230
2023-08-13 11:42:40,464 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696EF9B90>
2023-08-13 11:42:40,464 on stmt: $230for_iter.1.1 = iternext(value=$phi230.0.1)
2023-08-13 11:42:40,464 on stmt: $230for_iter.2.1 = pair_first(value=$230for_iter.1.1)
2023-08-13 11:42:40,464 on stmt: $230for_iter.3.1 = pair_second(value=$230for_iter.1.1)
2023-08-13 11:42:40,465 on stmt: $phi232.1.1 = $230for_iter.2.1
2023-08-13 11:42:40,465 on stmt: branch $230for_iter.3.1, 232, 242
2023-08-13 11:42:40,465 ==== SSA block analysis pass on 232
2023-08-13 11:42:40,465 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696EF9B90>
2023-08-13 11:42:40,465 on stmt: index00 = $phi232.1.1
2023-08-13 11:42:40,465 on stmt: jump 240
2023-08-13 11:42:40,465 ==== SSA block analysis pass on 242
2023-08-13 11:42:40,465 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696EF9B90>
2023-08-13 11:42:40,465 on stmt: $242return_value.1.1 = cast(value=out0)
2023-08-13 11:42:40,465 on stmt: return $242return_value.1.1
2023-08-13 11:42:40,465 ==== SSA block analysis pass on 240
2023-08-13 11:42:40,465 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696EF9B90>
2023-08-13 11:42:40,465 on stmt: $const6.1 = const(int, 0)
2023-08-13 11:42:40,465 on stmt: stencil_index = $const6.1 + index00
2023-08-13 11:42:40,465 on stmt: $8binary_subscr.2 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:40,465 on stmt: $const20.4 = const(int, -1)
2023-08-13 11:42:40,465 on stmt: stencil_index.1 = $const20.4 + index00
2023-08-13 11:42:40,466 on stmt: $22binary_subscr.5 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2023-08-13 11:42:40,466 on stmt: $32compare_op.6 = $8binary_subscr.2 > $22binary_subscr.5
2023-08-13 11:42:40,466 on stmt: $const40.8 = const(int, 0)
2023-08-13 11:42:40,466 on stmt: stencil_index.2 = $const40.8 + index00
2023-08-13 11:42:40,466 on stmt: $42binary_subscr.9 = getitem(value=x, index=stencil_index.2, fn=<built-in function getitem>)
2023-08-13 11:42:40,466 on stmt: $const54.11 = const(int, 1)
2023-08-13 11:42:40,466 on stmt: stencil_index.3 = $const54.11 + index00
2023-08-13 11:42:40,466 on stmt: $56binary_subscr.12 = getitem(value=x, index=stencil_index.3, fn=<built-in function getitem>)
2023-08-13 11:42:40,466 on stmt: $66compare_op.13 = $42binary_subscr.9 >= $56binary_subscr.12
2023-08-13 11:42:40,466 on stmt: $binop_and_72.14 = $32compare_op.6 & $66compare_op.13
2023-08-13 11:42:40,466 on stmt: $76return_value.15 = cast(value=$binop_and_72.14)
2023-08-13 11:42:40,466 on stmt: out0[index00] = $76return_value.15
2023-08-13 11:42:40,466 on stmt: jump 241
2023-08-13 11:42:40,466 ==== SSA block analysis pass on 241
2023-08-13 11:42:40,466 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696EF9B90>
2023-08-13 11:42:40,466 on stmt: jump 230
2023-08-13 11:42:40,467 defs defaultdict(<class 'list'>,
            {'$102build_slice.13.1': [<numba.core.ir.Assign object at 0x000001F696EF4B90>],
             '$102build_slice.14.1': [<numba.core.ir.Assign object at 0x000001F696EF4D10>],
             '$116build_slice.19.1': [<numba.core.ir.Assign object at 0x000001F696EF5690>],
             '$116build_slice.20.1': [<numba.core.ir.Assign object at 0x000001F696EF5810>],
             '$122load_global.21.1': [<numba.core.ir.Assign object at 0x000001F696EF5A90>],
             '$134load_global.23.1': [<numba.core.ir.Assign object at 0x000001F696EF5D90>],
             '$154call.27.1': [<numba.core.ir.Assign object at 0x000001F696EF6410>],
             '$164unary_negative.28.1': [<numba.core.ir.Assign object at 0x000001F696EF6690>],
             '$170binary_subscr.31.1': [<numba.core.ir.Assign object at 0x000001F696EF6B50>],
             '$180load_global.32.1': [<numba.core.ir.Assign object at 0x000001F696EF6D50>],
             '$18load_global.2.1': [<numba.core.ir.Assign object at 0x000001F696EE3110>],
             '$200call.36.1': [<numba.core.ir.Assign object at 0x000001F696EF73D0>],
             '$218call.38.1': [<numba.core.ir.Assign object at 0x000001F696EF7910>],
             '$228get_iter.39.1': [<numba.core.ir.Assign object at 0x000001F696EF7B50>],
             '$22binary_subscr.5': [<numba.core.ir.Assign object at 0x000001F696EDC8D0>],
             '$230for_iter.1.1': [<numba.core.ir.Assign object at 0x000001F696EF7D50>],
             '$230for_iter.2.1': [<numba.core.ir.Assign object at 0x000001F696EF7ED0>],
             '$230for_iter.3.1': [<numba.core.ir.Assign object at 0x000001F696EF8090>],
             '$242return_value.1.1': [<numba.core.ir.Assign object at 0x000001F696EF8BD0>],
             '$30load_method.4.1': [<numba.core.ir.Assign object at 0x000001F696EE34D0>],
             '$32compare_op.6': [<numba.core.ir.Assign object at 0x000001F696EC4750>],
             '$42binary_subscr.9': [<numba.core.ir.Assign object at 0x000001F696EDCA90>],
             '$54load_global.6.1': [<numba.core.ir.Assign object at 0x000001F696EE3A50>],
             '$56binary_subscr.12': [<numba.core.ir.Assign object at 0x000001F696EDCC50>],
             '$66compare_op.13': [<numba.core.ir.Assign object at 0x000001F696ECF090>],
             '$66load_attr.7.1': [<numba.core.ir.Assign object at 0x000001F696EE3D50>],
             '$76return_value.15': [<numba.core.ir.Assign object at 0x000001F696ED5B50>],
             '$8binary_subscr.2': [<numba.core.ir.Assign object at 0x000001F696EDC710>],
             '$binop_and_72.14': [<numba.core.ir.Assign object at 0x000001F696ED4610>],
             '$binop_sub210.37.1': [<numba.core.ir.Assign object at 0x000001F696EF7690>],
             '$const100.12.1': [<numba.core.ir.Assign object at 0x000001F696EF4990>],
             '$const108.15.1': [<numba.core.ir.Assign object at 0x000001F696EF4F90>],
             '$const112.17.1': [<numba.core.ir.Assign object at 0x000001F696EF52D0>],
             '$const114.18.1': [<numba.core.ir.Assign object at 0x000001F696EF5490>],
             '$const146.25.1': [<numba.core.ir.Assign object at 0x000001F696EF6010>],
             '$const148.26.1': [<numba.core.ir.Assign object at 0x000001F696EF61D0>],
             '$const168.30.1': [<numba.core.ir.Assign object at 0x000001F696EF69D0>],
             '$const192.34.1': [<numba.core.ir.Assign object at 0x000001F696EF6F50>],
             '$const194.35.1': [<numba.core.ir.Assign object at 0x000001F696EF7110>],
             '$const20.4': [<numba.core.ir.Assign object at 0x000001F696EBDCD0>],
             '$const40.8': [<numba.core.ir.Assign object at 0x000001F696EC5C90>],
             '$const54.11': [<numba.core.ir.Assign object at 0x000001F696ECC6D0>],
             '$const6.1': [<numba.core.ir.Assign object at 0x000001F696EB7290>],
             '$const94.9.1': [<numba.core.ir.Assign object at 0x000001F696EE3C50>],
             '$const98.11.1': [<numba.core.ir.Assign object at 0x000001F696EF47D0>],
             '$phi230.0.1': [<numba.core.ir.Assign object at 0x000001F696EE2C10>],
             '$phi232.1.1': [<numba.core.ir.Assign object at 0x000001F696EE0B90>],
             'full_shape0': [<numba.core.ir.Assign object at 0x000001F696EE2D90>],
             'index00': [<numba.core.ir.Assign object at 0x000001F696EF8350>],
             'out0': [<numba.core.ir.Assign object at 0x000001F696EF4110>],
             'stencil_index': [<numba.core.ir.Assign object at 0x000001F696EDC690>],
             'stencil_index.1': [<numba.core.ir.Assign object at 0x000001F696EDC810>],
             'stencil_index.2': [<numba.core.ir.Assign object at 0x000001F696EDCA50>],
             'stencil_index.3': [<numba.core.ir.Assign object at 0x000001F696EDCBD0>],
             'x': [<numba.core.ir.Assign object at 0x000001F696EE2990>]})
2023-08-13 11:42:40,468 SSA violators set()
2023-08-13 11:42:40,973 bytecode dump:
>          0	NOP(arg=None, lineno=1063)
           2	RESUME(arg=0, lineno=1063)
           4	LOAD_GLOBAL(arg=1, lineno=1077)
          16	LOAD_FAST(arg=0, lineno=1077)
          18	PRECALL(arg=1, lineno=1077)
          22	CALL(arg=1, lineno=1077)
          32	LOAD_FAST(arg=1, lineno=1077)
          34	LOAD_CONST(arg=1, lineno=1077)
          36	LOAD_CONST(arg=1, lineno=1077)
          38	BUILD_SLICE(arg=2, lineno=1077)
          40	STORE_SUBSCR(arg=None, lineno=1077)
          44	LOAD_CONST(arg=1, lineno=1077)
          46	RETURN_VALUE(arg=None, lineno=1077)
2023-08-13 11:42:40,973 pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-13 11:42:40,973 stack: []
2023-08-13 11:42:40,973 state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-13 11:42:40,973 dispatch pc=0, inst=NOP(arg=None, lineno=1063)
2023-08-13 11:42:40,973 stack []
2023-08-13 11:42:40,974 dispatch pc=2, inst=RESUME(arg=0, lineno=1063)
2023-08-13 11:42:40,974 stack []
2023-08-13 11:42:40,974 dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=1077)
2023-08-13 11:42:40,974 stack []
2023-08-13 11:42:40,974 dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1077)
2023-08-13 11:42:40,974 stack ['$null$4.1', '$4load_global.0']
2023-08-13 11:42:40,974 dispatch pc=18, inst=PRECALL(arg=1, lineno=1077)
2023-08-13 11:42:40,974 stack ['$null$4.1', '$4load_global.0', '$x16.2']
2023-08-13 11:42:40,974 dispatch pc=22, inst=CALL(arg=1, lineno=1077)
2023-08-13 11:42:40,974 stack ['$null$4.1', '$4load_global.0', '$x16.2']
2023-08-13 11:42:40,974 dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=1077)
2023-08-13 11:42:40,974 stack ['$22call.3']
2023-08-13 11:42:40,974 dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=1077)
2023-08-13 11:42:40,974 stack ['$22call.3', '$y32.4']
2023-08-13 11:42:40,974 dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=1077)
2023-08-13 11:42:40,974 stack ['$22call.3', '$y32.4', '$const34.5']
2023-08-13 11:42:40,974 dispatch pc=38, inst=BUILD_SLICE(arg=2, lineno=1077)
2023-08-13 11:42:40,975 stack ['$22call.3', '$y32.4', '$const34.5', '$const36.6']
2023-08-13 11:42:40,975 dispatch pc=40, inst=STORE_SUBSCR(arg=None, lineno=1077)
2023-08-13 11:42:40,975 stack ['$22call.3', '$y32.4', '$38build_slice.8']
2023-08-13 11:42:40,975 dispatch pc=44, inst=LOAD_CONST(arg=1, lineno=1077)
2023-08-13 11:42:40,975 stack []
2023-08-13 11:42:40,975 dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=1077)
2023-08-13 11:42:40,975 stack ['$const44.9']
2023-08-13 11:42:40,975 end state. edges=[]
2023-08-13 11:42:40,975 -------------------------Prune PHIs-------------------------
2023-08-13 11:42:40,975 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-08-13 11:42:40,975 defmap: {}
2023-08-13 11:42:40,975 phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:40,975 changing phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:40,975 keep phismap: {}
2023-08-13 11:42:40,975 new_out: defaultdict(<class 'dict'>, {})
2023-08-13 11:42:40,975 ----------------------DONE Prune PHIs-----------------------
2023-08-13 11:42:40,975 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'res': '$x16.2'}), (18, {}), (20, {}), (22, {'func': '$4load_global.0', 'args': ['$x16.2'], 'kw_names': None, 'res': '$22call.3'}), (24, {}), (26, {}), (28, {}), (30, {}), (32, {'res': '$y32.4'}), (34, {'res': '$const34.5'}), (36, {'res': '$const36.6'}), (38, {'start': '$const34.5', 'stop': '$const36.6', 'step': None, 'res': '$38build_slice.8', 'slicevar': '$38build_slice.7'}), (40, {'target': '$y32.4', 'index': '$38build_slice.8', 'value': '$22call.3'}), (42, {}), (44, {'res': '$const44.9'}), (46, {'retval': '$const44.9', 'castval': '$46return_value.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:40,976 label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $4load_global.0 = global(_localmax_sten: <numba.stencils.stencil.StencilFunc object at 0x000001F696E760D0>) ['$4load_global.0']
    $22call.3 = call $4load_global.0(x, func=$4load_global.0, args=[Var(x, utils.py:1063)], kws=(), vararg=None, varkwarg=None, target=None) ['$22call.3', '$4load_global.0', 'x']
    $const34.5 = const(NoneType, None)       ['$const34.5']
    $const36.6 = const(NoneType, None)       ['$const36.6']
    $38build_slice.7 = global(slice: <class 'slice'>) ['$38build_slice.7']
    $38build_slice.8 = call $38build_slice.7($const34.5, $const36.6, func=$38build_slice.7, args=(Var($const34.5, utils.py:1077), Var($const36.6, utils.py:1077)), kws=(), vararg=None, varkwarg=None, target=None) ['$38build_slice.7', '$38build_slice.8', '$const34.5', '$const36.6']
    y[$38build_slice.8] = $22call.3          ['$22call.3', '$38build_slice.8', 'y']
    $const44.9 = const(NoneType, None)       ['$const44.9']
    $46return_value.10 = cast(value=$const44.9) ['$46return_value.10', '$const44.9']
    return $46return_value.10                ['$46return_value.10']

2023-08-13 11:42:40,983 ==== SSA block analysis pass on 0
2023-08-13 11:42:40,983 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F69677C890>
2023-08-13 11:42:40,983 on stmt: x = arg(0, name=x)
2023-08-13 11:42:40,983 on stmt: y = arg(1, name=y)
2023-08-13 11:42:40,983 on stmt: $4load_global.0 = global(_localmax_sten: <numba.stencils.stencil.StencilFunc object at 0x000001F696E760D0>)
2023-08-13 11:42:40,983 on stmt: $22call.3 = call $4load_global.0(x, func=$4load_global.0, args=[Var(x, utils.py:1063)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:40,983 on stmt: $const34.5 = const(NoneType, None)
2023-08-13 11:42:40,983 on stmt: $const36.6 = const(NoneType, None)
2023-08-13 11:42:40,983 on stmt: $38build_slice.7 = global(slice: <class 'slice'>)
2023-08-13 11:42:40,983 on stmt: $38build_slice.8 = call $38build_slice.7($const34.5, $const36.6, func=$38build_slice.7, args=(Var($const34.5, utils.py:1077), Var($const36.6, utils.py:1077)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:40,983 on stmt: y[slice(None, None, None)] = $22call.3
2023-08-13 11:42:40,983 on stmt: $const44.9 = const(NoneType, None)
2023-08-13 11:42:40,985 on stmt: $46return_value.10 = cast(value=$const44.9)
2023-08-13 11:42:40,985 on stmt: return $46return_value.10
2023-08-13 11:42:40,985 defs defaultdict(<class 'list'>,
            {'$22call.3': [<numba.core.ir.Assign object at 0x000001F696A15A10>],
             '$38build_slice.7': [<numba.core.ir.Assign object at 0x000001F696A14F50>],
             '$38build_slice.8': [<numba.core.ir.Assign object at 0x000001F696A14E10>],
             '$46return_value.10': [<numba.core.ir.Assign object at 0x000001F696A14750>],
             '$4load_global.0': [<numba.core.ir.Assign object at 0x000001F696A16310>],
             '$const34.5': [<numba.core.ir.Assign object at 0x000001F696A15610>],
             '$const36.6': [<numba.core.ir.Assign object at 0x000001F696A151D0>],
             '$const44.9': [<numba.core.ir.Assign object at 0x000001F696A14B10>],
             'x': [<numba.core.ir.Assign object at 0x000001F696A16990>],
             'y': [<numba.core.ir.Assign object at 0x000001F696A16810>]})
2023-08-13 11:42:40,985 SSA violators set()
2023-08-13 11:42:41,009 bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	RESUME(arg=0, lineno=1)
           4	LOAD_FAST(arg=0, lineno=2)
           6	LOAD_ATTR(arg=0, lineno=2)
          16	STORE_FAST(arg=1, lineno=2)
          18	LOAD_GLOBAL(arg=2, lineno=3)
          30	LOAD_METHOD(arg=2, lineno=3)
          52	LOAD_FAST(arg=1, lineno=3)
          54	LOAD_GLOBAL(arg=2, lineno=3)
          66	LOAD_ATTR(arg=3, lineno=3)
          76	KW_NAMES(arg=1, lineno=3)
          78	PRECALL(arg=2, lineno=3)
          82	CALL(arg=2, lineno=3)
          92	STORE_FAST(arg=2, lineno=3)
          94	LOAD_CONST(arg=2, lineno=4)
          96	LOAD_FAST(arg=2, lineno=4)
          98	LOAD_CONST(arg=0, lineno=4)
         100	LOAD_CONST(arg=3, lineno=4)
         102	BUILD_SLICE(arg=2, lineno=4)
         104	STORE_SUBSCR(arg=None, lineno=4)
         108	LOAD_CONST(arg=2, lineno=5)
         110	LOAD_FAST(arg=2, lineno=5)
         112	LOAD_CONST(arg=4, lineno=5)
         114	LOAD_CONST(arg=0, lineno=5)
         116	BUILD_SLICE(arg=2, lineno=5)
         118	STORE_SUBSCR(arg=None, lineno=5)
         122	LOAD_GLOBAL(arg=9, lineno=6)
         134	LOAD_GLOBAL(arg=11, lineno=6)
         146	LOAD_CONST(arg=2, lineno=6)
         148	LOAD_CONST(arg=4, lineno=6)
         150	PRECALL(arg=2, lineno=6)
         154	CALL(arg=2, lineno=6)
         164	UNARY_NEGATIVE(arg=None, lineno=6)
         166	LOAD_FAST(arg=1, lineno=6)
         168	LOAD_CONST(arg=2, lineno=6)
         170	BINARY_SUBSCR(arg=None, lineno=6)
         180	LOAD_GLOBAL(arg=13, lineno=6)
         192	LOAD_CONST(arg=2, lineno=6)
         194	LOAD_CONST(arg=3, lineno=6)
         196	PRECALL(arg=2, lineno=6)
         200	CALL(arg=2, lineno=6)
         210	BINARY_OP(arg=10, lineno=6)
         214	PRECALL(arg=2, lineno=6)
         218	CALL(arg=2, lineno=6)
         228	GET_ITER(arg=None, lineno=6)
>        230	FOR_ITER(arg=4, lineno=6)
         232	STORE_FAST(arg=3, lineno=6)
         234	LOAD_CONST(arg=2, lineno=7)
         236	STORE_FAST(arg=4, lineno=7)
         238	JUMP_BACKWARD(arg=5, lineno=7)
>        240	LOAD_FAST(arg=2, lineno=8)
         242	RETURN_VALUE(arg=None, lineno=8)
2023-08-13 11:42:41,010 pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-13 11:42:41,010 stack: []
2023-08-13 11:42:41,010 state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-13 11:42:41,010 dispatch pc=0, inst=NOP(arg=None, lineno=1)
2023-08-13 11:42:41,010 stack []
2023-08-13 11:42:41,010 dispatch pc=2, inst=RESUME(arg=0, lineno=1)
2023-08-13 11:42:41,010 stack []
2023-08-13 11:42:41,010 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2)
2023-08-13 11:42:41,010 stack []
2023-08-13 11:42:41,010 dispatch pc=6, inst=LOAD_ATTR(arg=0, lineno=2)
2023-08-13 11:42:41,010 stack ['$x4.0']
2023-08-13 11:42:41,010 dispatch pc=16, inst=STORE_FAST(arg=1, lineno=2)
2023-08-13 11:42:41,010 stack ['$6load_attr.1']
2023-08-13 11:42:41,010 dispatch pc=18, inst=LOAD_GLOBAL(arg=2, lineno=3)
2023-08-13 11:42:41,010 stack []
2023-08-13 11:42:41,010 dispatch pc=30, inst=LOAD_METHOD(arg=2, lineno=3)
2023-08-13 11:42:41,010 stack ['$18load_global.2']
2023-08-13 11:42:41,011 dispatch pc=52, inst=LOAD_FAST(arg=1, lineno=3)
2023-08-13 11:42:41,011 stack ['$null$30.3', '$30load_method.4']
2023-08-13 11:42:41,011 dispatch pc=54, inst=LOAD_GLOBAL(arg=2, lineno=3)
2023-08-13 11:42:41,011 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5']
2023-08-13 11:42:41,011 dispatch pc=66, inst=LOAD_ATTR(arg=3, lineno=3)
2023-08-13 11:42:41,011 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$54load_global.6']
2023-08-13 11:42:41,011 dispatch pc=76, inst=KW_NAMES(arg=1, lineno=3)
2023-08-13 11:42:41,011 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$66load_attr.7']
2023-08-13 11:42:41,011 dispatch pc=78, inst=PRECALL(arg=2, lineno=3)
2023-08-13 11:42:41,011 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$66load_attr.7']
2023-08-13 11:42:41,011 dispatch pc=82, inst=CALL(arg=2, lineno=3)
2023-08-13 11:42:41,011 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$66load_attr.7']
2023-08-13 11:42:41,011 dispatch pc=92, inst=STORE_FAST(arg=2, lineno=3)
2023-08-13 11:42:41,011 stack ['$82call.8']
2023-08-13 11:42:41,011 dispatch pc=94, inst=LOAD_CONST(arg=2, lineno=4)
2023-08-13 11:42:41,011 stack []
2023-08-13 11:42:41,011 dispatch pc=96, inst=LOAD_FAST(arg=2, lineno=4)
2023-08-13 11:42:41,011 stack ['$const94.9']
2023-08-13 11:42:41,011 dispatch pc=98, inst=LOAD_CONST(arg=0, lineno=4)
2023-08-13 11:42:41,012 stack ['$const94.9', '$out096.10']
2023-08-13 11:42:41,012 dispatch pc=100, inst=LOAD_CONST(arg=3, lineno=4)
2023-08-13 11:42:41,012 stack ['$const94.9', '$out096.10', '$const98.11']
2023-08-13 11:42:41,012 dispatch pc=102, inst=BUILD_SLICE(arg=2, lineno=4)
2023-08-13 11:42:41,012 stack ['$const94.9', '$out096.10', '$const98.11', '$const100.12']
2023-08-13 11:42:41,012 dispatch pc=104, inst=STORE_SUBSCR(arg=None, lineno=4)
2023-08-13 11:42:41,012 stack ['$const94.9', '$out096.10', '$102build_slice.14']
2023-08-13 11:42:41,012 dispatch pc=108, inst=LOAD_CONST(arg=2, lineno=5)
2023-08-13 11:42:41,012 stack []
2023-08-13 11:42:41,012 dispatch pc=110, inst=LOAD_FAST(arg=2, lineno=5)
2023-08-13 11:42:41,012 stack ['$const108.15']
2023-08-13 11:42:41,012 dispatch pc=112, inst=LOAD_CONST(arg=4, lineno=5)
2023-08-13 11:42:41,013 stack ['$const108.15', '$out0110.16']
2023-08-13 11:42:41,013 dispatch pc=114, inst=LOAD_CONST(arg=0, lineno=5)
2023-08-13 11:42:41,013 stack ['$const108.15', '$out0110.16', '$const112.17']
2023-08-13 11:42:41,013 dispatch pc=116, inst=BUILD_SLICE(arg=2, lineno=5)
2023-08-13 11:42:41,013 stack ['$const108.15', '$out0110.16', '$const112.17', '$const114.18']
2023-08-13 11:42:41,013 dispatch pc=118, inst=STORE_SUBSCR(arg=None, lineno=5)
2023-08-13 11:42:41,013 stack ['$const108.15', '$out0110.16', '$116build_slice.20']
2023-08-13 11:42:41,013 dispatch pc=122, inst=LOAD_GLOBAL(arg=9, lineno=6)
2023-08-13 11:42:41,013 stack []
2023-08-13 11:42:41,014 dispatch pc=134, inst=LOAD_GLOBAL(arg=11, lineno=6)
2023-08-13 11:42:41,014 stack ['$null$122.22', '$122load_global.21']
2023-08-13 11:42:41,014 dispatch pc=146, inst=LOAD_CONST(arg=2, lineno=6)
2023-08-13 11:42:41,014 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23']
2023-08-13 11:42:41,014 dispatch pc=148, inst=LOAD_CONST(arg=4, lineno=6)
2023-08-13 11:42:41,014 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23', '$const146.25']
2023-08-13 11:42:41,014 dispatch pc=150, inst=PRECALL(arg=2, lineno=6)
2023-08-13 11:42:41,014 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23', '$const146.25', '$const148.26']
2023-08-13 11:42:41,014 dispatch pc=154, inst=CALL(arg=2, lineno=6)
2023-08-13 11:42:41,014 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23', '$const146.25', '$const148.26']
2023-08-13 11:42:41,014 dispatch pc=164, inst=UNARY_NEGATIVE(arg=None, lineno=6)
2023-08-13 11:42:41,015 stack ['$null$122.22', '$122load_global.21', '$154call.27']
2023-08-13 11:42:41,015 dispatch pc=166, inst=LOAD_FAST(arg=1, lineno=6)
2023-08-13 11:42:41,015 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28']
2023-08-13 11:42:41,015 dispatch pc=168, inst=LOAD_CONST(arg=2, lineno=6)
2023-08-13 11:42:41,015 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$full_shape0166.29']
2023-08-13 11:42:41,015 dispatch pc=170, inst=BINARY_SUBSCR(arg=None, lineno=6)
2023-08-13 11:42:41,015 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$full_shape0166.29', '$const168.30']
2023-08-13 11:42:41,015 dispatch pc=180, inst=LOAD_GLOBAL(arg=13, lineno=6)
2023-08-13 11:42:41,015 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31']
2023-08-13 11:42:41,015 dispatch pc=192, inst=LOAD_CONST(arg=2, lineno=6)
2023-08-13 11:42:41,016 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32']
2023-08-13 11:42:41,016 dispatch pc=194, inst=LOAD_CONST(arg=3, lineno=6)
2023-08-13 11:42:41,016 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32', '$const192.34']
2023-08-13 11:42:41,016 dispatch pc=196, inst=PRECALL(arg=2, lineno=6)
2023-08-13 11:42:41,016 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32', '$const192.34', '$const194.35']
2023-08-13 11:42:41,016 dispatch pc=200, inst=CALL(arg=2, lineno=6)
2023-08-13 11:42:41,016 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32', '$const192.34', '$const194.35']
2023-08-13 11:42:41,016 dispatch pc=210, inst=BINARY_OP(arg=10, lineno=6)
2023-08-13 11:42:41,016 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$200call.36']
2023-08-13 11:42:41,016 dispatch pc=214, inst=PRECALL(arg=2, lineno=6)
2023-08-13 11:42:41,017 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$binop_sub210.37']
2023-08-13 11:42:41,017 dispatch pc=218, inst=CALL(arg=2, lineno=6)
2023-08-13 11:42:41,017 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$binop_sub210.37']
2023-08-13 11:42:41,017 dispatch pc=228, inst=GET_ITER(arg=None, lineno=6)
2023-08-13 11:42:41,017 stack ['$218call.38']
2023-08-13 11:42:41,018 end state. edges=[Edge(pc=230, stack=('$228get_iter.39',), blockstack=(), npush=0)]
2023-08-13 11:42:41,018 pending: deque([State(pc_initial=230 nstack_initial=1)])
2023-08-13 11:42:41,018 stack: ['$phi230.0']
2023-08-13 11:42:41,018 state.pc_initial: State(pc_initial=230 nstack_initial=1)
2023-08-13 11:42:41,018 dispatch pc=230, inst=FOR_ITER(arg=4, lineno=6)
2023-08-13 11:42:41,018 stack ['$phi230.0']
2023-08-13 11:42:41,018 end state. edges=[Edge(pc=240, stack=(), blockstack=(), npush=0), Edge(pc=232, stack=('$phi230.0', '$230for_iter.2'), blockstack=(), npush=0)]
2023-08-13 11:42:41,018 pending: deque([State(pc_initial=240 nstack_initial=0), State(pc_initial=232 nstack_initial=2)])
2023-08-13 11:42:41,021 stack: []
2023-08-13 11:42:41,021 state.pc_initial: State(pc_initial=240 nstack_initial=0)
2023-08-13 11:42:41,021 dispatch pc=240, inst=LOAD_FAST(arg=2, lineno=8)
2023-08-13 11:42:41,021 stack []
2023-08-13 11:42:41,021 dispatch pc=242, inst=RETURN_VALUE(arg=None, lineno=8)
2023-08-13 11:42:41,021 stack ['$out0240.0']
2023-08-13 11:42:41,021 end state. edges=[]
2023-08-13 11:42:41,021 pending: deque([State(pc_initial=232 nstack_initial=2)])
2023-08-13 11:42:41,021 stack: ['$phi232.0', '$phi232.1']
2023-08-13 11:42:41,021 state.pc_initial: State(pc_initial=232 nstack_initial=2)
2023-08-13 11:42:41,021 dispatch pc=232, inst=STORE_FAST(arg=3, lineno=6)
2023-08-13 11:42:41,022 stack ['$phi232.0', '$phi232.1']
2023-08-13 11:42:41,022 dispatch pc=234, inst=LOAD_CONST(arg=2, lineno=7)
2023-08-13 11:42:41,022 stack ['$phi232.0']
2023-08-13 11:42:41,022 dispatch pc=236, inst=STORE_FAST(arg=4, lineno=7)
2023-08-13 11:42:41,022 stack ['$phi232.0', '$const234.2']
2023-08-13 11:42:41,022 dispatch pc=238, inst=JUMP_BACKWARD(arg=5, lineno=7)
2023-08-13 11:42:41,022 stack ['$phi232.0']
2023-08-13 11:42:41,022 end state. edges=[Edge(pc=230, stack=('$phi232.0',), blockstack=(), npush=0)]
2023-08-13 11:42:41,022 pending: deque([State(pc_initial=230 nstack_initial=1)])
2023-08-13 11:42:41,022 -------------------------Prune PHIs-------------------------
2023-08-13 11:42:41,023 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=230 nstack_initial=1): {'$phi230.0'},
             State(pc_initial=232 nstack_initial=2): {'$phi232.1'},
             State(pc_initial=240 nstack_initial=0): set()})
2023-08-13 11:42:41,023 defmap: {'$phi230.0': State(pc_initial=0 nstack_initial=0),
 '$phi232.1': State(pc_initial=230 nstack_initial=1)}
2023-08-13 11:42:41,023 phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi232.0',
                            State(pc_initial=232 nstack_initial=2))},
             '$phi232.0': {('$phi230.0',
                            State(pc_initial=230 nstack_initial=1))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:41,023 changing phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi230.0',
                            State(pc_initial=230 nstack_initial=1))},
             '$phi232.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:41,024 changing phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:41,024 changing phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:41,024 keep phismap: {'$phi230.0': {('$228get_iter.39', State(pc_initial=0 nstack_initial=0))},
 '$phi232.1': {('$230for_iter.2', State(pc_initial=230 nstack_initial=1))}}
2023-08-13 11:42:41,025 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi230.0': '$228get_iter.39'},
             State(pc_initial=230 nstack_initial=1): {'$phi232.1': '$230for_iter.2'}})
2023-08-13 11:42:41,025 ----------------------DONE Prune PHIs-----------------------
2023-08-13 11:42:41,025 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$x4.0'}), (6, {'item': '$x4.0', 'res': '$6load_attr.1'}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'value': '$6load_attr.1'}), (18, {'idx': 1, 'res': '$18load_global.2'}), (20, {}), (22, {}), (24, {}), (26, {}), (28, {}), (30, {'item': '$18load_global.2', 'res': '$30load_method.4'}), (32, {}), (34, {}), (36, {}), (38, {}), (40, {}), (42, {}), (44, {}), (46, {}), (48, {}), (50, {}), (52, {'res': '$full_shape052.5'}), (54, {'idx': 1, 'res': '$54load_global.6'}), (56, {}), (58, {}), (60, {}), (62, {}), (64, {}), (66, {'item': '$54load_global.6', 'res': '$66load_attr.7'}), (68, {}), (70, {}), (72, {}), (74, {}), (78, {}), (80, {}), (82, {'func': '$30load_method.4', 'args': ['$full_shape052.5', '$66load_attr.7'], 'kw_names': 1, 'res': '$82call.8'}), (84, {}), (86, {}), (88, {}), (90, {}), (92, {'value': '$82call.8'}), (94, {'res': '$const94.9'}), (96, {'res': '$out096.10'}), (98, {'res': '$const98.11'}), (100, {'res': '$const100.12'}), (102, {'start': '$const98.11', 'stop': '$const100.12', 'step': None, 'res': '$102build_slice.14', 'slicevar': '$102build_slice.13'}), (104, {'target': '$out096.10', 'index': '$102build_slice.14', 'value': '$const94.9'}), (106, {}), (108, {'res': '$const108.15'}), (110, {'res': '$out0110.16'}), (112, {'res': '$const112.17'}), (114, {'res': '$const114.18'}), (116, {'start': '$const112.17', 'stop': '$const114.18', 'step': None, 'res': '$116build_slice.20', 'slicevar': '$116build_slice.19'}), (118, {'target': '$out0110.16', 'index': '$116build_slice.20', 'value': '$const108.15'}), (120, {}), (122, {'idx': 4, 'res': '$122load_global.21'}), (124, {}), (126, {}), (128, {}), (130, {}), (132, {}), (134, {'idx': 5, 'res': '$134load_global.23'}), (136, {}), (138, {}), (140, {}), (142, {}), (144, {}), (146, {'res': '$const146.25'}), (148, {'res': '$const148.26'}), (150, {}), (152, {}), (154, {'func': '$134load_global.23', 'args': ['$const146.25', '$const148.26'], 'kw_names': None, 'res': '$154call.27'}), (156, {}), (158, {}), (160, {}), (162, {}), (164, {'value': '$154call.27', 'res': '$164unary_negative.28'}), (166, {'res': '$full_shape0166.29'}), (168, {'res': '$const168.30'}), (170, {'index': '$const168.30', 'target': '$full_shape0166.29', 'res': '$170binary_subscr.31'}), (172, {}), (174, {}), (176, {}), (178, {}), (180, {'idx': 6, 'res': '$180load_global.32'}), (182, {}), (184, {}), (186, {}), (188, {}), (190, {}), (192, {'res': '$const192.34'}), (194, {'res': '$const194.35'}), (196, {}), (198, {}), (200, {'func': '$180load_global.32', 'args': ['$const192.34', '$const194.35'], 'kw_names': None, 'res': '$200call.36'}), (202, {}), (204, {}), (206, {}), (208, {}), (210, {'op': '-', 'lhs': '$170binary_subscr.31', 'rhs': '$200call.36', 'res': '$binop_sub210.37'}), (212, {}), (214, {}), (216, {}), (218, {'func': '$122load_global.21', 'args': ['$164unary_negative.28', '$binop_sub210.37'], 'kw_names': None, 'res': '$218call.38'}), (220, {}), (222, {}), (224, {}), (226, {}), (228, {'value': '$218call.38', 'res': '$228get_iter.39'})), outgoing_phis={'$phi230.0': '$228get_iter.39'}, blockstack=(), active_try_block=None, outgoing_edgepushed={230: ('$228get_iter.39',)})
2023-08-13 11:42:41,025 block_infos State(pc_initial=230 nstack_initial=1):
AdaptBlockInfo(insts=((230, {'iterator': '$phi230.0', 'pair': '$230for_iter.1', 'indval': '$230for_iter.2', 'pred': '$230for_iter.3'}),), outgoing_phis={'$phi232.1': '$230for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={240: (), 232: ('$phi230.0', '$230for_iter.2')})
2023-08-13 11:42:41,025 block_infos State(pc_initial=232 nstack_initial=2):
AdaptBlockInfo(insts=((232, {'value': '$phi232.1'}), (234, {'res': '$const234.2'}), (236, {'value': '$const234.2'}), (238, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={230: ('$phi232.0',)})
2023-08-13 11:42:41,026 block_infos State(pc_initial=240 nstack_initial=0):
AdaptBlockInfo(insts=((240, {'res': '$out0240.0'}), (242, {'retval': '$out0240.0', 'castval': '$242return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:41,028 label 0:
    x = arg(0, name=x)                       ['x']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $18load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>) ['$18load_global.2']
    $30load_method.4 = getattr(value=$18load_global.2, attr=empty) ['$18load_global.2', '$30load_method.4']
    $54load_global.6 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>) ['$54load_global.6']
    $66load_attr.7 = getattr(value=$54load_global.6, attr=bool_) ['$54load_global.6', '$66load_attr.7']
    out0 = call $30load_method.4(full_shape0, func=$30load_method.4, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($66load_attr.7, <string>:3))], vararg=None, varkwarg=None, target=None) ['$30load_method.4', '$66load_attr.7', 'full_shape0', 'out0']
    $const94.9 = const(int, 0)               ['$const94.9']
    $const98.11 = const(NoneType, None)      ['$const98.11']
    $const100.12 = const(int, 1)             ['$const100.12']
    $102build_slice.13 = global(slice: <class 'slice'>) ['$102build_slice.13']
    $102build_slice.14 = call $102build_slice.13($const98.11, $const100.12, func=$102build_slice.13, args=(Var($const98.11, <string>:4), Var($const100.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$102build_slice.13', '$102build_slice.14', '$const100.12', '$const98.11']
    out0[$102build_slice.14] = $const94.9    ['$102build_slice.14', '$const94.9', 'out0']
    $const108.15 = const(int, 0)             ['$const108.15']
    $const112.17 = const(int, -1)            ['$const112.17']
    $const114.18 = const(NoneType, None)     ['$const114.18']
    $116build_slice.19 = global(slice: <class 'slice'>) ['$116build_slice.19']
    $116build_slice.20 = call $116build_slice.19($const112.17, $const114.18, func=$116build_slice.19, args=(Var($const112.17, <string>:5), Var($const114.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$116build_slice.19', '$116build_slice.20', '$const112.17', '$const114.18']
    out0[$116build_slice.20] = $const108.15  ['$116build_slice.20', '$const108.15', 'out0']
    $122load_global.21 = global(range: <class 'range'>) ['$122load_global.21']
    $134load_global.23 = global(min: <built-in function min>) ['$134load_global.23']
    $const146.25 = const(int, 0)             ['$const146.25']
    $const148.26 = const(int, -1)            ['$const148.26']
    $154call.27 = call $134load_global.23($const146.25, $const148.26, func=$134load_global.23, args=[Var($const146.25, <string>:6), Var($const148.26, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$134load_global.23', '$154call.27', '$const146.25', '$const148.26']
    $164unary_negative.28 = unary(fn=<built-in function neg>, value=$154call.27) ['$154call.27', '$164unary_negative.28']
    $const168.30 = const(int, 0)             ['$const168.30']
    $170binary_subscr.31 = getitem(value=full_shape0, index=$const168.30, fn=<built-in function getitem>) ['$170binary_subscr.31', '$const168.30', 'full_shape0']
    $180load_global.32 = global(max: <built-in function max>) ['$180load_global.32']
    $const192.34 = const(int, 0)             ['$const192.34']
    $const194.35 = const(int, 1)             ['$const194.35']
    $200call.36 = call $180load_global.32($const192.34, $const194.35, func=$180load_global.32, args=[Var($const192.34, <string>:6), Var($const194.35, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$180load_global.32', '$200call.36', '$const192.34', '$const194.35']
    $binop_sub210.37 = $170binary_subscr.31 - $200call.36 ['$170binary_subscr.31', '$200call.36', '$binop_sub210.37']
    $218call.38 = call $122load_global.21($164unary_negative.28, $binop_sub210.37, func=$122load_global.21, args=[Var($164unary_negative.28, <string>:6), Var($binop_sub210.37, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$122load_global.21', '$164unary_negative.28', '$218call.38', '$binop_sub210.37']
    $228get_iter.39 = getiter(value=$218call.38) ['$218call.38', '$228get_iter.39']
    $phi230.0 = $228get_iter.39              ['$228get_iter.39', '$phi230.0']
    jump 230                                 []
label 230:
    $230for_iter.1 = iternext(value=$phi230.0) ['$230for_iter.1', '$phi230.0']
    $230for_iter.2 = pair_first(value=$230for_iter.1) ['$230for_iter.1', '$230for_iter.2']
    $230for_iter.3 = pair_second(value=$230for_iter.1) ['$230for_iter.1', '$230for_iter.3']
    $phi232.1 = $230for_iter.2               ['$230for_iter.2', '$phi232.1']
    branch $230for_iter.3, 232, 240          ['$230for_iter.3']
label 232:
    index00 = $phi232.1                      ['$phi232.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 230                                 []
label 240:
    $242return_value.1 = cast(value=out0)    ['$242return_value.1', 'out0']
    return $242return_value.1                ['$242return_value.1']

2023-08-13 11:42:41,049 ==== SSA block analysis pass on 0
2023-08-13 11:42:41,049 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F69664C2D0>
2023-08-13 11:42:41,049 on stmt: x = arg(0, name=x)
2023-08-13 11:42:41,049 on stmt: full_shape0 = getattr(value=x, attr=shape)
2023-08-13 11:42:41,049 on stmt: $18load_global.2.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:41,049 on stmt: $30load_method.4.1 = getattr(value=$18load_global.2.1, attr=empty)
2023-08-13 11:42:41,049 on stmt: $54load_global.6.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:41,049 on stmt: $66load_attr.7.1 = getattr(value=$54load_global.6.1, attr=bool_)
2023-08-13 11:42:41,049 on stmt: out0 = call $30load_method.4.1(full_shape0, func=$30load_method.4.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($66load_attr.7.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:41,049 on stmt: $const94.9.1 = const(int, 0)
2023-08-13 11:42:41,049 on stmt: $const98.11.1 = const(NoneType, None)
2023-08-13 11:42:41,049 on stmt: $const100.12.1 = const(int, 1)
2023-08-13 11:42:41,049 on stmt: $102build_slice.13.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:41,050 on stmt: $102build_slice.14.1 = call $102build_slice.13.1($const98.11.1, $const100.12.1, func=$102build_slice.13.1, args=(Var($const98.11.1, <string>:4), Var($const100.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:41,050 on stmt: out0[$102build_slice.14.1] = $const94.9.1
2023-08-13 11:42:41,050 on stmt: $const108.15.1 = const(int, 0)
2023-08-13 11:42:41,050 on stmt: $const112.17.1 = const(int, -1)
2023-08-13 11:42:41,050 on stmt: $const114.18.1 = const(NoneType, None)
2023-08-13 11:42:41,050 on stmt: $116build_slice.19.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:41,050 on stmt: $116build_slice.20.1 = call $116build_slice.19.1($const112.17.1, $const114.18.1, func=$116build_slice.19.1, args=(Var($const112.17.1, <string>:5), Var($const114.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:41,050 on stmt: out0[$116build_slice.20.1] = $const108.15.1
2023-08-13 11:42:41,050 on stmt: $122load_global.21.1 = global(range: <class 'range'>)
2023-08-13 11:42:41,050 on stmt: $134load_global.23.1 = global(min: <built-in function min>)
2023-08-13 11:42:41,050 on stmt: $const146.25.1 = const(int, 0)
2023-08-13 11:42:41,050 on stmt: $const148.26.1 = const(int, -1)
2023-08-13 11:42:41,051 on stmt: $154call.27.1 = call $134load_global.23.1($const146.25.1, $const148.26.1, func=$134load_global.23.1, args=[Var($const146.25.1, <string>:6), Var($const148.26.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:41,051 on stmt: $164unary_negative.28.1 = unary(fn=<built-in function neg>, value=$154call.27.1)
2023-08-13 11:42:41,051 on stmt: $const168.30.1 = const(int, 0)
2023-08-13 11:42:41,051 on stmt: $170binary_subscr.31.1 = getitem(value=full_shape0, index=$const168.30.1, fn=<built-in function getitem>)
2023-08-13 11:42:41,051 on stmt: $180load_global.32.1 = global(max: <built-in function max>)
2023-08-13 11:42:41,051 on stmt: $const192.34.1 = const(int, 0)
2023-08-13 11:42:41,051 on stmt: $const194.35.1 = const(int, 1)
2023-08-13 11:42:41,051 on stmt: $200call.36.1 = call $180load_global.32.1($const192.34.1, $const194.35.1, func=$180load_global.32.1, args=[Var($const192.34.1, <string>:6), Var($const194.35.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:41,051 on stmt: $binop_sub210.37.1 = $170binary_subscr.31.1 - $200call.36.1
2023-08-13 11:42:41,051 on stmt: $218call.38.1 = call $122load_global.21.1($164unary_negative.28.1, $binop_sub210.37.1, func=$122load_global.21.1, args=[Var($164unary_negative.28.1, <string>:6), Var($binop_sub210.37.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:41,052 on stmt: $228get_iter.39.1 = getiter(value=$218call.38.1)
2023-08-13 11:42:41,052 on stmt: $phi230.0.1 = $228get_iter.39.1
2023-08-13 11:42:41,052 on stmt: jump 230
2023-08-13 11:42:41,052 ==== SSA block analysis pass on 230
2023-08-13 11:42:41,052 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F69664C2D0>
2023-08-13 11:42:41,052 on stmt: $230for_iter.1.1 = iternext(value=$phi230.0.1)
2023-08-13 11:42:41,052 on stmt: $230for_iter.2.1 = pair_first(value=$230for_iter.1.1)
2023-08-13 11:42:41,052 on stmt: $230for_iter.3.1 = pair_second(value=$230for_iter.1.1)
2023-08-13 11:42:41,052 on stmt: $phi232.1.1 = $230for_iter.2.1
2023-08-13 11:42:41,052 on stmt: branch $230for_iter.3.1, 232, 242
2023-08-13 11:42:41,052 ==== SSA block analysis pass on 232
2023-08-13 11:42:41,052 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F69664C2D0>
2023-08-13 11:42:41,052 on stmt: index00 = $phi232.1.1
2023-08-13 11:42:41,052 on stmt: jump 240
2023-08-13 11:42:41,052 ==== SSA block analysis pass on 242
2023-08-13 11:42:41,052 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F69664C2D0>
2023-08-13 11:42:41,052 on stmt: $242return_value.1.1 = cast(value=out0)
2023-08-13 11:42:41,052 on stmt: return $242return_value.1.1
2023-08-13 11:42:41,052 ==== SSA block analysis pass on 240
2023-08-13 11:42:41,052 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F69664C2D0>
2023-08-13 11:42:41,052 on stmt: $const6.1 = const(int, 0)
2023-08-13 11:42:41,052 on stmt: stencil_index = $const6.1 + index00
2023-08-13 11:42:41,053 on stmt: $8binary_subscr.2 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:41,053 on stmt: $const20.4 = const(int, -1)
2023-08-13 11:42:41,053 on stmt: stencil_index.1 = $const20.4 + index00
2023-08-13 11:42:41,053 on stmt: $22binary_subscr.5 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2023-08-13 11:42:41,053 on stmt: $32compare_op.6 = $8binary_subscr.2 > $22binary_subscr.5
2023-08-13 11:42:41,053 on stmt: $const40.8 = const(int, 0)
2023-08-13 11:42:41,053 on stmt: stencil_index.2 = $const40.8 + index00
2023-08-13 11:42:41,053 on stmt: $42binary_subscr.9 = getitem(value=x, index=stencil_index.2, fn=<built-in function getitem>)
2023-08-13 11:42:41,053 on stmt: $const54.11 = const(int, 1)
2023-08-13 11:42:41,053 on stmt: stencil_index.3 = $const54.11 + index00
2023-08-13 11:42:41,053 on stmt: $56binary_subscr.12 = getitem(value=x, index=stencil_index.3, fn=<built-in function getitem>)
2023-08-13 11:42:41,053 on stmt: $66compare_op.13 = $42binary_subscr.9 >= $56binary_subscr.12
2023-08-13 11:42:41,053 on stmt: $binop_and_72.14 = $32compare_op.6 & $66compare_op.13
2023-08-13 11:42:41,053 on stmt: $76return_value.15 = cast(value=$binop_and_72.14)
2023-08-13 11:42:41,053 on stmt: out0[index00] = $76return_value.15
2023-08-13 11:42:41,053 on stmt: jump 241
2023-08-13 11:42:41,053 ==== SSA block analysis pass on 241
2023-08-13 11:42:41,053 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F69664C2D0>
2023-08-13 11:42:41,053 on stmt: jump 230
2023-08-13 11:42:41,054 defs defaultdict(<class 'list'>,
            {'$102build_slice.13.1': [<numba.core.ir.Assign object at 0x000001F6967E6A10>],
             '$102build_slice.14.1': [<numba.core.ir.Assign object at 0x000001F6967E4810>],
             '$116build_slice.19.1': [<numba.core.ir.Assign object at 0x000001F6967E7D10>],
             '$116build_slice.20.1': [<numba.core.ir.Assign object at 0x000001F6967E6D90>],
             '$122load_global.21.1': [<numba.core.ir.Assign object at 0x000001F6967E6D50>],
             '$134load_global.23.1': [<numba.core.ir.Assign object at 0x000001F6967E4F10>],
             '$154call.27.1': [<numba.core.ir.Assign object at 0x000001F6967E4B90>],
             '$164unary_negative.28.1': [<numba.core.ir.Assign object at 0x000001F6967E4DD0>],
             '$170binary_subscr.31.1': [<numba.core.ir.Assign object at 0x000001F6967E5190>],
             '$180load_global.32.1': [<numba.core.ir.Assign object at 0x000001F6967E5E50>],
             '$18load_global.2.1': [<numba.core.ir.Assign object at 0x000001F69662C910>],
             '$200call.36.1': [<numba.core.ir.Assign object at 0x000001F6967E7550>],
             '$218call.38.1': [<numba.core.ir.Assign object at 0x000001F6967E5B10>],
             '$228get_iter.39.1': [<numba.core.ir.Assign object at 0x000001F6967E7990>],
             '$22binary_subscr.5': [<numba.core.ir.Assign object at 0x000001F696D3F0D0>],
             '$230for_iter.1.1': [<numba.core.ir.Assign object at 0x000001F6967E75D0>],
             '$230for_iter.2.1': [<numba.core.ir.Assign object at 0x000001F6967E7510>],
             '$230for_iter.3.1': [<numba.core.ir.Assign object at 0x000001F6967E7BD0>],
             '$242return_value.1.1': [<numba.core.ir.Assign object at 0x000001F696796890>],
             '$30load_method.4.1': [<numba.core.ir.Assign object at 0x000001F69662E5D0>],
             '$32compare_op.6': [<numba.core.ir.Assign object at 0x000001F6967A55D0>],
             '$42binary_subscr.9': [<numba.core.ir.Assign object at 0x000001F696D3EBD0>],
             '$54load_global.6.1': [<numba.core.ir.Assign object at 0x000001F6967D7E10>],
             '$56binary_subscr.12': [<numba.core.ir.Assign object at 0x000001F696D3E710>],
             '$66compare_op.13': [<numba.core.ir.Assign object at 0x000001F696AE4350>],
             '$66load_attr.7.1': [<numba.core.ir.Assign object at 0x000001F6967D45D0>],
             '$76return_value.15': [<numba.core.ir.Assign object at 0x000001F696AE0D50>],
             '$8binary_subscr.2': [<numba.core.ir.Assign object at 0x000001F696D3EED0>],
             '$binop_and_72.14': [<numba.core.ir.Assign object at 0x000001F696AE7E50>],
             '$binop_sub210.37.1': [<numba.core.ir.Assign object at 0x000001F6967E6410>],
             '$const100.12.1': [<numba.core.ir.Assign object at 0x000001F6967E5950>],
             '$const108.15.1': [<numba.core.ir.Assign object at 0x000001F6967E5DD0>],
             '$const112.17.1': [<numba.core.ir.Assign object at 0x000001F6967E7110>],
             '$const114.18.1': [<numba.core.ir.Assign object at 0x000001F6967E7290>],
             '$const146.25.1': [<numba.core.ir.Assign object at 0x000001F6967E4610>],
             '$const148.26.1': [<numba.core.ir.Assign object at 0x000001F6967E4890>],
             '$const168.30.1': [<numba.core.ir.Assign object at 0x000001F6967E55D0>],
             '$const192.34.1': [<numba.core.ir.Assign object at 0x000001F6967E6150>],
             '$const194.35.1': [<numba.core.ir.Assign object at 0x000001F6967E6590>],
             '$const20.4': [<numba.core.ir.Assign object at 0x000001F696611050>],
             '$const40.8': [<numba.core.ir.Assign object at 0x000001F696B2A750>],
             '$const54.11': [<numba.core.ir.Assign object at 0x000001F6967EDD90>],
             '$const6.1': [<numba.core.ir.Assign object at 0x000001F69677C650>],
             '$const94.9.1': [<numba.core.ir.Assign object at 0x000001F6967CFF90>],
             '$const98.11.1': [<numba.core.ir.Assign object at 0x000001F6967E51D0>],
             '$phi230.0.1': [<numba.core.ir.Assign object at 0x000001F69662E390>],
             '$phi232.1.1': [<numba.core.ir.Assign object at 0x000001F6967E4390>],
             'full_shape0': [<numba.core.ir.Assign object at 0x000001F696A97610>],
             'index00': [<numba.core.ir.Assign object at 0x000001F6967E4050>],
             'out0': [<numba.core.ir.Assign object at 0x000001F6967C6450>],
             'stencil_index': [<numba.core.ir.Assign object at 0x000001F696D3EF10>],
             'stencil_index.1': [<numba.core.ir.Assign object at 0x000001F696D3F050>],
             'stencil_index.2': [<numba.core.ir.Assign object at 0x000001F696D3EA90>],
             'stencil_index.3': [<numba.core.ir.Assign object at 0x000001F696D3E7D0>],
             'x': [<numba.core.ir.Assign object at 0x000001F69677FF50>]})
2023-08-13 11:42:41,054 SSA violators set()
2023-08-13 11:42:41,443 bytecode dump:
>          0	NOP(arg=None, lineno=1063)
           2	RESUME(arg=0, lineno=1063)
           4	LOAD_GLOBAL(arg=1, lineno=1077)
          16	LOAD_FAST(arg=0, lineno=1077)
          18	PRECALL(arg=1, lineno=1077)
          22	CALL(arg=1, lineno=1077)
          32	LOAD_FAST(arg=1, lineno=1077)
          34	LOAD_CONST(arg=1, lineno=1077)
          36	LOAD_CONST(arg=1, lineno=1077)
          38	BUILD_SLICE(arg=2, lineno=1077)
          40	STORE_SUBSCR(arg=None, lineno=1077)
          44	LOAD_CONST(arg=1, lineno=1077)
          46	RETURN_VALUE(arg=None, lineno=1077)
2023-08-13 11:42:41,443 pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-13 11:42:41,443 stack: []
2023-08-13 11:42:41,443 state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-13 11:42:41,443 dispatch pc=0, inst=NOP(arg=None, lineno=1063)
2023-08-13 11:42:41,443 stack []
2023-08-13 11:42:41,443 dispatch pc=2, inst=RESUME(arg=0, lineno=1063)
2023-08-13 11:42:41,443 stack []
2023-08-13 11:42:41,444 dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=1077)
2023-08-13 11:42:41,444 stack []
2023-08-13 11:42:41,444 dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1077)
2023-08-13 11:42:41,444 stack ['$null$4.1', '$4load_global.0']
2023-08-13 11:42:41,444 dispatch pc=18, inst=PRECALL(arg=1, lineno=1077)
2023-08-13 11:42:41,444 stack ['$null$4.1', '$4load_global.0', '$x16.2']
2023-08-13 11:42:41,444 dispatch pc=22, inst=CALL(arg=1, lineno=1077)
2023-08-13 11:42:41,444 stack ['$null$4.1', '$4load_global.0', '$x16.2']
2023-08-13 11:42:41,444 dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=1077)
2023-08-13 11:42:41,444 stack ['$22call.3']
2023-08-13 11:42:41,444 dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=1077)
2023-08-13 11:42:41,444 stack ['$22call.3', '$y32.4']
2023-08-13 11:42:41,444 dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=1077)
2023-08-13 11:42:41,444 stack ['$22call.3', '$y32.4', '$const34.5']
2023-08-13 11:42:41,444 dispatch pc=38, inst=BUILD_SLICE(arg=2, lineno=1077)
2023-08-13 11:42:41,444 stack ['$22call.3', '$y32.4', '$const34.5', '$const36.6']
2023-08-13 11:42:41,444 dispatch pc=40, inst=STORE_SUBSCR(arg=None, lineno=1077)
2023-08-13 11:42:41,444 stack ['$22call.3', '$y32.4', '$38build_slice.8']
2023-08-13 11:42:41,444 dispatch pc=44, inst=LOAD_CONST(arg=1, lineno=1077)
2023-08-13 11:42:41,444 stack []
2023-08-13 11:42:41,445 dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=1077)
2023-08-13 11:42:41,445 stack ['$const44.9']
2023-08-13 11:42:41,445 end state. edges=[]
2023-08-13 11:42:41,445 -------------------------Prune PHIs-------------------------
2023-08-13 11:42:41,445 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-08-13 11:42:41,445 defmap: {}
2023-08-13 11:42:41,445 phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:41,445 changing phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:41,445 keep phismap: {}
2023-08-13 11:42:41,445 new_out: defaultdict(<class 'dict'>, {})
2023-08-13 11:42:41,445 ----------------------DONE Prune PHIs-----------------------
2023-08-13 11:42:41,445 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'res': '$x16.2'}), (18, {}), (20, {}), (22, {'func': '$4load_global.0', 'args': ['$x16.2'], 'kw_names': None, 'res': '$22call.3'}), (24, {}), (26, {}), (28, {}), (30, {}), (32, {'res': '$y32.4'}), (34, {'res': '$const34.5'}), (36, {'res': '$const36.6'}), (38, {'start': '$const34.5', 'stop': '$const36.6', 'step': None, 'res': '$38build_slice.8', 'slicevar': '$38build_slice.7'}), (40, {'target': '$y32.4', 'index': '$38build_slice.8', 'value': '$22call.3'}), (42, {}), (44, {'res': '$const44.9'}), (46, {'retval': '$const44.9', 'castval': '$46return_value.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:41,446 label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $4load_global.0 = global(_localmax_sten: <numba.stencils.stencil.StencilFunc object at 0x000001F696E760D0>) ['$4load_global.0']
    $22call.3 = call $4load_global.0(x, func=$4load_global.0, args=[Var(x, utils.py:1063)], kws=(), vararg=None, varkwarg=None, target=None) ['$22call.3', '$4load_global.0', 'x']
    $const34.5 = const(NoneType, None)       ['$const34.5']
    $const36.6 = const(NoneType, None)       ['$const36.6']
    $38build_slice.7 = global(slice: <class 'slice'>) ['$38build_slice.7']
    $38build_slice.8 = call $38build_slice.7($const34.5, $const36.6, func=$38build_slice.7, args=(Var($const34.5, utils.py:1077), Var($const36.6, utils.py:1077)), kws=(), vararg=None, varkwarg=None, target=None) ['$38build_slice.7', '$38build_slice.8', '$const34.5', '$const36.6']
    y[$38build_slice.8] = $22call.3          ['$22call.3', '$38build_slice.8', 'y']
    $const44.9 = const(NoneType, None)       ['$const44.9']
    $46return_value.10 = cast(value=$const44.9) ['$46return_value.10', '$const44.9']
    return $46return_value.10                ['$46return_value.10']

2023-08-13 11:42:41,454 ==== SSA block analysis pass on 0
2023-08-13 11:42:41,454 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696323410>
2023-08-13 11:42:41,454 on stmt: x = arg(0, name=x)
2023-08-13 11:42:41,454 on stmt: y = arg(1, name=y)
2023-08-13 11:42:41,454 on stmt: $4load_global.0 = global(_localmax_sten: <numba.stencils.stencil.StencilFunc object at 0x000001F696E760D0>)
2023-08-13 11:42:41,454 on stmt: $22call.3 = call $4load_global.0(x, func=$4load_global.0, args=[Var(x, utils.py:1063)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:41,454 on stmt: $const34.5 = const(NoneType, None)
2023-08-13 11:42:41,454 on stmt: $const36.6 = const(NoneType, None)
2023-08-13 11:42:41,454 on stmt: $38build_slice.7 = global(slice: <class 'slice'>)
2023-08-13 11:42:41,454 on stmt: $38build_slice.8 = call $38build_slice.7($const34.5, $const36.6, func=$38build_slice.7, args=(Var($const34.5, utils.py:1077), Var($const36.6, utils.py:1077)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:41,454 on stmt: y[slice(None, None, None)] = $22call.3
2023-08-13 11:42:41,454 on stmt: $const44.9 = const(NoneType, None)
2023-08-13 11:42:41,454 on stmt: $46return_value.10 = cast(value=$const44.9)
2023-08-13 11:42:41,455 on stmt: return $46return_value.10
2023-08-13 11:42:41,455 defs defaultdict(<class 'list'>,
            {'$22call.3': [<numba.core.ir.Assign object at 0x000001F6963203D0>],
             '$38build_slice.7': [<numba.core.ir.Assign object at 0x000001F696320D50>],
             '$38build_slice.8': [<numba.core.ir.Assign object at 0x000001F696321490>],
             '$46return_value.10': [<numba.core.ir.Assign object at 0x000001F696321C50>],
             '$4load_global.0': [<numba.core.ir.Assign object at 0x000001F696322A90>],
             '$const34.5': [<numba.core.ir.Assign object at 0x000001F696320A50>],
             '$const36.6': [<numba.core.ir.Assign object at 0x000001F696320B50>],
             '$const44.9': [<numba.core.ir.Assign object at 0x000001F696321B90>],
             'x': [<numba.core.ir.Assign object at 0x000001F696323E50>],
             'y': [<numba.core.ir.Assign object at 0x000001F696322B50>]})
2023-08-13 11:42:41,455 SSA violators set()
2023-08-13 11:42:41,481 bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	RESUME(arg=0, lineno=1)
           4	LOAD_FAST(arg=0, lineno=2)
           6	LOAD_ATTR(arg=0, lineno=2)
          16	STORE_FAST(arg=1, lineno=2)
          18	LOAD_GLOBAL(arg=2, lineno=3)
          30	LOAD_METHOD(arg=2, lineno=3)
          52	LOAD_FAST(arg=1, lineno=3)
          54	LOAD_GLOBAL(arg=2, lineno=3)
          66	LOAD_ATTR(arg=3, lineno=3)
          76	KW_NAMES(arg=1, lineno=3)
          78	PRECALL(arg=2, lineno=3)
          82	CALL(arg=2, lineno=3)
          92	STORE_FAST(arg=2, lineno=3)
          94	LOAD_CONST(arg=2, lineno=4)
          96	LOAD_FAST(arg=2, lineno=4)
          98	LOAD_CONST(arg=0, lineno=4)
         100	LOAD_CONST(arg=3, lineno=4)
         102	BUILD_SLICE(arg=2, lineno=4)
         104	STORE_SUBSCR(arg=None, lineno=4)
         108	LOAD_CONST(arg=2, lineno=5)
         110	LOAD_FAST(arg=2, lineno=5)
         112	LOAD_CONST(arg=4, lineno=5)
         114	LOAD_CONST(arg=0, lineno=5)
         116	BUILD_SLICE(arg=2, lineno=5)
         118	STORE_SUBSCR(arg=None, lineno=5)
         122	LOAD_GLOBAL(arg=9, lineno=6)
         134	LOAD_GLOBAL(arg=11, lineno=6)
         146	LOAD_CONST(arg=2, lineno=6)
         148	LOAD_CONST(arg=4, lineno=6)
         150	PRECALL(arg=2, lineno=6)
         154	CALL(arg=2, lineno=6)
         164	UNARY_NEGATIVE(arg=None, lineno=6)
         166	LOAD_FAST(arg=1, lineno=6)
         168	LOAD_CONST(arg=2, lineno=6)
         170	BINARY_SUBSCR(arg=None, lineno=6)
         180	LOAD_GLOBAL(arg=13, lineno=6)
         192	LOAD_CONST(arg=2, lineno=6)
         194	LOAD_CONST(arg=3, lineno=6)
         196	PRECALL(arg=2, lineno=6)
         200	CALL(arg=2, lineno=6)
         210	BINARY_OP(arg=10, lineno=6)
         214	PRECALL(arg=2, lineno=6)
         218	CALL(arg=2, lineno=6)
         228	GET_ITER(arg=None, lineno=6)
>        230	FOR_ITER(arg=4, lineno=6)
         232	STORE_FAST(arg=3, lineno=6)
         234	LOAD_CONST(arg=2, lineno=7)
         236	STORE_FAST(arg=4, lineno=7)
         238	JUMP_BACKWARD(arg=5, lineno=7)
>        240	LOAD_FAST(arg=2, lineno=8)
         242	RETURN_VALUE(arg=None, lineno=8)
2023-08-13 11:42:41,481 pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-13 11:42:41,481 stack: []
2023-08-13 11:42:41,481 state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-13 11:42:41,481 dispatch pc=0, inst=NOP(arg=None, lineno=1)
2023-08-13 11:42:41,481 stack []
2023-08-13 11:42:41,481 dispatch pc=2, inst=RESUME(arg=0, lineno=1)
2023-08-13 11:42:41,481 stack []
2023-08-13 11:42:41,481 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2)
2023-08-13 11:42:41,481 stack []
2023-08-13 11:42:41,481 dispatch pc=6, inst=LOAD_ATTR(arg=0, lineno=2)
2023-08-13 11:42:41,481 stack ['$x4.0']
2023-08-13 11:42:41,481 dispatch pc=16, inst=STORE_FAST(arg=1, lineno=2)
2023-08-13 11:42:41,481 stack ['$6load_attr.1']
2023-08-13 11:42:41,482 dispatch pc=18, inst=LOAD_GLOBAL(arg=2, lineno=3)
2023-08-13 11:42:41,482 stack []
2023-08-13 11:42:41,482 dispatch pc=30, inst=LOAD_METHOD(arg=2, lineno=3)
2023-08-13 11:42:41,482 stack ['$18load_global.2']
2023-08-13 11:42:41,482 dispatch pc=52, inst=LOAD_FAST(arg=1, lineno=3)
2023-08-13 11:42:41,482 stack ['$null$30.3', '$30load_method.4']
2023-08-13 11:42:41,482 dispatch pc=54, inst=LOAD_GLOBAL(arg=2, lineno=3)
2023-08-13 11:42:41,482 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5']
2023-08-13 11:42:41,482 dispatch pc=66, inst=LOAD_ATTR(arg=3, lineno=3)
2023-08-13 11:42:41,482 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$54load_global.6']
2023-08-13 11:42:41,482 dispatch pc=76, inst=KW_NAMES(arg=1, lineno=3)
2023-08-13 11:42:41,482 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$66load_attr.7']
2023-08-13 11:42:41,482 dispatch pc=78, inst=PRECALL(arg=2, lineno=3)
2023-08-13 11:42:41,482 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$66load_attr.7']
2023-08-13 11:42:41,482 dispatch pc=82, inst=CALL(arg=2, lineno=3)
2023-08-13 11:42:41,482 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$66load_attr.7']
2023-08-13 11:42:41,482 dispatch pc=92, inst=STORE_FAST(arg=2, lineno=3)
2023-08-13 11:42:41,483 stack ['$82call.8']
2023-08-13 11:42:41,483 dispatch pc=94, inst=LOAD_CONST(arg=2, lineno=4)
2023-08-13 11:42:41,483 stack []
2023-08-13 11:42:41,483 dispatch pc=96, inst=LOAD_FAST(arg=2, lineno=4)
2023-08-13 11:42:41,483 stack ['$const94.9']
2023-08-13 11:42:41,483 dispatch pc=98, inst=LOAD_CONST(arg=0, lineno=4)
2023-08-13 11:42:41,483 stack ['$const94.9', '$out096.10']
2023-08-13 11:42:41,483 dispatch pc=100, inst=LOAD_CONST(arg=3, lineno=4)
2023-08-13 11:42:41,483 stack ['$const94.9', '$out096.10', '$const98.11']
2023-08-13 11:42:41,483 dispatch pc=102, inst=BUILD_SLICE(arg=2, lineno=4)
2023-08-13 11:42:41,483 stack ['$const94.9', '$out096.10', '$const98.11', '$const100.12']
2023-08-13 11:42:41,483 dispatch pc=104, inst=STORE_SUBSCR(arg=None, lineno=4)
2023-08-13 11:42:41,483 stack ['$const94.9', '$out096.10', '$102build_slice.14']
2023-08-13 11:42:41,483 dispatch pc=108, inst=LOAD_CONST(arg=2, lineno=5)
2023-08-13 11:42:41,483 stack []
2023-08-13 11:42:41,483 dispatch pc=110, inst=LOAD_FAST(arg=2, lineno=5)
2023-08-13 11:42:41,483 stack ['$const108.15']
2023-08-13 11:42:41,483 dispatch pc=112, inst=LOAD_CONST(arg=4, lineno=5)
2023-08-13 11:42:41,483 stack ['$const108.15', '$out0110.16']
2023-08-13 11:42:41,484 dispatch pc=114, inst=LOAD_CONST(arg=0, lineno=5)
2023-08-13 11:42:41,484 stack ['$const108.15', '$out0110.16', '$const112.17']
2023-08-13 11:42:41,484 dispatch pc=116, inst=BUILD_SLICE(arg=2, lineno=5)
2023-08-13 11:42:41,484 stack ['$const108.15', '$out0110.16', '$const112.17', '$const114.18']
2023-08-13 11:42:41,484 dispatch pc=118, inst=STORE_SUBSCR(arg=None, lineno=5)
2023-08-13 11:42:41,484 stack ['$const108.15', '$out0110.16', '$116build_slice.20']
2023-08-13 11:42:41,484 dispatch pc=122, inst=LOAD_GLOBAL(arg=9, lineno=6)
2023-08-13 11:42:41,484 stack []
2023-08-13 11:42:41,484 dispatch pc=134, inst=LOAD_GLOBAL(arg=11, lineno=6)
2023-08-13 11:42:41,484 stack ['$null$122.22', '$122load_global.21']
2023-08-13 11:42:41,485 dispatch pc=146, inst=LOAD_CONST(arg=2, lineno=6)
2023-08-13 11:42:41,485 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23']
2023-08-13 11:42:41,485 dispatch pc=148, inst=LOAD_CONST(arg=4, lineno=6)
2023-08-13 11:42:41,485 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23', '$const146.25']
2023-08-13 11:42:41,485 dispatch pc=150, inst=PRECALL(arg=2, lineno=6)
2023-08-13 11:42:41,485 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23', '$const146.25', '$const148.26']
2023-08-13 11:42:41,485 dispatch pc=154, inst=CALL(arg=2, lineno=6)
2023-08-13 11:42:41,485 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23', '$const146.25', '$const148.26']
2023-08-13 11:42:41,485 dispatch pc=164, inst=UNARY_NEGATIVE(arg=None, lineno=6)
2023-08-13 11:42:41,485 stack ['$null$122.22', '$122load_global.21', '$154call.27']
2023-08-13 11:42:41,485 dispatch pc=166, inst=LOAD_FAST(arg=1, lineno=6)
2023-08-13 11:42:41,485 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28']
2023-08-13 11:42:41,485 dispatch pc=168, inst=LOAD_CONST(arg=2, lineno=6)
2023-08-13 11:42:41,485 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$full_shape0166.29']
2023-08-13 11:42:41,486 dispatch pc=170, inst=BINARY_SUBSCR(arg=None, lineno=6)
2023-08-13 11:42:41,486 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$full_shape0166.29', '$const168.30']
2023-08-13 11:42:41,486 dispatch pc=180, inst=LOAD_GLOBAL(arg=13, lineno=6)
2023-08-13 11:42:41,486 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31']
2023-08-13 11:42:41,486 dispatch pc=192, inst=LOAD_CONST(arg=2, lineno=6)
2023-08-13 11:42:41,486 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32']
2023-08-13 11:42:41,486 dispatch pc=194, inst=LOAD_CONST(arg=3, lineno=6)
2023-08-13 11:42:41,486 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32', '$const192.34']
2023-08-13 11:42:41,486 dispatch pc=196, inst=PRECALL(arg=2, lineno=6)
2023-08-13 11:42:41,486 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32', '$const192.34', '$const194.35']
2023-08-13 11:42:41,486 dispatch pc=200, inst=CALL(arg=2, lineno=6)
2023-08-13 11:42:41,486 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32', '$const192.34', '$const194.35']
2023-08-13 11:42:41,486 dispatch pc=210, inst=BINARY_OP(arg=10, lineno=6)
2023-08-13 11:42:41,486 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$200call.36']
2023-08-13 11:42:41,486 dispatch pc=214, inst=PRECALL(arg=2, lineno=6)
2023-08-13 11:42:41,486 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$binop_sub210.37']
2023-08-13 11:42:41,486 dispatch pc=218, inst=CALL(arg=2, lineno=6)
2023-08-13 11:42:41,486 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$binop_sub210.37']
2023-08-13 11:42:41,487 dispatch pc=228, inst=GET_ITER(arg=None, lineno=6)
2023-08-13 11:42:41,487 stack ['$218call.38']
2023-08-13 11:42:41,487 end state. edges=[Edge(pc=230, stack=('$228get_iter.39',), blockstack=(), npush=0)]
2023-08-13 11:42:41,487 pending: deque([State(pc_initial=230 nstack_initial=1)])
2023-08-13 11:42:41,487 stack: ['$phi230.0']
2023-08-13 11:42:41,487 state.pc_initial: State(pc_initial=230 nstack_initial=1)
2023-08-13 11:42:41,487 dispatch pc=230, inst=FOR_ITER(arg=4, lineno=6)
2023-08-13 11:42:41,487 stack ['$phi230.0']
2023-08-13 11:42:41,487 end state. edges=[Edge(pc=240, stack=(), blockstack=(), npush=0), Edge(pc=232, stack=('$phi230.0', '$230for_iter.2'), blockstack=(), npush=0)]
2023-08-13 11:42:41,487 pending: deque([State(pc_initial=240 nstack_initial=0), State(pc_initial=232 nstack_initial=2)])
2023-08-13 11:42:41,487 stack: []
2023-08-13 11:42:41,487 state.pc_initial: State(pc_initial=240 nstack_initial=0)
2023-08-13 11:42:41,487 dispatch pc=240, inst=LOAD_FAST(arg=2, lineno=8)
2023-08-13 11:42:41,487 stack []
2023-08-13 11:42:41,487 dispatch pc=242, inst=RETURN_VALUE(arg=None, lineno=8)
2023-08-13 11:42:41,487 stack ['$out0240.0']
2023-08-13 11:42:41,487 end state. edges=[]
2023-08-13 11:42:41,487 pending: deque([State(pc_initial=232 nstack_initial=2)])
2023-08-13 11:42:41,487 stack: ['$phi232.0', '$phi232.1']
2023-08-13 11:42:41,488 state.pc_initial: State(pc_initial=232 nstack_initial=2)
2023-08-13 11:42:41,488 dispatch pc=232, inst=STORE_FAST(arg=3, lineno=6)
2023-08-13 11:42:41,488 stack ['$phi232.0', '$phi232.1']
2023-08-13 11:42:41,488 dispatch pc=234, inst=LOAD_CONST(arg=2, lineno=7)
2023-08-13 11:42:41,488 stack ['$phi232.0']
2023-08-13 11:42:41,488 dispatch pc=236, inst=STORE_FAST(arg=4, lineno=7)
2023-08-13 11:42:41,488 stack ['$phi232.0', '$const234.2']
2023-08-13 11:42:41,488 dispatch pc=238, inst=JUMP_BACKWARD(arg=5, lineno=7)
2023-08-13 11:42:41,488 stack ['$phi232.0']
2023-08-13 11:42:41,488 end state. edges=[Edge(pc=230, stack=('$phi232.0',), blockstack=(), npush=0)]
2023-08-13 11:42:41,488 pending: deque([State(pc_initial=230 nstack_initial=1)])
2023-08-13 11:42:41,488 -------------------------Prune PHIs-------------------------
2023-08-13 11:42:41,488 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=230 nstack_initial=1): {'$phi230.0'},
             State(pc_initial=232 nstack_initial=2): {'$phi232.1'},
             State(pc_initial=240 nstack_initial=0): set()})
2023-08-13 11:42:41,488 defmap: {'$phi230.0': State(pc_initial=0 nstack_initial=0),
 '$phi232.1': State(pc_initial=230 nstack_initial=1)}
2023-08-13 11:42:41,488 phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi232.0',
                            State(pc_initial=232 nstack_initial=2))},
             '$phi232.0': {('$phi230.0',
                            State(pc_initial=230 nstack_initial=1))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:41,489 changing phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi230.0',
                            State(pc_initial=230 nstack_initial=1))},
             '$phi232.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:41,489 changing phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:41,489 changing phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:41,489 keep phismap: {'$phi230.0': {('$228get_iter.39', State(pc_initial=0 nstack_initial=0))},
 '$phi232.1': {('$230for_iter.2', State(pc_initial=230 nstack_initial=1))}}
2023-08-13 11:42:41,489 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi230.0': '$228get_iter.39'},
             State(pc_initial=230 nstack_initial=1): {'$phi232.1': '$230for_iter.2'}})
2023-08-13 11:42:41,490 ----------------------DONE Prune PHIs-----------------------
2023-08-13 11:42:41,490 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$x4.0'}), (6, {'item': '$x4.0', 'res': '$6load_attr.1'}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'value': '$6load_attr.1'}), (18, {'idx': 1, 'res': '$18load_global.2'}), (20, {}), (22, {}), (24, {}), (26, {}), (28, {}), (30, {'item': '$18load_global.2', 'res': '$30load_method.4'}), (32, {}), (34, {}), (36, {}), (38, {}), (40, {}), (42, {}), (44, {}), (46, {}), (48, {}), (50, {}), (52, {'res': '$full_shape052.5'}), (54, {'idx': 1, 'res': '$54load_global.6'}), (56, {}), (58, {}), (60, {}), (62, {}), (64, {}), (66, {'item': '$54load_global.6', 'res': '$66load_attr.7'}), (68, {}), (70, {}), (72, {}), (74, {}), (78, {}), (80, {}), (82, {'func': '$30load_method.4', 'args': ['$full_shape052.5', '$66load_attr.7'], 'kw_names': 1, 'res': '$82call.8'}), (84, {}), (86, {}), (88, {}), (90, {}), (92, {'value': '$82call.8'}), (94, {'res': '$const94.9'}), (96, {'res': '$out096.10'}), (98, {'res': '$const98.11'}), (100, {'res': '$const100.12'}), (102, {'start': '$const98.11', 'stop': '$const100.12', 'step': None, 'res': '$102build_slice.14', 'slicevar': '$102build_slice.13'}), (104, {'target': '$out096.10', 'index': '$102build_slice.14', 'value': '$const94.9'}), (106, {}), (108, {'res': '$const108.15'}), (110, {'res': '$out0110.16'}), (112, {'res': '$const112.17'}), (114, {'res': '$const114.18'}), (116, {'start': '$const112.17', 'stop': '$const114.18', 'step': None, 'res': '$116build_slice.20', 'slicevar': '$116build_slice.19'}), (118, {'target': '$out0110.16', 'index': '$116build_slice.20', 'value': '$const108.15'}), (120, {}), (122, {'idx': 4, 'res': '$122load_global.21'}), (124, {}), (126, {}), (128, {}), (130, {}), (132, {}), (134, {'idx': 5, 'res': '$134load_global.23'}), (136, {}), (138, {}), (140, {}), (142, {}), (144, {}), (146, {'res': '$const146.25'}), (148, {'res': '$const148.26'}), (150, {}), (152, {}), (154, {'func': '$134load_global.23', 'args': ['$const146.25', '$const148.26'], 'kw_names': None, 'res': '$154call.27'}), (156, {}), (158, {}), (160, {}), (162, {}), (164, {'value': '$154call.27', 'res': '$164unary_negative.28'}), (166, {'res': '$full_shape0166.29'}), (168, {'res': '$const168.30'}), (170, {'index': '$const168.30', 'target': '$full_shape0166.29', 'res': '$170binary_subscr.31'}), (172, {}), (174, {}), (176, {}), (178, {}), (180, {'idx': 6, 'res': '$180load_global.32'}), (182, {}), (184, {}), (186, {}), (188, {}), (190, {}), (192, {'res': '$const192.34'}), (194, {'res': '$const194.35'}), (196, {}), (198, {}), (200, {'func': '$180load_global.32', 'args': ['$const192.34', '$const194.35'], 'kw_names': None, 'res': '$200call.36'}), (202, {}), (204, {}), (206, {}), (208, {}), (210, {'op': '-', 'lhs': '$170binary_subscr.31', 'rhs': '$200call.36', 'res': '$binop_sub210.37'}), (212, {}), (214, {}), (216, {}), (218, {'func': '$122load_global.21', 'args': ['$164unary_negative.28', '$binop_sub210.37'], 'kw_names': None, 'res': '$218call.38'}), (220, {}), (222, {}), (224, {}), (226, {}), (228, {'value': '$218call.38', 'res': '$228get_iter.39'})), outgoing_phis={'$phi230.0': '$228get_iter.39'}, blockstack=(), active_try_block=None, outgoing_edgepushed={230: ('$228get_iter.39',)})
2023-08-13 11:42:41,490 block_infos State(pc_initial=230 nstack_initial=1):
AdaptBlockInfo(insts=((230, {'iterator': '$phi230.0', 'pair': '$230for_iter.1', 'indval': '$230for_iter.2', 'pred': '$230for_iter.3'}),), outgoing_phis={'$phi232.1': '$230for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={240: (), 232: ('$phi230.0', '$230for_iter.2')})
2023-08-13 11:42:41,490 block_infos State(pc_initial=232 nstack_initial=2):
AdaptBlockInfo(insts=((232, {'value': '$phi232.1'}), (234, {'res': '$const234.2'}), (236, {'value': '$const234.2'}), (238, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={230: ('$phi232.0',)})
2023-08-13 11:42:41,490 block_infos State(pc_initial=240 nstack_initial=0):
AdaptBlockInfo(insts=((240, {'res': '$out0240.0'}), (242, {'retval': '$out0240.0', 'castval': '$242return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:41,491 label 0:
    x = arg(0, name=x)                       ['x']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $18load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>) ['$18load_global.2']
    $30load_method.4 = getattr(value=$18load_global.2, attr=empty) ['$18load_global.2', '$30load_method.4']
    $54load_global.6 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>) ['$54load_global.6']
    $66load_attr.7 = getattr(value=$54load_global.6, attr=bool_) ['$54load_global.6', '$66load_attr.7']
    out0 = call $30load_method.4(full_shape0, func=$30load_method.4, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($66load_attr.7, <string>:3))], vararg=None, varkwarg=None, target=None) ['$30load_method.4', '$66load_attr.7', 'full_shape0', 'out0']
    $const94.9 = const(int, 0)               ['$const94.9']
    $const98.11 = const(NoneType, None)      ['$const98.11']
    $const100.12 = const(int, 1)             ['$const100.12']
    $102build_slice.13 = global(slice: <class 'slice'>) ['$102build_slice.13']
    $102build_slice.14 = call $102build_slice.13($const98.11, $const100.12, func=$102build_slice.13, args=(Var($const98.11, <string>:4), Var($const100.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$102build_slice.13', '$102build_slice.14', '$const100.12', '$const98.11']
    out0[$102build_slice.14] = $const94.9    ['$102build_slice.14', '$const94.9', 'out0']
    $const108.15 = const(int, 0)             ['$const108.15']
    $const112.17 = const(int, -1)            ['$const112.17']
    $const114.18 = const(NoneType, None)     ['$const114.18']
    $116build_slice.19 = global(slice: <class 'slice'>) ['$116build_slice.19']
    $116build_slice.20 = call $116build_slice.19($const112.17, $const114.18, func=$116build_slice.19, args=(Var($const112.17, <string>:5), Var($const114.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$116build_slice.19', '$116build_slice.20', '$const112.17', '$const114.18']
    out0[$116build_slice.20] = $const108.15  ['$116build_slice.20', '$const108.15', 'out0']
    $122load_global.21 = global(range: <class 'range'>) ['$122load_global.21']
    $134load_global.23 = global(min: <built-in function min>) ['$134load_global.23']
    $const146.25 = const(int, 0)             ['$const146.25']
    $const148.26 = const(int, -1)            ['$const148.26']
    $154call.27 = call $134load_global.23($const146.25, $const148.26, func=$134load_global.23, args=[Var($const146.25, <string>:6), Var($const148.26, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$134load_global.23', '$154call.27', '$const146.25', '$const148.26']
    $164unary_negative.28 = unary(fn=<built-in function neg>, value=$154call.27) ['$154call.27', '$164unary_negative.28']
    $const168.30 = const(int, 0)             ['$const168.30']
    $170binary_subscr.31 = getitem(value=full_shape0, index=$const168.30, fn=<built-in function getitem>) ['$170binary_subscr.31', '$const168.30', 'full_shape0']
    $180load_global.32 = global(max: <built-in function max>) ['$180load_global.32']
    $const192.34 = const(int, 0)             ['$const192.34']
    $const194.35 = const(int, 1)             ['$const194.35']
    $200call.36 = call $180load_global.32($const192.34, $const194.35, func=$180load_global.32, args=[Var($const192.34, <string>:6), Var($const194.35, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$180load_global.32', '$200call.36', '$const192.34', '$const194.35']
    $binop_sub210.37 = $170binary_subscr.31 - $200call.36 ['$170binary_subscr.31', '$200call.36', '$binop_sub210.37']
    $218call.38 = call $122load_global.21($164unary_negative.28, $binop_sub210.37, func=$122load_global.21, args=[Var($164unary_negative.28, <string>:6), Var($binop_sub210.37, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$122load_global.21', '$164unary_negative.28', '$218call.38', '$binop_sub210.37']
    $228get_iter.39 = getiter(value=$218call.38) ['$218call.38', '$228get_iter.39']
    $phi230.0 = $228get_iter.39              ['$228get_iter.39', '$phi230.0']
    jump 230                                 []
label 230:
    $230for_iter.1 = iternext(value=$phi230.0) ['$230for_iter.1', '$phi230.0']
    $230for_iter.2 = pair_first(value=$230for_iter.1) ['$230for_iter.1', '$230for_iter.2']
    $230for_iter.3 = pair_second(value=$230for_iter.1) ['$230for_iter.1', '$230for_iter.3']
    $phi232.1 = $230for_iter.2               ['$230for_iter.2', '$phi232.1']
    branch $230for_iter.3, 232, 240          ['$230for_iter.3']
label 232:
    index00 = $phi232.1                      ['$phi232.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 230                                 []
label 240:
    $242return_value.1 = cast(value=out0)    ['$242return_value.1', 'out0']
    return $242return_value.1                ['$242return_value.1']

2023-08-13 11:42:41,511 ==== SSA block analysis pass on 0
2023-08-13 11:42:41,511 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696296550>
2023-08-13 11:42:41,511 on stmt: x = arg(0, name=x)
2023-08-13 11:42:41,511 on stmt: full_shape0 = getattr(value=x, attr=shape)
2023-08-13 11:42:41,511 on stmt: $18load_global.2.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:41,511 on stmt: $30load_method.4.1 = getattr(value=$18load_global.2.1, attr=empty)
2023-08-13 11:42:41,511 on stmt: $54load_global.6.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:41,511 on stmt: $66load_attr.7.1 = getattr(value=$54load_global.6.1, attr=bool_)
2023-08-13 11:42:41,511 on stmt: out0 = call $30load_method.4.1(full_shape0, func=$30load_method.4.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($66load_attr.7.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:41,511 on stmt: $const94.9.1 = const(int, 0)
2023-08-13 11:42:41,511 on stmt: $const98.11.1 = const(NoneType, None)
2023-08-13 11:42:41,511 on stmt: $const100.12.1 = const(int, 1)
2023-08-13 11:42:41,511 on stmt: $102build_slice.13.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:41,512 on stmt: $102build_slice.14.1 = call $102build_slice.13.1($const98.11.1, $const100.12.1, func=$102build_slice.13.1, args=(Var($const98.11.1, <string>:4), Var($const100.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:41,512 on stmt: out0[$102build_slice.14.1] = $const94.9.1
2023-08-13 11:42:41,512 on stmt: $const108.15.1 = const(int, 0)
2023-08-13 11:42:41,512 on stmt: $const112.17.1 = const(int, -1)
2023-08-13 11:42:41,512 on stmt: $const114.18.1 = const(NoneType, None)
2023-08-13 11:42:41,512 on stmt: $116build_slice.19.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:41,512 on stmt: $116build_slice.20.1 = call $116build_slice.19.1($const112.17.1, $const114.18.1, func=$116build_slice.19.1, args=(Var($const112.17.1, <string>:5), Var($const114.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:41,512 on stmt: out0[$116build_slice.20.1] = $const108.15.1
2023-08-13 11:42:41,512 on stmt: $122load_global.21.1 = global(range: <class 'range'>)
2023-08-13 11:42:41,512 on stmt: $134load_global.23.1 = global(min: <built-in function min>)
2023-08-13 11:42:41,512 on stmt: $const146.25.1 = const(int, 0)
2023-08-13 11:42:41,512 on stmt: $const148.26.1 = const(int, -1)
2023-08-13 11:42:41,512 on stmt: $154call.27.1 = call $134load_global.23.1($const146.25.1, $const148.26.1, func=$134load_global.23.1, args=[Var($const146.25.1, <string>:6), Var($const148.26.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:41,512 on stmt: $164unary_negative.28.1 = unary(fn=<built-in function neg>, value=$154call.27.1)
2023-08-13 11:42:41,513 on stmt: $const168.30.1 = const(int, 0)
2023-08-13 11:42:41,513 on stmt: $170binary_subscr.31.1 = getitem(value=full_shape0, index=$const168.30.1, fn=<built-in function getitem>)
2023-08-13 11:42:41,513 on stmt: $180load_global.32.1 = global(max: <built-in function max>)
2023-08-13 11:42:41,513 on stmt: $const192.34.1 = const(int, 0)
2023-08-13 11:42:41,513 on stmt: $const194.35.1 = const(int, 1)
2023-08-13 11:42:41,513 on stmt: $200call.36.1 = call $180load_global.32.1($const192.34.1, $const194.35.1, func=$180load_global.32.1, args=[Var($const192.34.1, <string>:6), Var($const194.35.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:41,513 on stmt: $binop_sub210.37.1 = $170binary_subscr.31.1 - $200call.36.1
2023-08-13 11:42:41,513 on stmt: $218call.38.1 = call $122load_global.21.1($164unary_negative.28.1, $binop_sub210.37.1, func=$122load_global.21.1, args=[Var($164unary_negative.28.1, <string>:6), Var($binop_sub210.37.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:41,513 on stmt: $228get_iter.39.1 = getiter(value=$218call.38.1)
2023-08-13 11:42:41,513 on stmt: $phi230.0.1 = $228get_iter.39.1
2023-08-13 11:42:41,513 on stmt: jump 230
2023-08-13 11:42:41,513 ==== SSA block analysis pass on 230
2023-08-13 11:42:41,513 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696296550>
2023-08-13 11:42:41,513 on stmt: $230for_iter.1.1 = iternext(value=$phi230.0.1)
2023-08-13 11:42:41,513 on stmt: $230for_iter.2.1 = pair_first(value=$230for_iter.1.1)
2023-08-13 11:42:41,513 on stmt: $230for_iter.3.1 = pair_second(value=$230for_iter.1.1)
2023-08-13 11:42:41,513 on stmt: $phi232.1.1 = $230for_iter.2.1
2023-08-13 11:42:41,514 on stmt: branch $230for_iter.3.1, 232, 242
2023-08-13 11:42:41,514 ==== SSA block analysis pass on 232
2023-08-13 11:42:41,514 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696296550>
2023-08-13 11:42:41,514 on stmt: index00 = $phi232.1.1
2023-08-13 11:42:41,514 on stmt: jump 240
2023-08-13 11:42:41,514 ==== SSA block analysis pass on 242
2023-08-13 11:42:41,514 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696296550>
2023-08-13 11:42:41,514 on stmt: $242return_value.1.1 = cast(value=out0)
2023-08-13 11:42:41,514 on stmt: return $242return_value.1.1
2023-08-13 11:42:41,514 ==== SSA block analysis pass on 240
2023-08-13 11:42:41,514 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696296550>
2023-08-13 11:42:41,514 on stmt: $const6.1 = const(int, 0)
2023-08-13 11:42:41,514 on stmt: stencil_index = $const6.1 + index00
2023-08-13 11:42:41,514 on stmt: $8binary_subscr.2 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:41,514 on stmt: $const20.4 = const(int, -1)
2023-08-13 11:42:41,514 on stmt: stencil_index.1 = $const20.4 + index00
2023-08-13 11:42:41,514 on stmt: $22binary_subscr.5 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2023-08-13 11:42:41,514 on stmt: $32compare_op.6 = $8binary_subscr.2 > $22binary_subscr.5
2023-08-13 11:42:41,514 on stmt: $const40.8 = const(int, 0)
2023-08-13 11:42:41,514 on stmt: stencil_index.2 = $const40.8 + index00
2023-08-13 11:42:41,514 on stmt: $42binary_subscr.9 = getitem(value=x, index=stencil_index.2, fn=<built-in function getitem>)
2023-08-13 11:42:41,514 on stmt: $const54.11 = const(int, 1)
2023-08-13 11:42:41,515 on stmt: stencil_index.3 = $const54.11 + index00
2023-08-13 11:42:41,515 on stmt: $56binary_subscr.12 = getitem(value=x, index=stencil_index.3, fn=<built-in function getitem>)
2023-08-13 11:42:41,515 on stmt: $66compare_op.13 = $42binary_subscr.9 >= $56binary_subscr.12
2023-08-13 11:42:41,515 on stmt: $binop_and_72.14 = $32compare_op.6 & $66compare_op.13
2023-08-13 11:42:41,515 on stmt: $76return_value.15 = cast(value=$binop_and_72.14)
2023-08-13 11:42:41,515 on stmt: out0[index00] = $76return_value.15
2023-08-13 11:42:41,515 on stmt: jump 241
2023-08-13 11:42:41,515 ==== SSA block analysis pass on 241
2023-08-13 11:42:41,515 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696296550>
2023-08-13 11:42:41,515 on stmt: jump 230
2023-08-13 11:42:41,516 defs defaultdict(<class 'list'>,
            {'$102build_slice.13.1': [<numba.core.ir.Assign object at 0x000001F69614EB90>],
             '$102build_slice.14.1': [<numba.core.ir.Assign object at 0x000001F69614CA50>],
             '$116build_slice.19.1': [<numba.core.ir.Assign object at 0x000001F69614F990>],
             '$116build_slice.20.1': [<numba.core.ir.Assign object at 0x000001F69614F850>],
             '$122load_global.21.1': [<numba.core.ir.Assign object at 0x000001F69614FA50>],
             '$134load_global.23.1': [<numba.core.ir.Assign object at 0x000001F69614FD50>],
             '$154call.27.1': [<numba.core.ir.Assign object at 0x000001F69614EF10>],
             '$164unary_negative.28.1': [<numba.core.ir.Assign object at 0x000001F69614F190>],
             '$170binary_subscr.31.1': [<numba.core.ir.Assign object at 0x000001F6960A5890>],
             '$180load_global.32.1': [<numba.core.ir.Assign object at 0x000001F69615DC90>],
             '$18load_global.2.1': [<numba.core.ir.Assign object at 0x000001F69614FB90>],
             '$200call.36.1': [<numba.core.ir.Assign object at 0x000001F696166410>],
             '$218call.38.1': [<numba.core.ir.Assign object at 0x000001F696167950>],
             '$228get_iter.39.1': [<numba.core.ir.Assign object at 0x000001F6961677D0>],
             '$22binary_subscr.5': [<numba.core.ir.Assign object at 0x000001F695FA87D0>],
             '$230for_iter.1.1': [<numba.core.ir.Assign object at 0x000001F696167B90>],
             '$230for_iter.2.1': [<numba.core.ir.Assign object at 0x000001F696167F90>],
             '$230for_iter.3.1': [<numba.core.ir.Assign object at 0x000001F696164F10>],
             '$242return_value.1.1': [<numba.core.ir.Assign object at 0x000001F696147090>],
             '$30load_method.4.1': [<numba.core.ir.Assign object at 0x000001F69614EED0>],
             '$32compare_op.6': [<numba.core.ir.Assign object at 0x000001F69668F050>],
             '$42binary_subscr.9': [<numba.core.ir.Assign object at 0x000001F695FA9F50>],
             '$54load_global.6.1': [<numba.core.ir.Assign object at 0x000001F69614EA50>],
             '$56binary_subscr.12': [<numba.core.ir.Assign object at 0x000001F6962317D0>],
             '$66compare_op.13': [<numba.core.ir.Assign object at 0x000001F6962089D0>],
             '$66load_attr.7.1': [<numba.core.ir.Assign object at 0x000001F69614E810>],
             '$76return_value.15': [<numba.core.ir.Assign object at 0x000001F6960B8D90>],
             '$8binary_subscr.2': [<numba.core.ir.Assign object at 0x000001F695FAA390>],
             '$binop_and_72.14': [<numba.core.ir.Assign object at 0x000001F696208410>],
             '$binop_sub210.37.1': [<numba.core.ir.Assign object at 0x000001F696167690>],
             '$const100.12.1': [<numba.core.ir.Assign object at 0x000001F69614E4D0>],
             '$const108.15.1': [<numba.core.ir.Assign object at 0x000001F69614C2D0>],
             '$const112.17.1': [<numba.core.ir.Assign object at 0x000001F69614F5D0>],
             '$const114.18.1': [<numba.core.ir.Assign object at 0x000001F69614E3D0>],
             '$const146.25.1': [<numba.core.ir.Assign object at 0x000001F69614FE90>],
             '$const148.26.1': [<numba.core.ir.Assign object at 0x000001F69614E150>],
             '$const168.30.1': [<numba.core.ir.Assign object at 0x000001F69614E190>],
             '$const192.34.1': [<numba.core.ir.Assign object at 0x000001F69615CB50>],
             '$const194.35.1': [<numba.core.ir.Assign object at 0x000001F696166110>],
             '$const20.4': [<numba.core.ir.Assign object at 0x000001F69668C250>],
             '$const40.8': [<numba.core.ir.Assign object at 0x000001F6966B2350>],
             '$const54.11': [<numba.core.ir.Assign object at 0x000001F6961FF790>],
             '$const6.1': [<numba.core.ir.Assign object at 0x000001F6966452D0>],
             '$const94.9.1': [<numba.core.ir.Assign object at 0x000001F69614D950>],
             '$const98.11.1': [<numba.core.ir.Assign object at 0x000001F69614E350>],
             '$phi230.0.1': [<numba.core.ir.Assign object at 0x000001F69614FD10>],
             '$phi232.1.1': [<numba.core.ir.Assign object at 0x000001F696230B90>],
             'full_shape0': [<numba.core.ir.Assign object at 0x000001F69614C490>],
             'index00': [<numba.core.ir.Assign object at 0x000001F696166B90>],
             'out0': [<numba.core.ir.Assign object at 0x000001F69614D2D0>],
             'stencil_index': [<numba.core.ir.Assign object at 0x000001F695FAA190>],
             'stencil_index.1': [<numba.core.ir.Assign object at 0x000001F695FAA8D0>],
             'stencil_index.2': [<numba.core.ir.Assign object at 0x000001F695FAA710>],
             'stencil_index.3': [<numba.core.ir.Assign object at 0x000001F695FAA5D0>],
             'x': [<numba.core.ir.Assign object at 0x000001F6962800D0>]})
2023-08-13 11:42:41,516 SSA violators set()
2023-08-13 11:42:41,958 bytecode dump:
>          0	NOP(arg=None, lineno=1063)
           2	RESUME(arg=0, lineno=1063)
           4	LOAD_GLOBAL(arg=1, lineno=1077)
          16	LOAD_FAST(arg=0, lineno=1077)
          18	PRECALL(arg=1, lineno=1077)
          22	CALL(arg=1, lineno=1077)
          32	LOAD_FAST(arg=1, lineno=1077)
          34	LOAD_CONST(arg=1, lineno=1077)
          36	LOAD_CONST(arg=1, lineno=1077)
          38	BUILD_SLICE(arg=2, lineno=1077)
          40	STORE_SUBSCR(arg=None, lineno=1077)
          44	LOAD_CONST(arg=1, lineno=1077)
          46	RETURN_VALUE(arg=None, lineno=1077)
2023-08-13 11:42:41,958 pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-13 11:42:41,958 stack: []
2023-08-13 11:42:41,959 state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-13 11:42:41,959 dispatch pc=0, inst=NOP(arg=None, lineno=1063)
2023-08-13 11:42:41,959 stack []
2023-08-13 11:42:41,959 dispatch pc=2, inst=RESUME(arg=0, lineno=1063)
2023-08-13 11:42:41,959 stack []
2023-08-13 11:42:41,959 dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=1077)
2023-08-13 11:42:41,959 stack []
2023-08-13 11:42:41,959 dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1077)
2023-08-13 11:42:41,959 stack ['$null$4.1', '$4load_global.0']
2023-08-13 11:42:41,959 dispatch pc=18, inst=PRECALL(arg=1, lineno=1077)
2023-08-13 11:42:41,959 stack ['$null$4.1', '$4load_global.0', '$x16.2']
2023-08-13 11:42:41,959 dispatch pc=22, inst=CALL(arg=1, lineno=1077)
2023-08-13 11:42:41,959 stack ['$null$4.1', '$4load_global.0', '$x16.2']
2023-08-13 11:42:41,960 dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=1077)
2023-08-13 11:42:41,960 stack ['$22call.3']
2023-08-13 11:42:41,960 dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=1077)
2023-08-13 11:42:41,960 stack ['$22call.3', '$y32.4']
2023-08-13 11:42:41,960 dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=1077)
2023-08-13 11:42:41,960 stack ['$22call.3', '$y32.4', '$const34.5']
2023-08-13 11:42:41,960 dispatch pc=38, inst=BUILD_SLICE(arg=2, lineno=1077)
2023-08-13 11:42:41,960 stack ['$22call.3', '$y32.4', '$const34.5', '$const36.6']
2023-08-13 11:42:41,960 dispatch pc=40, inst=STORE_SUBSCR(arg=None, lineno=1077)
2023-08-13 11:42:41,960 stack ['$22call.3', '$y32.4', '$38build_slice.8']
2023-08-13 11:42:41,961 dispatch pc=44, inst=LOAD_CONST(arg=1, lineno=1077)
2023-08-13 11:42:41,961 stack []
2023-08-13 11:42:41,961 dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=1077)
2023-08-13 11:42:41,961 stack ['$const44.9']
2023-08-13 11:42:41,961 end state. edges=[]
2023-08-13 11:42:41,961 -------------------------Prune PHIs-------------------------
2023-08-13 11:42:41,961 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-08-13 11:42:41,961 defmap: {}
2023-08-13 11:42:41,961 phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:41,961 changing phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:41,961 keep phismap: {}
2023-08-13 11:42:41,962 new_out: defaultdict(<class 'dict'>, {})
2023-08-13 11:42:41,962 ----------------------DONE Prune PHIs-----------------------
2023-08-13 11:42:41,962 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'res': '$x16.2'}), (18, {}), (20, {}), (22, {'func': '$4load_global.0', 'args': ['$x16.2'], 'kw_names': None, 'res': '$22call.3'}), (24, {}), (26, {}), (28, {}), (30, {}), (32, {'res': '$y32.4'}), (34, {'res': '$const34.5'}), (36, {'res': '$const36.6'}), (38, {'start': '$const34.5', 'stop': '$const36.6', 'step': None, 'res': '$38build_slice.8', 'slicevar': '$38build_slice.7'}), (40, {'target': '$y32.4', 'index': '$38build_slice.8', 'value': '$22call.3'}), (42, {}), (44, {'res': '$const44.9'}), (46, {'retval': '$const44.9', 'castval': '$46return_value.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:41,963 label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $4load_global.0 = global(_localmax_sten: <numba.stencils.stencil.StencilFunc object at 0x000001F696E760D0>) ['$4load_global.0']
    $22call.3 = call $4load_global.0(x, func=$4load_global.0, args=[Var(x, utils.py:1063)], kws=(), vararg=None, varkwarg=None, target=None) ['$22call.3', '$4load_global.0', 'x']
    $const34.5 = const(NoneType, None)       ['$const34.5']
    $const36.6 = const(NoneType, None)       ['$const36.6']
    $38build_slice.7 = global(slice: <class 'slice'>) ['$38build_slice.7']
    $38build_slice.8 = call $38build_slice.7($const34.5, $const36.6, func=$38build_slice.7, args=(Var($const34.5, utils.py:1077), Var($const36.6, utils.py:1077)), kws=(), vararg=None, varkwarg=None, target=None) ['$38build_slice.7', '$38build_slice.8', '$const34.5', '$const36.6']
    y[$38build_slice.8] = $22call.3          ['$22call.3', '$38build_slice.8', 'y']
    $const44.9 = const(NoneType, None)       ['$const44.9']
    $46return_value.10 = cast(value=$const44.9) ['$46return_value.10', '$const44.9']
    return $46return_value.10                ['$46return_value.10']

2023-08-13 11:42:41,971 ==== SSA block analysis pass on 0
2023-08-13 11:42:41,971 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696C5B4D0>
2023-08-13 11:42:41,971 on stmt: x = arg(0, name=x)
2023-08-13 11:42:41,971 on stmt: y = arg(1, name=y)
2023-08-13 11:42:41,971 on stmt: $4load_global.0 = global(_localmax_sten: <numba.stencils.stencil.StencilFunc object at 0x000001F696E760D0>)
2023-08-13 11:42:41,971 on stmt: $22call.3 = call $4load_global.0(x, func=$4load_global.0, args=[Var(x, utils.py:1063)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:41,971 on stmt: $const34.5 = const(NoneType, None)
2023-08-13 11:42:41,971 on stmt: $const36.6 = const(NoneType, None)
2023-08-13 11:42:41,972 on stmt: $38build_slice.7 = global(slice: <class 'slice'>)
2023-08-13 11:42:41,972 on stmt: $38build_slice.8 = call $38build_slice.7($const34.5, $const36.6, func=$38build_slice.7, args=(Var($const34.5, utils.py:1077), Var($const36.6, utils.py:1077)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:41,972 on stmt: y[slice(None, None, None)] = $22call.3
2023-08-13 11:42:41,972 on stmt: $const44.9 = const(NoneType, None)
2023-08-13 11:42:41,972 on stmt: $46return_value.10 = cast(value=$const44.9)
2023-08-13 11:42:41,972 on stmt: return $46return_value.10
2023-08-13 11:42:41,972 defs defaultdict(<class 'list'>,
            {'$22call.3': [<numba.core.ir.Assign object at 0x000001F696C5B650>],
             '$38build_slice.7': [<numba.core.ir.Assign object at 0x000001F696C5BED0>],
             '$38build_slice.8': [<numba.core.ir.Assign object at 0x000001F696C5BF90>],
             '$46return_value.10': [<numba.core.ir.Assign object at 0x000001F696C48450>],
             '$4load_global.0': [<numba.core.ir.Assign object at 0x000001F696C5B110>],
             '$const34.5': [<numba.core.ir.Assign object at 0x000001F696C5BB10>],
             '$const36.6': [<numba.core.ir.Assign object at 0x000001F696C5BCD0>],
             '$const44.9': [<numba.core.ir.Assign object at 0x000001F696C48290>],
             'x': [<numba.core.ir.Assign object at 0x000001F696C5AD90>],
             'y': [<numba.core.ir.Assign object at 0x000001F696C5AE90>]})
2023-08-13 11:42:41,972 SSA violators set()
2023-08-13 11:42:42,007 bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	RESUME(arg=0, lineno=1)
           4	LOAD_FAST(arg=0, lineno=2)
           6	LOAD_ATTR(arg=0, lineno=2)
          16	STORE_FAST(arg=1, lineno=2)
          18	LOAD_GLOBAL(arg=2, lineno=3)
          30	LOAD_METHOD(arg=2, lineno=3)
          52	LOAD_FAST(arg=1, lineno=3)
          54	LOAD_GLOBAL(arg=2, lineno=3)
          66	LOAD_ATTR(arg=3, lineno=3)
          76	KW_NAMES(arg=1, lineno=3)
          78	PRECALL(arg=2, lineno=3)
          82	CALL(arg=2, lineno=3)
          92	STORE_FAST(arg=2, lineno=3)
          94	LOAD_CONST(arg=2, lineno=4)
          96	LOAD_FAST(arg=2, lineno=4)
          98	LOAD_CONST(arg=0, lineno=4)
         100	LOAD_CONST(arg=3, lineno=4)
         102	BUILD_SLICE(arg=2, lineno=4)
         104	STORE_SUBSCR(arg=None, lineno=4)
         108	LOAD_CONST(arg=2, lineno=5)
         110	LOAD_FAST(arg=2, lineno=5)
         112	LOAD_CONST(arg=4, lineno=5)
         114	LOAD_CONST(arg=0, lineno=5)
         116	BUILD_SLICE(arg=2, lineno=5)
         118	STORE_SUBSCR(arg=None, lineno=5)
         122	LOAD_GLOBAL(arg=9, lineno=6)
         134	LOAD_GLOBAL(arg=11, lineno=6)
         146	LOAD_CONST(arg=2, lineno=6)
         148	LOAD_CONST(arg=4, lineno=6)
         150	PRECALL(arg=2, lineno=6)
         154	CALL(arg=2, lineno=6)
         164	UNARY_NEGATIVE(arg=None, lineno=6)
         166	LOAD_FAST(arg=1, lineno=6)
         168	LOAD_CONST(arg=2, lineno=6)
         170	BINARY_SUBSCR(arg=None, lineno=6)
         180	LOAD_GLOBAL(arg=13, lineno=6)
         192	LOAD_CONST(arg=2, lineno=6)
         194	LOAD_CONST(arg=3, lineno=6)
         196	PRECALL(arg=2, lineno=6)
         200	CALL(arg=2, lineno=6)
         210	BINARY_OP(arg=10, lineno=6)
         214	PRECALL(arg=2, lineno=6)
         218	CALL(arg=2, lineno=6)
         228	GET_ITER(arg=None, lineno=6)
>        230	FOR_ITER(arg=4, lineno=6)
         232	STORE_FAST(arg=3, lineno=6)
         234	LOAD_CONST(arg=2, lineno=7)
         236	STORE_FAST(arg=4, lineno=7)
         238	JUMP_BACKWARD(arg=5, lineno=7)
>        240	LOAD_FAST(arg=2, lineno=8)
         242	RETURN_VALUE(arg=None, lineno=8)
2023-08-13 11:42:42,007 pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-13 11:42:42,007 stack: []
2023-08-13 11:42:42,007 state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-13 11:42:42,007 dispatch pc=0, inst=NOP(arg=None, lineno=1)
2023-08-13 11:42:42,007 stack []
2023-08-13 11:42:42,007 dispatch pc=2, inst=RESUME(arg=0, lineno=1)
2023-08-13 11:42:42,007 stack []
2023-08-13 11:42:42,007 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2)
2023-08-13 11:42:42,007 stack []
2023-08-13 11:42:42,007 dispatch pc=6, inst=LOAD_ATTR(arg=0, lineno=2)
2023-08-13 11:42:42,008 stack ['$x4.0']
2023-08-13 11:42:42,008 dispatch pc=16, inst=STORE_FAST(arg=1, lineno=2)
2023-08-13 11:42:42,008 stack ['$6load_attr.1']
2023-08-13 11:42:42,008 dispatch pc=18, inst=LOAD_GLOBAL(arg=2, lineno=3)
2023-08-13 11:42:42,008 stack []
2023-08-13 11:42:42,008 dispatch pc=30, inst=LOAD_METHOD(arg=2, lineno=3)
2023-08-13 11:42:42,008 stack ['$18load_global.2']
2023-08-13 11:42:42,008 dispatch pc=52, inst=LOAD_FAST(arg=1, lineno=3)
2023-08-13 11:42:42,008 stack ['$null$30.3', '$30load_method.4']
2023-08-13 11:42:42,008 dispatch pc=54, inst=LOAD_GLOBAL(arg=2, lineno=3)
2023-08-13 11:42:42,008 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5']
2023-08-13 11:42:42,008 dispatch pc=66, inst=LOAD_ATTR(arg=3, lineno=3)
2023-08-13 11:42:42,008 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$54load_global.6']
2023-08-13 11:42:42,008 dispatch pc=76, inst=KW_NAMES(arg=1, lineno=3)
2023-08-13 11:42:42,008 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$66load_attr.7']
2023-08-13 11:42:42,009 dispatch pc=78, inst=PRECALL(arg=2, lineno=3)
2023-08-13 11:42:42,009 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$66load_attr.7']
2023-08-13 11:42:42,009 dispatch pc=82, inst=CALL(arg=2, lineno=3)
2023-08-13 11:42:42,009 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$66load_attr.7']
2023-08-13 11:42:42,009 dispatch pc=92, inst=STORE_FAST(arg=2, lineno=3)
2023-08-13 11:42:42,009 stack ['$82call.8']
2023-08-13 11:42:42,009 dispatch pc=94, inst=LOAD_CONST(arg=2, lineno=4)
2023-08-13 11:42:42,009 stack []
2023-08-13 11:42:42,009 dispatch pc=96, inst=LOAD_FAST(arg=2, lineno=4)
2023-08-13 11:42:42,009 stack ['$const94.9']
2023-08-13 11:42:42,009 dispatch pc=98, inst=LOAD_CONST(arg=0, lineno=4)
2023-08-13 11:42:42,009 stack ['$const94.9', '$out096.10']
2023-08-13 11:42:42,010 dispatch pc=100, inst=LOAD_CONST(arg=3, lineno=4)
2023-08-13 11:42:42,010 stack ['$const94.9', '$out096.10', '$const98.11']
2023-08-13 11:42:42,010 dispatch pc=102, inst=BUILD_SLICE(arg=2, lineno=4)
2023-08-13 11:42:42,010 stack ['$const94.9', '$out096.10', '$const98.11', '$const100.12']
2023-08-13 11:42:42,010 dispatch pc=104, inst=STORE_SUBSCR(arg=None, lineno=4)
2023-08-13 11:42:42,010 stack ['$const94.9', '$out096.10', '$102build_slice.14']
2023-08-13 11:42:42,010 dispatch pc=108, inst=LOAD_CONST(arg=2, lineno=5)
2023-08-13 11:42:42,010 stack []
2023-08-13 11:42:42,010 dispatch pc=110, inst=LOAD_FAST(arg=2, lineno=5)
2023-08-13 11:42:42,010 stack ['$const108.15']
2023-08-13 11:42:42,010 dispatch pc=112, inst=LOAD_CONST(arg=4, lineno=5)
2023-08-13 11:42:42,010 stack ['$const108.15', '$out0110.16']
2023-08-13 11:42:42,011 dispatch pc=114, inst=LOAD_CONST(arg=0, lineno=5)
2023-08-13 11:42:42,011 stack ['$const108.15', '$out0110.16', '$const112.17']
2023-08-13 11:42:42,011 dispatch pc=116, inst=BUILD_SLICE(arg=2, lineno=5)
2023-08-13 11:42:42,011 stack ['$const108.15', '$out0110.16', '$const112.17', '$const114.18']
2023-08-13 11:42:42,011 dispatch pc=118, inst=STORE_SUBSCR(arg=None, lineno=5)
2023-08-13 11:42:42,011 stack ['$const108.15', '$out0110.16', '$116build_slice.20']
2023-08-13 11:42:42,011 dispatch pc=122, inst=LOAD_GLOBAL(arg=9, lineno=6)
2023-08-13 11:42:42,011 stack []
2023-08-13 11:42:42,011 dispatch pc=134, inst=LOAD_GLOBAL(arg=11, lineno=6)
2023-08-13 11:42:42,011 stack ['$null$122.22', '$122load_global.21']
2023-08-13 11:42:42,011 dispatch pc=146, inst=LOAD_CONST(arg=2, lineno=6)
2023-08-13 11:42:42,011 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23']
2023-08-13 11:42:42,012 dispatch pc=148, inst=LOAD_CONST(arg=4, lineno=6)
2023-08-13 11:42:42,012 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23', '$const146.25']
2023-08-13 11:42:42,012 dispatch pc=150, inst=PRECALL(arg=2, lineno=6)
2023-08-13 11:42:42,012 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23', '$const146.25', '$const148.26']
2023-08-13 11:42:42,012 dispatch pc=154, inst=CALL(arg=2, lineno=6)
2023-08-13 11:42:42,012 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23', '$const146.25', '$const148.26']
2023-08-13 11:42:42,012 dispatch pc=164, inst=UNARY_NEGATIVE(arg=None, lineno=6)
2023-08-13 11:42:42,012 stack ['$null$122.22', '$122load_global.21', '$154call.27']
2023-08-13 11:42:42,013 dispatch pc=166, inst=LOAD_FAST(arg=1, lineno=6)
2023-08-13 11:42:42,013 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28']
2023-08-13 11:42:42,013 dispatch pc=168, inst=LOAD_CONST(arg=2, lineno=6)
2023-08-13 11:42:42,013 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$full_shape0166.29']
2023-08-13 11:42:42,013 dispatch pc=170, inst=BINARY_SUBSCR(arg=None, lineno=6)
2023-08-13 11:42:42,013 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$full_shape0166.29', '$const168.30']
2023-08-13 11:42:42,013 dispatch pc=180, inst=LOAD_GLOBAL(arg=13, lineno=6)
2023-08-13 11:42:42,013 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31']
2023-08-13 11:42:42,013 dispatch pc=192, inst=LOAD_CONST(arg=2, lineno=6)
2023-08-13 11:42:42,013 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32']
2023-08-13 11:42:42,013 dispatch pc=194, inst=LOAD_CONST(arg=3, lineno=6)
2023-08-13 11:42:42,013 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32', '$const192.34']
2023-08-13 11:42:42,013 dispatch pc=196, inst=PRECALL(arg=2, lineno=6)
2023-08-13 11:42:42,014 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32', '$const192.34', '$const194.35']
2023-08-13 11:42:42,014 dispatch pc=200, inst=CALL(arg=2, lineno=6)
2023-08-13 11:42:42,014 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32', '$const192.34', '$const194.35']
2023-08-13 11:42:42,014 dispatch pc=210, inst=BINARY_OP(arg=10, lineno=6)
2023-08-13 11:42:42,014 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$200call.36']
2023-08-13 11:42:42,014 dispatch pc=214, inst=PRECALL(arg=2, lineno=6)
2023-08-13 11:42:42,014 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$binop_sub210.37']
2023-08-13 11:42:42,014 dispatch pc=218, inst=CALL(arg=2, lineno=6)
2023-08-13 11:42:42,014 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$binop_sub210.37']
2023-08-13 11:42:42,014 dispatch pc=228, inst=GET_ITER(arg=None, lineno=6)
2023-08-13 11:42:42,014 stack ['$218call.38']
2023-08-13 11:42:42,014 end state. edges=[Edge(pc=230, stack=('$228get_iter.39',), blockstack=(), npush=0)]
2023-08-13 11:42:42,015 pending: deque([State(pc_initial=230 nstack_initial=1)])
2023-08-13 11:42:42,015 stack: ['$phi230.0']
2023-08-13 11:42:42,015 state.pc_initial: State(pc_initial=230 nstack_initial=1)
2023-08-13 11:42:42,015 dispatch pc=230, inst=FOR_ITER(arg=4, lineno=6)
2023-08-13 11:42:42,015 stack ['$phi230.0']
2023-08-13 11:42:42,015 end state. edges=[Edge(pc=240, stack=(), blockstack=(), npush=0), Edge(pc=232, stack=('$phi230.0', '$230for_iter.2'), blockstack=(), npush=0)]
2023-08-13 11:42:42,015 pending: deque([State(pc_initial=240 nstack_initial=0), State(pc_initial=232 nstack_initial=2)])
2023-08-13 11:42:42,015 stack: []
2023-08-13 11:42:42,015 state.pc_initial: State(pc_initial=240 nstack_initial=0)
2023-08-13 11:42:42,015 dispatch pc=240, inst=LOAD_FAST(arg=2, lineno=8)
2023-08-13 11:42:42,015 stack []
2023-08-13 11:42:42,016 dispatch pc=242, inst=RETURN_VALUE(arg=None, lineno=8)
2023-08-13 11:42:42,016 stack ['$out0240.0']
2023-08-13 11:42:42,016 end state. edges=[]
2023-08-13 11:42:42,016 pending: deque([State(pc_initial=232 nstack_initial=2)])
2023-08-13 11:42:42,016 stack: ['$phi232.0', '$phi232.1']
2023-08-13 11:42:42,016 state.pc_initial: State(pc_initial=232 nstack_initial=2)
2023-08-13 11:42:42,016 dispatch pc=232, inst=STORE_FAST(arg=3, lineno=6)
2023-08-13 11:42:42,016 stack ['$phi232.0', '$phi232.1']
2023-08-13 11:42:42,016 dispatch pc=234, inst=LOAD_CONST(arg=2, lineno=7)
2023-08-13 11:42:42,016 stack ['$phi232.0']
2023-08-13 11:42:42,017 dispatch pc=236, inst=STORE_FAST(arg=4, lineno=7)
2023-08-13 11:42:42,017 stack ['$phi232.0', '$const234.2']
2023-08-13 11:42:42,017 dispatch pc=238, inst=JUMP_BACKWARD(arg=5, lineno=7)
2023-08-13 11:42:42,017 stack ['$phi232.0']
2023-08-13 11:42:42,017 end state. edges=[Edge(pc=230, stack=('$phi232.0',), blockstack=(), npush=0)]
2023-08-13 11:42:42,018 pending: deque([State(pc_initial=230 nstack_initial=1)])
2023-08-13 11:42:42,018 -------------------------Prune PHIs-------------------------
2023-08-13 11:42:42,018 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=230 nstack_initial=1): {'$phi230.0'},
             State(pc_initial=232 nstack_initial=2): {'$phi232.1'},
             State(pc_initial=240 nstack_initial=0): set()})
2023-08-13 11:42:42,018 defmap: {'$phi230.0': State(pc_initial=0 nstack_initial=0),
 '$phi232.1': State(pc_initial=230 nstack_initial=1)}
2023-08-13 11:42:42,018 phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi232.0',
                            State(pc_initial=232 nstack_initial=2))},
             '$phi232.0': {('$phi230.0',
                            State(pc_initial=230 nstack_initial=1))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:42,018 changing phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi230.0',
                            State(pc_initial=230 nstack_initial=1))},
             '$phi232.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:42,019 changing phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:42,019 changing phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:42,019 keep phismap: {'$phi230.0': {('$228get_iter.39', State(pc_initial=0 nstack_initial=0))},
 '$phi232.1': {('$230for_iter.2', State(pc_initial=230 nstack_initial=1))}}
2023-08-13 11:42:42,019 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi230.0': '$228get_iter.39'},
             State(pc_initial=230 nstack_initial=1): {'$phi232.1': '$230for_iter.2'}})
2023-08-13 11:42:42,019 ----------------------DONE Prune PHIs-----------------------
2023-08-13 11:42:42,020 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$x4.0'}), (6, {'item': '$x4.0', 'res': '$6load_attr.1'}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'value': '$6load_attr.1'}), (18, {'idx': 1, 'res': '$18load_global.2'}), (20, {}), (22, {}), (24, {}), (26, {}), (28, {}), (30, {'item': '$18load_global.2', 'res': '$30load_method.4'}), (32, {}), (34, {}), (36, {}), (38, {}), (40, {}), (42, {}), (44, {}), (46, {}), (48, {}), (50, {}), (52, {'res': '$full_shape052.5'}), (54, {'idx': 1, 'res': '$54load_global.6'}), (56, {}), (58, {}), (60, {}), (62, {}), (64, {}), (66, {'item': '$54load_global.6', 'res': '$66load_attr.7'}), (68, {}), (70, {}), (72, {}), (74, {}), (78, {}), (80, {}), (82, {'func': '$30load_method.4', 'args': ['$full_shape052.5', '$66load_attr.7'], 'kw_names': 1, 'res': '$82call.8'}), (84, {}), (86, {}), (88, {}), (90, {}), (92, {'value': '$82call.8'}), (94, {'res': '$const94.9'}), (96, {'res': '$out096.10'}), (98, {'res': '$const98.11'}), (100, {'res': '$const100.12'}), (102, {'start': '$const98.11', 'stop': '$const100.12', 'step': None, 'res': '$102build_slice.14', 'slicevar': '$102build_slice.13'}), (104, {'target': '$out096.10', 'index': '$102build_slice.14', 'value': '$const94.9'}), (106, {}), (108, {'res': '$const108.15'}), (110, {'res': '$out0110.16'}), (112, {'res': '$const112.17'}), (114, {'res': '$const114.18'}), (116, {'start': '$const112.17', 'stop': '$const114.18', 'step': None, 'res': '$116build_slice.20', 'slicevar': '$116build_slice.19'}), (118, {'target': '$out0110.16', 'index': '$116build_slice.20', 'value': '$const108.15'}), (120, {}), (122, {'idx': 4, 'res': '$122load_global.21'}), (124, {}), (126, {}), (128, {}), (130, {}), (132, {}), (134, {'idx': 5, 'res': '$134load_global.23'}), (136, {}), (138, {}), (140, {}), (142, {}), (144, {}), (146, {'res': '$const146.25'}), (148, {'res': '$const148.26'}), (150, {}), (152, {}), (154, {'func': '$134load_global.23', 'args': ['$const146.25', '$const148.26'], 'kw_names': None, 'res': '$154call.27'}), (156, {}), (158, {}), (160, {}), (162, {}), (164, {'value': '$154call.27', 'res': '$164unary_negative.28'}), (166, {'res': '$full_shape0166.29'}), (168, {'res': '$const168.30'}), (170, {'index': '$const168.30', 'target': '$full_shape0166.29', 'res': '$170binary_subscr.31'}), (172, {}), (174, {}), (176, {}), (178, {}), (180, {'idx': 6, 'res': '$180load_global.32'}), (182, {}), (184, {}), (186, {}), (188, {}), (190, {}), (192, {'res': '$const192.34'}), (194, {'res': '$const194.35'}), (196, {}), (198, {}), (200, {'func': '$180load_global.32', 'args': ['$const192.34', '$const194.35'], 'kw_names': None, 'res': '$200call.36'}), (202, {}), (204, {}), (206, {}), (208, {}), (210, {'op': '-', 'lhs': '$170binary_subscr.31', 'rhs': '$200call.36', 'res': '$binop_sub210.37'}), (212, {}), (214, {}), (216, {}), (218, {'func': '$122load_global.21', 'args': ['$164unary_negative.28', '$binop_sub210.37'], 'kw_names': None, 'res': '$218call.38'}), (220, {}), (222, {}), (224, {}), (226, {}), (228, {'value': '$218call.38', 'res': '$228get_iter.39'})), outgoing_phis={'$phi230.0': '$228get_iter.39'}, blockstack=(), active_try_block=None, outgoing_edgepushed={230: ('$228get_iter.39',)})
2023-08-13 11:42:42,020 block_infos State(pc_initial=230 nstack_initial=1):
AdaptBlockInfo(insts=((230, {'iterator': '$phi230.0', 'pair': '$230for_iter.1', 'indval': '$230for_iter.2', 'pred': '$230for_iter.3'}),), outgoing_phis={'$phi232.1': '$230for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={240: (), 232: ('$phi230.0', '$230for_iter.2')})
2023-08-13 11:42:42,020 block_infos State(pc_initial=232 nstack_initial=2):
AdaptBlockInfo(insts=((232, {'value': '$phi232.1'}), (234, {'res': '$const234.2'}), (236, {'value': '$const234.2'}), (238, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={230: ('$phi232.0',)})
2023-08-13 11:42:42,020 block_infos State(pc_initial=240 nstack_initial=0):
AdaptBlockInfo(insts=((240, {'res': '$out0240.0'}), (242, {'retval': '$out0240.0', 'castval': '$242return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:42,021 label 0:
    x = arg(0, name=x)                       ['x']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $18load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>) ['$18load_global.2']
    $30load_method.4 = getattr(value=$18load_global.2, attr=empty) ['$18load_global.2', '$30load_method.4']
    $54load_global.6 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>) ['$54load_global.6']
    $66load_attr.7 = getattr(value=$54load_global.6, attr=bool_) ['$54load_global.6', '$66load_attr.7']
    out0 = call $30load_method.4(full_shape0, func=$30load_method.4, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($66load_attr.7, <string>:3))], vararg=None, varkwarg=None, target=None) ['$30load_method.4', '$66load_attr.7', 'full_shape0', 'out0']
    $const94.9 = const(int, 0)               ['$const94.9']
    $const98.11 = const(NoneType, None)      ['$const98.11']
    $const100.12 = const(int, 1)             ['$const100.12']
    $102build_slice.13 = global(slice: <class 'slice'>) ['$102build_slice.13']
    $102build_slice.14 = call $102build_slice.13($const98.11, $const100.12, func=$102build_slice.13, args=(Var($const98.11, <string>:4), Var($const100.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$102build_slice.13', '$102build_slice.14', '$const100.12', '$const98.11']
    out0[$102build_slice.14] = $const94.9    ['$102build_slice.14', '$const94.9', 'out0']
    $const108.15 = const(int, 0)             ['$const108.15']
    $const112.17 = const(int, -1)            ['$const112.17']
    $const114.18 = const(NoneType, None)     ['$const114.18']
    $116build_slice.19 = global(slice: <class 'slice'>) ['$116build_slice.19']
    $116build_slice.20 = call $116build_slice.19($const112.17, $const114.18, func=$116build_slice.19, args=(Var($const112.17, <string>:5), Var($const114.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$116build_slice.19', '$116build_slice.20', '$const112.17', '$const114.18']
    out0[$116build_slice.20] = $const108.15  ['$116build_slice.20', '$const108.15', 'out0']
    $122load_global.21 = global(range: <class 'range'>) ['$122load_global.21']
    $134load_global.23 = global(min: <built-in function min>) ['$134load_global.23']
    $const146.25 = const(int, 0)             ['$const146.25']
    $const148.26 = const(int, -1)            ['$const148.26']
    $154call.27 = call $134load_global.23($const146.25, $const148.26, func=$134load_global.23, args=[Var($const146.25, <string>:6), Var($const148.26, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$134load_global.23', '$154call.27', '$const146.25', '$const148.26']
    $164unary_negative.28 = unary(fn=<built-in function neg>, value=$154call.27) ['$154call.27', '$164unary_negative.28']
    $const168.30 = const(int, 0)             ['$const168.30']
    $170binary_subscr.31 = getitem(value=full_shape0, index=$const168.30, fn=<built-in function getitem>) ['$170binary_subscr.31', '$const168.30', 'full_shape0']
    $180load_global.32 = global(max: <built-in function max>) ['$180load_global.32']
    $const192.34 = const(int, 0)             ['$const192.34']
    $const194.35 = const(int, 1)             ['$const194.35']
    $200call.36 = call $180load_global.32($const192.34, $const194.35, func=$180load_global.32, args=[Var($const192.34, <string>:6), Var($const194.35, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$180load_global.32', '$200call.36', '$const192.34', '$const194.35']
    $binop_sub210.37 = $170binary_subscr.31 - $200call.36 ['$170binary_subscr.31', '$200call.36', '$binop_sub210.37']
    $218call.38 = call $122load_global.21($164unary_negative.28, $binop_sub210.37, func=$122load_global.21, args=[Var($164unary_negative.28, <string>:6), Var($binop_sub210.37, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$122load_global.21', '$164unary_negative.28', '$218call.38', '$binop_sub210.37']
    $228get_iter.39 = getiter(value=$218call.38) ['$218call.38', '$228get_iter.39']
    $phi230.0 = $228get_iter.39              ['$228get_iter.39', '$phi230.0']
    jump 230                                 []
label 230:
    $230for_iter.1 = iternext(value=$phi230.0) ['$230for_iter.1', '$phi230.0']
    $230for_iter.2 = pair_first(value=$230for_iter.1) ['$230for_iter.1', '$230for_iter.2']
    $230for_iter.3 = pair_second(value=$230for_iter.1) ['$230for_iter.1', '$230for_iter.3']
    $phi232.1 = $230for_iter.2               ['$230for_iter.2', '$phi232.1']
    branch $230for_iter.3, 232, 240          ['$230for_iter.3']
label 232:
    index00 = $phi232.1                      ['$phi232.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 230                                 []
label 240:
    $242return_value.1 = cast(value=out0)    ['$242return_value.1', 'out0']
    return $242return_value.1                ['$242return_value.1']

2023-08-13 11:42:42,042 ==== SSA block analysis pass on 0
2023-08-13 11:42:42,042 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6967059D0>
2023-08-13 11:42:42,042 on stmt: x = arg(0, name=x)
2023-08-13 11:42:42,043 on stmt: full_shape0 = getattr(value=x, attr=shape)
2023-08-13 11:42:42,043 on stmt: $18load_global.2.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:42,043 on stmt: $30load_method.4.1 = getattr(value=$18load_global.2.1, attr=empty)
2023-08-13 11:42:42,043 on stmt: $54load_global.6.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:42,043 on stmt: $66load_attr.7.1 = getattr(value=$54load_global.6.1, attr=bool_)
2023-08-13 11:42:42,043 on stmt: out0 = call $30load_method.4.1(full_shape0, func=$30load_method.4.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($66load_attr.7.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:42,043 on stmt: $const94.9.1 = const(int, 0)
2023-08-13 11:42:42,043 on stmt: $const98.11.1 = const(NoneType, None)
2023-08-13 11:42:42,043 on stmt: $const100.12.1 = const(int, 1)
2023-08-13 11:42:42,043 on stmt: $102build_slice.13.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:42,043 on stmt: $102build_slice.14.1 = call $102build_slice.13.1($const98.11.1, $const100.12.1, func=$102build_slice.13.1, args=(Var($const98.11.1, <string>:4), Var($const100.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:42,043 on stmt: out0[$102build_slice.14.1] = $const94.9.1
2023-08-13 11:42:42,044 on stmt: $const108.15.1 = const(int, 0)
2023-08-13 11:42:42,044 on stmt: $const112.17.1 = const(int, -1)
2023-08-13 11:42:42,044 on stmt: $const114.18.1 = const(NoneType, None)
2023-08-13 11:42:42,044 on stmt: $116build_slice.19.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:42,044 on stmt: $116build_slice.20.1 = call $116build_slice.19.1($const112.17.1, $const114.18.1, func=$116build_slice.19.1, args=(Var($const112.17.1, <string>:5), Var($const114.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:42,044 on stmt: out0[$116build_slice.20.1] = $const108.15.1
2023-08-13 11:42:42,044 on stmt: $122load_global.21.1 = global(range: <class 'range'>)
2023-08-13 11:42:42,044 on stmt: $134load_global.23.1 = global(min: <built-in function min>)
2023-08-13 11:42:42,044 on stmt: $const146.25.1 = const(int, 0)
2023-08-13 11:42:42,044 on stmt: $const148.26.1 = const(int, -1)
2023-08-13 11:42:42,044 on stmt: $154call.27.1 = call $134load_global.23.1($const146.25.1, $const148.26.1, func=$134load_global.23.1, args=[Var($const146.25.1, <string>:6), Var($const148.26.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:42,044 on stmt: $164unary_negative.28.1 = unary(fn=<built-in function neg>, value=$154call.27.1)
2023-08-13 11:42:42,044 on stmt: $const168.30.1 = const(int, 0)
2023-08-13 11:42:42,044 on stmt: $170binary_subscr.31.1 = getitem(value=full_shape0, index=$const168.30.1, fn=<built-in function getitem>)
2023-08-13 11:42:42,045 on stmt: $180load_global.32.1 = global(max: <built-in function max>)
2023-08-13 11:42:42,045 on stmt: $const192.34.1 = const(int, 0)
2023-08-13 11:42:42,045 on stmt: $const194.35.1 = const(int, 1)
2023-08-13 11:42:42,045 on stmt: $200call.36.1 = call $180load_global.32.1($const192.34.1, $const194.35.1, func=$180load_global.32.1, args=[Var($const192.34.1, <string>:6), Var($const194.35.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:42,045 on stmt: $binop_sub210.37.1 = $170binary_subscr.31.1 - $200call.36.1
2023-08-13 11:42:42,045 on stmt: $218call.38.1 = call $122load_global.21.1($164unary_negative.28.1, $binop_sub210.37.1, func=$122load_global.21.1, args=[Var($164unary_negative.28.1, <string>:6), Var($binop_sub210.37.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:42,045 on stmt: $228get_iter.39.1 = getiter(value=$218call.38.1)
2023-08-13 11:42:42,045 on stmt: $phi230.0.1 = $228get_iter.39.1
2023-08-13 11:42:42,045 on stmt: jump 230
2023-08-13 11:42:42,045 ==== SSA block analysis pass on 230
2023-08-13 11:42:42,045 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6967059D0>
2023-08-13 11:42:42,046 on stmt: $230for_iter.1.1 = iternext(value=$phi230.0.1)
2023-08-13 11:42:42,046 on stmt: $230for_iter.2.1 = pair_first(value=$230for_iter.1.1)
2023-08-13 11:42:42,046 on stmt: $230for_iter.3.1 = pair_second(value=$230for_iter.1.1)
2023-08-13 11:42:42,046 on stmt: $phi232.1.1 = $230for_iter.2.1
2023-08-13 11:42:42,046 on stmt: branch $230for_iter.3.1, 232, 242
2023-08-13 11:42:42,046 ==== SSA block analysis pass on 232
2023-08-13 11:42:42,046 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6967059D0>
2023-08-13 11:42:42,046 on stmt: index00 = $phi232.1.1
2023-08-13 11:42:42,046 on stmt: jump 240
2023-08-13 11:42:42,046 ==== SSA block analysis pass on 242
2023-08-13 11:42:42,046 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6967059D0>
2023-08-13 11:42:42,047 on stmt: $242return_value.1.1 = cast(value=out0)
2023-08-13 11:42:42,047 on stmt: return $242return_value.1.1
2023-08-13 11:42:42,047 ==== SSA block analysis pass on 240
2023-08-13 11:42:42,047 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6967059D0>
2023-08-13 11:42:42,047 on stmt: $const6.1 = const(int, 0)
2023-08-13 11:42:42,047 on stmt: stencil_index = $const6.1 + index00
2023-08-13 11:42:42,047 on stmt: $8binary_subscr.2 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:42,047 on stmt: $const20.4 = const(int, -1)
2023-08-13 11:42:42,047 on stmt: stencil_index.1 = $const20.4 + index00
2023-08-13 11:42:42,047 on stmt: $22binary_subscr.5 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2023-08-13 11:42:42,047 on stmt: $32compare_op.6 = $8binary_subscr.2 > $22binary_subscr.5
2023-08-13 11:42:42,047 on stmt: $const40.8 = const(int, 0)
2023-08-13 11:42:42,047 on stmt: stencil_index.2 = $const40.8 + index00
2023-08-13 11:42:42,048 on stmt: $42binary_subscr.9 = getitem(value=x, index=stencil_index.2, fn=<built-in function getitem>)
2023-08-13 11:42:42,048 on stmt: $const54.11 = const(int, 1)
2023-08-13 11:42:42,048 on stmt: stencil_index.3 = $const54.11 + index00
2023-08-13 11:42:42,048 on stmt: $56binary_subscr.12 = getitem(value=x, index=stencil_index.3, fn=<built-in function getitem>)
2023-08-13 11:42:42,048 on stmt: $66compare_op.13 = $42binary_subscr.9 >= $56binary_subscr.12
2023-08-13 11:42:42,048 on stmt: $binop_and_72.14 = $32compare_op.6 & $66compare_op.13
2023-08-13 11:42:42,048 on stmt: $76return_value.15 = cast(value=$binop_and_72.14)
2023-08-13 11:42:42,048 on stmt: out0[index00] = $76return_value.15
2023-08-13 11:42:42,048 on stmt: jump 241
2023-08-13 11:42:42,048 ==== SSA block analysis pass on 241
2023-08-13 11:42:42,048 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6967059D0>
2023-08-13 11:42:42,048 on stmt: jump 230
2023-08-13 11:42:42,049 defs defaultdict(<class 'list'>,
            {'$102build_slice.13.1': [<numba.core.ir.Assign object at 0x000001F69670E650>],
             '$102build_slice.14.1': [<numba.core.ir.Assign object at 0x000001F69670E590>],
             '$116build_slice.19.1': [<numba.core.ir.Assign object at 0x000001F69670FC90>],
             '$116build_slice.20.1': [<numba.core.ir.Assign object at 0x000001F69670C610>],
             '$122load_global.21.1': [<numba.core.ir.Assign object at 0x000001F69670D450>],
             '$134load_global.23.1': [<numba.core.ir.Assign object at 0x000001F69670CF50>],
             '$154call.27.1': [<numba.core.ir.Assign object at 0x000001F69670F490>],
             '$164unary_negative.28.1': [<numba.core.ir.Assign object at 0x000001F69670DA90>],
             '$170binary_subscr.31.1': [<numba.core.ir.Assign object at 0x000001F69632F090>],
             '$180load_global.32.1': [<numba.core.ir.Assign object at 0x000001F69632F650>],
             '$18load_global.2.1': [<numba.core.ir.Assign object at 0x000001F69670DDD0>],
             '$200call.36.1': [<numba.core.ir.Assign object at 0x000001F69632EB10>],
             '$218call.38.1': [<numba.core.ir.Assign object at 0x000001F696747C50>],
             '$228get_iter.39.1': [<numba.core.ir.Assign object at 0x000001F696747150>],
             '$22binary_subscr.5': [<numba.core.ir.Assign object at 0x000001F6967228D0>],
             '$230for_iter.1.1': [<numba.core.ir.Assign object at 0x000001F696747750>],
             '$230for_iter.2.1': [<numba.core.ir.Assign object at 0x000001F696747890>],
             '$230for_iter.3.1': [<numba.core.ir.Assign object at 0x000001F696747990>],
             '$242return_value.1.1': [<numba.core.ir.Assign object at 0x000001F696746AD0>],
             '$30load_method.4.1': [<numba.core.ir.Assign object at 0x000001F69670D610>],
             '$32compare_op.6': [<numba.core.ir.Assign object at 0x000001F696727110>],
             '$42binary_subscr.9': [<numba.core.ir.Assign object at 0x000001F6967226D0>],
             '$54load_global.6.1': [<numba.core.ir.Assign object at 0x000001F69670CA50>],
             '$56binary_subscr.12': [<numba.core.ir.Assign object at 0x000001F696721F90>],
             '$66compare_op.13': [<numba.core.ir.Assign object at 0x000001F696EA0590>],
             '$66load_attr.7.1': [<numba.core.ir.Assign object at 0x000001F69670FD10>],
             '$76return_value.15': [<numba.core.ir.Assign object at 0x000001F696E71210>],
             '$8binary_subscr.2': [<numba.core.ir.Assign object at 0x000001F696723450>],
             '$binop_and_72.14': [<numba.core.ir.Assign object at 0x000001F696E72B10>],
             '$binop_sub210.37.1': [<numba.core.ir.Assign object at 0x000001F696747ED0>],
             '$const100.12.1': [<numba.core.ir.Assign object at 0x000001F69670E550>],
             '$const108.15.1': [<numba.core.ir.Assign object at 0x000001F69670F350>],
             '$const112.17.1': [<numba.core.ir.Assign object at 0x000001F69670F5D0>],
             '$const114.18.1': [<numba.core.ir.Assign object at 0x000001F69670FED0>],
             '$const146.25.1': [<numba.core.ir.Assign object at 0x000001F69670CE90>],
             '$const148.26.1': [<numba.core.ir.Assign object at 0x000001F69670C450>],
             '$const168.30.1': [<numba.core.ir.Assign object at 0x000001F69670D110>],
             '$const192.34.1': [<numba.core.ir.Assign object at 0x000001F69632EBD0>],
             '$const194.35.1': [<numba.core.ir.Assign object at 0x000001F69632DCD0>],
             '$const20.4': [<numba.core.ir.Assign object at 0x000001F696CA3BD0>],
             '$const40.8': [<numba.core.ir.Assign object at 0x000001F696725CD0>],
             '$const54.11': [<numba.core.ir.Assign object at 0x000001F696EA0850>],
             '$const6.1': [<numba.core.ir.Assign object at 0x000001F696CDC5D0>],
             '$const94.9.1': [<numba.core.ir.Assign object at 0x000001F69670E210>],
             '$const98.11.1': [<numba.core.ir.Assign object at 0x000001F69670DCD0>],
             '$phi230.0.1': [<numba.core.ir.Assign object at 0x000001F69670D590>],
             '$phi232.1.1': [<numba.core.ir.Assign object at 0x000001F69670CD50>],
             'full_shape0': [<numba.core.ir.Assign object at 0x000001F69670F090>],
             'index00': [<numba.core.ir.Assign object at 0x000001F696746C10>],
             'out0': [<numba.core.ir.Assign object at 0x000001F69670F590>],
             'stencil_index': [<numba.core.ir.Assign object at 0x000001F696723390>],
             'stencil_index.1': [<numba.core.ir.Assign object at 0x000001F696722990>],
             'stencil_index.2': [<numba.core.ir.Assign object at 0x000001F6967235D0>],
             'stencil_index.3': [<numba.core.ir.Assign object at 0x000001F696722210>],
             'x': [<numba.core.ir.Assign object at 0x000001F6963D0950>]})
2023-08-13 11:42:42,050 SSA violators set()
2023-08-13 11:42:42,475 bytecode dump:
>          0	NOP(arg=None, lineno=1063)
           2	RESUME(arg=0, lineno=1063)
           4	LOAD_GLOBAL(arg=1, lineno=1077)
          16	LOAD_FAST(arg=0, lineno=1077)
          18	PRECALL(arg=1, lineno=1077)
          22	CALL(arg=1, lineno=1077)
          32	LOAD_FAST(arg=1, lineno=1077)
          34	LOAD_CONST(arg=1, lineno=1077)
          36	LOAD_CONST(arg=1, lineno=1077)
          38	BUILD_SLICE(arg=2, lineno=1077)
          40	STORE_SUBSCR(arg=None, lineno=1077)
          44	LOAD_CONST(arg=1, lineno=1077)
          46	RETURN_VALUE(arg=None, lineno=1077)
2023-08-13 11:42:42,475 pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-13 11:42:42,475 stack: []
2023-08-13 11:42:42,475 state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-13 11:42:42,475 dispatch pc=0, inst=NOP(arg=None, lineno=1063)
2023-08-13 11:42:42,475 stack []
2023-08-13 11:42:42,475 dispatch pc=2, inst=RESUME(arg=0, lineno=1063)
2023-08-13 11:42:42,475 stack []
2023-08-13 11:42:42,475 dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=1077)
2023-08-13 11:42:42,475 stack []
2023-08-13 11:42:42,475 dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1077)
2023-08-13 11:42:42,476 stack ['$null$4.1', '$4load_global.0']
2023-08-13 11:42:42,476 dispatch pc=18, inst=PRECALL(arg=1, lineno=1077)
2023-08-13 11:42:42,476 stack ['$null$4.1', '$4load_global.0', '$x16.2']
2023-08-13 11:42:42,476 dispatch pc=22, inst=CALL(arg=1, lineno=1077)
2023-08-13 11:42:42,476 stack ['$null$4.1', '$4load_global.0', '$x16.2']
2023-08-13 11:42:42,476 dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=1077)
2023-08-13 11:42:42,476 stack ['$22call.3']
2023-08-13 11:42:42,476 dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=1077)
2023-08-13 11:42:42,476 stack ['$22call.3', '$y32.4']
2023-08-13 11:42:42,476 dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=1077)
2023-08-13 11:42:42,477 stack ['$22call.3', '$y32.4', '$const34.5']
2023-08-13 11:42:42,477 dispatch pc=38, inst=BUILD_SLICE(arg=2, lineno=1077)
2023-08-13 11:42:42,477 stack ['$22call.3', '$y32.4', '$const34.5', '$const36.6']
2023-08-13 11:42:42,477 dispatch pc=40, inst=STORE_SUBSCR(arg=None, lineno=1077)
2023-08-13 11:42:42,477 stack ['$22call.3', '$y32.4', '$38build_slice.8']
2023-08-13 11:42:42,477 dispatch pc=44, inst=LOAD_CONST(arg=1, lineno=1077)
2023-08-13 11:42:42,477 stack []
2023-08-13 11:42:42,477 dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=1077)
2023-08-13 11:42:42,477 stack ['$const44.9']
2023-08-13 11:42:42,477 end state. edges=[]
2023-08-13 11:42:42,477 -------------------------Prune PHIs-------------------------
2023-08-13 11:42:42,478 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-08-13 11:42:42,478 defmap: {}
2023-08-13 11:42:42,478 phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:42,478 changing phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:42,478 keep phismap: {}
2023-08-13 11:42:42,478 new_out: defaultdict(<class 'dict'>, {})
2023-08-13 11:42:42,478 ----------------------DONE Prune PHIs-----------------------
2023-08-13 11:42:42,478 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'res': '$x16.2'}), (18, {}), (20, {}), (22, {'func': '$4load_global.0', 'args': ['$x16.2'], 'kw_names': None, 'res': '$22call.3'}), (24, {}), (26, {}), (28, {}), (30, {}), (32, {'res': '$y32.4'}), (34, {'res': '$const34.5'}), (36, {'res': '$const36.6'}), (38, {'start': '$const34.5', 'stop': '$const36.6', 'step': None, 'res': '$38build_slice.8', 'slicevar': '$38build_slice.7'}), (40, {'target': '$y32.4', 'index': '$38build_slice.8', 'value': '$22call.3'}), (42, {}), (44, {'res': '$const44.9'}), (46, {'retval': '$const44.9', 'castval': '$46return_value.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:42,480 label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $4load_global.0 = global(_localmax_sten: <numba.stencils.stencil.StencilFunc object at 0x000001F696E760D0>) ['$4load_global.0']
    $22call.3 = call $4load_global.0(x, func=$4load_global.0, args=[Var(x, utils.py:1063)], kws=(), vararg=None, varkwarg=None, target=None) ['$22call.3', '$4load_global.0', 'x']
    $const34.5 = const(NoneType, None)       ['$const34.5']
    $const36.6 = const(NoneType, None)       ['$const36.6']
    $38build_slice.7 = global(slice: <class 'slice'>) ['$38build_slice.7']
    $38build_slice.8 = call $38build_slice.7($const34.5, $const36.6, func=$38build_slice.7, args=(Var($const34.5, utils.py:1077), Var($const36.6, utils.py:1077)), kws=(), vararg=None, varkwarg=None, target=None) ['$38build_slice.7', '$38build_slice.8', '$const34.5', '$const36.6']
    y[$38build_slice.8] = $22call.3          ['$22call.3', '$38build_slice.8', 'y']
    $const44.9 = const(NoneType, None)       ['$const44.9']
    $46return_value.10 = cast(value=$const44.9) ['$46return_value.10', '$const44.9']
    return $46return_value.10                ['$46return_value.10']

2023-08-13 11:42:42,488 ==== SSA block analysis pass on 0
2023-08-13 11:42:42,488 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696B6D7D0>
2023-08-13 11:42:42,488 on stmt: x = arg(0, name=x)
2023-08-13 11:42:42,488 on stmt: y = arg(1, name=y)
2023-08-13 11:42:42,488 on stmt: $4load_global.0 = global(_localmax_sten: <numba.stencils.stencil.StencilFunc object at 0x000001F696E760D0>)
2023-08-13 11:42:42,488 on stmt: $22call.3 = call $4load_global.0(x, func=$4load_global.0, args=[Var(x, utils.py:1063)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:42,488 on stmt: $const34.5 = const(NoneType, None)
2023-08-13 11:42:42,488 on stmt: $const36.6 = const(NoneType, None)
2023-08-13 11:42:42,488 on stmt: $38build_slice.7 = global(slice: <class 'slice'>)
2023-08-13 11:42:42,488 on stmt: $38build_slice.8 = call $38build_slice.7($const34.5, $const36.6, func=$38build_slice.7, args=(Var($const34.5, utils.py:1077), Var($const36.6, utils.py:1077)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:42,489 on stmt: y[slice(None, None, None)] = $22call.3
2023-08-13 11:42:42,489 on stmt: $const44.9 = const(NoneType, None)
2023-08-13 11:42:42,489 on stmt: $46return_value.10 = cast(value=$const44.9)
2023-08-13 11:42:42,489 on stmt: return $46return_value.10
2023-08-13 11:42:42,489 defs defaultdict(<class 'list'>,
            {'$22call.3': [<numba.core.ir.Assign object at 0x000001F696B6FE10>],
             '$38build_slice.7': [<numba.core.ir.Assign object at 0x000001F696B6F850>],
             '$38build_slice.8': [<numba.core.ir.Assign object at 0x000001F696B6F7D0>],
             '$46return_value.10': [<numba.core.ir.Assign object at 0x000001F697000690>],
             '$4load_global.0': [<numba.core.ir.Assign object at 0x000001F696B6F290>],
             '$const34.5': [<numba.core.ir.Assign object at 0x000001F696B6F450>],
             '$const36.6': [<numba.core.ir.Assign object at 0x000001F696B6EED0>],
             '$const44.9': [<numba.core.ir.Assign object at 0x000001F696DE6F50>],
             'x': [<numba.core.ir.Assign object at 0x000001F696B6D950>],
             'y': [<numba.core.ir.Assign object at 0x000001F696B6E310>]})
2023-08-13 11:42:42,489 SSA violators set()
2023-08-13 11:42:42,516 bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	RESUME(arg=0, lineno=1)
           4	LOAD_FAST(arg=0, lineno=2)
           6	LOAD_ATTR(arg=0, lineno=2)
          16	STORE_FAST(arg=1, lineno=2)
          18	LOAD_GLOBAL(arg=2, lineno=3)
          30	LOAD_METHOD(arg=2, lineno=3)
          52	LOAD_FAST(arg=1, lineno=3)
          54	LOAD_GLOBAL(arg=2, lineno=3)
          66	LOAD_ATTR(arg=3, lineno=3)
          76	KW_NAMES(arg=1, lineno=3)
          78	PRECALL(arg=2, lineno=3)
          82	CALL(arg=2, lineno=3)
          92	STORE_FAST(arg=2, lineno=3)
          94	LOAD_CONST(arg=2, lineno=4)
          96	LOAD_FAST(arg=2, lineno=4)
          98	LOAD_CONST(arg=0, lineno=4)
         100	LOAD_CONST(arg=3, lineno=4)
         102	BUILD_SLICE(arg=2, lineno=4)
         104	STORE_SUBSCR(arg=None, lineno=4)
         108	LOAD_CONST(arg=2, lineno=5)
         110	LOAD_FAST(arg=2, lineno=5)
         112	LOAD_CONST(arg=4, lineno=5)
         114	LOAD_CONST(arg=0, lineno=5)
         116	BUILD_SLICE(arg=2, lineno=5)
         118	STORE_SUBSCR(arg=None, lineno=5)
         122	LOAD_GLOBAL(arg=9, lineno=6)
         134	LOAD_GLOBAL(arg=11, lineno=6)
         146	LOAD_CONST(arg=2, lineno=6)
         148	LOAD_CONST(arg=4, lineno=6)
         150	PRECALL(arg=2, lineno=6)
         154	CALL(arg=2, lineno=6)
         164	UNARY_NEGATIVE(arg=None, lineno=6)
         166	LOAD_FAST(arg=1, lineno=6)
         168	LOAD_CONST(arg=2, lineno=6)
         170	BINARY_SUBSCR(arg=None, lineno=6)
         180	LOAD_GLOBAL(arg=13, lineno=6)
         192	LOAD_CONST(arg=2, lineno=6)
         194	LOAD_CONST(arg=3, lineno=6)
         196	PRECALL(arg=2, lineno=6)
         200	CALL(arg=2, lineno=6)
         210	BINARY_OP(arg=10, lineno=6)
         214	PRECALL(arg=2, lineno=6)
         218	CALL(arg=2, lineno=6)
         228	GET_ITER(arg=None, lineno=6)
>        230	FOR_ITER(arg=4, lineno=6)
         232	STORE_FAST(arg=3, lineno=6)
         234	LOAD_CONST(arg=2, lineno=7)
         236	STORE_FAST(arg=4, lineno=7)
         238	JUMP_BACKWARD(arg=5, lineno=7)
>        240	LOAD_FAST(arg=2, lineno=8)
         242	RETURN_VALUE(arg=None, lineno=8)
2023-08-13 11:42:42,516 pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-13 11:42:42,516 stack: []
2023-08-13 11:42:42,516 state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-13 11:42:42,516 dispatch pc=0, inst=NOP(arg=None, lineno=1)
2023-08-13 11:42:42,516 stack []
2023-08-13 11:42:42,516 dispatch pc=2, inst=RESUME(arg=0, lineno=1)
2023-08-13 11:42:42,517 stack []
2023-08-13 11:42:42,517 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2)
2023-08-13 11:42:42,517 stack []
2023-08-13 11:42:42,517 dispatch pc=6, inst=LOAD_ATTR(arg=0, lineno=2)
2023-08-13 11:42:42,517 stack ['$x4.0']
2023-08-13 11:42:42,517 dispatch pc=16, inst=STORE_FAST(arg=1, lineno=2)
2023-08-13 11:42:42,517 stack ['$6load_attr.1']
2023-08-13 11:42:42,517 dispatch pc=18, inst=LOAD_GLOBAL(arg=2, lineno=3)
2023-08-13 11:42:42,518 stack []
2023-08-13 11:42:42,518 dispatch pc=30, inst=LOAD_METHOD(arg=2, lineno=3)
2023-08-13 11:42:42,518 stack ['$18load_global.2']
2023-08-13 11:42:42,518 dispatch pc=52, inst=LOAD_FAST(arg=1, lineno=3)
2023-08-13 11:42:42,518 stack ['$null$30.3', '$30load_method.4']
2023-08-13 11:42:42,518 dispatch pc=54, inst=LOAD_GLOBAL(arg=2, lineno=3)
2023-08-13 11:42:42,518 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5']
2023-08-13 11:42:42,519 dispatch pc=66, inst=LOAD_ATTR(arg=3, lineno=3)
2023-08-13 11:42:42,519 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$54load_global.6']
2023-08-13 11:42:42,519 dispatch pc=76, inst=KW_NAMES(arg=1, lineno=3)
2023-08-13 11:42:42,519 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$66load_attr.7']
2023-08-13 11:42:42,519 dispatch pc=78, inst=PRECALL(arg=2, lineno=3)
2023-08-13 11:42:42,519 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$66load_attr.7']
2023-08-13 11:42:42,519 dispatch pc=82, inst=CALL(arg=2, lineno=3)
2023-08-13 11:42:42,519 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$66load_attr.7']
2023-08-13 11:42:42,519 dispatch pc=92, inst=STORE_FAST(arg=2, lineno=3)
2023-08-13 11:42:42,519 stack ['$82call.8']
2023-08-13 11:42:42,519 dispatch pc=94, inst=LOAD_CONST(arg=2, lineno=4)
2023-08-13 11:42:42,520 stack []
2023-08-13 11:42:42,520 dispatch pc=96, inst=LOAD_FAST(arg=2, lineno=4)
2023-08-13 11:42:42,520 stack ['$const94.9']
2023-08-13 11:42:42,520 dispatch pc=98, inst=LOAD_CONST(arg=0, lineno=4)
2023-08-13 11:42:42,520 stack ['$const94.9', '$out096.10']
2023-08-13 11:42:42,520 dispatch pc=100, inst=LOAD_CONST(arg=3, lineno=4)
2023-08-13 11:42:42,520 stack ['$const94.9', '$out096.10', '$const98.11']
2023-08-13 11:42:42,520 dispatch pc=102, inst=BUILD_SLICE(arg=2, lineno=4)
2023-08-13 11:42:42,520 stack ['$const94.9', '$out096.10', '$const98.11', '$const100.12']
2023-08-13 11:42:42,520 dispatch pc=104, inst=STORE_SUBSCR(arg=None, lineno=4)
2023-08-13 11:42:42,520 stack ['$const94.9', '$out096.10', '$102build_slice.14']
2023-08-13 11:42:42,520 dispatch pc=108, inst=LOAD_CONST(arg=2, lineno=5)
2023-08-13 11:42:42,520 stack []
2023-08-13 11:42:42,520 dispatch pc=110, inst=LOAD_FAST(arg=2, lineno=5)
2023-08-13 11:42:42,520 stack ['$const108.15']
2023-08-13 11:42:42,520 dispatch pc=112, inst=LOAD_CONST(arg=4, lineno=5)
2023-08-13 11:42:42,521 stack ['$const108.15', '$out0110.16']
2023-08-13 11:42:42,521 dispatch pc=114, inst=LOAD_CONST(arg=0, lineno=5)
2023-08-13 11:42:42,521 stack ['$const108.15', '$out0110.16', '$const112.17']
2023-08-13 11:42:42,521 dispatch pc=116, inst=BUILD_SLICE(arg=2, lineno=5)
2023-08-13 11:42:42,521 stack ['$const108.15', '$out0110.16', '$const112.17', '$const114.18']
2023-08-13 11:42:42,521 dispatch pc=118, inst=STORE_SUBSCR(arg=None, lineno=5)
2023-08-13 11:42:42,521 stack ['$const108.15', '$out0110.16', '$116build_slice.20']
2023-08-13 11:42:42,521 dispatch pc=122, inst=LOAD_GLOBAL(arg=9, lineno=6)
2023-08-13 11:42:42,521 stack []
2023-08-13 11:42:42,521 dispatch pc=134, inst=LOAD_GLOBAL(arg=11, lineno=6)
2023-08-13 11:42:42,521 stack ['$null$122.22', '$122load_global.21']
2023-08-13 11:42:42,521 dispatch pc=146, inst=LOAD_CONST(arg=2, lineno=6)
2023-08-13 11:42:42,521 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23']
2023-08-13 11:42:42,521 dispatch pc=148, inst=LOAD_CONST(arg=4, lineno=6)
2023-08-13 11:42:42,522 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23', '$const146.25']
2023-08-13 11:42:42,522 dispatch pc=150, inst=PRECALL(arg=2, lineno=6)
2023-08-13 11:42:42,522 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23', '$const146.25', '$const148.26']
2023-08-13 11:42:42,522 dispatch pc=154, inst=CALL(arg=2, lineno=6)
2023-08-13 11:42:42,522 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23', '$const146.25', '$const148.26']
2023-08-13 11:42:42,522 dispatch pc=164, inst=UNARY_NEGATIVE(arg=None, lineno=6)
2023-08-13 11:42:42,522 stack ['$null$122.22', '$122load_global.21', '$154call.27']
2023-08-13 11:42:42,522 dispatch pc=166, inst=LOAD_FAST(arg=1, lineno=6)
2023-08-13 11:42:42,522 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28']
2023-08-13 11:42:42,522 dispatch pc=168, inst=LOAD_CONST(arg=2, lineno=6)
2023-08-13 11:42:42,522 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$full_shape0166.29']
2023-08-13 11:42:42,522 dispatch pc=170, inst=BINARY_SUBSCR(arg=None, lineno=6)
2023-08-13 11:42:42,522 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$full_shape0166.29', '$const168.30']
2023-08-13 11:42:42,522 dispatch pc=180, inst=LOAD_GLOBAL(arg=13, lineno=6)
2023-08-13 11:42:42,523 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31']
2023-08-13 11:42:42,523 dispatch pc=192, inst=LOAD_CONST(arg=2, lineno=6)
2023-08-13 11:42:42,523 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32']
2023-08-13 11:42:42,523 dispatch pc=194, inst=LOAD_CONST(arg=3, lineno=6)
2023-08-13 11:42:42,523 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32', '$const192.34']
2023-08-13 11:42:42,523 dispatch pc=196, inst=PRECALL(arg=2, lineno=6)
2023-08-13 11:42:42,523 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32', '$const192.34', '$const194.35']
2023-08-13 11:42:42,523 dispatch pc=200, inst=CALL(arg=2, lineno=6)
2023-08-13 11:42:42,523 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32', '$const192.34', '$const194.35']
2023-08-13 11:42:42,523 dispatch pc=210, inst=BINARY_OP(arg=10, lineno=6)
2023-08-13 11:42:42,523 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$200call.36']
2023-08-13 11:42:42,523 dispatch pc=214, inst=PRECALL(arg=2, lineno=6)
2023-08-13 11:42:42,523 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$binop_sub210.37']
2023-08-13 11:42:42,524 dispatch pc=218, inst=CALL(arg=2, lineno=6)
2023-08-13 11:42:42,524 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$binop_sub210.37']
2023-08-13 11:42:42,524 dispatch pc=228, inst=GET_ITER(arg=None, lineno=6)
2023-08-13 11:42:42,524 stack ['$218call.38']
2023-08-13 11:42:42,524 end state. edges=[Edge(pc=230, stack=('$228get_iter.39',), blockstack=(), npush=0)]
2023-08-13 11:42:42,524 pending: deque([State(pc_initial=230 nstack_initial=1)])
2023-08-13 11:42:42,524 stack: ['$phi230.0']
2023-08-13 11:42:42,524 state.pc_initial: State(pc_initial=230 nstack_initial=1)
2023-08-13 11:42:42,524 dispatch pc=230, inst=FOR_ITER(arg=4, lineno=6)
2023-08-13 11:42:42,524 stack ['$phi230.0']
2023-08-13 11:42:42,524 end state. edges=[Edge(pc=240, stack=(), blockstack=(), npush=0), Edge(pc=232, stack=('$phi230.0', '$230for_iter.2'), blockstack=(), npush=0)]
2023-08-13 11:42:42,524 pending: deque([State(pc_initial=240 nstack_initial=0), State(pc_initial=232 nstack_initial=2)])
2023-08-13 11:42:42,524 stack: []
2023-08-13 11:42:42,524 state.pc_initial: State(pc_initial=240 nstack_initial=0)
2023-08-13 11:42:42,525 dispatch pc=240, inst=LOAD_FAST(arg=2, lineno=8)
2023-08-13 11:42:42,525 stack []
2023-08-13 11:42:42,525 dispatch pc=242, inst=RETURN_VALUE(arg=None, lineno=8)
2023-08-13 11:42:42,525 stack ['$out0240.0']
2023-08-13 11:42:42,525 end state. edges=[]
2023-08-13 11:42:42,525 pending: deque([State(pc_initial=232 nstack_initial=2)])
2023-08-13 11:42:42,525 stack: ['$phi232.0', '$phi232.1']
2023-08-13 11:42:42,525 state.pc_initial: State(pc_initial=232 nstack_initial=2)
2023-08-13 11:42:42,525 dispatch pc=232, inst=STORE_FAST(arg=3, lineno=6)
2023-08-13 11:42:42,525 stack ['$phi232.0', '$phi232.1']
2023-08-13 11:42:42,525 dispatch pc=234, inst=LOAD_CONST(arg=2, lineno=7)
2023-08-13 11:42:42,525 stack ['$phi232.0']
2023-08-13 11:42:42,525 dispatch pc=236, inst=STORE_FAST(arg=4, lineno=7)
2023-08-13 11:42:42,525 stack ['$phi232.0', '$const234.2']
2023-08-13 11:42:42,525 dispatch pc=238, inst=JUMP_BACKWARD(arg=5, lineno=7)
2023-08-13 11:42:42,525 stack ['$phi232.0']
2023-08-13 11:42:42,526 end state. edges=[Edge(pc=230, stack=('$phi232.0',), blockstack=(), npush=0)]
2023-08-13 11:42:42,526 pending: deque([State(pc_initial=230 nstack_initial=1)])
2023-08-13 11:42:42,526 -------------------------Prune PHIs-------------------------
2023-08-13 11:42:42,526 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=230 nstack_initial=1): {'$phi230.0'},
             State(pc_initial=232 nstack_initial=2): {'$phi232.1'},
             State(pc_initial=240 nstack_initial=0): set()})
2023-08-13 11:42:42,526 defmap: {'$phi230.0': State(pc_initial=0 nstack_initial=0),
 '$phi232.1': State(pc_initial=230 nstack_initial=1)}
2023-08-13 11:42:42,526 phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi232.0',
                            State(pc_initial=232 nstack_initial=2))},
             '$phi232.0': {('$phi230.0',
                            State(pc_initial=230 nstack_initial=1))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:42,527 changing phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi230.0',
                            State(pc_initial=230 nstack_initial=1))},
             '$phi232.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:42,527 changing phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:42,527 changing phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:42,527 keep phismap: {'$phi230.0': {('$228get_iter.39', State(pc_initial=0 nstack_initial=0))},
 '$phi232.1': {('$230for_iter.2', State(pc_initial=230 nstack_initial=1))}}
2023-08-13 11:42:42,527 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi230.0': '$228get_iter.39'},
             State(pc_initial=230 nstack_initial=1): {'$phi232.1': '$230for_iter.2'}})
2023-08-13 11:42:42,528 ----------------------DONE Prune PHIs-----------------------
2023-08-13 11:42:42,528 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$x4.0'}), (6, {'item': '$x4.0', 'res': '$6load_attr.1'}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'value': '$6load_attr.1'}), (18, {'idx': 1, 'res': '$18load_global.2'}), (20, {}), (22, {}), (24, {}), (26, {}), (28, {}), (30, {'item': '$18load_global.2', 'res': '$30load_method.4'}), (32, {}), (34, {}), (36, {}), (38, {}), (40, {}), (42, {}), (44, {}), (46, {}), (48, {}), (50, {}), (52, {'res': '$full_shape052.5'}), (54, {'idx': 1, 'res': '$54load_global.6'}), (56, {}), (58, {}), (60, {}), (62, {}), (64, {}), (66, {'item': '$54load_global.6', 'res': '$66load_attr.7'}), (68, {}), (70, {}), (72, {}), (74, {}), (78, {}), (80, {}), (82, {'func': '$30load_method.4', 'args': ['$full_shape052.5', '$66load_attr.7'], 'kw_names': 1, 'res': '$82call.8'}), (84, {}), (86, {}), (88, {}), (90, {}), (92, {'value': '$82call.8'}), (94, {'res': '$const94.9'}), (96, {'res': '$out096.10'}), (98, {'res': '$const98.11'}), (100, {'res': '$const100.12'}), (102, {'start': '$const98.11', 'stop': '$const100.12', 'step': None, 'res': '$102build_slice.14', 'slicevar': '$102build_slice.13'}), (104, {'target': '$out096.10', 'index': '$102build_slice.14', 'value': '$const94.9'}), (106, {}), (108, {'res': '$const108.15'}), (110, {'res': '$out0110.16'}), (112, {'res': '$const112.17'}), (114, {'res': '$const114.18'}), (116, {'start': '$const112.17', 'stop': '$const114.18', 'step': None, 'res': '$116build_slice.20', 'slicevar': '$116build_slice.19'}), (118, {'target': '$out0110.16', 'index': '$116build_slice.20', 'value': '$const108.15'}), (120, {}), (122, {'idx': 4, 'res': '$122load_global.21'}), (124, {}), (126, {}), (128, {}), (130, {}), (132, {}), (134, {'idx': 5, 'res': '$134load_global.23'}), (136, {}), (138, {}), (140, {}), (142, {}), (144, {}), (146, {'res': '$const146.25'}), (148, {'res': '$const148.26'}), (150, {}), (152, {}), (154, {'func': '$134load_global.23', 'args': ['$const146.25', '$const148.26'], 'kw_names': None, 'res': '$154call.27'}), (156, {}), (158, {}), (160, {}), (162, {}), (164, {'value': '$154call.27', 'res': '$164unary_negative.28'}), (166, {'res': '$full_shape0166.29'}), (168, {'res': '$const168.30'}), (170, {'index': '$const168.30', 'target': '$full_shape0166.29', 'res': '$170binary_subscr.31'}), (172, {}), (174, {}), (176, {}), (178, {}), (180, {'idx': 6, 'res': '$180load_global.32'}), (182, {}), (184, {}), (186, {}), (188, {}), (190, {}), (192, {'res': '$const192.34'}), (194, {'res': '$const194.35'}), (196, {}), (198, {}), (200, {'func': '$180load_global.32', 'args': ['$const192.34', '$const194.35'], 'kw_names': None, 'res': '$200call.36'}), (202, {}), (204, {}), (206, {}), (208, {}), (210, {'op': '-', 'lhs': '$170binary_subscr.31', 'rhs': '$200call.36', 'res': '$binop_sub210.37'}), (212, {}), (214, {}), (216, {}), (218, {'func': '$122load_global.21', 'args': ['$164unary_negative.28', '$binop_sub210.37'], 'kw_names': None, 'res': '$218call.38'}), (220, {}), (222, {}), (224, {}), (226, {}), (228, {'value': '$218call.38', 'res': '$228get_iter.39'})), outgoing_phis={'$phi230.0': '$228get_iter.39'}, blockstack=(), active_try_block=None, outgoing_edgepushed={230: ('$228get_iter.39',)})
2023-08-13 11:42:42,528 block_infos State(pc_initial=230 nstack_initial=1):
AdaptBlockInfo(insts=((230, {'iterator': '$phi230.0', 'pair': '$230for_iter.1', 'indval': '$230for_iter.2', 'pred': '$230for_iter.3'}),), outgoing_phis={'$phi232.1': '$230for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={240: (), 232: ('$phi230.0', '$230for_iter.2')})
2023-08-13 11:42:42,528 block_infos State(pc_initial=232 nstack_initial=2):
AdaptBlockInfo(insts=((232, {'value': '$phi232.1'}), (234, {'res': '$const234.2'}), (236, {'value': '$const234.2'}), (238, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={230: ('$phi232.0',)})
2023-08-13 11:42:42,528 block_infos State(pc_initial=240 nstack_initial=0):
AdaptBlockInfo(insts=((240, {'res': '$out0240.0'}), (242, {'retval': '$out0240.0', 'castval': '$242return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:42,530 label 0:
    x = arg(0, name=x)                       ['x']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $18load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>) ['$18load_global.2']
    $30load_method.4 = getattr(value=$18load_global.2, attr=empty) ['$18load_global.2', '$30load_method.4']
    $54load_global.6 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>) ['$54load_global.6']
    $66load_attr.7 = getattr(value=$54load_global.6, attr=bool_) ['$54load_global.6', '$66load_attr.7']
    out0 = call $30load_method.4(full_shape0, func=$30load_method.4, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($66load_attr.7, <string>:3))], vararg=None, varkwarg=None, target=None) ['$30load_method.4', '$66load_attr.7', 'full_shape0', 'out0']
    $const94.9 = const(int, 0)               ['$const94.9']
    $const98.11 = const(NoneType, None)      ['$const98.11']
    $const100.12 = const(int, 1)             ['$const100.12']
    $102build_slice.13 = global(slice: <class 'slice'>) ['$102build_slice.13']
    $102build_slice.14 = call $102build_slice.13($const98.11, $const100.12, func=$102build_slice.13, args=(Var($const98.11, <string>:4), Var($const100.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$102build_slice.13', '$102build_slice.14', '$const100.12', '$const98.11']
    out0[$102build_slice.14] = $const94.9    ['$102build_slice.14', '$const94.9', 'out0']
    $const108.15 = const(int, 0)             ['$const108.15']
    $const112.17 = const(int, -1)            ['$const112.17']
    $const114.18 = const(NoneType, None)     ['$const114.18']
    $116build_slice.19 = global(slice: <class 'slice'>) ['$116build_slice.19']
    $116build_slice.20 = call $116build_slice.19($const112.17, $const114.18, func=$116build_slice.19, args=(Var($const112.17, <string>:5), Var($const114.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$116build_slice.19', '$116build_slice.20', '$const112.17', '$const114.18']
    out0[$116build_slice.20] = $const108.15  ['$116build_slice.20', '$const108.15', 'out0']
    $122load_global.21 = global(range: <class 'range'>) ['$122load_global.21']
    $134load_global.23 = global(min: <built-in function min>) ['$134load_global.23']
    $const146.25 = const(int, 0)             ['$const146.25']
    $const148.26 = const(int, -1)            ['$const148.26']
    $154call.27 = call $134load_global.23($const146.25, $const148.26, func=$134load_global.23, args=[Var($const146.25, <string>:6), Var($const148.26, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$134load_global.23', '$154call.27', '$const146.25', '$const148.26']
    $164unary_negative.28 = unary(fn=<built-in function neg>, value=$154call.27) ['$154call.27', '$164unary_negative.28']
    $const168.30 = const(int, 0)             ['$const168.30']
    $170binary_subscr.31 = getitem(value=full_shape0, index=$const168.30, fn=<built-in function getitem>) ['$170binary_subscr.31', '$const168.30', 'full_shape0']
    $180load_global.32 = global(max: <built-in function max>) ['$180load_global.32']
    $const192.34 = const(int, 0)             ['$const192.34']
    $const194.35 = const(int, 1)             ['$const194.35']
    $200call.36 = call $180load_global.32($const192.34, $const194.35, func=$180load_global.32, args=[Var($const192.34, <string>:6), Var($const194.35, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$180load_global.32', '$200call.36', '$const192.34', '$const194.35']
    $binop_sub210.37 = $170binary_subscr.31 - $200call.36 ['$170binary_subscr.31', '$200call.36', '$binop_sub210.37']
    $218call.38 = call $122load_global.21($164unary_negative.28, $binop_sub210.37, func=$122load_global.21, args=[Var($164unary_negative.28, <string>:6), Var($binop_sub210.37, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$122load_global.21', '$164unary_negative.28', '$218call.38', '$binop_sub210.37']
    $228get_iter.39 = getiter(value=$218call.38) ['$218call.38', '$228get_iter.39']
    $phi230.0 = $228get_iter.39              ['$228get_iter.39', '$phi230.0']
    jump 230                                 []
label 230:
    $230for_iter.1 = iternext(value=$phi230.0) ['$230for_iter.1', '$phi230.0']
    $230for_iter.2 = pair_first(value=$230for_iter.1) ['$230for_iter.1', '$230for_iter.2']
    $230for_iter.3 = pair_second(value=$230for_iter.1) ['$230for_iter.1', '$230for_iter.3']
    $phi232.1 = $230for_iter.2               ['$230for_iter.2', '$phi232.1']
    branch $230for_iter.3, 232, 240          ['$230for_iter.3']
label 232:
    index00 = $phi232.1                      ['$phi232.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 230                                 []
label 240:
    $242return_value.1 = cast(value=out0)    ['$242return_value.1', 'out0']
    return $242return_value.1                ['$242return_value.1']

2023-08-13 11:42:42,554 ==== SSA block analysis pass on 0
2023-08-13 11:42:42,555 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696DFDD10>
2023-08-13 11:42:42,555 on stmt: x = arg(0, name=x)
2023-08-13 11:42:42,555 on stmt: full_shape0 = getattr(value=x, attr=shape)
2023-08-13 11:42:42,555 on stmt: $18load_global.2.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:42,555 on stmt: $30load_method.4.1 = getattr(value=$18load_global.2.1, attr=empty)
2023-08-13 11:42:42,555 on stmt: $54load_global.6.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:42,555 on stmt: $66load_attr.7.1 = getattr(value=$54load_global.6.1, attr=bool_)
2023-08-13 11:42:42,555 on stmt: out0 = call $30load_method.4.1(full_shape0, func=$30load_method.4.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($66load_attr.7.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:42,555 on stmt: $const94.9.1 = const(int, 0)
2023-08-13 11:42:42,555 on stmt: $const98.11.1 = const(NoneType, None)
2023-08-13 11:42:42,555 on stmt: $const100.12.1 = const(int, 1)
2023-08-13 11:42:42,555 on stmt: $102build_slice.13.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:42,555 on stmt: $102build_slice.14.1 = call $102build_slice.13.1($const98.11.1, $const100.12.1, func=$102build_slice.13.1, args=(Var($const98.11.1, <string>:4), Var($const100.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:42,555 on stmt: out0[$102build_slice.14.1] = $const94.9.1
2023-08-13 11:42:42,555 on stmt: $const108.15.1 = const(int, 0)
2023-08-13 11:42:42,556 on stmt: $const112.17.1 = const(int, -1)
2023-08-13 11:42:42,556 on stmt: $const114.18.1 = const(NoneType, None)
2023-08-13 11:42:42,556 on stmt: $116build_slice.19.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:42,556 on stmt: $116build_slice.20.1 = call $116build_slice.19.1($const112.17.1, $const114.18.1, func=$116build_slice.19.1, args=(Var($const112.17.1, <string>:5), Var($const114.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:42,556 on stmt: out0[$116build_slice.20.1] = $const108.15.1
2023-08-13 11:42:42,556 on stmt: $122load_global.21.1 = global(range: <class 'range'>)
2023-08-13 11:42:42,556 on stmt: $134load_global.23.1 = global(min: <built-in function min>)
2023-08-13 11:42:42,556 on stmt: $const146.25.1 = const(int, 0)
2023-08-13 11:42:42,556 on stmt: $const148.26.1 = const(int, -1)
2023-08-13 11:42:42,556 on stmt: $154call.27.1 = call $134load_global.23.1($const146.25.1, $const148.26.1, func=$134load_global.23.1, args=[Var($const146.25.1, <string>:6), Var($const148.26.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:42,556 on stmt: $164unary_negative.28.1 = unary(fn=<built-in function neg>, value=$154call.27.1)
2023-08-13 11:42:42,556 on stmt: $const168.30.1 = const(int, 0)
2023-08-13 11:42:42,556 on stmt: $170binary_subscr.31.1 = getitem(value=full_shape0, index=$const168.30.1, fn=<built-in function getitem>)
2023-08-13 11:42:42,556 on stmt: $180load_global.32.1 = global(max: <built-in function max>)
2023-08-13 11:42:42,556 on stmt: $const192.34.1 = const(int, 0)
2023-08-13 11:42:42,557 on stmt: $const194.35.1 = const(int, 1)
2023-08-13 11:42:42,557 on stmt: $200call.36.1 = call $180load_global.32.1($const192.34.1, $const194.35.1, func=$180load_global.32.1, args=[Var($const192.34.1, <string>:6), Var($const194.35.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:42,557 on stmt: $binop_sub210.37.1 = $170binary_subscr.31.1 - $200call.36.1
2023-08-13 11:42:42,557 on stmt: $218call.38.1 = call $122load_global.21.1($164unary_negative.28.1, $binop_sub210.37.1, func=$122load_global.21.1, args=[Var($164unary_negative.28.1, <string>:6), Var($binop_sub210.37.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:42,557 on stmt: $228get_iter.39.1 = getiter(value=$218call.38.1)
2023-08-13 11:42:42,557 on stmt: $phi230.0.1 = $228get_iter.39.1
2023-08-13 11:42:42,557 on stmt: jump 230
2023-08-13 11:42:42,557 ==== SSA block analysis pass on 230
2023-08-13 11:42:42,557 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696DFDD10>
2023-08-13 11:42:42,557 on stmt: $230for_iter.1.1 = iternext(value=$phi230.0.1)
2023-08-13 11:42:42,557 on stmt: $230for_iter.2.1 = pair_first(value=$230for_iter.1.1)
2023-08-13 11:42:42,557 on stmt: $230for_iter.3.1 = pair_second(value=$230for_iter.1.1)
2023-08-13 11:42:42,557 on stmt: $phi232.1.1 = $230for_iter.2.1
2023-08-13 11:42:42,557 on stmt: branch $230for_iter.3.1, 232, 242
2023-08-13 11:42:42,557 ==== SSA block analysis pass on 232
2023-08-13 11:42:42,558 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696DFDD10>
2023-08-13 11:42:42,558 on stmt: index00 = $phi232.1.1
2023-08-13 11:42:42,558 on stmt: jump 240
2023-08-13 11:42:42,558 ==== SSA block analysis pass on 242
2023-08-13 11:42:42,558 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696DFDD10>
2023-08-13 11:42:42,558 on stmt: $242return_value.1.1 = cast(value=out0)
2023-08-13 11:42:42,558 on stmt: return $242return_value.1.1
2023-08-13 11:42:42,558 ==== SSA block analysis pass on 240
2023-08-13 11:42:42,558 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696DFDD10>
2023-08-13 11:42:42,558 on stmt: $const6.1 = const(int, 0)
2023-08-13 11:42:42,558 on stmt: stencil_index = $const6.1 + index00
2023-08-13 11:42:42,558 on stmt: $8binary_subscr.2 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:42,558 on stmt: $const20.4 = const(int, -1)
2023-08-13 11:42:42,559 on stmt: stencil_index.1 = $const20.4 + index00
2023-08-13 11:42:42,559 on stmt: $22binary_subscr.5 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2023-08-13 11:42:42,559 on stmt: $32compare_op.6 = $8binary_subscr.2 > $22binary_subscr.5
2023-08-13 11:42:42,559 on stmt: $const40.8 = const(int, 0)
2023-08-13 11:42:42,559 on stmt: stencil_index.2 = $const40.8 + index00
2023-08-13 11:42:42,559 on stmt: $42binary_subscr.9 = getitem(value=x, index=stencil_index.2, fn=<built-in function getitem>)
2023-08-13 11:42:42,559 on stmt: $const54.11 = const(int, 1)
2023-08-13 11:42:42,559 on stmt: stencil_index.3 = $const54.11 + index00
2023-08-13 11:42:42,559 on stmt: $56binary_subscr.12 = getitem(value=x, index=stencil_index.3, fn=<built-in function getitem>)
2023-08-13 11:42:42,559 on stmt: $66compare_op.13 = $42binary_subscr.9 >= $56binary_subscr.12
2023-08-13 11:42:42,559 on stmt: $binop_and_72.14 = $32compare_op.6 & $66compare_op.13
2023-08-13 11:42:42,559 on stmt: $76return_value.15 = cast(value=$binop_and_72.14)
2023-08-13 11:42:42,559 on stmt: out0[index00] = $76return_value.15
2023-08-13 11:42:42,559 on stmt: jump 241
2023-08-13 11:42:42,560 ==== SSA block analysis pass on 241
2023-08-13 11:42:42,560 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696DFDD10>
2023-08-13 11:42:42,560 on stmt: jump 230
2023-08-13 11:42:42,560 defs defaultdict(<class 'list'>,
            {'$102build_slice.13.1': [<numba.core.ir.Assign object at 0x000001F6970ABD90>],
             '$102build_slice.14.1': [<numba.core.ir.Assign object at 0x000001F6970ABF10>],
             '$116build_slice.19.1': [<numba.core.ir.Assign object at 0x000001F6970AC890>],
             '$116build_slice.20.1': [<numba.core.ir.Assign object at 0x000001F6970ACA10>],
             '$122load_global.21.1': [<numba.core.ir.Assign object at 0x000001F6970ACC50>],
             '$134load_global.23.1': [<numba.core.ir.Assign object at 0x000001F6970ACDD0>],
             '$154call.27.1': [<numba.core.ir.Assign object at 0x000001F6970AD2D0>],
             '$164unary_negative.28.1': [<numba.core.ir.Assign object at 0x000001F6970AD490>],
             '$170binary_subscr.31.1': [<numba.core.ir.Assign object at 0x000001F6970AD990>],
             '$180load_global.32.1': [<numba.core.ir.Assign object at 0x000001F6970ADB90>],
             '$18load_global.2.1': [<numba.core.ir.Assign object at 0x000001F6970AA650>],
             '$200call.36.1': [<numba.core.ir.Assign object at 0x000001F6970AE0D0>],
             '$218call.38.1': [<numba.core.ir.Assign object at 0x000001F6970AE5D0>],
             '$228get_iter.39.1': [<numba.core.ir.Assign object at 0x000001F6970AE850>],
             '$22binary_subscr.5': [<numba.core.ir.Assign object at 0x000001F696B9B090>],
             '$230for_iter.1.1': [<numba.core.ir.Assign object at 0x000001F6970AEA50>],
             '$230for_iter.2.1': [<numba.core.ir.Assign object at 0x000001F6970AEBD0>],
             '$230for_iter.3.1': [<numba.core.ir.Assign object at 0x000001F6970AED50>],
             '$242return_value.1.1': [<numba.core.ir.Assign object at 0x000001F6970AF910>],
             '$30load_method.4.1': [<numba.core.ir.Assign object at 0x000001F6970AA910>],
             '$32compare_op.6': [<numba.core.ir.Assign object at 0x000001F696B69550>],
             '$42binary_subscr.9': [<numba.core.ir.Assign object at 0x000001F696B9B2D0>],
             '$54load_global.6.1': [<numba.core.ir.Assign object at 0x000001F6970AAD90>],
             '$56binary_subscr.12': [<numba.core.ir.Assign object at 0x000001F696B9B1D0>],
             '$66compare_op.13': [<numba.core.ir.Assign object at 0x000001F696D7F810>],
             '$66load_attr.7.1': [<numba.core.ir.Assign object at 0x000001F6970AB050>],
             '$76return_value.15': [<numba.core.ir.Assign object at 0x000001F696D7D750>],
             '$8binary_subscr.2': [<numba.core.ir.Assign object at 0x000001F696B9A450>],
             '$binop_and_72.14': [<numba.core.ir.Assign object at 0x000001F696D7DF90>],
             '$binop_sub210.37.1': [<numba.core.ir.Assign object at 0x000001F6970AE390>],
             '$const100.12.1': [<numba.core.ir.Assign object at 0x000001F6970ABB90>],
             '$const108.15.1': [<numba.core.ir.Assign object at 0x000001F6970ABC50>],
             '$const112.17.1': [<numba.core.ir.Assign object at 0x000001F6970AC4D0>],
             '$const114.18.1': [<numba.core.ir.Assign object at 0x000001F6970AC690>],
             '$const146.25.1': [<numba.core.ir.Assign object at 0x000001F6970ACF50>],
             '$const148.26.1': [<numba.core.ir.Assign object at 0x000001F6970AD0D0>],
             '$const168.30.1': [<numba.core.ir.Assign object at 0x000001F6970AD790>],
             '$const192.34.1': [<numba.core.ir.Assign object at 0x000001F6970ADD50>],
             '$const194.35.1': [<numba.core.ir.Assign object at 0x000001F6970ADED0>],
             '$const20.4': [<numba.core.ir.Assign object at 0x000001F696B63710>],
             '$const40.8': [<numba.core.ir.Assign object at 0x000001F696B68D90>],
             '$const54.11': [<numba.core.ir.Assign object at 0x000001F696B88450>],
             '$const6.1': [<numba.core.ir.Assign object at 0x000001F696DF6210>],
             '$const94.9.1': [<numba.core.ir.Assign object at 0x000001F6970AB690>],
             '$const98.11.1': [<numba.core.ir.Assign object at 0x000001F6970ABA10>],
             '$phi230.0.1': [<numba.core.ir.Assign object at 0x000001F6970AA490>],
             '$phi232.1.1': [<numba.core.ir.Assign object at 0x000001F6970AEE10>],
             'full_shape0': [<numba.core.ir.Assign object at 0x000001F6970AA210>],
             'index00': [<numba.core.ir.Assign object at 0x000001F6970AF0D0>],
             'out0': [<numba.core.ir.Assign object at 0x000001F6970AB2D0>],
             'stencil_index': [<numba.core.ir.Assign object at 0x000001F696B9B290>],
             'stencil_index.1': [<numba.core.ir.Assign object at 0x000001F696B9A850>],
             'stencil_index.2': [<numba.core.ir.Assign object at 0x000001F696B9B190>],
             'stencil_index.3': [<numba.core.ir.Assign object at 0x000001F696B9B310>],
             'x': [<numba.core.ir.Assign object at 0x000001F6970A9E10>]})
2023-08-13 11:42:42,561 SSA violators set()
2023-08-13 11:42:43,792 bytecode dump:
>          0	NOP(arg=None, lineno=1080)
           2	RESUME(arg=0, lineno=1080)
           4	LOAD_GLOBAL(arg=1, lineno=1094)
          16	LOAD_FAST(arg=0, lineno=1094)
          18	PRECALL(arg=1, lineno=1094)
          22	CALL(arg=1, lineno=1094)
          32	LOAD_FAST(arg=1, lineno=1094)
          34	LOAD_CONST(arg=1, lineno=1094)
          36	LOAD_CONST(arg=1, lineno=1094)
          38	BUILD_SLICE(arg=2, lineno=1094)
          40	STORE_SUBSCR(arg=None, lineno=1094)
          44	LOAD_CONST(arg=1, lineno=1094)
          46	RETURN_VALUE(arg=None, lineno=1094)
2023-08-13 11:42:43,793 pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-13 11:42:43,793 stack: []
2023-08-13 11:42:43,793 state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-13 11:42:43,793 dispatch pc=0, inst=NOP(arg=None, lineno=1080)
2023-08-13 11:42:43,793 stack []
2023-08-13 11:42:43,793 dispatch pc=2, inst=RESUME(arg=0, lineno=1080)
2023-08-13 11:42:43,793 stack []
2023-08-13 11:42:43,793 dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=1094)
2023-08-13 11:42:43,793 stack []
2023-08-13 11:42:43,793 dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1094)
2023-08-13 11:42:43,793 stack ['$null$4.1', '$4load_global.0']
2023-08-13 11:42:43,793 dispatch pc=18, inst=PRECALL(arg=1, lineno=1094)
2023-08-13 11:42:43,793 stack ['$null$4.1', '$4load_global.0', '$x16.2']
2023-08-13 11:42:43,793 dispatch pc=22, inst=CALL(arg=1, lineno=1094)
2023-08-13 11:42:43,793 stack ['$null$4.1', '$4load_global.0', '$x16.2']
2023-08-13 11:42:43,793 dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=1094)
2023-08-13 11:42:43,793 stack ['$22call.3']
2023-08-13 11:42:43,794 dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=1094)
2023-08-13 11:42:43,794 stack ['$22call.3', '$y32.4']
2023-08-13 11:42:43,794 dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=1094)
2023-08-13 11:42:43,794 stack ['$22call.3', '$y32.4', '$const34.5']
2023-08-13 11:42:43,794 dispatch pc=38, inst=BUILD_SLICE(arg=2, lineno=1094)
2023-08-13 11:42:43,794 stack ['$22call.3', '$y32.4', '$const34.5', '$const36.6']
2023-08-13 11:42:43,794 dispatch pc=40, inst=STORE_SUBSCR(arg=None, lineno=1094)
2023-08-13 11:42:43,794 stack ['$22call.3', '$y32.4', '$38build_slice.8']
2023-08-13 11:42:43,794 dispatch pc=44, inst=LOAD_CONST(arg=1, lineno=1094)
2023-08-13 11:42:43,794 stack []
2023-08-13 11:42:43,794 dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=1094)
2023-08-13 11:42:43,794 stack ['$const44.9']
2023-08-13 11:42:43,794 end state. edges=[]
2023-08-13 11:42:43,794 -------------------------Prune PHIs-------------------------
2023-08-13 11:42:43,794 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-08-13 11:42:43,794 defmap: {}
2023-08-13 11:42:43,795 phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:43,795 changing phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:43,795 keep phismap: {}
2023-08-13 11:42:43,795 new_out: defaultdict(<class 'dict'>, {})
2023-08-13 11:42:43,795 ----------------------DONE Prune PHIs-----------------------
2023-08-13 11:42:43,795 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'res': '$x16.2'}), (18, {}), (20, {}), (22, {'func': '$4load_global.0', 'args': ['$x16.2'], 'kw_names': None, 'res': '$22call.3'}), (24, {}), (26, {}), (28, {}), (30, {}), (32, {'res': '$y32.4'}), (34, {'res': '$const34.5'}), (36, {'res': '$const36.6'}), (38, {'start': '$const34.5', 'stop': '$const36.6', 'step': None, 'res': '$38build_slice.8', 'slicevar': '$38build_slice.7'}), (40, {'target': '$y32.4', 'index': '$38build_slice.8', 'value': '$22call.3'}), (42, {}), (44, {'res': '$const44.9'}), (46, {'retval': '$const44.9', 'castval': '$46return_value.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:43,795 label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $4load_global.0 = global(_localmin_sten: <numba.stencils.stencil.StencilFunc object at 0x000001F696E7C0D0>) ['$4load_global.0']
    $22call.3 = call $4load_global.0(x, func=$4load_global.0, args=[Var(x, utils.py:1080)], kws=(), vararg=None, varkwarg=None, target=None) ['$22call.3', '$4load_global.0', 'x']
    $const34.5 = const(NoneType, None)       ['$const34.5']
    $const36.6 = const(NoneType, None)       ['$const36.6']
    $38build_slice.7 = global(slice: <class 'slice'>) ['$38build_slice.7']
    $38build_slice.8 = call $38build_slice.7($const34.5, $const36.6, func=$38build_slice.7, args=(Var($const34.5, utils.py:1094), Var($const36.6, utils.py:1094)), kws=(), vararg=None, varkwarg=None, target=None) ['$38build_slice.7', '$38build_slice.8', '$const34.5', '$const36.6']
    y[$38build_slice.8] = $22call.3          ['$22call.3', '$38build_slice.8', 'y']
    $const44.9 = const(NoneType, None)       ['$const44.9']
    $46return_value.10 = cast(value=$const44.9) ['$46return_value.10', '$const44.9']
    return $46return_value.10                ['$46return_value.10']

2023-08-13 11:42:43,805 ==== SSA block analysis pass on 0
2023-08-13 11:42:43,805 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6976FA010>
2023-08-13 11:42:43,805 on stmt: x = arg(0, name=x)
2023-08-13 11:42:43,805 on stmt: y = arg(1, name=y)
2023-08-13 11:42:43,805 on stmt: $4load_global.0 = global(_localmin_sten: <numba.stencils.stencil.StencilFunc object at 0x000001F696E7C0D0>)
2023-08-13 11:42:43,805 on stmt: $22call.3 = call $4load_global.0(x, func=$4load_global.0, args=[Var(x, utils.py:1080)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:43,806 on stmt: $const34.5 = const(NoneType, None)
2023-08-13 11:42:43,806 on stmt: $const36.6 = const(NoneType, None)
2023-08-13 11:42:43,806 on stmt: $38build_slice.7 = global(slice: <class 'slice'>)
2023-08-13 11:42:43,806 on stmt: $38build_slice.8 = call $38build_slice.7($const34.5, $const36.6, func=$38build_slice.7, args=(Var($const34.5, utils.py:1094), Var($const36.6, utils.py:1094)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:43,806 on stmt: y[slice(None, None, None)] = $22call.3
2023-08-13 11:42:43,806 on stmt: $const44.9 = const(NoneType, None)
2023-08-13 11:42:43,806 on stmt: $46return_value.10 = cast(value=$const44.9)
2023-08-13 11:42:43,806 on stmt: return $46return_value.10
2023-08-13 11:42:43,806 defs defaultdict(<class 'list'>,
            {'$22call.3': [<numba.core.ir.Assign object at 0x000001F6976F6250>],
             '$38build_slice.7': [<numba.core.ir.Assign object at 0x000001F6976F6990>],
             '$38build_slice.8': [<numba.core.ir.Assign object at 0x000001F6976F6AD0>],
             '$46return_value.10': [<numba.core.ir.Assign object at 0x000001F6976F6F50>],
             '$4load_global.0': [<numba.core.ir.Assign object at 0x000001F6976F5E90>],
             '$const34.5': [<numba.core.ir.Assign object at 0x000001F6976F65D0>],
             '$const36.6': [<numba.core.ir.Assign object at 0x000001F6976F6790>],
             '$const44.9': [<numba.core.ir.Assign object at 0x000001F6976F6D10>],
             'x': [<numba.core.ir.Assign object at 0x000001F6976F5A50>],
             'y': [<numba.core.ir.Assign object at 0x000001F6976F5C10>]})
2023-08-13 11:42:43,806 SSA violators set()
2023-08-13 11:42:43,838 bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	RESUME(arg=0, lineno=1)
           4	LOAD_FAST(arg=0, lineno=2)
           6	LOAD_ATTR(arg=0, lineno=2)
          16	STORE_FAST(arg=1, lineno=2)
          18	LOAD_GLOBAL(arg=2, lineno=3)
          30	LOAD_METHOD(arg=2, lineno=3)
          52	LOAD_FAST(arg=1, lineno=3)
          54	LOAD_GLOBAL(arg=2, lineno=3)
          66	LOAD_ATTR(arg=3, lineno=3)
          76	KW_NAMES(arg=1, lineno=3)
          78	PRECALL(arg=2, lineno=3)
          82	CALL(arg=2, lineno=3)
          92	STORE_FAST(arg=2, lineno=3)
          94	LOAD_CONST(arg=2, lineno=4)
          96	LOAD_FAST(arg=2, lineno=4)
          98	LOAD_CONST(arg=0, lineno=4)
         100	LOAD_CONST(arg=3, lineno=4)
         102	BUILD_SLICE(arg=2, lineno=4)
         104	STORE_SUBSCR(arg=None, lineno=4)
         108	LOAD_CONST(arg=2, lineno=5)
         110	LOAD_FAST(arg=2, lineno=5)
         112	LOAD_CONST(arg=4, lineno=5)
         114	LOAD_CONST(arg=0, lineno=5)
         116	BUILD_SLICE(arg=2, lineno=5)
         118	STORE_SUBSCR(arg=None, lineno=5)
         122	LOAD_GLOBAL(arg=9, lineno=6)
         134	LOAD_GLOBAL(arg=11, lineno=6)
         146	LOAD_CONST(arg=2, lineno=6)
         148	LOAD_CONST(arg=4, lineno=6)
         150	PRECALL(arg=2, lineno=6)
         154	CALL(arg=2, lineno=6)
         164	UNARY_NEGATIVE(arg=None, lineno=6)
         166	LOAD_FAST(arg=1, lineno=6)
         168	LOAD_CONST(arg=2, lineno=6)
         170	BINARY_SUBSCR(arg=None, lineno=6)
         180	LOAD_GLOBAL(arg=13, lineno=6)
         192	LOAD_CONST(arg=2, lineno=6)
         194	LOAD_CONST(arg=3, lineno=6)
         196	PRECALL(arg=2, lineno=6)
         200	CALL(arg=2, lineno=6)
         210	BINARY_OP(arg=10, lineno=6)
         214	PRECALL(arg=2, lineno=6)
         218	CALL(arg=2, lineno=6)
         228	GET_ITER(arg=None, lineno=6)
>        230	FOR_ITER(arg=4, lineno=6)
         232	STORE_FAST(arg=3, lineno=6)
         234	LOAD_CONST(arg=2, lineno=7)
         236	STORE_FAST(arg=4, lineno=7)
         238	JUMP_BACKWARD(arg=5, lineno=7)
>        240	LOAD_FAST(arg=2, lineno=8)
         242	RETURN_VALUE(arg=None, lineno=8)
2023-08-13 11:42:43,838 pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-13 11:42:43,838 stack: []
2023-08-13 11:42:43,838 state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-13 11:42:43,838 dispatch pc=0, inst=NOP(arg=None, lineno=1)
2023-08-13 11:42:43,838 stack []
2023-08-13 11:42:43,838 dispatch pc=2, inst=RESUME(arg=0, lineno=1)
2023-08-13 11:42:43,838 stack []
2023-08-13 11:42:43,838 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2)
2023-08-13 11:42:43,838 stack []
2023-08-13 11:42:43,838 dispatch pc=6, inst=LOAD_ATTR(arg=0, lineno=2)
2023-08-13 11:42:43,838 stack ['$x4.0']
2023-08-13 11:42:43,838 dispatch pc=16, inst=STORE_FAST(arg=1, lineno=2)
2023-08-13 11:42:43,839 stack ['$6load_attr.1']
2023-08-13 11:42:43,839 dispatch pc=18, inst=LOAD_GLOBAL(arg=2, lineno=3)
2023-08-13 11:42:43,839 stack []
2023-08-13 11:42:43,839 dispatch pc=30, inst=LOAD_METHOD(arg=2, lineno=3)
2023-08-13 11:42:43,839 stack ['$18load_global.2']
2023-08-13 11:42:43,839 dispatch pc=52, inst=LOAD_FAST(arg=1, lineno=3)
2023-08-13 11:42:43,839 stack ['$null$30.3', '$30load_method.4']
2023-08-13 11:42:43,839 dispatch pc=54, inst=LOAD_GLOBAL(arg=2, lineno=3)
2023-08-13 11:42:43,839 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5']
2023-08-13 11:42:43,839 dispatch pc=66, inst=LOAD_ATTR(arg=3, lineno=3)
2023-08-13 11:42:43,839 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$54load_global.6']
2023-08-13 11:42:43,839 dispatch pc=76, inst=KW_NAMES(arg=1, lineno=3)
2023-08-13 11:42:43,839 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$66load_attr.7']
2023-08-13 11:42:43,839 dispatch pc=78, inst=PRECALL(arg=2, lineno=3)
2023-08-13 11:42:43,839 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$66load_attr.7']
2023-08-13 11:42:43,839 dispatch pc=82, inst=CALL(arg=2, lineno=3)
2023-08-13 11:42:43,839 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$66load_attr.7']
2023-08-13 11:42:43,840 dispatch pc=92, inst=STORE_FAST(arg=2, lineno=3)
2023-08-13 11:42:43,840 stack ['$82call.8']
2023-08-13 11:42:43,840 dispatch pc=94, inst=LOAD_CONST(arg=2, lineno=4)
2023-08-13 11:42:43,840 stack []
2023-08-13 11:42:43,840 dispatch pc=96, inst=LOAD_FAST(arg=2, lineno=4)
2023-08-13 11:42:43,840 stack ['$const94.9']
2023-08-13 11:42:43,840 dispatch pc=98, inst=LOAD_CONST(arg=0, lineno=4)
2023-08-13 11:42:43,840 stack ['$const94.9', '$out096.10']
2023-08-13 11:42:43,840 dispatch pc=100, inst=LOAD_CONST(arg=3, lineno=4)
2023-08-13 11:42:43,840 stack ['$const94.9', '$out096.10', '$const98.11']
2023-08-13 11:42:43,840 dispatch pc=102, inst=BUILD_SLICE(arg=2, lineno=4)
2023-08-13 11:42:43,840 stack ['$const94.9', '$out096.10', '$const98.11', '$const100.12']
2023-08-13 11:42:43,840 dispatch pc=104, inst=STORE_SUBSCR(arg=None, lineno=4)
2023-08-13 11:42:43,840 stack ['$const94.9', '$out096.10', '$102build_slice.14']
2023-08-13 11:42:43,840 dispatch pc=108, inst=LOAD_CONST(arg=2, lineno=5)
2023-08-13 11:42:43,840 stack []
2023-08-13 11:42:43,840 dispatch pc=110, inst=LOAD_FAST(arg=2, lineno=5)
2023-08-13 11:42:43,840 stack ['$const108.15']
2023-08-13 11:42:43,840 dispatch pc=112, inst=LOAD_CONST(arg=4, lineno=5)
2023-08-13 11:42:43,840 stack ['$const108.15', '$out0110.16']
2023-08-13 11:42:43,841 dispatch pc=114, inst=LOAD_CONST(arg=0, lineno=5)
2023-08-13 11:42:43,841 stack ['$const108.15', '$out0110.16', '$const112.17']
2023-08-13 11:42:43,841 dispatch pc=116, inst=BUILD_SLICE(arg=2, lineno=5)
2023-08-13 11:42:43,841 stack ['$const108.15', '$out0110.16', '$const112.17', '$const114.18']
2023-08-13 11:42:43,841 dispatch pc=118, inst=STORE_SUBSCR(arg=None, lineno=5)
2023-08-13 11:42:43,841 stack ['$const108.15', '$out0110.16', '$116build_slice.20']
2023-08-13 11:42:43,841 dispatch pc=122, inst=LOAD_GLOBAL(arg=9, lineno=6)
2023-08-13 11:42:43,841 stack []
2023-08-13 11:42:43,841 dispatch pc=134, inst=LOAD_GLOBAL(arg=11, lineno=6)
2023-08-13 11:42:43,841 stack ['$null$122.22', '$122load_global.21']
2023-08-13 11:42:43,841 dispatch pc=146, inst=LOAD_CONST(arg=2, lineno=6)
2023-08-13 11:42:43,841 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23']
2023-08-13 11:42:43,841 dispatch pc=148, inst=LOAD_CONST(arg=4, lineno=6)
2023-08-13 11:42:43,841 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23', '$const146.25']
2023-08-13 11:42:43,841 dispatch pc=150, inst=PRECALL(arg=2, lineno=6)
2023-08-13 11:42:43,841 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23', '$const146.25', '$const148.26']
2023-08-13 11:42:43,841 dispatch pc=154, inst=CALL(arg=2, lineno=6)
2023-08-13 11:42:43,841 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23', '$const146.25', '$const148.26']
2023-08-13 11:42:43,842 dispatch pc=164, inst=UNARY_NEGATIVE(arg=None, lineno=6)
2023-08-13 11:42:43,842 stack ['$null$122.22', '$122load_global.21', '$154call.27']
2023-08-13 11:42:43,842 dispatch pc=166, inst=LOAD_FAST(arg=1, lineno=6)
2023-08-13 11:42:43,842 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28']
2023-08-13 11:42:43,842 dispatch pc=168, inst=LOAD_CONST(arg=2, lineno=6)
2023-08-13 11:42:43,842 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$full_shape0166.29']
2023-08-13 11:42:43,842 dispatch pc=170, inst=BINARY_SUBSCR(arg=None, lineno=6)
2023-08-13 11:42:43,842 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$full_shape0166.29', '$const168.30']
2023-08-13 11:42:43,842 dispatch pc=180, inst=LOAD_GLOBAL(arg=13, lineno=6)
2023-08-13 11:42:43,842 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31']
2023-08-13 11:42:43,842 dispatch pc=192, inst=LOAD_CONST(arg=2, lineno=6)
2023-08-13 11:42:43,842 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32']
2023-08-13 11:42:43,842 dispatch pc=194, inst=LOAD_CONST(arg=3, lineno=6)
2023-08-13 11:42:43,842 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32', '$const192.34']
2023-08-13 11:42:43,842 dispatch pc=196, inst=PRECALL(arg=2, lineno=6)
2023-08-13 11:42:43,842 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32', '$const192.34', '$const194.35']
2023-08-13 11:42:43,842 dispatch pc=200, inst=CALL(arg=2, lineno=6)
2023-08-13 11:42:43,842 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32', '$const192.34', '$const194.35']
2023-08-13 11:42:43,843 dispatch pc=210, inst=BINARY_OP(arg=10, lineno=6)
2023-08-13 11:42:43,843 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$200call.36']
2023-08-13 11:42:43,843 dispatch pc=214, inst=PRECALL(arg=2, lineno=6)
2023-08-13 11:42:43,843 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$binop_sub210.37']
2023-08-13 11:42:43,843 dispatch pc=218, inst=CALL(arg=2, lineno=6)
2023-08-13 11:42:43,843 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$binop_sub210.37']
2023-08-13 11:42:43,843 dispatch pc=228, inst=GET_ITER(arg=None, lineno=6)
2023-08-13 11:42:43,843 stack ['$218call.38']
2023-08-13 11:42:43,843 end state. edges=[Edge(pc=230, stack=('$228get_iter.39',), blockstack=(), npush=0)]
2023-08-13 11:42:43,843 pending: deque([State(pc_initial=230 nstack_initial=1)])
2023-08-13 11:42:43,843 stack: ['$phi230.0']
2023-08-13 11:42:43,843 state.pc_initial: State(pc_initial=230 nstack_initial=1)
2023-08-13 11:42:43,843 dispatch pc=230, inst=FOR_ITER(arg=4, lineno=6)
2023-08-13 11:42:43,843 stack ['$phi230.0']
2023-08-13 11:42:43,843 end state. edges=[Edge(pc=240, stack=(), blockstack=(), npush=0), Edge(pc=232, stack=('$phi230.0', '$230for_iter.2'), blockstack=(), npush=0)]
2023-08-13 11:42:43,843 pending: deque([State(pc_initial=240 nstack_initial=0), State(pc_initial=232 nstack_initial=2)])
2023-08-13 11:42:43,843 stack: []
2023-08-13 11:42:43,844 state.pc_initial: State(pc_initial=240 nstack_initial=0)
2023-08-13 11:42:43,844 dispatch pc=240, inst=LOAD_FAST(arg=2, lineno=8)
2023-08-13 11:42:43,844 stack []
2023-08-13 11:42:43,844 dispatch pc=242, inst=RETURN_VALUE(arg=None, lineno=8)
2023-08-13 11:42:43,844 stack ['$out0240.0']
2023-08-13 11:42:43,844 end state. edges=[]
2023-08-13 11:42:43,844 pending: deque([State(pc_initial=232 nstack_initial=2)])
2023-08-13 11:42:43,844 stack: ['$phi232.0', '$phi232.1']
2023-08-13 11:42:43,844 state.pc_initial: State(pc_initial=232 nstack_initial=2)
2023-08-13 11:42:43,844 dispatch pc=232, inst=STORE_FAST(arg=3, lineno=6)
2023-08-13 11:42:43,844 stack ['$phi232.0', '$phi232.1']
2023-08-13 11:42:43,844 dispatch pc=234, inst=LOAD_CONST(arg=2, lineno=7)
2023-08-13 11:42:43,844 stack ['$phi232.0']
2023-08-13 11:42:43,844 dispatch pc=236, inst=STORE_FAST(arg=4, lineno=7)
2023-08-13 11:42:43,844 stack ['$phi232.0', '$const234.2']
2023-08-13 11:42:43,844 dispatch pc=238, inst=JUMP_BACKWARD(arg=5, lineno=7)
2023-08-13 11:42:43,844 stack ['$phi232.0']
2023-08-13 11:42:43,844 end state. edges=[Edge(pc=230, stack=('$phi232.0',), blockstack=(), npush=0)]
2023-08-13 11:42:43,845 pending: deque([State(pc_initial=230 nstack_initial=1)])
2023-08-13 11:42:43,845 -------------------------Prune PHIs-------------------------
2023-08-13 11:42:43,845 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=230 nstack_initial=1): {'$phi230.0'},
             State(pc_initial=232 nstack_initial=2): {'$phi232.1'},
             State(pc_initial=240 nstack_initial=0): set()})
2023-08-13 11:42:43,845 defmap: {'$phi230.0': State(pc_initial=0 nstack_initial=0),
 '$phi232.1': State(pc_initial=230 nstack_initial=1)}
2023-08-13 11:42:43,845 phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi232.0',
                            State(pc_initial=232 nstack_initial=2))},
             '$phi232.0': {('$phi230.0',
                            State(pc_initial=230 nstack_initial=1))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:43,845 changing phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi230.0',
                            State(pc_initial=230 nstack_initial=1))},
             '$phi232.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:43,846 changing phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:43,846 changing phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:43,846 keep phismap: {'$phi230.0': {('$228get_iter.39', State(pc_initial=0 nstack_initial=0))},
 '$phi232.1': {('$230for_iter.2', State(pc_initial=230 nstack_initial=1))}}
2023-08-13 11:42:43,846 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi230.0': '$228get_iter.39'},
             State(pc_initial=230 nstack_initial=1): {'$phi232.1': '$230for_iter.2'}})
2023-08-13 11:42:43,846 ----------------------DONE Prune PHIs-----------------------
2023-08-13 11:42:43,846 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$x4.0'}), (6, {'item': '$x4.0', 'res': '$6load_attr.1'}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'value': '$6load_attr.1'}), (18, {'idx': 1, 'res': '$18load_global.2'}), (20, {}), (22, {}), (24, {}), (26, {}), (28, {}), (30, {'item': '$18load_global.2', 'res': '$30load_method.4'}), (32, {}), (34, {}), (36, {}), (38, {}), (40, {}), (42, {}), (44, {}), (46, {}), (48, {}), (50, {}), (52, {'res': '$full_shape052.5'}), (54, {'idx': 1, 'res': '$54load_global.6'}), (56, {}), (58, {}), (60, {}), (62, {}), (64, {}), (66, {'item': '$54load_global.6', 'res': '$66load_attr.7'}), (68, {}), (70, {}), (72, {}), (74, {}), (78, {}), (80, {}), (82, {'func': '$30load_method.4', 'args': ['$full_shape052.5', '$66load_attr.7'], 'kw_names': 1, 'res': '$82call.8'}), (84, {}), (86, {}), (88, {}), (90, {}), (92, {'value': '$82call.8'}), (94, {'res': '$const94.9'}), (96, {'res': '$out096.10'}), (98, {'res': '$const98.11'}), (100, {'res': '$const100.12'}), (102, {'start': '$const98.11', 'stop': '$const100.12', 'step': None, 'res': '$102build_slice.14', 'slicevar': '$102build_slice.13'}), (104, {'target': '$out096.10', 'index': '$102build_slice.14', 'value': '$const94.9'}), (106, {}), (108, {'res': '$const108.15'}), (110, {'res': '$out0110.16'}), (112, {'res': '$const112.17'}), (114, {'res': '$const114.18'}), (116, {'start': '$const112.17', 'stop': '$const114.18', 'step': None, 'res': '$116build_slice.20', 'slicevar': '$116build_slice.19'}), (118, {'target': '$out0110.16', 'index': '$116build_slice.20', 'value': '$const108.15'}), (120, {}), (122, {'idx': 4, 'res': '$122load_global.21'}), (124, {}), (126, {}), (128, {}), (130, {}), (132, {}), (134, {'idx': 5, 'res': '$134load_global.23'}), (136, {}), (138, {}), (140, {}), (142, {}), (144, {}), (146, {'res': '$const146.25'}), (148, {'res': '$const148.26'}), (150, {}), (152, {}), (154, {'func': '$134load_global.23', 'args': ['$const146.25', '$const148.26'], 'kw_names': None, 'res': '$154call.27'}), (156, {}), (158, {}), (160, {}), (162, {}), (164, {'value': '$154call.27', 'res': '$164unary_negative.28'}), (166, {'res': '$full_shape0166.29'}), (168, {'res': '$const168.30'}), (170, {'index': '$const168.30', 'target': '$full_shape0166.29', 'res': '$170binary_subscr.31'}), (172, {}), (174, {}), (176, {}), (178, {}), (180, {'idx': 6, 'res': '$180load_global.32'}), (182, {}), (184, {}), (186, {}), (188, {}), (190, {}), (192, {'res': '$const192.34'}), (194, {'res': '$const194.35'}), (196, {}), (198, {}), (200, {'func': '$180load_global.32', 'args': ['$const192.34', '$const194.35'], 'kw_names': None, 'res': '$200call.36'}), (202, {}), (204, {}), (206, {}), (208, {}), (210, {'op': '-', 'lhs': '$170binary_subscr.31', 'rhs': '$200call.36', 'res': '$binop_sub210.37'}), (212, {}), (214, {}), (216, {}), (218, {'func': '$122load_global.21', 'args': ['$164unary_negative.28', '$binop_sub210.37'], 'kw_names': None, 'res': '$218call.38'}), (220, {}), (222, {}), (224, {}), (226, {}), (228, {'value': '$218call.38', 'res': '$228get_iter.39'})), outgoing_phis={'$phi230.0': '$228get_iter.39'}, blockstack=(), active_try_block=None, outgoing_edgepushed={230: ('$228get_iter.39',)})
2023-08-13 11:42:43,847 block_infos State(pc_initial=230 nstack_initial=1):
AdaptBlockInfo(insts=((230, {'iterator': '$phi230.0', 'pair': '$230for_iter.1', 'indval': '$230for_iter.2', 'pred': '$230for_iter.3'}),), outgoing_phis={'$phi232.1': '$230for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={240: (), 232: ('$phi230.0', '$230for_iter.2')})
2023-08-13 11:42:43,847 block_infos State(pc_initial=232 nstack_initial=2):
AdaptBlockInfo(insts=((232, {'value': '$phi232.1'}), (234, {'res': '$const234.2'}), (236, {'value': '$const234.2'}), (238, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={230: ('$phi232.0',)})
2023-08-13 11:42:43,847 block_infos State(pc_initial=240 nstack_initial=0):
AdaptBlockInfo(insts=((240, {'res': '$out0240.0'}), (242, {'retval': '$out0240.0', 'castval': '$242return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:43,848 label 0:
    x = arg(0, name=x)                       ['x']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $18load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>) ['$18load_global.2']
    $30load_method.4 = getattr(value=$18load_global.2, attr=empty) ['$18load_global.2', '$30load_method.4']
    $54load_global.6 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>) ['$54load_global.6']
    $66load_attr.7 = getattr(value=$54load_global.6, attr=bool_) ['$54load_global.6', '$66load_attr.7']
    out0 = call $30load_method.4(full_shape0, func=$30load_method.4, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($66load_attr.7, <string>:3))], vararg=None, varkwarg=None, target=None) ['$30load_method.4', '$66load_attr.7', 'full_shape0', 'out0']
    $const94.9 = const(int, 0)               ['$const94.9']
    $const98.11 = const(NoneType, None)      ['$const98.11']
    $const100.12 = const(int, 1)             ['$const100.12']
    $102build_slice.13 = global(slice: <class 'slice'>) ['$102build_slice.13']
    $102build_slice.14 = call $102build_slice.13($const98.11, $const100.12, func=$102build_slice.13, args=(Var($const98.11, <string>:4), Var($const100.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$102build_slice.13', '$102build_slice.14', '$const100.12', '$const98.11']
    out0[$102build_slice.14] = $const94.9    ['$102build_slice.14', '$const94.9', 'out0']
    $const108.15 = const(int, 0)             ['$const108.15']
    $const112.17 = const(int, -1)            ['$const112.17']
    $const114.18 = const(NoneType, None)     ['$const114.18']
    $116build_slice.19 = global(slice: <class 'slice'>) ['$116build_slice.19']
    $116build_slice.20 = call $116build_slice.19($const112.17, $const114.18, func=$116build_slice.19, args=(Var($const112.17, <string>:5), Var($const114.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$116build_slice.19', '$116build_slice.20', '$const112.17', '$const114.18']
    out0[$116build_slice.20] = $const108.15  ['$116build_slice.20', '$const108.15', 'out0']
    $122load_global.21 = global(range: <class 'range'>) ['$122load_global.21']
    $134load_global.23 = global(min: <built-in function min>) ['$134load_global.23']
    $const146.25 = const(int, 0)             ['$const146.25']
    $const148.26 = const(int, -1)            ['$const148.26']
    $154call.27 = call $134load_global.23($const146.25, $const148.26, func=$134load_global.23, args=[Var($const146.25, <string>:6), Var($const148.26, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$134load_global.23', '$154call.27', '$const146.25', '$const148.26']
    $164unary_negative.28 = unary(fn=<built-in function neg>, value=$154call.27) ['$154call.27', '$164unary_negative.28']
    $const168.30 = const(int, 0)             ['$const168.30']
    $170binary_subscr.31 = getitem(value=full_shape0, index=$const168.30, fn=<built-in function getitem>) ['$170binary_subscr.31', '$const168.30', 'full_shape0']
    $180load_global.32 = global(max: <built-in function max>) ['$180load_global.32']
    $const192.34 = const(int, 0)             ['$const192.34']
    $const194.35 = const(int, 1)             ['$const194.35']
    $200call.36 = call $180load_global.32($const192.34, $const194.35, func=$180load_global.32, args=[Var($const192.34, <string>:6), Var($const194.35, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$180load_global.32', '$200call.36', '$const192.34', '$const194.35']
    $binop_sub210.37 = $170binary_subscr.31 - $200call.36 ['$170binary_subscr.31', '$200call.36', '$binop_sub210.37']
    $218call.38 = call $122load_global.21($164unary_negative.28, $binop_sub210.37, func=$122load_global.21, args=[Var($164unary_negative.28, <string>:6), Var($binop_sub210.37, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$122load_global.21', '$164unary_negative.28', '$218call.38', '$binop_sub210.37']
    $228get_iter.39 = getiter(value=$218call.38) ['$218call.38', '$228get_iter.39']
    $phi230.0 = $228get_iter.39              ['$228get_iter.39', '$phi230.0']
    jump 230                                 []
label 230:
    $230for_iter.1 = iternext(value=$phi230.0) ['$230for_iter.1', '$phi230.0']
    $230for_iter.2 = pair_first(value=$230for_iter.1) ['$230for_iter.1', '$230for_iter.2']
    $230for_iter.3 = pair_second(value=$230for_iter.1) ['$230for_iter.1', '$230for_iter.3']
    $phi232.1 = $230for_iter.2               ['$230for_iter.2', '$phi232.1']
    branch $230for_iter.3, 232, 240          ['$230for_iter.3']
label 232:
    index00 = $phi232.1                      ['$phi232.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 230                                 []
label 240:
    $242return_value.1 = cast(value=out0)    ['$242return_value.1', 'out0']
    return $242return_value.1                ['$242return_value.1']

2023-08-13 11:42:43,870 ==== SSA block analysis pass on 0
2023-08-13 11:42:43,870 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F69775A610>
2023-08-13 11:42:43,870 on stmt: x = arg(0, name=x)
2023-08-13 11:42:43,870 on stmt: full_shape0 = getattr(value=x, attr=shape)
2023-08-13 11:42:43,870 on stmt: $18load_global.2.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:43,870 on stmt: $30load_method.4.1 = getattr(value=$18load_global.2.1, attr=empty)
2023-08-13 11:42:43,870 on stmt: $54load_global.6.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:43,870 on stmt: $66load_attr.7.1 = getattr(value=$54load_global.6.1, attr=bool_)
2023-08-13 11:42:43,870 on stmt: out0 = call $30load_method.4.1(full_shape0, func=$30load_method.4.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($66load_attr.7.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:43,870 on stmt: $const94.9.1 = const(int, 0)
2023-08-13 11:42:43,870 on stmt: $const98.11.1 = const(NoneType, None)
2023-08-13 11:42:43,870 on stmt: $const100.12.1 = const(int, 1)
2023-08-13 11:42:43,870 on stmt: $102build_slice.13.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:43,871 on stmt: $102build_slice.14.1 = call $102build_slice.13.1($const98.11.1, $const100.12.1, func=$102build_slice.13.1, args=(Var($const98.11.1, <string>:4), Var($const100.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:43,871 on stmt: out0[$102build_slice.14.1] = $const94.9.1
2023-08-13 11:42:43,871 on stmt: $const108.15.1 = const(int, 0)
2023-08-13 11:42:43,871 on stmt: $const112.17.1 = const(int, -1)
2023-08-13 11:42:43,871 on stmt: $const114.18.1 = const(NoneType, None)
2023-08-13 11:42:43,871 on stmt: $116build_slice.19.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:43,871 on stmt: $116build_slice.20.1 = call $116build_slice.19.1($const112.17.1, $const114.18.1, func=$116build_slice.19.1, args=(Var($const112.17.1, <string>:5), Var($const114.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:43,871 on stmt: out0[$116build_slice.20.1] = $const108.15.1
2023-08-13 11:42:43,871 on stmt: $122load_global.21.1 = global(range: <class 'range'>)
2023-08-13 11:42:43,871 on stmt: $134load_global.23.1 = global(min: <built-in function min>)
2023-08-13 11:42:43,871 on stmt: $const146.25.1 = const(int, 0)
2023-08-13 11:42:43,871 on stmt: $const148.26.1 = const(int, -1)
2023-08-13 11:42:43,871 on stmt: $154call.27.1 = call $134load_global.23.1($const146.25.1, $const148.26.1, func=$134load_global.23.1, args=[Var($const146.25.1, <string>:6), Var($const148.26.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:43,871 on stmt: $164unary_negative.28.1 = unary(fn=<built-in function neg>, value=$154call.27.1)
2023-08-13 11:42:43,871 on stmt: $const168.30.1 = const(int, 0)
2023-08-13 11:42:43,871 on stmt: $170binary_subscr.31.1 = getitem(value=full_shape0, index=$const168.30.1, fn=<built-in function getitem>)
2023-08-13 11:42:43,871 on stmt: $180load_global.32.1 = global(max: <built-in function max>)
2023-08-13 11:42:43,871 on stmt: $const192.34.1 = const(int, 0)
2023-08-13 11:42:43,871 on stmt: $const194.35.1 = const(int, 1)
2023-08-13 11:42:43,872 on stmt: $200call.36.1 = call $180load_global.32.1($const192.34.1, $const194.35.1, func=$180load_global.32.1, args=[Var($const192.34.1, <string>:6), Var($const194.35.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:43,872 on stmt: $binop_sub210.37.1 = $170binary_subscr.31.1 - $200call.36.1
2023-08-13 11:42:43,872 on stmt: $218call.38.1 = call $122load_global.21.1($164unary_negative.28.1, $binop_sub210.37.1, func=$122load_global.21.1, args=[Var($164unary_negative.28.1, <string>:6), Var($binop_sub210.37.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:43,872 on stmt: $228get_iter.39.1 = getiter(value=$218call.38.1)
2023-08-13 11:42:43,872 on stmt: $phi230.0.1 = $228get_iter.39.1
2023-08-13 11:42:43,872 on stmt: jump 230
2023-08-13 11:42:43,872 ==== SSA block analysis pass on 230
2023-08-13 11:42:43,872 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F69775A610>
2023-08-13 11:42:43,872 on stmt: $230for_iter.1.1 = iternext(value=$phi230.0.1)
2023-08-13 11:42:43,872 on stmt: $230for_iter.2.1 = pair_first(value=$230for_iter.1.1)
2023-08-13 11:42:43,872 on stmt: $230for_iter.3.1 = pair_second(value=$230for_iter.1.1)
2023-08-13 11:42:43,872 on stmt: $phi232.1.1 = $230for_iter.2.1
2023-08-13 11:42:43,872 on stmt: branch $230for_iter.3.1, 232, 242
2023-08-13 11:42:43,872 ==== SSA block analysis pass on 232
2023-08-13 11:42:43,872 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F69775A610>
2023-08-13 11:42:43,872 on stmt: index00 = $phi232.1.1
2023-08-13 11:42:43,872 on stmt: jump 240
2023-08-13 11:42:43,872 ==== SSA block analysis pass on 242
2023-08-13 11:42:43,872 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F69775A610>
2023-08-13 11:42:43,872 on stmt: $242return_value.1.1 = cast(value=out0)
2023-08-13 11:42:43,873 on stmt: return $242return_value.1.1
2023-08-13 11:42:43,873 ==== SSA block analysis pass on 240
2023-08-13 11:42:43,873 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F69775A610>
2023-08-13 11:42:43,873 on stmt: $const6.1 = const(int, 0)
2023-08-13 11:42:43,873 on stmt: stencil_index = $const6.1 + index00
2023-08-13 11:42:43,873 on stmt: $8binary_subscr.2 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:43,873 on stmt: $const20.4 = const(int, -1)
2023-08-13 11:42:43,873 on stmt: stencil_index.1 = $const20.4 + index00
2023-08-13 11:42:43,873 on stmt: $22binary_subscr.5 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2023-08-13 11:42:43,873 on stmt: $32compare_op.6 = $8binary_subscr.2 < $22binary_subscr.5
2023-08-13 11:42:43,873 on stmt: $const40.8 = const(int, 0)
2023-08-13 11:42:43,873 on stmt: stencil_index.2 = $const40.8 + index00
2023-08-13 11:42:43,873 on stmt: $42binary_subscr.9 = getitem(value=x, index=stencil_index.2, fn=<built-in function getitem>)
2023-08-13 11:42:43,873 on stmt: $const54.11 = const(int, 1)
2023-08-13 11:42:43,873 on stmt: stencil_index.3 = $const54.11 + index00
2023-08-13 11:42:43,873 on stmt: $56binary_subscr.12 = getitem(value=x, index=stencil_index.3, fn=<built-in function getitem>)
2023-08-13 11:42:43,873 on stmt: $66compare_op.13 = $42binary_subscr.9 <= $56binary_subscr.12
2023-08-13 11:42:43,873 on stmt: $binop_and_72.14 = $32compare_op.6 & $66compare_op.13
2023-08-13 11:42:43,873 on stmt: $76return_value.15 = cast(value=$binop_and_72.14)
2023-08-13 11:42:43,873 on stmt: out0[index00] = $76return_value.15
2023-08-13 11:42:43,874 on stmt: jump 241
2023-08-13 11:42:43,874 ==== SSA block analysis pass on 241
2023-08-13 11:42:43,874 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F69775A610>
2023-08-13 11:42:43,874 on stmt: jump 230
2023-08-13 11:42:43,874 defs defaultdict(<class 'list'>,
            {'$102build_slice.13.1': [<numba.core.ir.Assign object at 0x000001F69707A590>],
             '$102build_slice.14.1': [<numba.core.ir.Assign object at 0x000001F697079FD0>],
             '$116build_slice.19.1': [<numba.core.ir.Assign object at 0x000001F6977587D0>],
             '$116build_slice.20.1': [<numba.core.ir.Assign object at 0x000001F69775BFD0>],
             '$122load_global.21.1': [<numba.core.ir.Assign object at 0x000001F69775BA90>],
             '$134load_global.23.1': [<numba.core.ir.Assign object at 0x000001F69775BC50>],
             '$154call.27.1': [<numba.core.ir.Assign object at 0x000001F69775B550>],
             '$164unary_negative.28.1': [<numba.core.ir.Assign object at 0x000001F69775B2D0>],
             '$170binary_subscr.31.1': [<numba.core.ir.Assign object at 0x000001F69775A690>],
             '$180load_global.32.1': [<numba.core.ir.Assign object at 0x000001F6977597D0>],
             '$18load_global.2.1': [<numba.core.ir.Assign object at 0x000001F69707A910>],
             '$200call.36.1': [<numba.core.ir.Assign object at 0x000001F6977599D0>],
             '$218call.38.1': [<numba.core.ir.Assign object at 0x000001F697759DD0>],
             '$228get_iter.39.1': [<numba.core.ir.Assign object at 0x000001F697759FD0>],
             '$22binary_subscr.5': [<numba.core.ir.Assign object at 0x000001F697059C90>],
             '$230for_iter.1.1': [<numba.core.ir.Assign object at 0x000001F69775A1D0>],
             '$230for_iter.2.1': [<numba.core.ir.Assign object at 0x000001F69775A390>],
             '$230for_iter.3.1': [<numba.core.ir.Assign object at 0x000001F69775A4D0>],
             '$242return_value.1.1': [<numba.core.ir.Assign object at 0x000001F69772A650>],
             '$30load_method.4.1': [<numba.core.ir.Assign object at 0x000001F697079690>],
             '$32compare_op.6': [<numba.core.ir.Assign object at 0x000001F69703EE90>],
             '$42binary_subscr.9': [<numba.core.ir.Assign object at 0x000001F6970590D0>],
             '$54load_global.6.1': [<numba.core.ir.Assign object at 0x000001F6970790D0>],
             '$56binary_subscr.12': [<numba.core.ir.Assign object at 0x000001F697058C50>],
             '$66compare_op.13': [<numba.core.ir.Assign object at 0x000001F696EACA90>],
             '$66load_attr.7.1': [<numba.core.ir.Assign object at 0x000001F697078D50>],
             '$76return_value.15': [<numba.core.ir.Assign object at 0x000001F697048D50>],
             '$8binary_subscr.2': [<numba.core.ir.Assign object at 0x000001F697059B90>],
             '$binop_and_72.14': [<numba.core.ir.Assign object at 0x000001F69704B010>],
             '$binop_sub210.37.1': [<numba.core.ir.Assign object at 0x000001F697759B90>],
             '$const100.12.1': [<numba.core.ir.Assign object at 0x000001F697078190>],
             '$const108.15.1': [<numba.core.ir.Assign object at 0x000001F69775B5D0>],
             '$const112.17.1': [<numba.core.ir.Assign object at 0x000001F69775ACD0>],
             '$const114.18.1': [<numba.core.ir.Assign object at 0x000001F697759650>],
             '$const146.25.1': [<numba.core.ir.Assign object at 0x000001F69775BB50>],
             '$const148.26.1': [<numba.core.ir.Assign object at 0x000001F69775B890>],
             '$const168.30.1': [<numba.core.ir.Assign object at 0x000001F69775AAD0>],
             '$const192.34.1': [<numba.core.ir.Assign object at 0x000001F697759390>],
             '$const194.35.1': [<numba.core.ir.Assign object at 0x000001F697759890>],
             '$const20.4': [<numba.core.ir.Assign object at 0x000001F69704E150>],
             '$const40.8': [<numba.core.ir.Assign object at 0x000001F69703CE10>],
             '$const54.11': [<numba.core.ir.Assign object at 0x000001F696EAD410>],
             '$const6.1': [<numba.core.ir.Assign object at 0x000001F6976FA810>],
             '$const94.9.1': [<numba.core.ir.Assign object at 0x000001F6970784D0>],
             '$const98.11.1': [<numba.core.ir.Assign object at 0x000001F697079B90>],
             '$phi230.0.1': [<numba.core.ir.Assign object at 0x000001F69707A950>],
             '$phi232.1.1': [<numba.core.ir.Assign object at 0x000001F697758650>],
             'full_shape0': [<numba.core.ir.Assign object at 0x000001F697079D90>],
             'index00': [<numba.core.ir.Assign object at 0x000001F6977580D0>],
             'out0': [<numba.core.ir.Assign object at 0x000001F697078850>],
             'stencil_index': [<numba.core.ir.Assign object at 0x000001F697059F10>],
             'stencil_index.1': [<numba.core.ir.Assign object at 0x000001F697059C50>],
             'stencil_index.2': [<numba.core.ir.Assign object at 0x000001F697058990>],
             'stencil_index.3': [<numba.core.ir.Assign object at 0x000001F697059010>],
             'x': [<numba.core.ir.Assign object at 0x000001F697079C10>]})
2023-08-13 11:42:43,875 SSA violators set()
2023-08-13 11:42:44,248 bytecode dump:
>          0	NOP(arg=None, lineno=1080)
           2	RESUME(arg=0, lineno=1080)
           4	LOAD_GLOBAL(arg=1, lineno=1094)
          16	LOAD_FAST(arg=0, lineno=1094)
          18	PRECALL(arg=1, lineno=1094)
          22	CALL(arg=1, lineno=1094)
          32	LOAD_FAST(arg=1, lineno=1094)
          34	LOAD_CONST(arg=1, lineno=1094)
          36	LOAD_CONST(arg=1, lineno=1094)
          38	BUILD_SLICE(arg=2, lineno=1094)
          40	STORE_SUBSCR(arg=None, lineno=1094)
          44	LOAD_CONST(arg=1, lineno=1094)
          46	RETURN_VALUE(arg=None, lineno=1094)
2023-08-13 11:42:44,249 pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-13 11:42:44,249 stack: []
2023-08-13 11:42:44,249 state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-13 11:42:44,249 dispatch pc=0, inst=NOP(arg=None, lineno=1080)
2023-08-13 11:42:44,249 stack []
2023-08-13 11:42:44,250 dispatch pc=2, inst=RESUME(arg=0, lineno=1080)
2023-08-13 11:42:44,250 stack []
2023-08-13 11:42:44,250 dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=1094)
2023-08-13 11:42:44,250 stack []
2023-08-13 11:42:44,250 dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1094)
2023-08-13 11:42:44,250 stack ['$null$4.1', '$4load_global.0']
2023-08-13 11:42:44,250 dispatch pc=18, inst=PRECALL(arg=1, lineno=1094)
2023-08-13 11:42:44,251 stack ['$null$4.1', '$4load_global.0', '$x16.2']
2023-08-13 11:42:44,251 dispatch pc=22, inst=CALL(arg=1, lineno=1094)
2023-08-13 11:42:44,251 stack ['$null$4.1', '$4load_global.0', '$x16.2']
2023-08-13 11:42:44,251 dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=1094)
2023-08-13 11:42:44,251 stack ['$22call.3']
2023-08-13 11:42:44,251 dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=1094)
2023-08-13 11:42:44,251 stack ['$22call.3', '$y32.4']
2023-08-13 11:42:44,251 dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=1094)
2023-08-13 11:42:44,251 stack ['$22call.3', '$y32.4', '$const34.5']
2023-08-13 11:42:44,251 dispatch pc=38, inst=BUILD_SLICE(arg=2, lineno=1094)
2023-08-13 11:42:44,251 stack ['$22call.3', '$y32.4', '$const34.5', '$const36.6']
2023-08-13 11:42:44,251 dispatch pc=40, inst=STORE_SUBSCR(arg=None, lineno=1094)
2023-08-13 11:42:44,251 stack ['$22call.3', '$y32.4', '$38build_slice.8']
2023-08-13 11:42:44,251 dispatch pc=44, inst=LOAD_CONST(arg=1, lineno=1094)
2023-08-13 11:42:44,251 stack []
2023-08-13 11:42:44,251 dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=1094)
2023-08-13 11:42:44,251 stack ['$const44.9']
2023-08-13 11:42:44,251 end state. edges=[]
2023-08-13 11:42:44,251 -------------------------Prune PHIs-------------------------
2023-08-13 11:42:44,252 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-08-13 11:42:44,252 defmap: {}
2023-08-13 11:42:44,252 phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:44,252 changing phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:44,252 keep phismap: {}
2023-08-13 11:42:44,252 new_out: defaultdict(<class 'dict'>, {})
2023-08-13 11:42:44,252 ----------------------DONE Prune PHIs-----------------------
2023-08-13 11:42:44,252 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'res': '$x16.2'}), (18, {}), (20, {}), (22, {'func': '$4load_global.0', 'args': ['$x16.2'], 'kw_names': None, 'res': '$22call.3'}), (24, {}), (26, {}), (28, {}), (30, {}), (32, {'res': '$y32.4'}), (34, {'res': '$const34.5'}), (36, {'res': '$const36.6'}), (38, {'start': '$const34.5', 'stop': '$const36.6', 'step': None, 'res': '$38build_slice.8', 'slicevar': '$38build_slice.7'}), (40, {'target': '$y32.4', 'index': '$38build_slice.8', 'value': '$22call.3'}), (42, {}), (44, {'res': '$const44.9'}), (46, {'retval': '$const44.9', 'castval': '$46return_value.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:44,252 label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $4load_global.0 = global(_localmin_sten: <numba.stencils.stencil.StencilFunc object at 0x000001F696E7C0D0>) ['$4load_global.0']
    $22call.3 = call $4load_global.0(x, func=$4load_global.0, args=[Var(x, utils.py:1080)], kws=(), vararg=None, varkwarg=None, target=None) ['$22call.3', '$4load_global.0', 'x']
    $const34.5 = const(NoneType, None)       ['$const34.5']
    $const36.6 = const(NoneType, None)       ['$const36.6']
    $38build_slice.7 = global(slice: <class 'slice'>) ['$38build_slice.7']
    $38build_slice.8 = call $38build_slice.7($const34.5, $const36.6, func=$38build_slice.7, args=(Var($const34.5, utils.py:1094), Var($const36.6, utils.py:1094)), kws=(), vararg=None, varkwarg=None, target=None) ['$38build_slice.7', '$38build_slice.8', '$const34.5', '$const36.6']
    y[$38build_slice.8] = $22call.3          ['$22call.3', '$38build_slice.8', 'y']
    $const44.9 = const(NoneType, None)       ['$const44.9']
    $46return_value.10 = cast(value=$const44.9) ['$46return_value.10', '$const44.9']
    return $46return_value.10                ['$46return_value.10']

2023-08-13 11:42:44,259 ==== SSA block analysis pass on 0
2023-08-13 11:42:44,259 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6977DD3D0>
2023-08-13 11:42:44,259 on stmt: x = arg(0, name=x)
2023-08-13 11:42:44,260 on stmt: y = arg(1, name=y)
2023-08-13 11:42:44,260 on stmt: $4load_global.0 = global(_localmin_sten: <numba.stencils.stencil.StencilFunc object at 0x000001F696E7C0D0>)
2023-08-13 11:42:44,260 on stmt: $22call.3 = call $4load_global.0(x, func=$4load_global.0, args=[Var(x, utils.py:1080)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:44,260 on stmt: $const34.5 = const(NoneType, None)
2023-08-13 11:42:44,260 on stmt: $const36.6 = const(NoneType, None)
2023-08-13 11:42:44,260 on stmt: $38build_slice.7 = global(slice: <class 'slice'>)
2023-08-13 11:42:44,260 on stmt: $38build_slice.8 = call $38build_slice.7($const34.5, $const36.6, func=$38build_slice.7, args=(Var($const34.5, utils.py:1094), Var($const36.6, utils.py:1094)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:44,260 on stmt: y[slice(None, None, None)] = $22call.3
2023-08-13 11:42:44,260 on stmt: $const44.9 = const(NoneType, None)
2023-08-13 11:42:44,260 on stmt: $46return_value.10 = cast(value=$const44.9)
2023-08-13 11:42:44,260 on stmt: return $46return_value.10
2023-08-13 11:42:44,260 defs defaultdict(<class 'list'>,
            {'$22call.3': [<numba.core.ir.Assign object at 0x000001F6977D8A10>],
             '$38build_slice.7': [<numba.core.ir.Assign object at 0x000001F6977D9650>],
             '$38build_slice.8': [<numba.core.ir.Assign object at 0x000001F6977D9550>],
             '$46return_value.10': [<numba.core.ir.Assign object at 0x000001F6977DD6D0>],
             '$4load_global.0': [<numba.core.ir.Assign object at 0x000001F6977D82D0>],
             '$const34.5': [<numba.core.ir.Assign object at 0x000001F6977D84D0>],
             '$const36.6': [<numba.core.ir.Assign object at 0x000001F6977D8210>],
             '$const44.9': [<numba.core.ir.Assign object at 0x000001F6977D9510>],
             'x': [<numba.core.ir.Assign object at 0x000001F6977D9450>],
             'y': [<numba.core.ir.Assign object at 0x000001F6977D9350>]})
2023-08-13 11:42:44,260 SSA violators set()
2023-08-13 11:42:44,397 bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	RESUME(arg=0, lineno=1)
           4	LOAD_FAST(arg=0, lineno=2)
           6	LOAD_ATTR(arg=0, lineno=2)
          16	STORE_FAST(arg=1, lineno=2)
          18	LOAD_GLOBAL(arg=2, lineno=3)
          30	LOAD_METHOD(arg=2, lineno=3)
          52	LOAD_FAST(arg=1, lineno=3)
          54	LOAD_GLOBAL(arg=2, lineno=3)
          66	LOAD_ATTR(arg=3, lineno=3)
          76	KW_NAMES(arg=1, lineno=3)
          78	PRECALL(arg=2, lineno=3)
          82	CALL(arg=2, lineno=3)
          92	STORE_FAST(arg=2, lineno=3)
          94	LOAD_CONST(arg=2, lineno=4)
          96	LOAD_FAST(arg=2, lineno=4)
          98	LOAD_CONST(arg=0, lineno=4)
         100	LOAD_CONST(arg=3, lineno=4)
         102	BUILD_SLICE(arg=2, lineno=4)
         104	STORE_SUBSCR(arg=None, lineno=4)
         108	LOAD_CONST(arg=2, lineno=5)
         110	LOAD_FAST(arg=2, lineno=5)
         112	LOAD_CONST(arg=4, lineno=5)
         114	LOAD_CONST(arg=0, lineno=5)
         116	BUILD_SLICE(arg=2, lineno=5)
         118	STORE_SUBSCR(arg=None, lineno=5)
         122	LOAD_GLOBAL(arg=9, lineno=6)
         134	LOAD_GLOBAL(arg=11, lineno=6)
         146	LOAD_CONST(arg=2, lineno=6)
         148	LOAD_CONST(arg=4, lineno=6)
         150	PRECALL(arg=2, lineno=6)
         154	CALL(arg=2, lineno=6)
         164	UNARY_NEGATIVE(arg=None, lineno=6)
         166	LOAD_FAST(arg=1, lineno=6)
         168	LOAD_CONST(arg=2, lineno=6)
         170	BINARY_SUBSCR(arg=None, lineno=6)
         180	LOAD_GLOBAL(arg=13, lineno=6)
         192	LOAD_CONST(arg=2, lineno=6)
         194	LOAD_CONST(arg=3, lineno=6)
         196	PRECALL(arg=2, lineno=6)
         200	CALL(arg=2, lineno=6)
         210	BINARY_OP(arg=10, lineno=6)
         214	PRECALL(arg=2, lineno=6)
         218	CALL(arg=2, lineno=6)
         228	GET_ITER(arg=None, lineno=6)
>        230	FOR_ITER(arg=4, lineno=6)
         232	STORE_FAST(arg=3, lineno=6)
         234	LOAD_CONST(arg=2, lineno=7)
         236	STORE_FAST(arg=4, lineno=7)
         238	JUMP_BACKWARD(arg=5, lineno=7)
>        240	LOAD_FAST(arg=2, lineno=8)
         242	RETURN_VALUE(arg=None, lineno=8)
2023-08-13 11:42:44,397 pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-13 11:42:44,397 stack: []
2023-08-13 11:42:44,397 state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-13 11:42:44,397 dispatch pc=0, inst=NOP(arg=None, lineno=1)
2023-08-13 11:42:44,398 stack []
2023-08-13 11:42:44,398 dispatch pc=2, inst=RESUME(arg=0, lineno=1)
2023-08-13 11:42:44,398 stack []
2023-08-13 11:42:44,398 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2)
2023-08-13 11:42:44,398 stack []
2023-08-13 11:42:44,398 dispatch pc=6, inst=LOAD_ATTR(arg=0, lineno=2)
2023-08-13 11:42:44,398 stack ['$x4.0']
2023-08-13 11:42:44,398 dispatch pc=16, inst=STORE_FAST(arg=1, lineno=2)
2023-08-13 11:42:44,398 stack ['$6load_attr.1']
2023-08-13 11:42:44,398 dispatch pc=18, inst=LOAD_GLOBAL(arg=2, lineno=3)
2023-08-13 11:42:44,398 stack []
2023-08-13 11:42:44,398 dispatch pc=30, inst=LOAD_METHOD(arg=2, lineno=3)
2023-08-13 11:42:44,398 stack ['$18load_global.2']
2023-08-13 11:42:44,398 dispatch pc=52, inst=LOAD_FAST(arg=1, lineno=3)
2023-08-13 11:42:44,398 stack ['$null$30.3', '$30load_method.4']
2023-08-13 11:42:44,398 dispatch pc=54, inst=LOAD_GLOBAL(arg=2, lineno=3)
2023-08-13 11:42:44,398 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5']
2023-08-13 11:42:44,398 dispatch pc=66, inst=LOAD_ATTR(arg=3, lineno=3)
2023-08-13 11:42:44,398 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$54load_global.6']
2023-08-13 11:42:44,399 dispatch pc=76, inst=KW_NAMES(arg=1, lineno=3)
2023-08-13 11:42:44,399 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$66load_attr.7']
2023-08-13 11:42:44,399 dispatch pc=78, inst=PRECALL(arg=2, lineno=3)
2023-08-13 11:42:44,399 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$66load_attr.7']
2023-08-13 11:42:44,399 dispatch pc=82, inst=CALL(arg=2, lineno=3)
2023-08-13 11:42:44,399 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$66load_attr.7']
2023-08-13 11:42:44,399 dispatch pc=92, inst=STORE_FAST(arg=2, lineno=3)
2023-08-13 11:42:44,399 stack ['$82call.8']
2023-08-13 11:42:44,399 dispatch pc=94, inst=LOAD_CONST(arg=2, lineno=4)
2023-08-13 11:42:44,399 stack []
2023-08-13 11:42:44,399 dispatch pc=96, inst=LOAD_FAST(arg=2, lineno=4)
2023-08-13 11:42:44,399 stack ['$const94.9']
2023-08-13 11:42:44,399 dispatch pc=98, inst=LOAD_CONST(arg=0, lineno=4)
2023-08-13 11:42:44,400 stack ['$const94.9', '$out096.10']
2023-08-13 11:42:44,400 dispatch pc=100, inst=LOAD_CONST(arg=3, lineno=4)
2023-08-13 11:42:44,400 stack ['$const94.9', '$out096.10', '$const98.11']
2023-08-13 11:42:44,400 dispatch pc=102, inst=BUILD_SLICE(arg=2, lineno=4)
2023-08-13 11:42:44,400 stack ['$const94.9', '$out096.10', '$const98.11', '$const100.12']
2023-08-13 11:42:44,400 dispatch pc=104, inst=STORE_SUBSCR(arg=None, lineno=4)
2023-08-13 11:42:44,401 stack ['$const94.9', '$out096.10', '$102build_slice.14']
2023-08-13 11:42:44,401 dispatch pc=108, inst=LOAD_CONST(arg=2, lineno=5)
2023-08-13 11:42:44,401 stack []
2023-08-13 11:42:44,401 dispatch pc=110, inst=LOAD_FAST(arg=2, lineno=5)
2023-08-13 11:42:44,401 stack ['$const108.15']
2023-08-13 11:42:44,401 dispatch pc=112, inst=LOAD_CONST(arg=4, lineno=5)
2023-08-13 11:42:44,401 stack ['$const108.15', '$out0110.16']
2023-08-13 11:42:44,401 dispatch pc=114, inst=LOAD_CONST(arg=0, lineno=5)
2023-08-13 11:42:44,401 stack ['$const108.15', '$out0110.16', '$const112.17']
2023-08-13 11:42:44,401 dispatch pc=116, inst=BUILD_SLICE(arg=2, lineno=5)
2023-08-13 11:42:44,401 stack ['$const108.15', '$out0110.16', '$const112.17', '$const114.18']
2023-08-13 11:42:44,401 dispatch pc=118, inst=STORE_SUBSCR(arg=None, lineno=5)
2023-08-13 11:42:44,401 stack ['$const108.15', '$out0110.16', '$116build_slice.20']
2023-08-13 11:42:44,401 dispatch pc=122, inst=LOAD_GLOBAL(arg=9, lineno=6)
2023-08-13 11:42:44,401 stack []
2023-08-13 11:42:44,401 dispatch pc=134, inst=LOAD_GLOBAL(arg=11, lineno=6)
2023-08-13 11:42:44,401 stack ['$null$122.22', '$122load_global.21']
2023-08-13 11:42:44,401 dispatch pc=146, inst=LOAD_CONST(arg=2, lineno=6)
2023-08-13 11:42:44,402 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23']
2023-08-13 11:42:44,402 dispatch pc=148, inst=LOAD_CONST(arg=4, lineno=6)
2023-08-13 11:42:44,402 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23', '$const146.25']
2023-08-13 11:42:44,402 dispatch pc=150, inst=PRECALL(arg=2, lineno=6)
2023-08-13 11:42:44,402 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23', '$const146.25', '$const148.26']
2023-08-13 11:42:44,402 dispatch pc=154, inst=CALL(arg=2, lineno=6)
2023-08-13 11:42:44,402 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23', '$const146.25', '$const148.26']
2023-08-13 11:42:44,402 dispatch pc=164, inst=UNARY_NEGATIVE(arg=None, lineno=6)
2023-08-13 11:42:44,402 stack ['$null$122.22', '$122load_global.21', '$154call.27']
2023-08-13 11:42:44,402 dispatch pc=166, inst=LOAD_FAST(arg=1, lineno=6)
2023-08-13 11:42:44,402 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28']
2023-08-13 11:42:44,402 dispatch pc=168, inst=LOAD_CONST(arg=2, lineno=6)
2023-08-13 11:42:44,402 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$full_shape0166.29']
2023-08-13 11:42:44,402 dispatch pc=170, inst=BINARY_SUBSCR(arg=None, lineno=6)
2023-08-13 11:42:44,402 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$full_shape0166.29', '$const168.30']
2023-08-13 11:42:44,402 dispatch pc=180, inst=LOAD_GLOBAL(arg=13, lineno=6)
2023-08-13 11:42:44,402 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31']
2023-08-13 11:42:44,403 dispatch pc=192, inst=LOAD_CONST(arg=2, lineno=6)
2023-08-13 11:42:44,403 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32']
2023-08-13 11:42:44,403 dispatch pc=194, inst=LOAD_CONST(arg=3, lineno=6)
2023-08-13 11:42:44,403 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32', '$const192.34']
2023-08-13 11:42:44,403 dispatch pc=196, inst=PRECALL(arg=2, lineno=6)
2023-08-13 11:42:44,403 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32', '$const192.34', '$const194.35']
2023-08-13 11:42:44,403 dispatch pc=200, inst=CALL(arg=2, lineno=6)
2023-08-13 11:42:44,403 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32', '$const192.34', '$const194.35']
2023-08-13 11:42:44,403 dispatch pc=210, inst=BINARY_OP(arg=10, lineno=6)
2023-08-13 11:42:44,403 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$200call.36']
2023-08-13 11:42:44,403 dispatch pc=214, inst=PRECALL(arg=2, lineno=6)
2023-08-13 11:42:44,403 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$binop_sub210.37']
2023-08-13 11:42:44,403 dispatch pc=218, inst=CALL(arg=2, lineno=6)
2023-08-13 11:42:44,403 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$binop_sub210.37']
2023-08-13 11:42:44,403 dispatch pc=228, inst=GET_ITER(arg=None, lineno=6)
2023-08-13 11:42:44,403 stack ['$218call.38']
2023-08-13 11:42:44,403 end state. edges=[Edge(pc=230, stack=('$228get_iter.39',), blockstack=(), npush=0)]
2023-08-13 11:42:44,403 pending: deque([State(pc_initial=230 nstack_initial=1)])
2023-08-13 11:42:44,404 stack: ['$phi230.0']
2023-08-13 11:42:44,404 state.pc_initial: State(pc_initial=230 nstack_initial=1)
2023-08-13 11:42:44,404 dispatch pc=230, inst=FOR_ITER(arg=4, lineno=6)
2023-08-13 11:42:44,404 stack ['$phi230.0']
2023-08-13 11:42:44,404 end state. edges=[Edge(pc=240, stack=(), blockstack=(), npush=0), Edge(pc=232, stack=('$phi230.0', '$230for_iter.2'), blockstack=(), npush=0)]
2023-08-13 11:42:44,404 pending: deque([State(pc_initial=240 nstack_initial=0), State(pc_initial=232 nstack_initial=2)])
2023-08-13 11:42:44,404 stack: []
2023-08-13 11:42:44,404 state.pc_initial: State(pc_initial=240 nstack_initial=0)
2023-08-13 11:42:44,404 dispatch pc=240, inst=LOAD_FAST(arg=2, lineno=8)
2023-08-13 11:42:44,404 stack []
2023-08-13 11:42:44,404 dispatch pc=242, inst=RETURN_VALUE(arg=None, lineno=8)
2023-08-13 11:42:44,404 stack ['$out0240.0']
2023-08-13 11:42:44,404 end state. edges=[]
2023-08-13 11:42:44,404 pending: deque([State(pc_initial=232 nstack_initial=2)])
2023-08-13 11:42:44,404 stack: ['$phi232.0', '$phi232.1']
2023-08-13 11:42:44,404 state.pc_initial: State(pc_initial=232 nstack_initial=2)
2023-08-13 11:42:44,404 dispatch pc=232, inst=STORE_FAST(arg=3, lineno=6)
2023-08-13 11:42:44,404 stack ['$phi232.0', '$phi232.1']
2023-08-13 11:42:44,404 dispatch pc=234, inst=LOAD_CONST(arg=2, lineno=7)
2023-08-13 11:42:44,405 stack ['$phi232.0']
2023-08-13 11:42:44,405 dispatch pc=236, inst=STORE_FAST(arg=4, lineno=7)
2023-08-13 11:42:44,405 stack ['$phi232.0', '$const234.2']
2023-08-13 11:42:44,405 dispatch pc=238, inst=JUMP_BACKWARD(arg=5, lineno=7)
2023-08-13 11:42:44,405 stack ['$phi232.0']
2023-08-13 11:42:44,405 end state. edges=[Edge(pc=230, stack=('$phi232.0',), blockstack=(), npush=0)]
2023-08-13 11:42:44,405 pending: deque([State(pc_initial=230 nstack_initial=1)])
2023-08-13 11:42:44,405 -------------------------Prune PHIs-------------------------
2023-08-13 11:42:44,405 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=230 nstack_initial=1): {'$phi230.0'},
             State(pc_initial=232 nstack_initial=2): {'$phi232.1'},
             State(pc_initial=240 nstack_initial=0): set()})
2023-08-13 11:42:44,405 defmap: {'$phi230.0': State(pc_initial=0 nstack_initial=0),
 '$phi232.1': State(pc_initial=230 nstack_initial=1)}
2023-08-13 11:42:44,405 phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi232.0',
                            State(pc_initial=232 nstack_initial=2))},
             '$phi232.0': {('$phi230.0',
                            State(pc_initial=230 nstack_initial=1))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:44,405 changing phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi230.0',
                            State(pc_initial=230 nstack_initial=1))},
             '$phi232.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:44,406 changing phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:44,406 changing phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:44,406 keep phismap: {'$phi230.0': {('$228get_iter.39', State(pc_initial=0 nstack_initial=0))},
 '$phi232.1': {('$230for_iter.2', State(pc_initial=230 nstack_initial=1))}}
2023-08-13 11:42:44,406 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi230.0': '$228get_iter.39'},
             State(pc_initial=230 nstack_initial=1): {'$phi232.1': '$230for_iter.2'}})
2023-08-13 11:42:44,406 ----------------------DONE Prune PHIs-----------------------
2023-08-13 11:42:44,406 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$x4.0'}), (6, {'item': '$x4.0', 'res': '$6load_attr.1'}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'value': '$6load_attr.1'}), (18, {'idx': 1, 'res': '$18load_global.2'}), (20, {}), (22, {}), (24, {}), (26, {}), (28, {}), (30, {'item': '$18load_global.2', 'res': '$30load_method.4'}), (32, {}), (34, {}), (36, {}), (38, {}), (40, {}), (42, {}), (44, {}), (46, {}), (48, {}), (50, {}), (52, {'res': '$full_shape052.5'}), (54, {'idx': 1, 'res': '$54load_global.6'}), (56, {}), (58, {}), (60, {}), (62, {}), (64, {}), (66, {'item': '$54load_global.6', 'res': '$66load_attr.7'}), (68, {}), (70, {}), (72, {}), (74, {}), (78, {}), (80, {}), (82, {'func': '$30load_method.4', 'args': ['$full_shape052.5', '$66load_attr.7'], 'kw_names': 1, 'res': '$82call.8'}), (84, {}), (86, {}), (88, {}), (90, {}), (92, {'value': '$82call.8'}), (94, {'res': '$const94.9'}), (96, {'res': '$out096.10'}), (98, {'res': '$const98.11'}), (100, {'res': '$const100.12'}), (102, {'start': '$const98.11', 'stop': '$const100.12', 'step': None, 'res': '$102build_slice.14', 'slicevar': '$102build_slice.13'}), (104, {'target': '$out096.10', 'index': '$102build_slice.14', 'value': '$const94.9'}), (106, {}), (108, {'res': '$const108.15'}), (110, {'res': '$out0110.16'}), (112, {'res': '$const112.17'}), (114, {'res': '$const114.18'}), (116, {'start': '$const112.17', 'stop': '$const114.18', 'step': None, 'res': '$116build_slice.20', 'slicevar': '$116build_slice.19'}), (118, {'target': '$out0110.16', 'index': '$116build_slice.20', 'value': '$const108.15'}), (120, {}), (122, {'idx': 4, 'res': '$122load_global.21'}), (124, {}), (126, {}), (128, {}), (130, {}), (132, {}), (134, {'idx': 5, 'res': '$134load_global.23'}), (136, {}), (138, {}), (140, {}), (142, {}), (144, {}), (146, {'res': '$const146.25'}), (148, {'res': '$const148.26'}), (150, {}), (152, {}), (154, {'func': '$134load_global.23', 'args': ['$const146.25', '$const148.26'], 'kw_names': None, 'res': '$154call.27'}), (156, {}), (158, {}), (160, {}), (162, {}), (164, {'value': '$154call.27', 'res': '$164unary_negative.28'}), (166, {'res': '$full_shape0166.29'}), (168, {'res': '$const168.30'}), (170, {'index': '$const168.30', 'target': '$full_shape0166.29', 'res': '$170binary_subscr.31'}), (172, {}), (174, {}), (176, {}), (178, {}), (180, {'idx': 6, 'res': '$180load_global.32'}), (182, {}), (184, {}), (186, {}), (188, {}), (190, {}), (192, {'res': '$const192.34'}), (194, {'res': '$const194.35'}), (196, {}), (198, {}), (200, {'func': '$180load_global.32', 'args': ['$const192.34', '$const194.35'], 'kw_names': None, 'res': '$200call.36'}), (202, {}), (204, {}), (206, {}), (208, {}), (210, {'op': '-', 'lhs': '$170binary_subscr.31', 'rhs': '$200call.36', 'res': '$binop_sub210.37'}), (212, {}), (214, {}), (216, {}), (218, {'func': '$122load_global.21', 'args': ['$164unary_negative.28', '$binop_sub210.37'], 'kw_names': None, 'res': '$218call.38'}), (220, {}), (222, {}), (224, {}), (226, {}), (228, {'value': '$218call.38', 'res': '$228get_iter.39'})), outgoing_phis={'$phi230.0': '$228get_iter.39'}, blockstack=(), active_try_block=None, outgoing_edgepushed={230: ('$228get_iter.39',)})
2023-08-13 11:42:44,407 block_infos State(pc_initial=230 nstack_initial=1):
AdaptBlockInfo(insts=((230, {'iterator': '$phi230.0', 'pair': '$230for_iter.1', 'indval': '$230for_iter.2', 'pred': '$230for_iter.3'}),), outgoing_phis={'$phi232.1': '$230for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={240: (), 232: ('$phi230.0', '$230for_iter.2')})
2023-08-13 11:42:44,407 block_infos State(pc_initial=232 nstack_initial=2):
AdaptBlockInfo(insts=((232, {'value': '$phi232.1'}), (234, {'res': '$const234.2'}), (236, {'value': '$const234.2'}), (238, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={230: ('$phi232.0',)})
2023-08-13 11:42:44,407 block_infos State(pc_initial=240 nstack_initial=0):
AdaptBlockInfo(insts=((240, {'res': '$out0240.0'}), (242, {'retval': '$out0240.0', 'castval': '$242return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:44,408 label 0:
    x = arg(0, name=x)                       ['x']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $18load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>) ['$18load_global.2']
    $30load_method.4 = getattr(value=$18load_global.2, attr=empty) ['$18load_global.2', '$30load_method.4']
    $54load_global.6 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>) ['$54load_global.6']
    $66load_attr.7 = getattr(value=$54load_global.6, attr=bool_) ['$54load_global.6', '$66load_attr.7']
    out0 = call $30load_method.4(full_shape0, func=$30load_method.4, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($66load_attr.7, <string>:3))], vararg=None, varkwarg=None, target=None) ['$30load_method.4', '$66load_attr.7', 'full_shape0', 'out0']
    $const94.9 = const(int, 0)               ['$const94.9']
    $const98.11 = const(NoneType, None)      ['$const98.11']
    $const100.12 = const(int, 1)             ['$const100.12']
    $102build_slice.13 = global(slice: <class 'slice'>) ['$102build_slice.13']
    $102build_slice.14 = call $102build_slice.13($const98.11, $const100.12, func=$102build_slice.13, args=(Var($const98.11, <string>:4), Var($const100.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$102build_slice.13', '$102build_slice.14', '$const100.12', '$const98.11']
    out0[$102build_slice.14] = $const94.9    ['$102build_slice.14', '$const94.9', 'out0']
    $const108.15 = const(int, 0)             ['$const108.15']
    $const112.17 = const(int, -1)            ['$const112.17']
    $const114.18 = const(NoneType, None)     ['$const114.18']
    $116build_slice.19 = global(slice: <class 'slice'>) ['$116build_slice.19']
    $116build_slice.20 = call $116build_slice.19($const112.17, $const114.18, func=$116build_slice.19, args=(Var($const112.17, <string>:5), Var($const114.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$116build_slice.19', '$116build_slice.20', '$const112.17', '$const114.18']
    out0[$116build_slice.20] = $const108.15  ['$116build_slice.20', '$const108.15', 'out0']
    $122load_global.21 = global(range: <class 'range'>) ['$122load_global.21']
    $134load_global.23 = global(min: <built-in function min>) ['$134load_global.23']
    $const146.25 = const(int, 0)             ['$const146.25']
    $const148.26 = const(int, -1)            ['$const148.26']
    $154call.27 = call $134load_global.23($const146.25, $const148.26, func=$134load_global.23, args=[Var($const146.25, <string>:6), Var($const148.26, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$134load_global.23', '$154call.27', '$const146.25', '$const148.26']
    $164unary_negative.28 = unary(fn=<built-in function neg>, value=$154call.27) ['$154call.27', '$164unary_negative.28']
    $const168.30 = const(int, 0)             ['$const168.30']
    $170binary_subscr.31 = getitem(value=full_shape0, index=$const168.30, fn=<built-in function getitem>) ['$170binary_subscr.31', '$const168.30', 'full_shape0']
    $180load_global.32 = global(max: <built-in function max>) ['$180load_global.32']
    $const192.34 = const(int, 0)             ['$const192.34']
    $const194.35 = const(int, 1)             ['$const194.35']
    $200call.36 = call $180load_global.32($const192.34, $const194.35, func=$180load_global.32, args=[Var($const192.34, <string>:6), Var($const194.35, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$180load_global.32', '$200call.36', '$const192.34', '$const194.35']
    $binop_sub210.37 = $170binary_subscr.31 - $200call.36 ['$170binary_subscr.31', '$200call.36', '$binop_sub210.37']
    $218call.38 = call $122load_global.21($164unary_negative.28, $binop_sub210.37, func=$122load_global.21, args=[Var($164unary_negative.28, <string>:6), Var($binop_sub210.37, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$122load_global.21', '$164unary_negative.28', '$218call.38', '$binop_sub210.37']
    $228get_iter.39 = getiter(value=$218call.38) ['$218call.38', '$228get_iter.39']
    $phi230.0 = $228get_iter.39              ['$228get_iter.39', '$phi230.0']
    jump 230                                 []
label 230:
    $230for_iter.1 = iternext(value=$phi230.0) ['$230for_iter.1', '$phi230.0']
    $230for_iter.2 = pair_first(value=$230for_iter.1) ['$230for_iter.1', '$230for_iter.2']
    $230for_iter.3 = pair_second(value=$230for_iter.1) ['$230for_iter.1', '$230for_iter.3']
    $phi232.1 = $230for_iter.2               ['$230for_iter.2', '$phi232.1']
    branch $230for_iter.3, 232, 240          ['$230for_iter.3']
label 232:
    index00 = $phi232.1                      ['$phi232.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 230                                 []
label 240:
    $242return_value.1 = cast(value=out0)    ['$242return_value.1', 'out0']
    return $242return_value.1                ['$242return_value.1']

2023-08-13 11:42:44,426 ==== SSA block analysis pass on 0
2023-08-13 11:42:44,426 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6976A4B10>
2023-08-13 11:42:44,426 on stmt: x = arg(0, name=x)
2023-08-13 11:42:44,426 on stmt: full_shape0 = getattr(value=x, attr=shape)
2023-08-13 11:42:44,426 on stmt: $18load_global.2.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:44,426 on stmt: $30load_method.4.1 = getattr(value=$18load_global.2.1, attr=empty)
2023-08-13 11:42:44,426 on stmt: $54load_global.6.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:44,426 on stmt: $66load_attr.7.1 = getattr(value=$54load_global.6.1, attr=bool_)
2023-08-13 11:42:44,426 on stmt: out0 = call $30load_method.4.1(full_shape0, func=$30load_method.4.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($66load_attr.7.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:44,426 on stmt: $const94.9.1 = const(int, 0)
2023-08-13 11:42:44,427 on stmt: $const98.11.1 = const(NoneType, None)
2023-08-13 11:42:44,427 on stmt: $const100.12.1 = const(int, 1)
2023-08-13 11:42:44,427 on stmt: $102build_slice.13.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:44,427 on stmt: $102build_slice.14.1 = call $102build_slice.13.1($const98.11.1, $const100.12.1, func=$102build_slice.13.1, args=(Var($const98.11.1, <string>:4), Var($const100.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:44,427 on stmt: out0[$102build_slice.14.1] = $const94.9.1
2023-08-13 11:42:44,427 on stmt: $const108.15.1 = const(int, 0)
2023-08-13 11:42:44,427 on stmt: $const112.17.1 = const(int, -1)
2023-08-13 11:42:44,427 on stmt: $const114.18.1 = const(NoneType, None)
2023-08-13 11:42:44,427 on stmt: $116build_slice.19.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:44,427 on stmt: $116build_slice.20.1 = call $116build_slice.19.1($const112.17.1, $const114.18.1, func=$116build_slice.19.1, args=(Var($const112.17.1, <string>:5), Var($const114.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:44,427 on stmt: out0[$116build_slice.20.1] = $const108.15.1
2023-08-13 11:42:44,427 on stmt: $122load_global.21.1 = global(range: <class 'range'>)
2023-08-13 11:42:44,427 on stmt: $134load_global.23.1 = global(min: <built-in function min>)
2023-08-13 11:42:44,427 on stmt: $const146.25.1 = const(int, 0)
2023-08-13 11:42:44,427 on stmt: $const148.26.1 = const(int, -1)
2023-08-13 11:42:44,427 on stmt: $154call.27.1 = call $134load_global.23.1($const146.25.1, $const148.26.1, func=$134load_global.23.1, args=[Var($const146.25.1, <string>:6), Var($const148.26.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:44,427 on stmt: $164unary_negative.28.1 = unary(fn=<built-in function neg>, value=$154call.27.1)
2023-08-13 11:42:44,427 on stmt: $const168.30.1 = const(int, 0)
2023-08-13 11:42:44,428 on stmt: $170binary_subscr.31.1 = getitem(value=full_shape0, index=$const168.30.1, fn=<built-in function getitem>)
2023-08-13 11:42:44,428 on stmt: $180load_global.32.1 = global(max: <built-in function max>)
2023-08-13 11:42:44,428 on stmt: $const192.34.1 = const(int, 0)
2023-08-13 11:42:44,428 on stmt: $const194.35.1 = const(int, 1)
2023-08-13 11:42:44,428 on stmt: $200call.36.1 = call $180load_global.32.1($const192.34.1, $const194.35.1, func=$180load_global.32.1, args=[Var($const192.34.1, <string>:6), Var($const194.35.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:44,428 on stmt: $binop_sub210.37.1 = $170binary_subscr.31.1 - $200call.36.1
2023-08-13 11:42:44,428 on stmt: $218call.38.1 = call $122load_global.21.1($164unary_negative.28.1, $binop_sub210.37.1, func=$122load_global.21.1, args=[Var($164unary_negative.28.1, <string>:6), Var($binop_sub210.37.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:44,428 on stmt: $228get_iter.39.1 = getiter(value=$218call.38.1)
2023-08-13 11:42:44,428 on stmt: $phi230.0.1 = $228get_iter.39.1
2023-08-13 11:42:44,428 on stmt: jump 230
2023-08-13 11:42:44,428 ==== SSA block analysis pass on 230
2023-08-13 11:42:44,428 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6976A4B10>
2023-08-13 11:42:44,428 on stmt: $230for_iter.1.1 = iternext(value=$phi230.0.1)
2023-08-13 11:42:44,428 on stmt: $230for_iter.2.1 = pair_first(value=$230for_iter.1.1)
2023-08-13 11:42:44,428 on stmt: $230for_iter.3.1 = pair_second(value=$230for_iter.1.1)
2023-08-13 11:42:44,428 on stmt: $phi232.1.1 = $230for_iter.2.1
2023-08-13 11:42:44,428 on stmt: branch $230for_iter.3.1, 232, 242
2023-08-13 11:42:44,428 ==== SSA block analysis pass on 232
2023-08-13 11:42:44,429 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6976A4B10>
2023-08-13 11:42:44,429 on stmt: index00 = $phi232.1.1
2023-08-13 11:42:44,429 on stmt: jump 240
2023-08-13 11:42:44,429 ==== SSA block analysis pass on 242
2023-08-13 11:42:44,429 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6976A4B10>
2023-08-13 11:42:44,429 on stmt: $242return_value.1.1 = cast(value=out0)
2023-08-13 11:42:44,429 on stmt: return $242return_value.1.1
2023-08-13 11:42:44,429 ==== SSA block analysis pass on 240
2023-08-13 11:42:44,429 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6976A4B10>
2023-08-13 11:42:44,429 on stmt: $const6.1 = const(int, 0)
2023-08-13 11:42:44,429 on stmt: stencil_index = $const6.1 + index00
2023-08-13 11:42:44,429 on stmt: $8binary_subscr.2 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:44,429 on stmt: $const20.4 = const(int, -1)
2023-08-13 11:42:44,429 on stmt: stencil_index.1 = $const20.4 + index00
2023-08-13 11:42:44,429 on stmt: $22binary_subscr.5 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2023-08-13 11:42:44,429 on stmt: $32compare_op.6 = $8binary_subscr.2 < $22binary_subscr.5
2023-08-13 11:42:44,429 on stmt: $const40.8 = const(int, 0)
2023-08-13 11:42:44,429 on stmt: stencil_index.2 = $const40.8 + index00
2023-08-13 11:42:44,429 on stmt: $42binary_subscr.9 = getitem(value=x, index=stencil_index.2, fn=<built-in function getitem>)
2023-08-13 11:42:44,429 on stmt: $const54.11 = const(int, 1)
2023-08-13 11:42:44,429 on stmt: stencil_index.3 = $const54.11 + index00
2023-08-13 11:42:44,430 on stmt: $56binary_subscr.12 = getitem(value=x, index=stencil_index.3, fn=<built-in function getitem>)
2023-08-13 11:42:44,430 on stmt: $66compare_op.13 = $42binary_subscr.9 <= $56binary_subscr.12
2023-08-13 11:42:44,430 on stmt: $binop_and_72.14 = $32compare_op.6 & $66compare_op.13
2023-08-13 11:42:44,430 on stmt: $76return_value.15 = cast(value=$binop_and_72.14)
2023-08-13 11:42:44,430 on stmt: out0[index00] = $76return_value.15
2023-08-13 11:42:44,430 on stmt: jump 241
2023-08-13 11:42:44,430 ==== SSA block analysis pass on 241
2023-08-13 11:42:44,430 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6976A4B10>
2023-08-13 11:42:44,430 on stmt: jump 230
2023-08-13 11:42:44,431 defs defaultdict(<class 'list'>,
            {'$102build_slice.13.1': [<numba.core.ir.Assign object at 0x000001F69766F790>],
             '$102build_slice.14.1': [<numba.core.ir.Assign object at 0x000001F69766CB90>],
             '$116build_slice.19.1': [<numba.core.ir.Assign object at 0x000001F69766E650>],
             '$116build_slice.20.1': [<numba.core.ir.Assign object at 0x000001F69766E050>],
             '$122load_global.21.1': [<numba.core.ir.Assign object at 0x000001F69766E590>],
             '$134load_global.23.1': [<numba.core.ir.Assign object at 0x000001F69766E8D0>],
             '$154call.27.1': [<numba.core.ir.Assign object at 0x000001F69766EC90>],
             '$164unary_negative.28.1': [<numba.core.ir.Assign object at 0x000001F69766EE90>],
             '$170binary_subscr.31.1': [<numba.core.ir.Assign object at 0x000001F69766FB50>],
             '$180load_global.32.1': [<numba.core.ir.Assign object at 0x000001F69766F910>],
             '$18load_global.2.1': [<numba.core.ir.Assign object at 0x000001F69765B750>],
             '$200call.36.1': [<numba.core.ir.Assign object at 0x000001F69766FFD0>],
             '$218call.38.1': [<numba.core.ir.Assign object at 0x000001F696EAC490>],
             '$228get_iter.39.1': [<numba.core.ir.Assign object at 0x000001F6977D9150>],
             '$22binary_subscr.5': [<numba.core.ir.Assign object at 0x000001F697666A90>],
             '$230for_iter.1.1': [<numba.core.ir.Assign object at 0x000001F6977D86D0>],
             '$230for_iter.2.1': [<numba.core.ir.Assign object at 0x000001F6977D9C90>],
             '$230for_iter.3.1': [<numba.core.ir.Assign object at 0x000001F6977DBE90>],
             '$242return_value.1.1': [<numba.core.ir.Assign object at 0x000001F6977DA5D0>],
             '$30load_method.4.1': [<numba.core.ir.Assign object at 0x000001F69765B010>],
             '$32compare_op.6': [<numba.core.ir.Assign object at 0x000001F69763C250>],
             '$42binary_subscr.9': [<numba.core.ir.Assign object at 0x000001F697666410>],
             '$54load_global.6.1': [<numba.core.ir.Assign object at 0x000001F69766D210>],
             '$56binary_subscr.12': [<numba.core.ir.Assign object at 0x000001F697665290>],
             '$66compare_op.13': [<numba.core.ir.Assign object at 0x000001F69769DF90>],
             '$66load_attr.7.1': [<numba.core.ir.Assign object at 0x000001F69766C6D0>],
             '$76return_value.15': [<numba.core.ir.Assign object at 0x000001F69773E8D0>],
             '$8binary_subscr.2': [<numba.core.ir.Assign object at 0x000001F697664CD0>],
             '$binop_and_72.14': [<numba.core.ir.Assign object at 0x000001F69773C450>],
             '$binop_sub210.37.1': [<numba.core.ir.Assign object at 0x000001F69766C090>],
             '$const100.12.1': [<numba.core.ir.Assign object at 0x000001F69766FE90>],
             '$const108.15.1': [<numba.core.ir.Assign object at 0x000001F69766E450>],
             '$const112.17.1': [<numba.core.ir.Assign object at 0x000001F69766C690>],
             '$const114.18.1': [<numba.core.ir.Assign object at 0x000001F69766DC10>],
             '$const146.25.1': [<numba.core.ir.Assign object at 0x000001F69766EA10>],
             '$const148.26.1': [<numba.core.ir.Assign object at 0x000001F69766EB10>],
             '$const168.30.1': [<numba.core.ir.Assign object at 0x000001F69766EFD0>],
             '$const192.34.1': [<numba.core.ir.Assign object at 0x000001F69766F3D0>],
             '$const194.35.1': [<numba.core.ir.Assign object at 0x000001F69766F650>],
             '$const20.4': [<numba.core.ir.Assign object at 0x000001F6976E4290>],
             '$const40.8': [<numba.core.ir.Assign object at 0x000001F69763D8D0>],
             '$const54.11': [<numba.core.ir.Assign object at 0x000001F69769C750>],
             '$const6.1': [<numba.core.ir.Assign object at 0x000001F6977DC750>],
             '$const94.9.1': [<numba.core.ir.Assign object at 0x000001F69766CF90>],
             '$const98.11.1': [<numba.core.ir.Assign object at 0x000001F69766D6D0>],
             '$phi230.0.1': [<numba.core.ir.Assign object at 0x000001F697658390>],
             '$phi232.1.1': [<numba.core.ir.Assign object at 0x000001F6977D8BD0>],
             'full_shape0': [<numba.core.ir.Assign object at 0x000001F697658DD0>],
             'index00': [<numba.core.ir.Assign object at 0x000001F6977D9F50>],
             'out0': [<numba.core.ir.Assign object at 0x000001F69766CA50>],
             'stencil_index': [<numba.core.ir.Assign object at 0x000001F697667050>],
             'stencil_index.1': [<numba.core.ir.Assign object at 0x000001F697666A50>],
             'stencil_index.2': [<numba.core.ir.Assign object at 0x000001F697666450>],
             'stencil_index.3': [<numba.core.ir.Assign object at 0x000001F697666B90>],
             'x': [<numba.core.ir.Assign object at 0x000001F697658590>]})
2023-08-13 11:42:44,431 SSA violators set()
2023-08-13 11:42:44,837 bytecode dump:
>          0	NOP(arg=None, lineno=1080)
           2	RESUME(arg=0, lineno=1080)
           4	LOAD_GLOBAL(arg=1, lineno=1094)
          16	LOAD_FAST(arg=0, lineno=1094)
          18	PRECALL(arg=1, lineno=1094)
          22	CALL(arg=1, lineno=1094)
          32	LOAD_FAST(arg=1, lineno=1094)
          34	LOAD_CONST(arg=1, lineno=1094)
          36	LOAD_CONST(arg=1, lineno=1094)
          38	BUILD_SLICE(arg=2, lineno=1094)
          40	STORE_SUBSCR(arg=None, lineno=1094)
          44	LOAD_CONST(arg=1, lineno=1094)
          46	RETURN_VALUE(arg=None, lineno=1094)
2023-08-13 11:42:44,837 pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-13 11:42:44,837 stack: []
2023-08-13 11:42:44,837 state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-13 11:42:44,837 dispatch pc=0, inst=NOP(arg=None, lineno=1080)
2023-08-13 11:42:44,837 stack []
2023-08-13 11:42:44,837 dispatch pc=2, inst=RESUME(arg=0, lineno=1080)
2023-08-13 11:42:44,838 stack []
2023-08-13 11:42:44,838 dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=1094)
2023-08-13 11:42:44,838 stack []
2023-08-13 11:42:44,838 dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1094)
2023-08-13 11:42:44,838 stack ['$null$4.1', '$4load_global.0']
2023-08-13 11:42:44,838 dispatch pc=18, inst=PRECALL(arg=1, lineno=1094)
2023-08-13 11:42:44,838 stack ['$null$4.1', '$4load_global.0', '$x16.2']
2023-08-13 11:42:44,838 dispatch pc=22, inst=CALL(arg=1, lineno=1094)
2023-08-13 11:42:44,838 stack ['$null$4.1', '$4load_global.0', '$x16.2']
2023-08-13 11:42:44,838 dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=1094)
2023-08-13 11:42:44,838 stack ['$22call.3']
2023-08-13 11:42:44,839 dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=1094)
2023-08-13 11:42:44,839 stack ['$22call.3', '$y32.4']
2023-08-13 11:42:44,839 dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=1094)
2023-08-13 11:42:44,839 stack ['$22call.3', '$y32.4', '$const34.5']
2023-08-13 11:42:44,839 dispatch pc=38, inst=BUILD_SLICE(arg=2, lineno=1094)
2023-08-13 11:42:44,839 stack ['$22call.3', '$y32.4', '$const34.5', '$const36.6']
2023-08-13 11:42:44,839 dispatch pc=40, inst=STORE_SUBSCR(arg=None, lineno=1094)
2023-08-13 11:42:44,839 stack ['$22call.3', '$y32.4', '$38build_slice.8']
2023-08-13 11:42:44,839 dispatch pc=44, inst=LOAD_CONST(arg=1, lineno=1094)
2023-08-13 11:42:44,839 stack []
2023-08-13 11:42:44,840 dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=1094)
2023-08-13 11:42:44,841 stack ['$const44.9']
2023-08-13 11:42:44,841 end state. edges=[]
2023-08-13 11:42:44,841 -------------------------Prune PHIs-------------------------
2023-08-13 11:42:44,841 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-08-13 11:42:44,842 defmap: {}
2023-08-13 11:42:44,842 phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:44,842 changing phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:44,842 keep phismap: {}
2023-08-13 11:42:44,842 new_out: defaultdict(<class 'dict'>, {})
2023-08-13 11:42:44,842 ----------------------DONE Prune PHIs-----------------------
2023-08-13 11:42:44,842 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'res': '$x16.2'}), (18, {}), (20, {}), (22, {'func': '$4load_global.0', 'args': ['$x16.2'], 'kw_names': None, 'res': '$22call.3'}), (24, {}), (26, {}), (28, {}), (30, {}), (32, {'res': '$y32.4'}), (34, {'res': '$const34.5'}), (36, {'res': '$const36.6'}), (38, {'start': '$const34.5', 'stop': '$const36.6', 'step': None, 'res': '$38build_slice.8', 'slicevar': '$38build_slice.7'}), (40, {'target': '$y32.4', 'index': '$38build_slice.8', 'value': '$22call.3'}), (42, {}), (44, {'res': '$const44.9'}), (46, {'retval': '$const44.9', 'castval': '$46return_value.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:44,843 label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $4load_global.0 = global(_localmin_sten: <numba.stencils.stencil.StencilFunc object at 0x000001F696E7C0D0>) ['$4load_global.0']
    $22call.3 = call $4load_global.0(x, func=$4load_global.0, args=[Var(x, utils.py:1080)], kws=(), vararg=None, varkwarg=None, target=None) ['$22call.3', '$4load_global.0', 'x']
    $const34.5 = const(NoneType, None)       ['$const34.5']
    $const36.6 = const(NoneType, None)       ['$const36.6']
    $38build_slice.7 = global(slice: <class 'slice'>) ['$38build_slice.7']
    $38build_slice.8 = call $38build_slice.7($const34.5, $const36.6, func=$38build_slice.7, args=(Var($const34.5, utils.py:1094), Var($const36.6, utils.py:1094)), kws=(), vararg=None, varkwarg=None, target=None) ['$38build_slice.7', '$38build_slice.8', '$const34.5', '$const36.6']
    y[$38build_slice.8] = $22call.3          ['$22call.3', '$38build_slice.8', 'y']
    $const44.9 = const(NoneType, None)       ['$const44.9']
    $46return_value.10 = cast(value=$const44.9) ['$46return_value.10', '$const44.9']
    return $46return_value.10                ['$46return_value.10']

2023-08-13 11:42:44,853 ==== SSA block analysis pass on 0
2023-08-13 11:42:44,853 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696DE3150>
2023-08-13 11:42:44,853 on stmt: x = arg(0, name=x)
2023-08-13 11:42:44,853 on stmt: y = arg(1, name=y)
2023-08-13 11:42:44,853 on stmt: $4load_global.0 = global(_localmin_sten: <numba.stencils.stencil.StencilFunc object at 0x000001F696E7C0D0>)
2023-08-13 11:42:44,853 on stmt: $22call.3 = call $4load_global.0(x, func=$4load_global.0, args=[Var(x, utils.py:1080)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:44,853 on stmt: $const34.5 = const(NoneType, None)
2023-08-13 11:42:44,853 on stmt: $const36.6 = const(NoneType, None)
2023-08-13 11:42:44,853 on stmt: $38build_slice.7 = global(slice: <class 'slice'>)
2023-08-13 11:42:44,853 on stmt: $38build_slice.8 = call $38build_slice.7($const34.5, $const36.6, func=$38build_slice.7, args=(Var($const34.5, utils.py:1094), Var($const36.6, utils.py:1094)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:44,854 on stmt: y[slice(None, None, None)] = $22call.3
2023-08-13 11:42:44,854 on stmt: $const44.9 = const(NoneType, None)
2023-08-13 11:42:44,854 on stmt: $46return_value.10 = cast(value=$const44.9)
2023-08-13 11:42:44,854 on stmt: return $46return_value.10
2023-08-13 11:42:44,854 defs defaultdict(<class 'list'>,
            {'$22call.3': [<numba.core.ir.Assign object at 0x000001F696CD5AD0>],
             '$38build_slice.7': [<numba.core.ir.Assign object at 0x000001F696CD5550>],
             '$38build_slice.8': [<numba.core.ir.Assign object at 0x000001F696CD6E10>],
             '$46return_value.10': [<numba.core.ir.Assign object at 0x000001F696CD67D0>],
             '$4load_global.0': [<numba.core.ir.Assign object at 0x000001F696CD75D0>],
             '$const34.5': [<numba.core.ir.Assign object at 0x000001F696CD5950>],
             '$const36.6': [<numba.core.ir.Assign object at 0x000001F696CD7590>],
             '$const44.9': [<numba.core.ir.Assign object at 0x000001F696CD6A10>],
             'x': [<numba.core.ir.Assign object at 0x000001F696CD6C50>],
             'y': [<numba.core.ir.Assign object at 0x000001F696CD6B10>]})
2023-08-13 11:42:44,854 SSA violators set()
2023-08-13 11:42:44,879 bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	RESUME(arg=0, lineno=1)
           4	LOAD_FAST(arg=0, lineno=2)
           6	LOAD_ATTR(arg=0, lineno=2)
          16	STORE_FAST(arg=1, lineno=2)
          18	LOAD_GLOBAL(arg=2, lineno=3)
          30	LOAD_METHOD(arg=2, lineno=3)
          52	LOAD_FAST(arg=1, lineno=3)
          54	LOAD_GLOBAL(arg=2, lineno=3)
          66	LOAD_ATTR(arg=3, lineno=3)
          76	KW_NAMES(arg=1, lineno=3)
          78	PRECALL(arg=2, lineno=3)
          82	CALL(arg=2, lineno=3)
          92	STORE_FAST(arg=2, lineno=3)
          94	LOAD_CONST(arg=2, lineno=4)
          96	LOAD_FAST(arg=2, lineno=4)
          98	LOAD_CONST(arg=0, lineno=4)
         100	LOAD_CONST(arg=3, lineno=4)
         102	BUILD_SLICE(arg=2, lineno=4)
         104	STORE_SUBSCR(arg=None, lineno=4)
         108	LOAD_CONST(arg=2, lineno=5)
         110	LOAD_FAST(arg=2, lineno=5)
         112	LOAD_CONST(arg=4, lineno=5)
         114	LOAD_CONST(arg=0, lineno=5)
         116	BUILD_SLICE(arg=2, lineno=5)
         118	STORE_SUBSCR(arg=None, lineno=5)
         122	LOAD_GLOBAL(arg=9, lineno=6)
         134	LOAD_GLOBAL(arg=11, lineno=6)
         146	LOAD_CONST(arg=2, lineno=6)
         148	LOAD_CONST(arg=4, lineno=6)
         150	PRECALL(arg=2, lineno=6)
         154	CALL(arg=2, lineno=6)
         164	UNARY_NEGATIVE(arg=None, lineno=6)
         166	LOAD_FAST(arg=1, lineno=6)
         168	LOAD_CONST(arg=2, lineno=6)
         170	BINARY_SUBSCR(arg=None, lineno=6)
         180	LOAD_GLOBAL(arg=13, lineno=6)
         192	LOAD_CONST(arg=2, lineno=6)
         194	LOAD_CONST(arg=3, lineno=6)
         196	PRECALL(arg=2, lineno=6)
         200	CALL(arg=2, lineno=6)
         210	BINARY_OP(arg=10, lineno=6)
         214	PRECALL(arg=2, lineno=6)
         218	CALL(arg=2, lineno=6)
         228	GET_ITER(arg=None, lineno=6)
>        230	FOR_ITER(arg=4, lineno=6)
         232	STORE_FAST(arg=3, lineno=6)
         234	LOAD_CONST(arg=2, lineno=7)
         236	STORE_FAST(arg=4, lineno=7)
         238	JUMP_BACKWARD(arg=5, lineno=7)
>        240	LOAD_FAST(arg=2, lineno=8)
         242	RETURN_VALUE(arg=None, lineno=8)
2023-08-13 11:42:44,879 pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-13 11:42:44,879 stack: []
2023-08-13 11:42:44,879 state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-13 11:42:44,879 dispatch pc=0, inst=NOP(arg=None, lineno=1)
2023-08-13 11:42:44,879 stack []
2023-08-13 11:42:44,879 dispatch pc=2, inst=RESUME(arg=0, lineno=1)
2023-08-13 11:42:44,880 stack []
2023-08-13 11:42:44,880 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2)
2023-08-13 11:42:44,880 stack []
2023-08-13 11:42:44,880 dispatch pc=6, inst=LOAD_ATTR(arg=0, lineno=2)
2023-08-13 11:42:44,880 stack ['$x4.0']
2023-08-13 11:42:44,880 dispatch pc=16, inst=STORE_FAST(arg=1, lineno=2)
2023-08-13 11:42:44,880 stack ['$6load_attr.1']
2023-08-13 11:42:44,880 dispatch pc=18, inst=LOAD_GLOBAL(arg=2, lineno=3)
2023-08-13 11:42:44,880 stack []
2023-08-13 11:42:44,880 dispatch pc=30, inst=LOAD_METHOD(arg=2, lineno=3)
2023-08-13 11:42:44,880 stack ['$18load_global.2']
2023-08-13 11:42:44,880 dispatch pc=52, inst=LOAD_FAST(arg=1, lineno=3)
2023-08-13 11:42:44,880 stack ['$null$30.3', '$30load_method.4']
2023-08-13 11:42:44,880 dispatch pc=54, inst=LOAD_GLOBAL(arg=2, lineno=3)
2023-08-13 11:42:44,880 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5']
2023-08-13 11:42:44,880 dispatch pc=66, inst=LOAD_ATTR(arg=3, lineno=3)
2023-08-13 11:42:44,881 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$54load_global.6']
2023-08-13 11:42:44,881 dispatch pc=76, inst=KW_NAMES(arg=1, lineno=3)
2023-08-13 11:42:44,881 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$66load_attr.7']
2023-08-13 11:42:44,881 dispatch pc=78, inst=PRECALL(arg=2, lineno=3)
2023-08-13 11:42:44,881 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$66load_attr.7']
2023-08-13 11:42:44,881 dispatch pc=82, inst=CALL(arg=2, lineno=3)
2023-08-13 11:42:44,881 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$66load_attr.7']
2023-08-13 11:42:44,881 dispatch pc=92, inst=STORE_FAST(arg=2, lineno=3)
2023-08-13 11:42:44,881 stack ['$82call.8']
2023-08-13 11:42:44,882 dispatch pc=94, inst=LOAD_CONST(arg=2, lineno=4)
2023-08-13 11:42:44,882 stack []
2023-08-13 11:42:44,882 dispatch pc=96, inst=LOAD_FAST(arg=2, lineno=4)
2023-08-13 11:42:44,882 stack ['$const94.9']
2023-08-13 11:42:44,882 dispatch pc=98, inst=LOAD_CONST(arg=0, lineno=4)
2023-08-13 11:42:44,882 stack ['$const94.9', '$out096.10']
2023-08-13 11:42:44,883 dispatch pc=100, inst=LOAD_CONST(arg=3, lineno=4)
2023-08-13 11:42:44,883 stack ['$const94.9', '$out096.10', '$const98.11']
2023-08-13 11:42:44,883 dispatch pc=102, inst=BUILD_SLICE(arg=2, lineno=4)
2023-08-13 11:42:44,883 stack ['$const94.9', '$out096.10', '$const98.11', '$const100.12']
2023-08-13 11:42:44,883 dispatch pc=104, inst=STORE_SUBSCR(arg=None, lineno=4)
2023-08-13 11:42:44,883 stack ['$const94.9', '$out096.10', '$102build_slice.14']
2023-08-13 11:42:44,883 dispatch pc=108, inst=LOAD_CONST(arg=2, lineno=5)
2023-08-13 11:42:44,883 stack []
2023-08-13 11:42:44,883 dispatch pc=110, inst=LOAD_FAST(arg=2, lineno=5)
2023-08-13 11:42:44,883 stack ['$const108.15']
2023-08-13 11:42:44,884 dispatch pc=112, inst=LOAD_CONST(arg=4, lineno=5)
2023-08-13 11:42:44,884 stack ['$const108.15', '$out0110.16']
2023-08-13 11:42:44,884 dispatch pc=114, inst=LOAD_CONST(arg=0, lineno=5)
2023-08-13 11:42:44,884 stack ['$const108.15', '$out0110.16', '$const112.17']
2023-08-13 11:42:44,884 dispatch pc=116, inst=BUILD_SLICE(arg=2, lineno=5)
2023-08-13 11:42:44,884 stack ['$const108.15', '$out0110.16', '$const112.17', '$const114.18']
2023-08-13 11:42:44,884 dispatch pc=118, inst=STORE_SUBSCR(arg=None, lineno=5)
2023-08-13 11:42:44,884 stack ['$const108.15', '$out0110.16', '$116build_slice.20']
2023-08-13 11:42:44,884 dispatch pc=122, inst=LOAD_GLOBAL(arg=9, lineno=6)
2023-08-13 11:42:44,884 stack []
2023-08-13 11:42:44,885 dispatch pc=134, inst=LOAD_GLOBAL(arg=11, lineno=6)
2023-08-13 11:42:44,885 stack ['$null$122.22', '$122load_global.21']
2023-08-13 11:42:44,885 dispatch pc=146, inst=LOAD_CONST(arg=2, lineno=6)
2023-08-13 11:42:44,885 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23']
2023-08-13 11:42:44,885 dispatch pc=148, inst=LOAD_CONST(arg=4, lineno=6)
2023-08-13 11:42:44,885 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23', '$const146.25']
2023-08-13 11:42:44,885 dispatch pc=150, inst=PRECALL(arg=2, lineno=6)
2023-08-13 11:42:44,885 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23', '$const146.25', '$const148.26']
2023-08-13 11:42:44,885 dispatch pc=154, inst=CALL(arg=2, lineno=6)
2023-08-13 11:42:44,885 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23', '$const146.25', '$const148.26']
2023-08-13 11:42:44,885 dispatch pc=164, inst=UNARY_NEGATIVE(arg=None, lineno=6)
2023-08-13 11:42:44,885 stack ['$null$122.22', '$122load_global.21', '$154call.27']
2023-08-13 11:42:44,886 dispatch pc=166, inst=LOAD_FAST(arg=1, lineno=6)
2023-08-13 11:42:44,886 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28']
2023-08-13 11:42:44,886 dispatch pc=168, inst=LOAD_CONST(arg=2, lineno=6)
2023-08-13 11:42:44,886 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$full_shape0166.29']
2023-08-13 11:42:44,886 dispatch pc=170, inst=BINARY_SUBSCR(arg=None, lineno=6)
2023-08-13 11:42:44,886 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$full_shape0166.29', '$const168.30']
2023-08-13 11:42:44,886 dispatch pc=180, inst=LOAD_GLOBAL(arg=13, lineno=6)
2023-08-13 11:42:44,886 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31']
2023-08-13 11:42:44,886 dispatch pc=192, inst=LOAD_CONST(arg=2, lineno=6)
2023-08-13 11:42:44,886 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32']
2023-08-13 11:42:44,886 dispatch pc=194, inst=LOAD_CONST(arg=3, lineno=6)
2023-08-13 11:42:44,887 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32', '$const192.34']
2023-08-13 11:42:44,887 dispatch pc=196, inst=PRECALL(arg=2, lineno=6)
2023-08-13 11:42:44,887 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32', '$const192.34', '$const194.35']
2023-08-13 11:42:44,887 dispatch pc=200, inst=CALL(arg=2, lineno=6)
2023-08-13 11:42:44,887 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32', '$const192.34', '$const194.35']
2023-08-13 11:42:44,887 dispatch pc=210, inst=BINARY_OP(arg=10, lineno=6)
2023-08-13 11:42:44,887 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$200call.36']
2023-08-13 11:42:44,887 dispatch pc=214, inst=PRECALL(arg=2, lineno=6)
2023-08-13 11:42:44,887 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$binop_sub210.37']
2023-08-13 11:42:44,887 dispatch pc=218, inst=CALL(arg=2, lineno=6)
2023-08-13 11:42:44,887 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$binop_sub210.37']
2023-08-13 11:42:44,888 dispatch pc=228, inst=GET_ITER(arg=None, lineno=6)
2023-08-13 11:42:44,888 stack ['$218call.38']
2023-08-13 11:42:44,888 end state. edges=[Edge(pc=230, stack=('$228get_iter.39',), blockstack=(), npush=0)]
2023-08-13 11:42:44,888 pending: deque([State(pc_initial=230 nstack_initial=1)])
2023-08-13 11:42:44,888 stack: ['$phi230.0']
2023-08-13 11:42:44,888 state.pc_initial: State(pc_initial=230 nstack_initial=1)
2023-08-13 11:42:44,888 dispatch pc=230, inst=FOR_ITER(arg=4, lineno=6)
2023-08-13 11:42:44,888 stack ['$phi230.0']
2023-08-13 11:42:44,888 end state. edges=[Edge(pc=240, stack=(), blockstack=(), npush=0), Edge(pc=232, stack=('$phi230.0', '$230for_iter.2'), blockstack=(), npush=0)]
2023-08-13 11:42:44,888 pending: deque([State(pc_initial=240 nstack_initial=0), State(pc_initial=232 nstack_initial=2)])
2023-08-13 11:42:44,888 stack: []
2023-08-13 11:42:44,888 state.pc_initial: State(pc_initial=240 nstack_initial=0)
2023-08-13 11:42:44,889 dispatch pc=240, inst=LOAD_FAST(arg=2, lineno=8)
2023-08-13 11:42:44,889 stack []
2023-08-13 11:42:44,889 dispatch pc=242, inst=RETURN_VALUE(arg=None, lineno=8)
2023-08-13 11:42:44,889 stack ['$out0240.0']
2023-08-13 11:42:44,889 end state. edges=[]
2023-08-13 11:42:44,889 pending: deque([State(pc_initial=232 nstack_initial=2)])
2023-08-13 11:42:44,889 stack: ['$phi232.0', '$phi232.1']
2023-08-13 11:42:44,889 state.pc_initial: State(pc_initial=232 nstack_initial=2)
2023-08-13 11:42:44,889 dispatch pc=232, inst=STORE_FAST(arg=3, lineno=6)
2023-08-13 11:42:44,889 stack ['$phi232.0', '$phi232.1']
2023-08-13 11:42:44,889 dispatch pc=234, inst=LOAD_CONST(arg=2, lineno=7)
2023-08-13 11:42:44,889 stack ['$phi232.0']
2023-08-13 11:42:44,889 dispatch pc=236, inst=STORE_FAST(arg=4, lineno=7)
2023-08-13 11:42:44,889 stack ['$phi232.0', '$const234.2']
2023-08-13 11:42:44,889 dispatch pc=238, inst=JUMP_BACKWARD(arg=5, lineno=7)
2023-08-13 11:42:44,889 stack ['$phi232.0']
2023-08-13 11:42:44,890 end state. edges=[Edge(pc=230, stack=('$phi232.0',), blockstack=(), npush=0)]
2023-08-13 11:42:44,890 pending: deque([State(pc_initial=230 nstack_initial=1)])
2023-08-13 11:42:44,890 -------------------------Prune PHIs-------------------------
2023-08-13 11:42:44,890 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=230 nstack_initial=1): {'$phi230.0'},
             State(pc_initial=232 nstack_initial=2): {'$phi232.1'},
             State(pc_initial=240 nstack_initial=0): set()})
2023-08-13 11:42:44,890 defmap: {'$phi230.0': State(pc_initial=0 nstack_initial=0),
 '$phi232.1': State(pc_initial=230 nstack_initial=1)}
2023-08-13 11:42:44,890 phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi232.0',
                            State(pc_initial=232 nstack_initial=2))},
             '$phi232.0': {('$phi230.0',
                            State(pc_initial=230 nstack_initial=1))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:44,891 changing phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi230.0',
                            State(pc_initial=230 nstack_initial=1))},
             '$phi232.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:44,891 changing phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:44,891 changing phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:44,891 keep phismap: {'$phi230.0': {('$228get_iter.39', State(pc_initial=0 nstack_initial=0))},
 '$phi232.1': {('$230for_iter.2', State(pc_initial=230 nstack_initial=1))}}
2023-08-13 11:42:44,892 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi230.0': '$228get_iter.39'},
             State(pc_initial=230 nstack_initial=1): {'$phi232.1': '$230for_iter.2'}})
2023-08-13 11:42:44,892 ----------------------DONE Prune PHIs-----------------------
2023-08-13 11:42:44,892 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$x4.0'}), (6, {'item': '$x4.0', 'res': '$6load_attr.1'}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'value': '$6load_attr.1'}), (18, {'idx': 1, 'res': '$18load_global.2'}), (20, {}), (22, {}), (24, {}), (26, {}), (28, {}), (30, {'item': '$18load_global.2', 'res': '$30load_method.4'}), (32, {}), (34, {}), (36, {}), (38, {}), (40, {}), (42, {}), (44, {}), (46, {}), (48, {}), (50, {}), (52, {'res': '$full_shape052.5'}), (54, {'idx': 1, 'res': '$54load_global.6'}), (56, {}), (58, {}), (60, {}), (62, {}), (64, {}), (66, {'item': '$54load_global.6', 'res': '$66load_attr.7'}), (68, {}), (70, {}), (72, {}), (74, {}), (78, {}), (80, {}), (82, {'func': '$30load_method.4', 'args': ['$full_shape052.5', '$66load_attr.7'], 'kw_names': 1, 'res': '$82call.8'}), (84, {}), (86, {}), (88, {}), (90, {}), (92, {'value': '$82call.8'}), (94, {'res': '$const94.9'}), (96, {'res': '$out096.10'}), (98, {'res': '$const98.11'}), (100, {'res': '$const100.12'}), (102, {'start': '$const98.11', 'stop': '$const100.12', 'step': None, 'res': '$102build_slice.14', 'slicevar': '$102build_slice.13'}), (104, {'target': '$out096.10', 'index': '$102build_slice.14', 'value': '$const94.9'}), (106, {}), (108, {'res': '$const108.15'}), (110, {'res': '$out0110.16'}), (112, {'res': '$const112.17'}), (114, {'res': '$const114.18'}), (116, {'start': '$const112.17', 'stop': '$const114.18', 'step': None, 'res': '$116build_slice.20', 'slicevar': '$116build_slice.19'}), (118, {'target': '$out0110.16', 'index': '$116build_slice.20', 'value': '$const108.15'}), (120, {}), (122, {'idx': 4, 'res': '$122load_global.21'}), (124, {}), (126, {}), (128, {}), (130, {}), (132, {}), (134, {'idx': 5, 'res': '$134load_global.23'}), (136, {}), (138, {}), (140, {}), (142, {}), (144, {}), (146, {'res': '$const146.25'}), (148, {'res': '$const148.26'}), (150, {}), (152, {}), (154, {'func': '$134load_global.23', 'args': ['$const146.25', '$const148.26'], 'kw_names': None, 'res': '$154call.27'}), (156, {}), (158, {}), (160, {}), (162, {}), (164, {'value': '$154call.27', 'res': '$164unary_negative.28'}), (166, {'res': '$full_shape0166.29'}), (168, {'res': '$const168.30'}), (170, {'index': '$const168.30', 'target': '$full_shape0166.29', 'res': '$170binary_subscr.31'}), (172, {}), (174, {}), (176, {}), (178, {}), (180, {'idx': 6, 'res': '$180load_global.32'}), (182, {}), (184, {}), (186, {}), (188, {}), (190, {}), (192, {'res': '$const192.34'}), (194, {'res': '$const194.35'}), (196, {}), (198, {}), (200, {'func': '$180load_global.32', 'args': ['$const192.34', '$const194.35'], 'kw_names': None, 'res': '$200call.36'}), (202, {}), (204, {}), (206, {}), (208, {}), (210, {'op': '-', 'lhs': '$170binary_subscr.31', 'rhs': '$200call.36', 'res': '$binop_sub210.37'}), (212, {}), (214, {}), (216, {}), (218, {'func': '$122load_global.21', 'args': ['$164unary_negative.28', '$binop_sub210.37'], 'kw_names': None, 'res': '$218call.38'}), (220, {}), (222, {}), (224, {}), (226, {}), (228, {'value': '$218call.38', 'res': '$228get_iter.39'})), outgoing_phis={'$phi230.0': '$228get_iter.39'}, blockstack=(), active_try_block=None, outgoing_edgepushed={230: ('$228get_iter.39',)})
2023-08-13 11:42:44,892 block_infos State(pc_initial=230 nstack_initial=1):
AdaptBlockInfo(insts=((230, {'iterator': '$phi230.0', 'pair': '$230for_iter.1', 'indval': '$230for_iter.2', 'pred': '$230for_iter.3'}),), outgoing_phis={'$phi232.1': '$230for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={240: (), 232: ('$phi230.0', '$230for_iter.2')})
2023-08-13 11:42:44,892 block_infos State(pc_initial=232 nstack_initial=2):
AdaptBlockInfo(insts=((232, {'value': '$phi232.1'}), (234, {'res': '$const234.2'}), (236, {'value': '$const234.2'}), (238, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={230: ('$phi232.0',)})
2023-08-13 11:42:44,892 block_infos State(pc_initial=240 nstack_initial=0):
AdaptBlockInfo(insts=((240, {'res': '$out0240.0'}), (242, {'retval': '$out0240.0', 'castval': '$242return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:44,894 label 0:
    x = arg(0, name=x)                       ['x']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $18load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>) ['$18load_global.2']
    $30load_method.4 = getattr(value=$18load_global.2, attr=empty) ['$18load_global.2', '$30load_method.4']
    $54load_global.6 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>) ['$54load_global.6']
    $66load_attr.7 = getattr(value=$54load_global.6, attr=bool_) ['$54load_global.6', '$66load_attr.7']
    out0 = call $30load_method.4(full_shape0, func=$30load_method.4, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($66load_attr.7, <string>:3))], vararg=None, varkwarg=None, target=None) ['$30load_method.4', '$66load_attr.7', 'full_shape0', 'out0']
    $const94.9 = const(int, 0)               ['$const94.9']
    $const98.11 = const(NoneType, None)      ['$const98.11']
    $const100.12 = const(int, 1)             ['$const100.12']
    $102build_slice.13 = global(slice: <class 'slice'>) ['$102build_slice.13']
    $102build_slice.14 = call $102build_slice.13($const98.11, $const100.12, func=$102build_slice.13, args=(Var($const98.11, <string>:4), Var($const100.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$102build_slice.13', '$102build_slice.14', '$const100.12', '$const98.11']
    out0[$102build_slice.14] = $const94.9    ['$102build_slice.14', '$const94.9', 'out0']
    $const108.15 = const(int, 0)             ['$const108.15']
    $const112.17 = const(int, -1)            ['$const112.17']
    $const114.18 = const(NoneType, None)     ['$const114.18']
    $116build_slice.19 = global(slice: <class 'slice'>) ['$116build_slice.19']
    $116build_slice.20 = call $116build_slice.19($const112.17, $const114.18, func=$116build_slice.19, args=(Var($const112.17, <string>:5), Var($const114.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$116build_slice.19', '$116build_slice.20', '$const112.17', '$const114.18']
    out0[$116build_slice.20] = $const108.15  ['$116build_slice.20', '$const108.15', 'out0']
    $122load_global.21 = global(range: <class 'range'>) ['$122load_global.21']
    $134load_global.23 = global(min: <built-in function min>) ['$134load_global.23']
    $const146.25 = const(int, 0)             ['$const146.25']
    $const148.26 = const(int, -1)            ['$const148.26']
    $154call.27 = call $134load_global.23($const146.25, $const148.26, func=$134load_global.23, args=[Var($const146.25, <string>:6), Var($const148.26, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$134load_global.23', '$154call.27', '$const146.25', '$const148.26']
    $164unary_negative.28 = unary(fn=<built-in function neg>, value=$154call.27) ['$154call.27', '$164unary_negative.28']
    $const168.30 = const(int, 0)             ['$const168.30']
    $170binary_subscr.31 = getitem(value=full_shape0, index=$const168.30, fn=<built-in function getitem>) ['$170binary_subscr.31', '$const168.30', 'full_shape0']
    $180load_global.32 = global(max: <built-in function max>) ['$180load_global.32']
    $const192.34 = const(int, 0)             ['$const192.34']
    $const194.35 = const(int, 1)             ['$const194.35']
    $200call.36 = call $180load_global.32($const192.34, $const194.35, func=$180load_global.32, args=[Var($const192.34, <string>:6), Var($const194.35, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$180load_global.32', '$200call.36', '$const192.34', '$const194.35']
    $binop_sub210.37 = $170binary_subscr.31 - $200call.36 ['$170binary_subscr.31', '$200call.36', '$binop_sub210.37']
    $218call.38 = call $122load_global.21($164unary_negative.28, $binop_sub210.37, func=$122load_global.21, args=[Var($164unary_negative.28, <string>:6), Var($binop_sub210.37, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$122load_global.21', '$164unary_negative.28', '$218call.38', '$binop_sub210.37']
    $228get_iter.39 = getiter(value=$218call.38) ['$218call.38', '$228get_iter.39']
    $phi230.0 = $228get_iter.39              ['$228get_iter.39', '$phi230.0']
    jump 230                                 []
label 230:
    $230for_iter.1 = iternext(value=$phi230.0) ['$230for_iter.1', '$phi230.0']
    $230for_iter.2 = pair_first(value=$230for_iter.1) ['$230for_iter.1', '$230for_iter.2']
    $230for_iter.3 = pair_second(value=$230for_iter.1) ['$230for_iter.1', '$230for_iter.3']
    $phi232.1 = $230for_iter.2               ['$230for_iter.2', '$phi232.1']
    branch $230for_iter.3, 232, 240          ['$230for_iter.3']
label 232:
    index00 = $phi232.1                      ['$phi232.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 230                                 []
label 240:
    $242return_value.1 = cast(value=out0)    ['$242return_value.1', 'out0']
    return $242return_value.1                ['$242return_value.1']

2023-08-13 11:42:44,915 ==== SSA block analysis pass on 0
2023-08-13 11:42:44,915 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F69614C450>
2023-08-13 11:42:44,916 on stmt: x = arg(0, name=x)
2023-08-13 11:42:44,916 on stmt: full_shape0 = getattr(value=x, attr=shape)
2023-08-13 11:42:44,916 on stmt: $18load_global.2.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:44,916 on stmt: $30load_method.4.1 = getattr(value=$18load_global.2.1, attr=empty)
2023-08-13 11:42:44,916 on stmt: $54load_global.6.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:44,916 on stmt: $66load_attr.7.1 = getattr(value=$54load_global.6.1, attr=bool_)
2023-08-13 11:42:44,916 on stmt: out0 = call $30load_method.4.1(full_shape0, func=$30load_method.4.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($66load_attr.7.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:44,917 on stmt: $const94.9.1 = const(int, 0)
2023-08-13 11:42:44,917 on stmt: $const98.11.1 = const(NoneType, None)
2023-08-13 11:42:44,917 on stmt: $const100.12.1 = const(int, 1)
2023-08-13 11:42:44,917 on stmt: $102build_slice.13.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:44,917 on stmt: $102build_slice.14.1 = call $102build_slice.13.1($const98.11.1, $const100.12.1, func=$102build_slice.13.1, args=(Var($const98.11.1, <string>:4), Var($const100.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:44,917 on stmt: out0[$102build_slice.14.1] = $const94.9.1
2023-08-13 11:42:44,917 on stmt: $const108.15.1 = const(int, 0)
2023-08-13 11:42:44,917 on stmt: $const112.17.1 = const(int, -1)
2023-08-13 11:42:44,917 on stmt: $const114.18.1 = const(NoneType, None)
2023-08-13 11:42:44,917 on stmt: $116build_slice.19.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:44,917 on stmt: $116build_slice.20.1 = call $116build_slice.19.1($const112.17.1, $const114.18.1, func=$116build_slice.19.1, args=(Var($const112.17.1, <string>:5), Var($const114.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:44,917 on stmt: out0[$116build_slice.20.1] = $const108.15.1
2023-08-13 11:42:44,918 on stmt: $122load_global.21.1 = global(range: <class 'range'>)
2023-08-13 11:42:44,918 on stmt: $134load_global.23.1 = global(min: <built-in function min>)
2023-08-13 11:42:44,918 on stmt: $const146.25.1 = const(int, 0)
2023-08-13 11:42:44,918 on stmt: $const148.26.1 = const(int, -1)
2023-08-13 11:42:44,918 on stmt: $154call.27.1 = call $134load_global.23.1($const146.25.1, $const148.26.1, func=$134load_global.23.1, args=[Var($const146.25.1, <string>:6), Var($const148.26.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:44,918 on stmt: $164unary_negative.28.1 = unary(fn=<built-in function neg>, value=$154call.27.1)
2023-08-13 11:42:44,918 on stmt: $const168.30.1 = const(int, 0)
2023-08-13 11:42:44,918 on stmt: $170binary_subscr.31.1 = getitem(value=full_shape0, index=$const168.30.1, fn=<built-in function getitem>)
2023-08-13 11:42:44,918 on stmt: $180load_global.32.1 = global(max: <built-in function max>)
2023-08-13 11:42:44,918 on stmt: $const192.34.1 = const(int, 0)
2023-08-13 11:42:44,918 on stmt: $const194.35.1 = const(int, 1)
2023-08-13 11:42:44,918 on stmt: $200call.36.1 = call $180load_global.32.1($const192.34.1, $const194.35.1, func=$180load_global.32.1, args=[Var($const192.34.1, <string>:6), Var($const194.35.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:44,919 on stmt: $binop_sub210.37.1 = $170binary_subscr.31.1 - $200call.36.1
2023-08-13 11:42:44,919 on stmt: $218call.38.1 = call $122load_global.21.1($164unary_negative.28.1, $binop_sub210.37.1, func=$122load_global.21.1, args=[Var($164unary_negative.28.1, <string>:6), Var($binop_sub210.37.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:44,919 on stmt: $228get_iter.39.1 = getiter(value=$218call.38.1)
2023-08-13 11:42:44,919 on stmt: $phi230.0.1 = $228get_iter.39.1
2023-08-13 11:42:44,919 on stmt: jump 230
2023-08-13 11:42:44,919 ==== SSA block analysis pass on 230
2023-08-13 11:42:44,919 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F69614C450>
2023-08-13 11:42:44,919 on stmt: $230for_iter.1.1 = iternext(value=$phi230.0.1)
2023-08-13 11:42:44,919 on stmt: $230for_iter.2.1 = pair_first(value=$230for_iter.1.1)
2023-08-13 11:42:44,919 on stmt: $230for_iter.3.1 = pair_second(value=$230for_iter.1.1)
2023-08-13 11:42:44,919 on stmt: $phi232.1.1 = $230for_iter.2.1
2023-08-13 11:42:44,920 on stmt: branch $230for_iter.3.1, 232, 242
2023-08-13 11:42:44,920 ==== SSA block analysis pass on 232
2023-08-13 11:42:44,920 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F69614C450>
2023-08-13 11:42:44,920 on stmt: index00 = $phi232.1.1
2023-08-13 11:42:44,920 on stmt: jump 240
2023-08-13 11:42:44,920 ==== SSA block analysis pass on 242
2023-08-13 11:42:44,920 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F69614C450>
2023-08-13 11:42:44,920 on stmt: $242return_value.1.1 = cast(value=out0)
2023-08-13 11:42:44,920 on stmt: return $242return_value.1.1
2023-08-13 11:42:44,920 ==== SSA block analysis pass on 240
2023-08-13 11:42:44,920 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F69614C450>
2023-08-13 11:42:44,920 on stmt: $const6.1 = const(int, 0)
2023-08-13 11:42:44,920 on stmt: stencil_index = $const6.1 + index00
2023-08-13 11:42:44,921 on stmt: $8binary_subscr.2 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:44,921 on stmt: $const20.4 = const(int, -1)
2023-08-13 11:42:44,921 on stmt: stencil_index.1 = $const20.4 + index00
2023-08-13 11:42:44,921 on stmt: $22binary_subscr.5 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2023-08-13 11:42:44,921 on stmt: $32compare_op.6 = $8binary_subscr.2 < $22binary_subscr.5
2023-08-13 11:42:44,921 on stmt: $const40.8 = const(int, 0)
2023-08-13 11:42:44,921 on stmt: stencil_index.2 = $const40.8 + index00
2023-08-13 11:42:44,921 on stmt: $42binary_subscr.9 = getitem(value=x, index=stencil_index.2, fn=<built-in function getitem>)
2023-08-13 11:42:44,921 on stmt: $const54.11 = const(int, 1)
2023-08-13 11:42:44,921 on stmt: stencil_index.3 = $const54.11 + index00
2023-08-13 11:42:44,921 on stmt: $56binary_subscr.12 = getitem(value=x, index=stencil_index.3, fn=<built-in function getitem>)
2023-08-13 11:42:44,921 on stmt: $66compare_op.13 = $42binary_subscr.9 <= $56binary_subscr.12
2023-08-13 11:42:44,921 on stmt: $binop_and_72.14 = $32compare_op.6 & $66compare_op.13
2023-08-13 11:42:44,921 on stmt: $76return_value.15 = cast(value=$binop_and_72.14)
2023-08-13 11:42:44,921 on stmt: out0[index00] = $76return_value.15
2023-08-13 11:42:44,922 on stmt: jump 241
2023-08-13 11:42:44,922 ==== SSA block analysis pass on 241
2023-08-13 11:42:44,922 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F69614C450>
2023-08-13 11:42:44,922 on stmt: jump 230
2023-08-13 11:42:44,922 defs defaultdict(<class 'list'>,
            {'$102build_slice.13.1': [<numba.core.ir.Assign object at 0x000001F6961661D0>],
             '$102build_slice.14.1': [<numba.core.ir.Assign object at 0x000001F696164F10>],
             '$116build_slice.19.1': [<numba.core.ir.Assign object at 0x000001F6951FAF90>],
             '$116build_slice.20.1': [<numba.core.ir.Assign object at 0x000001F696211310>],
             '$122load_global.21.1': [<numba.core.ir.Assign object at 0x000001F696213310>],
             '$134load_global.23.1': [<numba.core.ir.Assign object at 0x000001F696211D90>],
             '$154call.27.1': [<numba.core.ir.Assign object at 0x000001F6962129D0>],
             '$164unary_negative.28.1': [<numba.core.ir.Assign object at 0x000001F69668F350>],
             '$170binary_subscr.31.1': [<numba.core.ir.Assign object at 0x000001F696E786D0>],
             '$180load_global.32.1': [<numba.core.ir.Assign object at 0x000001F696E78910>],
             '$18load_global.2.1': [<numba.core.ir.Assign object at 0x000001F6962A95D0>],
             '$200call.36.1': [<numba.core.ir.Assign object at 0x000001F696E79110>],
             '$218call.38.1': [<numba.core.ir.Assign object at 0x000001F696E794D0>],
             '$228get_iter.39.1': [<numba.core.ir.Assign object at 0x000001F696E7B950>],
             '$22binary_subscr.5': [<numba.core.ir.Assign object at 0x000001F696729090>],
             '$230for_iter.1.1': [<numba.core.ir.Assign object at 0x000001F696E7B690>],
             '$230for_iter.2.1': [<numba.core.ir.Assign object at 0x000001F696E7BD90>],
             '$230for_iter.3.1': [<numba.core.ir.Assign object at 0x000001F696E7BE90>],
             '$242return_value.1.1': [<numba.core.ir.Assign object at 0x000001F696E79550>],
             '$30load_method.4.1': [<numba.core.ir.Assign object at 0x000001F6962AB410>],
             '$32compare_op.6': [<numba.core.ir.Assign object at 0x000001F696704FD0>],
             '$42binary_subscr.9': [<numba.core.ir.Assign object at 0x000001F69672B610>],
             '$54load_global.6.1': [<numba.core.ir.Assign object at 0x000001F696644D90>],
             '$56binary_subscr.12': [<numba.core.ir.Assign object at 0x000001F696728150>],
             '$66compare_op.13': [<numba.core.ir.Assign object at 0x000001F696C48810>],
             '$66load_attr.7.1': [<numba.core.ir.Assign object at 0x000001F6966441D0>],
             '$76return_value.15': [<numba.core.ir.Assign object at 0x000001F696D85F90>],
             '$8binary_subscr.2': [<numba.core.ir.Assign object at 0x000001F696C5A050>],
             '$binop_and_72.14': [<numba.core.ir.Assign object at 0x000001F696D84050>],
             '$binop_sub210.37.1': [<numba.core.ir.Assign object at 0x000001F696E79810>],
             '$const100.12.1': [<numba.core.ir.Assign object at 0x000001F696167E90>],
             '$const108.15.1': [<numba.core.ir.Assign object at 0x000001F696166110>],
             '$const112.17.1': [<numba.core.ir.Assign object at 0x000001F696167250>],
             '$const114.18.1': [<numba.core.ir.Assign object at 0x000001F6961670D0>],
             '$const146.25.1': [<numba.core.ir.Assign object at 0x000001F696212E90>],
             '$const148.26.1': [<numba.core.ir.Assign object at 0x000001F696210F90>],
             '$const168.30.1': [<numba.core.ir.Assign object at 0x000001F696E78B90>],
             '$const192.34.1': [<numba.core.ir.Assign object at 0x000001F696E78810>],
             '$const194.35.1': [<numba.core.ir.Assign object at 0x000001F696E78310>],
             '$const20.4': [<numba.core.ir.Assign object at 0x000001F69670C890>],
             '$const40.8': [<numba.core.ir.Assign object at 0x000001F696707ED0>],
             '$const54.11': [<numba.core.ir.Assign object at 0x000001F696F25210>],
             '$const6.1': [<numba.core.ir.Assign object at 0x000001F696720D50>],
             '$const94.9.1': [<numba.core.ir.Assign object at 0x000001F696644890>],
             '$const98.11.1': [<numba.core.ir.Assign object at 0x000001F696647E10>],
             '$phi230.0.1': [<numba.core.ir.Assign object at 0x000001F6962A9D50>],
             '$phi232.1.1': [<numba.core.ir.Assign object at 0x000001F696E792D0>],
             'full_shape0': [<numba.core.ir.Assign object at 0x000001F6962A9F90>],
             'index00': [<numba.core.ir.Assign object at 0x000001F696E7B550>],
             'out0': [<numba.core.ir.Assign object at 0x000001F696645650>],
             'stencil_index': [<numba.core.ir.Assign object at 0x000001F696C58590>],
             'stencil_index.1': [<numba.core.ir.Assign object at 0x000001F696C5A6D0>],
             'stencil_index.2': [<numba.core.ir.Assign object at 0x000001F696729510>],
             'stencil_index.3': [<numba.core.ir.Assign object at 0x000001F69672A110>],
             'x': [<numba.core.ir.Assign object at 0x000001F6962AA490>]})
2023-08-13 11:42:44,923 SSA violators set()
2023-08-13 11:42:45,356 bytecode dump:
>          0	NOP(arg=None, lineno=1080)
           2	RESUME(arg=0, lineno=1080)
           4	LOAD_GLOBAL(arg=1, lineno=1094)
          16	LOAD_FAST(arg=0, lineno=1094)
          18	PRECALL(arg=1, lineno=1094)
          22	CALL(arg=1, lineno=1094)
          32	LOAD_FAST(arg=1, lineno=1094)
          34	LOAD_CONST(arg=1, lineno=1094)
          36	LOAD_CONST(arg=1, lineno=1094)
          38	BUILD_SLICE(arg=2, lineno=1094)
          40	STORE_SUBSCR(arg=None, lineno=1094)
          44	LOAD_CONST(arg=1, lineno=1094)
          46	RETURN_VALUE(arg=None, lineno=1094)
2023-08-13 11:42:45,356 pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-13 11:42:45,356 stack: []
2023-08-13 11:42:45,356 state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-13 11:42:45,356 dispatch pc=0, inst=NOP(arg=None, lineno=1080)
2023-08-13 11:42:45,356 stack []
2023-08-13 11:42:45,356 dispatch pc=2, inst=RESUME(arg=0, lineno=1080)
2023-08-13 11:42:45,356 stack []
2023-08-13 11:42:45,356 dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=1094)
2023-08-13 11:42:45,357 stack []
2023-08-13 11:42:45,357 dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1094)
2023-08-13 11:42:45,357 stack ['$null$4.1', '$4load_global.0']
2023-08-13 11:42:45,357 dispatch pc=18, inst=PRECALL(arg=1, lineno=1094)
2023-08-13 11:42:45,357 stack ['$null$4.1', '$4load_global.0', '$x16.2']
2023-08-13 11:42:45,357 dispatch pc=22, inst=CALL(arg=1, lineno=1094)
2023-08-13 11:42:45,357 stack ['$null$4.1', '$4load_global.0', '$x16.2']
2023-08-13 11:42:45,357 dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=1094)
2023-08-13 11:42:45,357 stack ['$22call.3']
2023-08-13 11:42:45,357 dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=1094)
2023-08-13 11:42:45,357 stack ['$22call.3', '$y32.4']
2023-08-13 11:42:45,357 dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=1094)
2023-08-13 11:42:45,357 stack ['$22call.3', '$y32.4', '$const34.5']
2023-08-13 11:42:45,357 dispatch pc=38, inst=BUILD_SLICE(arg=2, lineno=1094)
2023-08-13 11:42:45,357 stack ['$22call.3', '$y32.4', '$const34.5', '$const36.6']
2023-08-13 11:42:45,357 dispatch pc=40, inst=STORE_SUBSCR(arg=None, lineno=1094)
2023-08-13 11:42:45,358 stack ['$22call.3', '$y32.4', '$38build_slice.8']
2023-08-13 11:42:45,358 dispatch pc=44, inst=LOAD_CONST(arg=1, lineno=1094)
2023-08-13 11:42:45,358 stack []
2023-08-13 11:42:45,358 dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=1094)
2023-08-13 11:42:45,358 stack ['$const44.9']
2023-08-13 11:42:45,358 end state. edges=[]
2023-08-13 11:42:45,358 -------------------------Prune PHIs-------------------------
2023-08-13 11:42:45,358 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-08-13 11:42:45,358 defmap: {}
2023-08-13 11:42:45,358 phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:45,358 changing phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:45,358 keep phismap: {}
2023-08-13 11:42:45,358 new_out: defaultdict(<class 'dict'>, {})
2023-08-13 11:42:45,358 ----------------------DONE Prune PHIs-----------------------
2023-08-13 11:42:45,358 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'res': '$x16.2'}), (18, {}), (20, {}), (22, {'func': '$4load_global.0', 'args': ['$x16.2'], 'kw_names': None, 'res': '$22call.3'}), (24, {}), (26, {}), (28, {}), (30, {}), (32, {'res': '$y32.4'}), (34, {'res': '$const34.5'}), (36, {'res': '$const36.6'}), (38, {'start': '$const34.5', 'stop': '$const36.6', 'step': None, 'res': '$38build_slice.8', 'slicevar': '$38build_slice.7'}), (40, {'target': '$y32.4', 'index': '$38build_slice.8', 'value': '$22call.3'}), (42, {}), (44, {'res': '$const44.9'}), (46, {'retval': '$const44.9', 'castval': '$46return_value.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:45,359 label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $4load_global.0 = global(_localmin_sten: <numba.stencils.stencil.StencilFunc object at 0x000001F696E7C0D0>) ['$4load_global.0']
    $22call.3 = call $4load_global.0(x, func=$4load_global.0, args=[Var(x, utils.py:1080)], kws=(), vararg=None, varkwarg=None, target=None) ['$22call.3', '$4load_global.0', 'x']
    $const34.5 = const(NoneType, None)       ['$const34.5']
    $const36.6 = const(NoneType, None)       ['$const36.6']
    $38build_slice.7 = global(slice: <class 'slice'>) ['$38build_slice.7']
    $38build_slice.8 = call $38build_slice.7($const34.5, $const36.6, func=$38build_slice.7, args=(Var($const34.5, utils.py:1094), Var($const36.6, utils.py:1094)), kws=(), vararg=None, varkwarg=None, target=None) ['$38build_slice.7', '$38build_slice.8', '$const34.5', '$const36.6']
    y[$38build_slice.8] = $22call.3          ['$22call.3', '$38build_slice.8', 'y']
    $const44.9 = const(NoneType, None)       ['$const44.9']
    $46return_value.10 = cast(value=$const44.9) ['$46return_value.10', '$const44.9']
    return $46return_value.10                ['$46return_value.10']

2023-08-13 11:42:45,366 ==== SSA block analysis pass on 0
2023-08-13 11:42:45,366 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6963934D0>
2023-08-13 11:42:45,366 on stmt: x = arg(0, name=x)
2023-08-13 11:42:45,366 on stmt: y = arg(1, name=y)
2023-08-13 11:42:45,367 on stmt: $4load_global.0 = global(_localmin_sten: <numba.stencils.stencil.StencilFunc object at 0x000001F696E7C0D0>)
2023-08-13 11:42:45,367 on stmt: $22call.3 = call $4load_global.0(x, func=$4load_global.0, args=[Var(x, utils.py:1080)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:45,367 on stmt: $const34.5 = const(NoneType, None)
2023-08-13 11:42:45,367 on stmt: $const36.6 = const(NoneType, None)
2023-08-13 11:42:45,367 on stmt: $38build_slice.7 = global(slice: <class 'slice'>)
2023-08-13 11:42:45,367 on stmt: $38build_slice.8 = call $38build_slice.7($const34.5, $const36.6, func=$38build_slice.7, args=(Var($const34.5, utils.py:1094), Var($const36.6, utils.py:1094)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:45,367 on stmt: y[slice(None, None, None)] = $22call.3
2023-08-13 11:42:45,367 on stmt: $const44.9 = const(NoneType, None)
2023-08-13 11:42:45,367 on stmt: $46return_value.10 = cast(value=$const44.9)
2023-08-13 11:42:45,367 on stmt: return $46return_value.10
2023-08-13 11:42:45,368 defs defaultdict(<class 'list'>,
            {'$22call.3': [<numba.core.ir.Assign object at 0x000001F696137510>],
             '$38build_slice.7': [<numba.core.ir.Assign object at 0x000001F696D18950>],
             '$38build_slice.8': [<numba.core.ir.Assign object at 0x000001F696D185D0>],
             '$46return_value.10': [<numba.core.ir.Assign object at 0x000001F6963923D0>],
             '$4load_global.0': [<numba.core.ir.Assign object at 0x000001F6966D3E10>],
             '$const34.5': [<numba.core.ir.Assign object at 0x000001F6961375D0>],
             '$const36.6': [<numba.core.ir.Assign object at 0x000001F6961343D0>],
             '$const44.9': [<numba.core.ir.Assign object at 0x000001F696393790>],
             'x': [<numba.core.ir.Assign object at 0x000001F69624C590>],
             'y': [<numba.core.ir.Assign object at 0x000001F69679D810>]})
2023-08-13 11:42:45,368 SSA violators set()
2023-08-13 11:42:45,392 bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	RESUME(arg=0, lineno=1)
           4	LOAD_FAST(arg=0, lineno=2)
           6	LOAD_ATTR(arg=0, lineno=2)
          16	STORE_FAST(arg=1, lineno=2)
          18	LOAD_GLOBAL(arg=2, lineno=3)
          30	LOAD_METHOD(arg=2, lineno=3)
          52	LOAD_FAST(arg=1, lineno=3)
          54	LOAD_GLOBAL(arg=2, lineno=3)
          66	LOAD_ATTR(arg=3, lineno=3)
          76	KW_NAMES(arg=1, lineno=3)
          78	PRECALL(arg=2, lineno=3)
          82	CALL(arg=2, lineno=3)
          92	STORE_FAST(arg=2, lineno=3)
          94	LOAD_CONST(arg=2, lineno=4)
          96	LOAD_FAST(arg=2, lineno=4)
          98	LOAD_CONST(arg=0, lineno=4)
         100	LOAD_CONST(arg=3, lineno=4)
         102	BUILD_SLICE(arg=2, lineno=4)
         104	STORE_SUBSCR(arg=None, lineno=4)
         108	LOAD_CONST(arg=2, lineno=5)
         110	LOAD_FAST(arg=2, lineno=5)
         112	LOAD_CONST(arg=4, lineno=5)
         114	LOAD_CONST(arg=0, lineno=5)
         116	BUILD_SLICE(arg=2, lineno=5)
         118	STORE_SUBSCR(arg=None, lineno=5)
         122	LOAD_GLOBAL(arg=9, lineno=6)
         134	LOAD_GLOBAL(arg=11, lineno=6)
         146	LOAD_CONST(arg=2, lineno=6)
         148	LOAD_CONST(arg=4, lineno=6)
         150	PRECALL(arg=2, lineno=6)
         154	CALL(arg=2, lineno=6)
         164	UNARY_NEGATIVE(arg=None, lineno=6)
         166	LOAD_FAST(arg=1, lineno=6)
         168	LOAD_CONST(arg=2, lineno=6)
         170	BINARY_SUBSCR(arg=None, lineno=6)
         180	LOAD_GLOBAL(arg=13, lineno=6)
         192	LOAD_CONST(arg=2, lineno=6)
         194	LOAD_CONST(arg=3, lineno=6)
         196	PRECALL(arg=2, lineno=6)
         200	CALL(arg=2, lineno=6)
         210	BINARY_OP(arg=10, lineno=6)
         214	PRECALL(arg=2, lineno=6)
         218	CALL(arg=2, lineno=6)
         228	GET_ITER(arg=None, lineno=6)
>        230	FOR_ITER(arg=4, lineno=6)
         232	STORE_FAST(arg=3, lineno=6)
         234	LOAD_CONST(arg=2, lineno=7)
         236	STORE_FAST(arg=4, lineno=7)
         238	JUMP_BACKWARD(arg=5, lineno=7)
>        240	LOAD_FAST(arg=2, lineno=8)
         242	RETURN_VALUE(arg=None, lineno=8)
2023-08-13 11:42:45,392 pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-13 11:42:45,392 stack: []
2023-08-13 11:42:45,392 state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-13 11:42:45,392 dispatch pc=0, inst=NOP(arg=None, lineno=1)
2023-08-13 11:42:45,392 stack []
2023-08-13 11:42:45,392 dispatch pc=2, inst=RESUME(arg=0, lineno=1)
2023-08-13 11:42:45,392 stack []
2023-08-13 11:42:45,392 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2)
2023-08-13 11:42:45,392 stack []
2023-08-13 11:42:45,392 dispatch pc=6, inst=LOAD_ATTR(arg=0, lineno=2)
2023-08-13 11:42:45,392 stack ['$x4.0']
2023-08-13 11:42:45,393 dispatch pc=16, inst=STORE_FAST(arg=1, lineno=2)
2023-08-13 11:42:45,393 stack ['$6load_attr.1']
2023-08-13 11:42:45,393 dispatch pc=18, inst=LOAD_GLOBAL(arg=2, lineno=3)
2023-08-13 11:42:45,393 stack []
2023-08-13 11:42:45,393 dispatch pc=30, inst=LOAD_METHOD(arg=2, lineno=3)
2023-08-13 11:42:45,393 stack ['$18load_global.2']
2023-08-13 11:42:45,393 dispatch pc=52, inst=LOAD_FAST(arg=1, lineno=3)
2023-08-13 11:42:45,393 stack ['$null$30.3', '$30load_method.4']
2023-08-13 11:42:45,393 dispatch pc=54, inst=LOAD_GLOBAL(arg=2, lineno=3)
2023-08-13 11:42:45,393 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5']
2023-08-13 11:42:45,393 dispatch pc=66, inst=LOAD_ATTR(arg=3, lineno=3)
2023-08-13 11:42:45,393 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$54load_global.6']
2023-08-13 11:42:45,393 dispatch pc=76, inst=KW_NAMES(arg=1, lineno=3)
2023-08-13 11:42:45,394 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$66load_attr.7']
2023-08-13 11:42:45,394 dispatch pc=78, inst=PRECALL(arg=2, lineno=3)
2023-08-13 11:42:45,394 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$66load_attr.7']
2023-08-13 11:42:45,394 dispatch pc=82, inst=CALL(arg=2, lineno=3)
2023-08-13 11:42:45,394 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$66load_attr.7']
2023-08-13 11:42:45,394 dispatch pc=92, inst=STORE_FAST(arg=2, lineno=3)
2023-08-13 11:42:45,395 stack ['$82call.8']
2023-08-13 11:42:45,395 dispatch pc=94, inst=LOAD_CONST(arg=2, lineno=4)
2023-08-13 11:42:45,395 stack []
2023-08-13 11:42:45,395 dispatch pc=96, inst=LOAD_FAST(arg=2, lineno=4)
2023-08-13 11:42:45,395 stack ['$const94.9']
2023-08-13 11:42:45,395 dispatch pc=98, inst=LOAD_CONST(arg=0, lineno=4)
2023-08-13 11:42:45,395 stack ['$const94.9', '$out096.10']
2023-08-13 11:42:45,395 dispatch pc=100, inst=LOAD_CONST(arg=3, lineno=4)
2023-08-13 11:42:45,395 stack ['$const94.9', '$out096.10', '$const98.11']
2023-08-13 11:42:45,395 dispatch pc=102, inst=BUILD_SLICE(arg=2, lineno=4)
2023-08-13 11:42:45,396 stack ['$const94.9', '$out096.10', '$const98.11', '$const100.12']
2023-08-13 11:42:45,396 dispatch pc=104, inst=STORE_SUBSCR(arg=None, lineno=4)
2023-08-13 11:42:45,396 stack ['$const94.9', '$out096.10', '$102build_slice.14']
2023-08-13 11:42:45,396 dispatch pc=108, inst=LOAD_CONST(arg=2, lineno=5)
2023-08-13 11:42:45,396 stack []
2023-08-13 11:42:45,396 dispatch pc=110, inst=LOAD_FAST(arg=2, lineno=5)
2023-08-13 11:42:45,396 stack ['$const108.15']
2023-08-13 11:42:45,396 dispatch pc=112, inst=LOAD_CONST(arg=4, lineno=5)
2023-08-13 11:42:45,396 stack ['$const108.15', '$out0110.16']
2023-08-13 11:42:45,396 dispatch pc=114, inst=LOAD_CONST(arg=0, lineno=5)
2023-08-13 11:42:45,396 stack ['$const108.15', '$out0110.16', '$const112.17']
2023-08-13 11:42:45,396 dispatch pc=116, inst=BUILD_SLICE(arg=2, lineno=5)
2023-08-13 11:42:45,396 stack ['$const108.15', '$out0110.16', '$const112.17', '$const114.18']
2023-08-13 11:42:45,396 dispatch pc=118, inst=STORE_SUBSCR(arg=None, lineno=5)
2023-08-13 11:42:45,397 stack ['$const108.15', '$out0110.16', '$116build_slice.20']
2023-08-13 11:42:45,397 dispatch pc=122, inst=LOAD_GLOBAL(arg=9, lineno=6)
2023-08-13 11:42:45,397 stack []
2023-08-13 11:42:45,397 dispatch pc=134, inst=LOAD_GLOBAL(arg=11, lineno=6)
2023-08-13 11:42:45,397 stack ['$null$122.22', '$122load_global.21']
2023-08-13 11:42:45,397 dispatch pc=146, inst=LOAD_CONST(arg=2, lineno=6)
2023-08-13 11:42:45,397 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23']
2023-08-13 11:42:45,397 dispatch pc=148, inst=LOAD_CONST(arg=4, lineno=6)
2023-08-13 11:42:45,397 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23', '$const146.25']
2023-08-13 11:42:45,397 dispatch pc=150, inst=PRECALL(arg=2, lineno=6)
2023-08-13 11:42:45,397 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23', '$const146.25', '$const148.26']
2023-08-13 11:42:45,397 dispatch pc=154, inst=CALL(arg=2, lineno=6)
2023-08-13 11:42:45,397 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23', '$const146.25', '$const148.26']
2023-08-13 11:42:45,398 dispatch pc=164, inst=UNARY_NEGATIVE(arg=None, lineno=6)
2023-08-13 11:42:45,398 stack ['$null$122.22', '$122load_global.21', '$154call.27']
2023-08-13 11:42:45,398 dispatch pc=166, inst=LOAD_FAST(arg=1, lineno=6)
2023-08-13 11:42:45,398 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28']
2023-08-13 11:42:45,398 dispatch pc=168, inst=LOAD_CONST(arg=2, lineno=6)
2023-08-13 11:42:45,398 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$full_shape0166.29']
2023-08-13 11:42:45,398 dispatch pc=170, inst=BINARY_SUBSCR(arg=None, lineno=6)
2023-08-13 11:42:45,398 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$full_shape0166.29', '$const168.30']
2023-08-13 11:42:45,398 dispatch pc=180, inst=LOAD_GLOBAL(arg=13, lineno=6)
2023-08-13 11:42:45,398 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31']
2023-08-13 11:42:45,398 dispatch pc=192, inst=LOAD_CONST(arg=2, lineno=6)
2023-08-13 11:42:45,398 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32']
2023-08-13 11:42:45,398 dispatch pc=194, inst=LOAD_CONST(arg=3, lineno=6)
2023-08-13 11:42:45,398 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32', '$const192.34']
2023-08-13 11:42:45,399 dispatch pc=196, inst=PRECALL(arg=2, lineno=6)
2023-08-13 11:42:45,399 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32', '$const192.34', '$const194.35']
2023-08-13 11:42:45,399 dispatch pc=200, inst=CALL(arg=2, lineno=6)
2023-08-13 11:42:45,399 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32', '$const192.34', '$const194.35']
2023-08-13 11:42:45,399 dispatch pc=210, inst=BINARY_OP(arg=10, lineno=6)
2023-08-13 11:42:45,399 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$200call.36']
2023-08-13 11:42:45,400 dispatch pc=214, inst=PRECALL(arg=2, lineno=6)
2023-08-13 11:42:45,400 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$binop_sub210.37']
2023-08-13 11:42:45,400 dispatch pc=218, inst=CALL(arg=2, lineno=6)
2023-08-13 11:42:45,400 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$binop_sub210.37']
2023-08-13 11:42:45,400 dispatch pc=228, inst=GET_ITER(arg=None, lineno=6)
2023-08-13 11:42:45,400 stack ['$218call.38']
2023-08-13 11:42:45,401 end state. edges=[Edge(pc=230, stack=('$228get_iter.39',), blockstack=(), npush=0)]
2023-08-13 11:42:45,401 pending: deque([State(pc_initial=230 nstack_initial=1)])
2023-08-13 11:42:45,401 stack: ['$phi230.0']
2023-08-13 11:42:45,401 state.pc_initial: State(pc_initial=230 nstack_initial=1)
2023-08-13 11:42:45,401 dispatch pc=230, inst=FOR_ITER(arg=4, lineno=6)
2023-08-13 11:42:45,401 stack ['$phi230.0']
2023-08-13 11:42:45,401 end state. edges=[Edge(pc=240, stack=(), blockstack=(), npush=0), Edge(pc=232, stack=('$phi230.0', '$230for_iter.2'), blockstack=(), npush=0)]
2023-08-13 11:42:45,401 pending: deque([State(pc_initial=240 nstack_initial=0), State(pc_initial=232 nstack_initial=2)])
2023-08-13 11:42:45,401 stack: []
2023-08-13 11:42:45,401 state.pc_initial: State(pc_initial=240 nstack_initial=0)
2023-08-13 11:42:45,401 dispatch pc=240, inst=LOAD_FAST(arg=2, lineno=8)
2023-08-13 11:42:45,402 stack []
2023-08-13 11:42:45,402 dispatch pc=242, inst=RETURN_VALUE(arg=None, lineno=8)
2023-08-13 11:42:45,402 stack ['$out0240.0']
2023-08-13 11:42:45,402 end state. edges=[]
2023-08-13 11:42:45,402 pending: deque([State(pc_initial=232 nstack_initial=2)])
2023-08-13 11:42:45,402 stack: ['$phi232.0', '$phi232.1']
2023-08-13 11:42:45,402 state.pc_initial: State(pc_initial=232 nstack_initial=2)
2023-08-13 11:42:45,402 dispatch pc=232, inst=STORE_FAST(arg=3, lineno=6)
2023-08-13 11:42:45,402 stack ['$phi232.0', '$phi232.1']
2023-08-13 11:42:45,402 dispatch pc=234, inst=LOAD_CONST(arg=2, lineno=7)
2023-08-13 11:42:45,402 stack ['$phi232.0']
2023-08-13 11:42:45,402 dispatch pc=236, inst=STORE_FAST(arg=4, lineno=7)
2023-08-13 11:42:45,402 stack ['$phi232.0', '$const234.2']
2023-08-13 11:42:45,402 dispatch pc=238, inst=JUMP_BACKWARD(arg=5, lineno=7)
2023-08-13 11:42:45,403 stack ['$phi232.0']
2023-08-13 11:42:45,403 end state. edges=[Edge(pc=230, stack=('$phi232.0',), blockstack=(), npush=0)]
2023-08-13 11:42:45,403 pending: deque([State(pc_initial=230 nstack_initial=1)])
2023-08-13 11:42:45,403 -------------------------Prune PHIs-------------------------
2023-08-13 11:42:45,403 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=230 nstack_initial=1): {'$phi230.0'},
             State(pc_initial=232 nstack_initial=2): {'$phi232.1'},
             State(pc_initial=240 nstack_initial=0): set()})
2023-08-13 11:42:45,403 defmap: {'$phi230.0': State(pc_initial=0 nstack_initial=0),
 '$phi232.1': State(pc_initial=230 nstack_initial=1)}
2023-08-13 11:42:45,403 phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi232.0',
                            State(pc_initial=232 nstack_initial=2))},
             '$phi232.0': {('$phi230.0',
                            State(pc_initial=230 nstack_initial=1))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:45,403 changing phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi230.0',
                            State(pc_initial=230 nstack_initial=1))},
             '$phi232.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:45,403 changing phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:45,404 changing phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:45,404 keep phismap: {'$phi230.0': {('$228get_iter.39', State(pc_initial=0 nstack_initial=0))},
 '$phi232.1': {('$230for_iter.2', State(pc_initial=230 nstack_initial=1))}}
2023-08-13 11:42:45,404 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi230.0': '$228get_iter.39'},
             State(pc_initial=230 nstack_initial=1): {'$phi232.1': '$230for_iter.2'}})
2023-08-13 11:42:45,404 ----------------------DONE Prune PHIs-----------------------
2023-08-13 11:42:45,404 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$x4.0'}), (6, {'item': '$x4.0', 'res': '$6load_attr.1'}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'value': '$6load_attr.1'}), (18, {'idx': 1, 'res': '$18load_global.2'}), (20, {}), (22, {}), (24, {}), (26, {}), (28, {}), (30, {'item': '$18load_global.2', 'res': '$30load_method.4'}), (32, {}), (34, {}), (36, {}), (38, {}), (40, {}), (42, {}), (44, {}), (46, {}), (48, {}), (50, {}), (52, {'res': '$full_shape052.5'}), (54, {'idx': 1, 'res': '$54load_global.6'}), (56, {}), (58, {}), (60, {}), (62, {}), (64, {}), (66, {'item': '$54load_global.6', 'res': '$66load_attr.7'}), (68, {}), (70, {}), (72, {}), (74, {}), (78, {}), (80, {}), (82, {'func': '$30load_method.4', 'args': ['$full_shape052.5', '$66load_attr.7'], 'kw_names': 1, 'res': '$82call.8'}), (84, {}), (86, {}), (88, {}), (90, {}), (92, {'value': '$82call.8'}), (94, {'res': '$const94.9'}), (96, {'res': '$out096.10'}), (98, {'res': '$const98.11'}), (100, {'res': '$const100.12'}), (102, {'start': '$const98.11', 'stop': '$const100.12', 'step': None, 'res': '$102build_slice.14', 'slicevar': '$102build_slice.13'}), (104, {'target': '$out096.10', 'index': '$102build_slice.14', 'value': '$const94.9'}), (106, {}), (108, {'res': '$const108.15'}), (110, {'res': '$out0110.16'}), (112, {'res': '$const112.17'}), (114, {'res': '$const114.18'}), (116, {'start': '$const112.17', 'stop': '$const114.18', 'step': None, 'res': '$116build_slice.20', 'slicevar': '$116build_slice.19'}), (118, {'target': '$out0110.16', 'index': '$116build_slice.20', 'value': '$const108.15'}), (120, {}), (122, {'idx': 4, 'res': '$122load_global.21'}), (124, {}), (126, {}), (128, {}), (130, {}), (132, {}), (134, {'idx': 5, 'res': '$134load_global.23'}), (136, {}), (138, {}), (140, {}), (142, {}), (144, {}), (146, {'res': '$const146.25'}), (148, {'res': '$const148.26'}), (150, {}), (152, {}), (154, {'func': '$134load_global.23', 'args': ['$const146.25', '$const148.26'], 'kw_names': None, 'res': '$154call.27'}), (156, {}), (158, {}), (160, {}), (162, {}), (164, {'value': '$154call.27', 'res': '$164unary_negative.28'}), (166, {'res': '$full_shape0166.29'}), (168, {'res': '$const168.30'}), (170, {'index': '$const168.30', 'target': '$full_shape0166.29', 'res': '$170binary_subscr.31'}), (172, {}), (174, {}), (176, {}), (178, {}), (180, {'idx': 6, 'res': '$180load_global.32'}), (182, {}), (184, {}), (186, {}), (188, {}), (190, {}), (192, {'res': '$const192.34'}), (194, {'res': '$const194.35'}), (196, {}), (198, {}), (200, {'func': '$180load_global.32', 'args': ['$const192.34', '$const194.35'], 'kw_names': None, 'res': '$200call.36'}), (202, {}), (204, {}), (206, {}), (208, {}), (210, {'op': '-', 'lhs': '$170binary_subscr.31', 'rhs': '$200call.36', 'res': '$binop_sub210.37'}), (212, {}), (214, {}), (216, {}), (218, {'func': '$122load_global.21', 'args': ['$164unary_negative.28', '$binop_sub210.37'], 'kw_names': None, 'res': '$218call.38'}), (220, {}), (222, {}), (224, {}), (226, {}), (228, {'value': '$218call.38', 'res': '$228get_iter.39'})), outgoing_phis={'$phi230.0': '$228get_iter.39'}, blockstack=(), active_try_block=None, outgoing_edgepushed={230: ('$228get_iter.39',)})
2023-08-13 11:42:45,405 block_infos State(pc_initial=230 nstack_initial=1):
AdaptBlockInfo(insts=((230, {'iterator': '$phi230.0', 'pair': '$230for_iter.1', 'indval': '$230for_iter.2', 'pred': '$230for_iter.3'}),), outgoing_phis={'$phi232.1': '$230for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={240: (), 232: ('$phi230.0', '$230for_iter.2')})
2023-08-13 11:42:45,405 block_infos State(pc_initial=232 nstack_initial=2):
AdaptBlockInfo(insts=((232, {'value': '$phi232.1'}), (234, {'res': '$const234.2'}), (236, {'value': '$const234.2'}), (238, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={230: ('$phi232.0',)})
2023-08-13 11:42:45,405 block_infos State(pc_initial=240 nstack_initial=0):
AdaptBlockInfo(insts=((240, {'res': '$out0240.0'}), (242, {'retval': '$out0240.0', 'castval': '$242return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:45,406 label 0:
    x = arg(0, name=x)                       ['x']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $18load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>) ['$18load_global.2']
    $30load_method.4 = getattr(value=$18load_global.2, attr=empty) ['$18load_global.2', '$30load_method.4']
    $54load_global.6 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>) ['$54load_global.6']
    $66load_attr.7 = getattr(value=$54load_global.6, attr=bool_) ['$54load_global.6', '$66load_attr.7']
    out0 = call $30load_method.4(full_shape0, func=$30load_method.4, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($66load_attr.7, <string>:3))], vararg=None, varkwarg=None, target=None) ['$30load_method.4', '$66load_attr.7', 'full_shape0', 'out0']
    $const94.9 = const(int, 0)               ['$const94.9']
    $const98.11 = const(NoneType, None)      ['$const98.11']
    $const100.12 = const(int, 1)             ['$const100.12']
    $102build_slice.13 = global(slice: <class 'slice'>) ['$102build_slice.13']
    $102build_slice.14 = call $102build_slice.13($const98.11, $const100.12, func=$102build_slice.13, args=(Var($const98.11, <string>:4), Var($const100.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$102build_slice.13', '$102build_slice.14', '$const100.12', '$const98.11']
    out0[$102build_slice.14] = $const94.9    ['$102build_slice.14', '$const94.9', 'out0']
    $const108.15 = const(int, 0)             ['$const108.15']
    $const112.17 = const(int, -1)            ['$const112.17']
    $const114.18 = const(NoneType, None)     ['$const114.18']
    $116build_slice.19 = global(slice: <class 'slice'>) ['$116build_slice.19']
    $116build_slice.20 = call $116build_slice.19($const112.17, $const114.18, func=$116build_slice.19, args=(Var($const112.17, <string>:5), Var($const114.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$116build_slice.19', '$116build_slice.20', '$const112.17', '$const114.18']
    out0[$116build_slice.20] = $const108.15  ['$116build_slice.20', '$const108.15', 'out0']
    $122load_global.21 = global(range: <class 'range'>) ['$122load_global.21']
    $134load_global.23 = global(min: <built-in function min>) ['$134load_global.23']
    $const146.25 = const(int, 0)             ['$const146.25']
    $const148.26 = const(int, -1)            ['$const148.26']
    $154call.27 = call $134load_global.23($const146.25, $const148.26, func=$134load_global.23, args=[Var($const146.25, <string>:6), Var($const148.26, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$134load_global.23', '$154call.27', '$const146.25', '$const148.26']
    $164unary_negative.28 = unary(fn=<built-in function neg>, value=$154call.27) ['$154call.27', '$164unary_negative.28']
    $const168.30 = const(int, 0)             ['$const168.30']
    $170binary_subscr.31 = getitem(value=full_shape0, index=$const168.30, fn=<built-in function getitem>) ['$170binary_subscr.31', '$const168.30', 'full_shape0']
    $180load_global.32 = global(max: <built-in function max>) ['$180load_global.32']
    $const192.34 = const(int, 0)             ['$const192.34']
    $const194.35 = const(int, 1)             ['$const194.35']
    $200call.36 = call $180load_global.32($const192.34, $const194.35, func=$180load_global.32, args=[Var($const192.34, <string>:6), Var($const194.35, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$180load_global.32', '$200call.36', '$const192.34', '$const194.35']
    $binop_sub210.37 = $170binary_subscr.31 - $200call.36 ['$170binary_subscr.31', '$200call.36', '$binop_sub210.37']
    $218call.38 = call $122load_global.21($164unary_negative.28, $binop_sub210.37, func=$122load_global.21, args=[Var($164unary_negative.28, <string>:6), Var($binop_sub210.37, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$122load_global.21', '$164unary_negative.28', '$218call.38', '$binop_sub210.37']
    $228get_iter.39 = getiter(value=$218call.38) ['$218call.38', '$228get_iter.39']
    $phi230.0 = $228get_iter.39              ['$228get_iter.39', '$phi230.0']
    jump 230                                 []
label 230:
    $230for_iter.1 = iternext(value=$phi230.0) ['$230for_iter.1', '$phi230.0']
    $230for_iter.2 = pair_first(value=$230for_iter.1) ['$230for_iter.1', '$230for_iter.2']
    $230for_iter.3 = pair_second(value=$230for_iter.1) ['$230for_iter.1', '$230for_iter.3']
    $phi232.1 = $230for_iter.2               ['$230for_iter.2', '$phi232.1']
    branch $230for_iter.3, 232, 240          ['$230for_iter.3']
label 232:
    index00 = $phi232.1                      ['$phi232.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 230                                 []
label 240:
    $242return_value.1 = cast(value=out0)    ['$242return_value.1', 'out0']
    return $242return_value.1                ['$242return_value.1']

2023-08-13 11:42:45,425 ==== SSA block analysis pass on 0
2023-08-13 11:42:45,426 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696D3CB10>
2023-08-13 11:42:45,426 on stmt: x = arg(0, name=x)
2023-08-13 11:42:45,426 on stmt: full_shape0 = getattr(value=x, attr=shape)
2023-08-13 11:42:45,426 on stmt: $18load_global.2.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:45,426 on stmt: $30load_method.4.1 = getattr(value=$18load_global.2.1, attr=empty)
2023-08-13 11:42:45,426 on stmt: $54load_global.6.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:45,426 on stmt: $66load_attr.7.1 = getattr(value=$54load_global.6.1, attr=bool_)
2023-08-13 11:42:45,426 on stmt: out0 = call $30load_method.4.1(full_shape0, func=$30load_method.4.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($66load_attr.7.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:45,426 on stmt: $const94.9.1 = const(int, 0)
2023-08-13 11:42:45,426 on stmt: $const98.11.1 = const(NoneType, None)
2023-08-13 11:42:45,426 on stmt: $const100.12.1 = const(int, 1)
2023-08-13 11:42:45,426 on stmt: $102build_slice.13.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:45,426 on stmt: $102build_slice.14.1 = call $102build_slice.13.1($const98.11.1, $const100.12.1, func=$102build_slice.13.1, args=(Var($const98.11.1, <string>:4), Var($const100.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:45,427 on stmt: out0[$102build_slice.14.1] = $const94.9.1
2023-08-13 11:42:45,427 on stmt: $const108.15.1 = const(int, 0)
2023-08-13 11:42:45,427 on stmt: $const112.17.1 = const(int, -1)
2023-08-13 11:42:45,427 on stmt: $const114.18.1 = const(NoneType, None)
2023-08-13 11:42:45,427 on stmt: $116build_slice.19.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:45,427 on stmt: $116build_slice.20.1 = call $116build_slice.19.1($const112.17.1, $const114.18.1, func=$116build_slice.19.1, args=(Var($const112.17.1, <string>:5), Var($const114.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:45,428 on stmt: out0[$116build_slice.20.1] = $const108.15.1
2023-08-13 11:42:45,428 on stmt: $122load_global.21.1 = global(range: <class 'range'>)
2023-08-13 11:42:45,428 on stmt: $134load_global.23.1 = global(min: <built-in function min>)
2023-08-13 11:42:45,428 on stmt: $const146.25.1 = const(int, 0)
2023-08-13 11:42:45,428 on stmt: $const148.26.1 = const(int, -1)
2023-08-13 11:42:45,428 on stmt: $154call.27.1 = call $134load_global.23.1($const146.25.1, $const148.26.1, func=$134load_global.23.1, args=[Var($const146.25.1, <string>:6), Var($const148.26.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:45,428 on stmt: $164unary_negative.28.1 = unary(fn=<built-in function neg>, value=$154call.27.1)
2023-08-13 11:42:45,428 on stmt: $const168.30.1 = const(int, 0)
2023-08-13 11:42:45,428 on stmt: $170binary_subscr.31.1 = getitem(value=full_shape0, index=$const168.30.1, fn=<built-in function getitem>)
2023-08-13 11:42:45,428 on stmt: $180load_global.32.1 = global(max: <built-in function max>)
2023-08-13 11:42:45,428 on stmt: $const192.34.1 = const(int, 0)
2023-08-13 11:42:45,428 on stmt: $const194.35.1 = const(int, 1)
2023-08-13 11:42:45,428 on stmt: $200call.36.1 = call $180load_global.32.1($const192.34.1, $const194.35.1, func=$180load_global.32.1, args=[Var($const192.34.1, <string>:6), Var($const194.35.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:45,428 on stmt: $binop_sub210.37.1 = $170binary_subscr.31.1 - $200call.36.1
2023-08-13 11:42:45,429 on stmt: $218call.38.1 = call $122load_global.21.1($164unary_negative.28.1, $binop_sub210.37.1, func=$122load_global.21.1, args=[Var($164unary_negative.28.1, <string>:6), Var($binop_sub210.37.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:45,429 on stmt: $228get_iter.39.1 = getiter(value=$218call.38.1)
2023-08-13 11:42:45,429 on stmt: $phi230.0.1 = $228get_iter.39.1
2023-08-13 11:42:45,429 on stmt: jump 230
2023-08-13 11:42:45,429 ==== SSA block analysis pass on 230
2023-08-13 11:42:45,429 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696D3CB10>
2023-08-13 11:42:45,429 on stmt: $230for_iter.1.1 = iternext(value=$phi230.0.1)
2023-08-13 11:42:45,429 on stmt: $230for_iter.2.1 = pair_first(value=$230for_iter.1.1)
2023-08-13 11:42:45,429 on stmt: $230for_iter.3.1 = pair_second(value=$230for_iter.1.1)
2023-08-13 11:42:45,429 on stmt: $phi232.1.1 = $230for_iter.2.1
2023-08-13 11:42:45,429 on stmt: branch $230for_iter.3.1, 232, 242
2023-08-13 11:42:45,429 ==== SSA block analysis pass on 232
2023-08-13 11:42:45,430 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696D3CB10>
2023-08-13 11:42:45,430 on stmt: index00 = $phi232.1.1
2023-08-13 11:42:45,430 on stmt: jump 240
2023-08-13 11:42:45,430 ==== SSA block analysis pass on 242
2023-08-13 11:42:45,430 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696D3CB10>
2023-08-13 11:42:45,430 on stmt: $242return_value.1.1 = cast(value=out0)
2023-08-13 11:42:45,430 on stmt: return $242return_value.1.1
2023-08-13 11:42:45,430 ==== SSA block analysis pass on 240
2023-08-13 11:42:45,430 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696D3CB10>
2023-08-13 11:42:45,430 on stmt: $const6.1 = const(int, 0)
2023-08-13 11:42:45,430 on stmt: stencil_index = $const6.1 + index00
2023-08-13 11:42:45,430 on stmt: $8binary_subscr.2 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:45,430 on stmt: $const20.4 = const(int, -1)
2023-08-13 11:42:45,430 on stmt: stencil_index.1 = $const20.4 + index00
2023-08-13 11:42:45,430 on stmt: $22binary_subscr.5 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2023-08-13 11:42:45,430 on stmt: $32compare_op.6 = $8binary_subscr.2 < $22binary_subscr.5
2023-08-13 11:42:45,430 on stmt: $const40.8 = const(int, 0)
2023-08-13 11:42:45,431 on stmt: stencil_index.2 = $const40.8 + index00
2023-08-13 11:42:45,431 on stmt: $42binary_subscr.9 = getitem(value=x, index=stencil_index.2, fn=<built-in function getitem>)
2023-08-13 11:42:45,431 on stmt: $const54.11 = const(int, 1)
2023-08-13 11:42:45,431 on stmt: stencil_index.3 = $const54.11 + index00
2023-08-13 11:42:45,431 on stmt: $56binary_subscr.12 = getitem(value=x, index=stencil_index.3, fn=<built-in function getitem>)
2023-08-13 11:42:45,431 on stmt: $66compare_op.13 = $42binary_subscr.9 <= $56binary_subscr.12
2023-08-13 11:42:45,431 on stmt: $binop_and_72.14 = $32compare_op.6 & $66compare_op.13
2023-08-13 11:42:45,431 on stmt: $76return_value.15 = cast(value=$binop_and_72.14)
2023-08-13 11:42:45,431 on stmt: out0[index00] = $76return_value.15
2023-08-13 11:42:45,431 on stmt: jump 241
2023-08-13 11:42:45,431 ==== SSA block analysis pass on 241
2023-08-13 11:42:45,431 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696D3CB10>
2023-08-13 11:42:45,431 on stmt: jump 230
2023-08-13 11:42:45,433 defs defaultdict(<class 'list'>,
            {'$102build_slice.13.1': [<numba.core.ir.Assign object at 0x000001F696380F10>],
             '$102build_slice.14.1': [<numba.core.ir.Assign object at 0x000001F696382590>],
             '$116build_slice.19.1': [<numba.core.ir.Assign object at 0x000001F696381D50>],
             '$116build_slice.20.1': [<numba.core.ir.Assign object at 0x000001F696381290>],
             '$122load_global.21.1': [<numba.core.ir.Assign object at 0x000001F696380B90>],
             '$134load_global.23.1': [<numba.core.ir.Assign object at 0x000001F6963800D0>],
             '$154call.27.1': [<numba.core.ir.Assign object at 0x000001F696383810>],
             '$164unary_negative.28.1': [<numba.core.ir.Assign object at 0x000001F696383C50>],
             '$170binary_subscr.31.1': [<numba.core.ir.Assign object at 0x000001F696383ED0>],
             '$180load_global.32.1': [<numba.core.ir.Assign object at 0x000001F696380450>],
             '$18load_global.2.1': [<numba.core.ir.Assign object at 0x000001F696D5BF50>],
             '$200call.36.1': [<numba.core.ir.Assign object at 0x000001F696382210>],
             '$218call.38.1': [<numba.core.ir.Assign object at 0x000001F696C63990>],
             '$228get_iter.39.1': [<numba.core.ir.Assign object at 0x000001F696C61D50>],
             '$22binary_subscr.5': [<numba.core.ir.Assign object at 0x000001F6962389D0>],
             '$230for_iter.1.1': [<numba.core.ir.Assign object at 0x000001F696C60E90>],
             '$230for_iter.2.1': [<numba.core.ir.Assign object at 0x000001F696C60A10>],
             '$230for_iter.3.1': [<numba.core.ir.Assign object at 0x000001F696C61990>],
             '$242return_value.1.1': [<numba.core.ir.Assign object at 0x000001F696C62BD0>],
             '$30load_method.4.1': [<numba.core.ir.Assign object at 0x000001F696D5B810>],
             '$32compare_op.6': [<numba.core.ir.Assign object at 0x000001F696D68390>],
             '$42binary_subscr.9': [<numba.core.ir.Assign object at 0x000001F6962384D0>],
             '$54load_global.6.1': [<numba.core.ir.Assign object at 0x000001F696D5BDD0>],
             '$56binary_subscr.12': [<numba.core.ir.Assign object at 0x000001F69623A250>],
             '$66compare_op.13': [<numba.core.ir.Assign object at 0x000001F695FAEED0>],
             '$66load_attr.7.1': [<numba.core.ir.Assign object at 0x000001F696381E50>],
             '$76return_value.15': [<numba.core.ir.Assign object at 0x000001F6966EE3D0>],
             '$8binary_subscr.2': [<numba.core.ir.Assign object at 0x000001F696238E10>],
             '$binop_and_72.14': [<numba.core.ir.Assign object at 0x000001F695FAF850>],
             '$binop_sub210.37.1': [<numba.core.ir.Assign object at 0x000001F696C60AD0>],
             '$const100.12.1': [<numba.core.ir.Assign object at 0x000001F6963802D0>],
             '$const108.15.1': [<numba.core.ir.Assign object at 0x000001F696382650>],
             '$const112.17.1': [<numba.core.ir.Assign object at 0x000001F696381150>],
             '$const114.18.1': [<numba.core.ir.Assign object at 0x000001F6963809D0>],
             '$const146.25.1': [<numba.core.ir.Assign object at 0x000001F696380810>],
             '$const148.26.1': [<numba.core.ir.Assign object at 0x000001F696381390>],
             '$const168.30.1': [<numba.core.ir.Assign object at 0x000001F696381590>],
             '$const192.34.1': [<numba.core.ir.Assign object at 0x000001F696383E10>],
             '$const194.35.1': [<numba.core.ir.Assign object at 0x000001F696382C10>],
             '$const20.4': [<numba.core.ir.Assign object at 0x000001F696003E50>],
             '$const40.8': [<numba.core.ir.Assign object at 0x000001F696D6B290>],
             '$const54.11': [<numba.core.ir.Assign object at 0x000001F696267D90>],
             '$const6.1': [<numba.core.ir.Assign object at 0x000001F696341190>],
             '$const94.9.1': [<numba.core.ir.Assign object at 0x000001F696382E90>],
             '$const98.11.1': [<numba.core.ir.Assign object at 0x000001F6963822D0>],
             '$phi230.0.1': [<numba.core.ir.Assign object at 0x000001F696D5B010>],
             '$phi232.1.1': [<numba.core.ir.Assign object at 0x000001F696C61F10>],
             'full_shape0': [<numba.core.ir.Assign object at 0x000001F696D5A610>],
             'index00': [<numba.core.ir.Assign object at 0x000001F696C605D0>],
             'out0': [<numba.core.ir.Assign object at 0x000001F696382110>],
             'stencil_index': [<numba.core.ir.Assign object at 0x000001F69623B310>],
             'stencil_index.1': [<numba.core.ir.Assign object at 0x000001F696238510>],
             'stencil_index.2': [<numba.core.ir.Assign object at 0x000001F696239050>],
             'stencil_index.3': [<numba.core.ir.Assign object at 0x000001F69623B910>],
             'x': [<numba.core.ir.Assign object at 0x000001F696D5A2D0>]})
2023-08-13 11:42:45,433 SSA violators set()
2023-08-13 11:42:45,837 bytecode dump:
>          0	NOP(arg=None, lineno=1080)
           2	RESUME(arg=0, lineno=1080)
           4	LOAD_GLOBAL(arg=1, lineno=1094)
          16	LOAD_FAST(arg=0, lineno=1094)
          18	PRECALL(arg=1, lineno=1094)
          22	CALL(arg=1, lineno=1094)
          32	LOAD_FAST(arg=1, lineno=1094)
          34	LOAD_CONST(arg=1, lineno=1094)
          36	LOAD_CONST(arg=1, lineno=1094)
          38	BUILD_SLICE(arg=2, lineno=1094)
          40	STORE_SUBSCR(arg=None, lineno=1094)
          44	LOAD_CONST(arg=1, lineno=1094)
          46	RETURN_VALUE(arg=None, lineno=1094)
2023-08-13 11:42:45,837 pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-13 11:42:45,837 stack: []
2023-08-13 11:42:45,837 state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-13 11:42:45,837 dispatch pc=0, inst=NOP(arg=None, lineno=1080)
2023-08-13 11:42:45,838 stack []
2023-08-13 11:42:45,838 dispatch pc=2, inst=RESUME(arg=0, lineno=1080)
2023-08-13 11:42:45,838 stack []
2023-08-13 11:42:45,838 dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=1094)
2023-08-13 11:42:45,838 stack []
2023-08-13 11:42:45,838 dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1094)
2023-08-13 11:42:45,838 stack ['$null$4.1', '$4load_global.0']
2023-08-13 11:42:45,838 dispatch pc=18, inst=PRECALL(arg=1, lineno=1094)
2023-08-13 11:42:45,838 stack ['$null$4.1', '$4load_global.0', '$x16.2']
2023-08-13 11:42:45,838 dispatch pc=22, inst=CALL(arg=1, lineno=1094)
2023-08-13 11:42:45,838 stack ['$null$4.1', '$4load_global.0', '$x16.2']
2023-08-13 11:42:45,838 dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=1094)
2023-08-13 11:42:45,839 stack ['$22call.3']
2023-08-13 11:42:45,839 dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=1094)
2023-08-13 11:42:45,839 stack ['$22call.3', '$y32.4']
2023-08-13 11:42:45,839 dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=1094)
2023-08-13 11:42:45,839 stack ['$22call.3', '$y32.4', '$const34.5']
2023-08-13 11:42:45,839 dispatch pc=38, inst=BUILD_SLICE(arg=2, lineno=1094)
2023-08-13 11:42:45,839 stack ['$22call.3', '$y32.4', '$const34.5', '$const36.6']
2023-08-13 11:42:45,839 dispatch pc=40, inst=STORE_SUBSCR(arg=None, lineno=1094)
2023-08-13 11:42:45,839 stack ['$22call.3', '$y32.4', '$38build_slice.8']
2023-08-13 11:42:45,839 dispatch pc=44, inst=LOAD_CONST(arg=1, lineno=1094)
2023-08-13 11:42:45,839 stack []
2023-08-13 11:42:45,839 dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=1094)
2023-08-13 11:42:45,839 stack ['$const44.9']
2023-08-13 11:42:45,840 end state. edges=[]
2023-08-13 11:42:45,840 -------------------------Prune PHIs-------------------------
2023-08-13 11:42:45,840 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-08-13 11:42:45,840 defmap: {}
2023-08-13 11:42:45,840 phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:45,840 changing phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:45,840 keep phismap: {}
2023-08-13 11:42:45,840 new_out: defaultdict(<class 'dict'>, {})
2023-08-13 11:42:45,840 ----------------------DONE Prune PHIs-----------------------
2023-08-13 11:42:45,840 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'res': '$x16.2'}), (18, {}), (20, {}), (22, {'func': '$4load_global.0', 'args': ['$x16.2'], 'kw_names': None, 'res': '$22call.3'}), (24, {}), (26, {}), (28, {}), (30, {}), (32, {'res': '$y32.4'}), (34, {'res': '$const34.5'}), (36, {'res': '$const36.6'}), (38, {'start': '$const34.5', 'stop': '$const36.6', 'step': None, 'res': '$38build_slice.8', 'slicevar': '$38build_slice.7'}), (40, {'target': '$y32.4', 'index': '$38build_slice.8', 'value': '$22call.3'}), (42, {}), (44, {'res': '$const44.9'}), (46, {'retval': '$const44.9', 'castval': '$46return_value.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:45,841 label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $4load_global.0 = global(_localmin_sten: <numba.stencils.stencil.StencilFunc object at 0x000001F696E7C0D0>) ['$4load_global.0']
    $22call.3 = call $4load_global.0(x, func=$4load_global.0, args=[Var(x, utils.py:1080)], kws=(), vararg=None, varkwarg=None, target=None) ['$22call.3', '$4load_global.0', 'x']
    $const34.5 = const(NoneType, None)       ['$const34.5']
    $const36.6 = const(NoneType, None)       ['$const36.6']
    $38build_slice.7 = global(slice: <class 'slice'>) ['$38build_slice.7']
    $38build_slice.8 = call $38build_slice.7($const34.5, $const36.6, func=$38build_slice.7, args=(Var($const34.5, utils.py:1094), Var($const36.6, utils.py:1094)), kws=(), vararg=None, varkwarg=None, target=None) ['$38build_slice.7', '$38build_slice.8', '$const34.5', '$const36.6']
    y[$38build_slice.8] = $22call.3          ['$22call.3', '$38build_slice.8', 'y']
    $const44.9 = const(NoneType, None)       ['$const44.9']
    $46return_value.10 = cast(value=$const44.9) ['$46return_value.10', '$const44.9']
    return $46return_value.10                ['$46return_value.10']

2023-08-13 11:42:45,851 ==== SSA block analysis pass on 0
2023-08-13 11:42:45,851 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696BCF310>
2023-08-13 11:42:45,851 on stmt: x = arg(0, name=x)
2023-08-13 11:42:45,851 on stmt: y = arg(1, name=y)
2023-08-13 11:42:45,851 on stmt: $4load_global.0 = global(_localmin_sten: <numba.stencils.stencil.StencilFunc object at 0x000001F696E7C0D0>)
2023-08-13 11:42:45,851 on stmt: $22call.3 = call $4load_global.0(x, func=$4load_global.0, args=[Var(x, utils.py:1080)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:45,851 on stmt: $const34.5 = const(NoneType, None)
2023-08-13 11:42:45,851 on stmt: $const36.6 = const(NoneType, None)
2023-08-13 11:42:45,851 on stmt: $38build_slice.7 = global(slice: <class 'slice'>)
2023-08-13 11:42:45,851 on stmt: $38build_slice.8 = call $38build_slice.7($const34.5, $const36.6, func=$38build_slice.7, args=(Var($const34.5, utils.py:1094), Var($const36.6, utils.py:1094)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:45,851 on stmt: y[slice(None, None, None)] = $22call.3
2023-08-13 11:42:45,852 on stmt: $const44.9 = const(NoneType, None)
2023-08-13 11:42:45,852 on stmt: $46return_value.10 = cast(value=$const44.9)
2023-08-13 11:42:45,852 on stmt: return $46return_value.10
2023-08-13 11:42:45,852 defs defaultdict(<class 'list'>,
            {'$22call.3': [<numba.core.ir.Assign object at 0x000001F696BCF290>],
             '$38build_slice.7': [<numba.core.ir.Assign object at 0x000001F696BCC890>],
             '$38build_slice.8': [<numba.core.ir.Assign object at 0x000001F696BCCC50>],
             '$46return_value.10': [<numba.core.ir.Assign object at 0x000001F696BCDDD0>],
             '$4load_global.0': [<numba.core.ir.Assign object at 0x000001F696BCD010>],
             '$const34.5': [<numba.core.ir.Assign object at 0x000001F696BCC210>],
             '$const36.6': [<numba.core.ir.Assign object at 0x000001F696BCC310>],
             '$const44.9': [<numba.core.ir.Assign object at 0x000001F696BCC8D0>],
             'x': [<numba.core.ir.Assign object at 0x000001F696BCD710>],
             'y': [<numba.core.ir.Assign object at 0x000001F696BCD7D0>]})
2023-08-13 11:42:45,852 SSA violators set()
2023-08-13 11:42:45,879 bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	RESUME(arg=0, lineno=1)
           4	LOAD_FAST(arg=0, lineno=2)
           6	LOAD_ATTR(arg=0, lineno=2)
          16	STORE_FAST(arg=1, lineno=2)
          18	LOAD_GLOBAL(arg=2, lineno=3)
          30	LOAD_METHOD(arg=2, lineno=3)
          52	LOAD_FAST(arg=1, lineno=3)
          54	LOAD_GLOBAL(arg=2, lineno=3)
          66	LOAD_ATTR(arg=3, lineno=3)
          76	KW_NAMES(arg=1, lineno=3)
          78	PRECALL(arg=2, lineno=3)
          82	CALL(arg=2, lineno=3)
          92	STORE_FAST(arg=2, lineno=3)
          94	LOAD_CONST(arg=2, lineno=4)
          96	LOAD_FAST(arg=2, lineno=4)
          98	LOAD_CONST(arg=0, lineno=4)
         100	LOAD_CONST(arg=3, lineno=4)
         102	BUILD_SLICE(arg=2, lineno=4)
         104	STORE_SUBSCR(arg=None, lineno=4)
         108	LOAD_CONST(arg=2, lineno=5)
         110	LOAD_FAST(arg=2, lineno=5)
         112	LOAD_CONST(arg=4, lineno=5)
         114	LOAD_CONST(arg=0, lineno=5)
         116	BUILD_SLICE(arg=2, lineno=5)
         118	STORE_SUBSCR(arg=None, lineno=5)
         122	LOAD_GLOBAL(arg=9, lineno=6)
         134	LOAD_GLOBAL(arg=11, lineno=6)
         146	LOAD_CONST(arg=2, lineno=6)
         148	LOAD_CONST(arg=4, lineno=6)
         150	PRECALL(arg=2, lineno=6)
         154	CALL(arg=2, lineno=6)
         164	UNARY_NEGATIVE(arg=None, lineno=6)
         166	LOAD_FAST(arg=1, lineno=6)
         168	LOAD_CONST(arg=2, lineno=6)
         170	BINARY_SUBSCR(arg=None, lineno=6)
         180	LOAD_GLOBAL(arg=13, lineno=6)
         192	LOAD_CONST(arg=2, lineno=6)
         194	LOAD_CONST(arg=3, lineno=6)
         196	PRECALL(arg=2, lineno=6)
         200	CALL(arg=2, lineno=6)
         210	BINARY_OP(arg=10, lineno=6)
         214	PRECALL(arg=2, lineno=6)
         218	CALL(arg=2, lineno=6)
         228	GET_ITER(arg=None, lineno=6)
>        230	FOR_ITER(arg=4, lineno=6)
         232	STORE_FAST(arg=3, lineno=6)
         234	LOAD_CONST(arg=2, lineno=7)
         236	STORE_FAST(arg=4, lineno=7)
         238	JUMP_BACKWARD(arg=5, lineno=7)
>        240	LOAD_FAST(arg=2, lineno=8)
         242	RETURN_VALUE(arg=None, lineno=8)
2023-08-13 11:42:45,879 pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-13 11:42:45,879 stack: []
2023-08-13 11:42:45,879 state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-13 11:42:45,879 dispatch pc=0, inst=NOP(arg=None, lineno=1)
2023-08-13 11:42:45,879 stack []
2023-08-13 11:42:45,879 dispatch pc=2, inst=RESUME(arg=0, lineno=1)
2023-08-13 11:42:45,879 stack []
2023-08-13 11:42:45,879 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2)
2023-08-13 11:42:45,879 stack []
2023-08-13 11:42:45,880 dispatch pc=6, inst=LOAD_ATTR(arg=0, lineno=2)
2023-08-13 11:42:45,880 stack ['$x4.0']
2023-08-13 11:42:45,880 dispatch pc=16, inst=STORE_FAST(arg=1, lineno=2)
2023-08-13 11:42:45,880 stack ['$6load_attr.1']
2023-08-13 11:42:45,880 dispatch pc=18, inst=LOAD_GLOBAL(arg=2, lineno=3)
2023-08-13 11:42:45,880 stack []
2023-08-13 11:42:45,880 dispatch pc=30, inst=LOAD_METHOD(arg=2, lineno=3)
2023-08-13 11:42:45,880 stack ['$18load_global.2']
2023-08-13 11:42:45,880 dispatch pc=52, inst=LOAD_FAST(arg=1, lineno=3)
2023-08-13 11:42:45,880 stack ['$null$30.3', '$30load_method.4']
2023-08-13 11:42:45,880 dispatch pc=54, inst=LOAD_GLOBAL(arg=2, lineno=3)
2023-08-13 11:42:45,880 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5']
2023-08-13 11:42:45,880 dispatch pc=66, inst=LOAD_ATTR(arg=3, lineno=3)
2023-08-13 11:42:45,880 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$54load_global.6']
2023-08-13 11:42:45,881 dispatch pc=76, inst=KW_NAMES(arg=1, lineno=3)
2023-08-13 11:42:45,881 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$66load_attr.7']
2023-08-13 11:42:45,881 dispatch pc=78, inst=PRECALL(arg=2, lineno=3)
2023-08-13 11:42:45,881 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$66load_attr.7']
2023-08-13 11:42:45,881 dispatch pc=82, inst=CALL(arg=2, lineno=3)
2023-08-13 11:42:45,881 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$66load_attr.7']
2023-08-13 11:42:45,881 dispatch pc=92, inst=STORE_FAST(arg=2, lineno=3)
2023-08-13 11:42:45,881 stack ['$82call.8']
2023-08-13 11:42:45,881 dispatch pc=94, inst=LOAD_CONST(arg=2, lineno=4)
2023-08-13 11:42:45,882 stack []
2023-08-13 11:42:45,882 dispatch pc=96, inst=LOAD_FAST(arg=2, lineno=4)
2023-08-13 11:42:45,882 stack ['$const94.9']
2023-08-13 11:42:45,882 dispatch pc=98, inst=LOAD_CONST(arg=0, lineno=4)
2023-08-13 11:42:45,882 stack ['$const94.9', '$out096.10']
2023-08-13 11:42:45,882 dispatch pc=100, inst=LOAD_CONST(arg=3, lineno=4)
2023-08-13 11:42:45,882 stack ['$const94.9', '$out096.10', '$const98.11']
2023-08-13 11:42:45,882 dispatch pc=102, inst=BUILD_SLICE(arg=2, lineno=4)
2023-08-13 11:42:45,883 stack ['$const94.9', '$out096.10', '$const98.11', '$const100.12']
2023-08-13 11:42:45,883 dispatch pc=104, inst=STORE_SUBSCR(arg=None, lineno=4)
2023-08-13 11:42:45,883 stack ['$const94.9', '$out096.10', '$102build_slice.14']
2023-08-13 11:42:45,883 dispatch pc=108, inst=LOAD_CONST(arg=2, lineno=5)
2023-08-13 11:42:45,883 stack []
2023-08-13 11:42:45,883 dispatch pc=110, inst=LOAD_FAST(arg=2, lineno=5)
2023-08-13 11:42:45,883 stack ['$const108.15']
2023-08-13 11:42:45,883 dispatch pc=112, inst=LOAD_CONST(arg=4, lineno=5)
2023-08-13 11:42:45,883 stack ['$const108.15', '$out0110.16']
2023-08-13 11:42:45,883 dispatch pc=114, inst=LOAD_CONST(arg=0, lineno=5)
2023-08-13 11:42:45,883 stack ['$const108.15', '$out0110.16', '$const112.17']
2023-08-13 11:42:45,883 dispatch pc=116, inst=BUILD_SLICE(arg=2, lineno=5)
2023-08-13 11:42:45,883 stack ['$const108.15', '$out0110.16', '$const112.17', '$const114.18']
2023-08-13 11:42:45,883 dispatch pc=118, inst=STORE_SUBSCR(arg=None, lineno=5)
2023-08-13 11:42:45,884 stack ['$const108.15', '$out0110.16', '$116build_slice.20']
2023-08-13 11:42:45,884 dispatch pc=122, inst=LOAD_GLOBAL(arg=9, lineno=6)
2023-08-13 11:42:45,884 stack []
2023-08-13 11:42:45,884 dispatch pc=134, inst=LOAD_GLOBAL(arg=11, lineno=6)
2023-08-13 11:42:45,884 stack ['$null$122.22', '$122load_global.21']
2023-08-13 11:42:45,884 dispatch pc=146, inst=LOAD_CONST(arg=2, lineno=6)
2023-08-13 11:42:45,884 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23']
2023-08-13 11:42:45,884 dispatch pc=148, inst=LOAD_CONST(arg=4, lineno=6)
2023-08-13 11:42:45,884 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23', '$const146.25']
2023-08-13 11:42:45,884 dispatch pc=150, inst=PRECALL(arg=2, lineno=6)
2023-08-13 11:42:45,884 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23', '$const146.25', '$const148.26']
2023-08-13 11:42:45,884 dispatch pc=154, inst=CALL(arg=2, lineno=6)
2023-08-13 11:42:45,884 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23', '$const146.25', '$const148.26']
2023-08-13 11:42:45,884 dispatch pc=164, inst=UNARY_NEGATIVE(arg=None, lineno=6)
2023-08-13 11:42:45,884 stack ['$null$122.22', '$122load_global.21', '$154call.27']
2023-08-13 11:42:45,885 dispatch pc=166, inst=LOAD_FAST(arg=1, lineno=6)
2023-08-13 11:42:45,885 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28']
2023-08-13 11:42:45,885 dispatch pc=168, inst=LOAD_CONST(arg=2, lineno=6)
2023-08-13 11:42:45,885 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$full_shape0166.29']
2023-08-13 11:42:45,885 dispatch pc=170, inst=BINARY_SUBSCR(arg=None, lineno=6)
2023-08-13 11:42:45,885 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$full_shape0166.29', '$const168.30']
2023-08-13 11:42:45,885 dispatch pc=180, inst=LOAD_GLOBAL(arg=13, lineno=6)
2023-08-13 11:42:45,885 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31']
2023-08-13 11:42:45,885 dispatch pc=192, inst=LOAD_CONST(arg=2, lineno=6)
2023-08-13 11:42:45,885 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32']
2023-08-13 11:42:45,885 dispatch pc=194, inst=LOAD_CONST(arg=3, lineno=6)
2023-08-13 11:42:45,885 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32', '$const192.34']
2023-08-13 11:42:45,885 dispatch pc=196, inst=PRECALL(arg=2, lineno=6)
2023-08-13 11:42:45,885 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32', '$const192.34', '$const194.35']
2023-08-13 11:42:45,885 dispatch pc=200, inst=CALL(arg=2, lineno=6)
2023-08-13 11:42:45,885 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32', '$const192.34', '$const194.35']
2023-08-13 11:42:45,886 dispatch pc=210, inst=BINARY_OP(arg=10, lineno=6)
2023-08-13 11:42:45,886 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$200call.36']
2023-08-13 11:42:45,886 dispatch pc=214, inst=PRECALL(arg=2, lineno=6)
2023-08-13 11:42:45,886 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$binop_sub210.37']
2023-08-13 11:42:45,886 dispatch pc=218, inst=CALL(arg=2, lineno=6)
2023-08-13 11:42:45,886 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$binop_sub210.37']
2023-08-13 11:42:45,886 dispatch pc=228, inst=GET_ITER(arg=None, lineno=6)
2023-08-13 11:42:45,886 stack ['$218call.38']
2023-08-13 11:42:45,886 end state. edges=[Edge(pc=230, stack=('$228get_iter.39',), blockstack=(), npush=0)]
2023-08-13 11:42:45,886 pending: deque([State(pc_initial=230 nstack_initial=1)])
2023-08-13 11:42:45,886 stack: ['$phi230.0']
2023-08-13 11:42:45,886 state.pc_initial: State(pc_initial=230 nstack_initial=1)
2023-08-13 11:42:45,886 dispatch pc=230, inst=FOR_ITER(arg=4, lineno=6)
2023-08-13 11:42:45,886 stack ['$phi230.0']
2023-08-13 11:42:45,886 end state. edges=[Edge(pc=240, stack=(), blockstack=(), npush=0), Edge(pc=232, stack=('$phi230.0', '$230for_iter.2'), blockstack=(), npush=0)]
2023-08-13 11:42:45,887 pending: deque([State(pc_initial=240 nstack_initial=0), State(pc_initial=232 nstack_initial=2)])
2023-08-13 11:42:45,887 stack: []
2023-08-13 11:42:45,887 state.pc_initial: State(pc_initial=240 nstack_initial=0)
2023-08-13 11:42:45,887 dispatch pc=240, inst=LOAD_FAST(arg=2, lineno=8)
2023-08-13 11:42:45,887 stack []
2023-08-13 11:42:45,887 dispatch pc=242, inst=RETURN_VALUE(arg=None, lineno=8)
2023-08-13 11:42:45,887 stack ['$out0240.0']
2023-08-13 11:42:45,887 end state. edges=[]
2023-08-13 11:42:45,887 pending: deque([State(pc_initial=232 nstack_initial=2)])
2023-08-13 11:42:45,887 stack: ['$phi232.0', '$phi232.1']
2023-08-13 11:42:45,887 state.pc_initial: State(pc_initial=232 nstack_initial=2)
2023-08-13 11:42:45,887 dispatch pc=232, inst=STORE_FAST(arg=3, lineno=6)
2023-08-13 11:42:45,887 stack ['$phi232.0', '$phi232.1']
2023-08-13 11:42:45,887 dispatch pc=234, inst=LOAD_CONST(arg=2, lineno=7)
2023-08-13 11:42:45,888 stack ['$phi232.0']
2023-08-13 11:42:45,888 dispatch pc=236, inst=STORE_FAST(arg=4, lineno=7)
2023-08-13 11:42:45,888 stack ['$phi232.0', '$const234.2']
2023-08-13 11:42:45,888 dispatch pc=238, inst=JUMP_BACKWARD(arg=5, lineno=7)
2023-08-13 11:42:45,888 stack ['$phi232.0']
2023-08-13 11:42:45,888 end state. edges=[Edge(pc=230, stack=('$phi232.0',), blockstack=(), npush=0)]
2023-08-13 11:42:45,888 pending: deque([State(pc_initial=230 nstack_initial=1)])
2023-08-13 11:42:45,888 -------------------------Prune PHIs-------------------------
2023-08-13 11:42:45,888 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=230 nstack_initial=1): {'$phi230.0'},
             State(pc_initial=232 nstack_initial=2): {'$phi232.1'},
             State(pc_initial=240 nstack_initial=0): set()})
2023-08-13 11:42:45,888 defmap: {'$phi230.0': State(pc_initial=0 nstack_initial=0),
 '$phi232.1': State(pc_initial=230 nstack_initial=1)}
2023-08-13 11:42:45,888 phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi232.0',
                            State(pc_initial=232 nstack_initial=2))},
             '$phi232.0': {('$phi230.0',
                            State(pc_initial=230 nstack_initial=1))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:45,889 changing phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi230.0',
                            State(pc_initial=230 nstack_initial=1))},
             '$phi232.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:45,889 changing phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:45,889 changing phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:45,890 keep phismap: {'$phi230.0': {('$228get_iter.39', State(pc_initial=0 nstack_initial=0))},
 '$phi232.1': {('$230for_iter.2', State(pc_initial=230 nstack_initial=1))}}
2023-08-13 11:42:45,890 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi230.0': '$228get_iter.39'},
             State(pc_initial=230 nstack_initial=1): {'$phi232.1': '$230for_iter.2'}})
2023-08-13 11:42:45,890 ----------------------DONE Prune PHIs-----------------------
2023-08-13 11:42:45,890 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$x4.0'}), (6, {'item': '$x4.0', 'res': '$6load_attr.1'}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'value': '$6load_attr.1'}), (18, {'idx': 1, 'res': '$18load_global.2'}), (20, {}), (22, {}), (24, {}), (26, {}), (28, {}), (30, {'item': '$18load_global.2', 'res': '$30load_method.4'}), (32, {}), (34, {}), (36, {}), (38, {}), (40, {}), (42, {}), (44, {}), (46, {}), (48, {}), (50, {}), (52, {'res': '$full_shape052.5'}), (54, {'idx': 1, 'res': '$54load_global.6'}), (56, {}), (58, {}), (60, {}), (62, {}), (64, {}), (66, {'item': '$54load_global.6', 'res': '$66load_attr.7'}), (68, {}), (70, {}), (72, {}), (74, {}), (78, {}), (80, {}), (82, {'func': '$30load_method.4', 'args': ['$full_shape052.5', '$66load_attr.7'], 'kw_names': 1, 'res': '$82call.8'}), (84, {}), (86, {}), (88, {}), (90, {}), (92, {'value': '$82call.8'}), (94, {'res': '$const94.9'}), (96, {'res': '$out096.10'}), (98, {'res': '$const98.11'}), (100, {'res': '$const100.12'}), (102, {'start': '$const98.11', 'stop': '$const100.12', 'step': None, 'res': '$102build_slice.14', 'slicevar': '$102build_slice.13'}), (104, {'target': '$out096.10', 'index': '$102build_slice.14', 'value': '$const94.9'}), (106, {}), (108, {'res': '$const108.15'}), (110, {'res': '$out0110.16'}), (112, {'res': '$const112.17'}), (114, {'res': '$const114.18'}), (116, {'start': '$const112.17', 'stop': '$const114.18', 'step': None, 'res': '$116build_slice.20', 'slicevar': '$116build_slice.19'}), (118, {'target': '$out0110.16', 'index': '$116build_slice.20', 'value': '$const108.15'}), (120, {}), (122, {'idx': 4, 'res': '$122load_global.21'}), (124, {}), (126, {}), (128, {}), (130, {}), (132, {}), (134, {'idx': 5, 'res': '$134load_global.23'}), (136, {}), (138, {}), (140, {}), (142, {}), (144, {}), (146, {'res': '$const146.25'}), (148, {'res': '$const148.26'}), (150, {}), (152, {}), (154, {'func': '$134load_global.23', 'args': ['$const146.25', '$const148.26'], 'kw_names': None, 'res': '$154call.27'}), (156, {}), (158, {}), (160, {}), (162, {}), (164, {'value': '$154call.27', 'res': '$164unary_negative.28'}), (166, {'res': '$full_shape0166.29'}), (168, {'res': '$const168.30'}), (170, {'index': '$const168.30', 'target': '$full_shape0166.29', 'res': '$170binary_subscr.31'}), (172, {}), (174, {}), (176, {}), (178, {}), (180, {'idx': 6, 'res': '$180load_global.32'}), (182, {}), (184, {}), (186, {}), (188, {}), (190, {}), (192, {'res': '$const192.34'}), (194, {'res': '$const194.35'}), (196, {}), (198, {}), (200, {'func': '$180load_global.32', 'args': ['$const192.34', '$const194.35'], 'kw_names': None, 'res': '$200call.36'}), (202, {}), (204, {}), (206, {}), (208, {}), (210, {'op': '-', 'lhs': '$170binary_subscr.31', 'rhs': '$200call.36', 'res': '$binop_sub210.37'}), (212, {}), (214, {}), (216, {}), (218, {'func': '$122load_global.21', 'args': ['$164unary_negative.28', '$binop_sub210.37'], 'kw_names': None, 'res': '$218call.38'}), (220, {}), (222, {}), (224, {}), (226, {}), (228, {'value': '$218call.38', 'res': '$228get_iter.39'})), outgoing_phis={'$phi230.0': '$228get_iter.39'}, blockstack=(), active_try_block=None, outgoing_edgepushed={230: ('$228get_iter.39',)})
2023-08-13 11:42:45,890 block_infos State(pc_initial=230 nstack_initial=1):
AdaptBlockInfo(insts=((230, {'iterator': '$phi230.0', 'pair': '$230for_iter.1', 'indval': '$230for_iter.2', 'pred': '$230for_iter.3'}),), outgoing_phis={'$phi232.1': '$230for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={240: (), 232: ('$phi230.0', '$230for_iter.2')})
2023-08-13 11:42:45,890 block_infos State(pc_initial=232 nstack_initial=2):
AdaptBlockInfo(insts=((232, {'value': '$phi232.1'}), (234, {'res': '$const234.2'}), (236, {'value': '$const234.2'}), (238, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={230: ('$phi232.0',)})
2023-08-13 11:42:45,890 block_infos State(pc_initial=240 nstack_initial=0):
AdaptBlockInfo(insts=((240, {'res': '$out0240.0'}), (242, {'retval': '$out0240.0', 'castval': '$242return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:45,892 label 0:
    x = arg(0, name=x)                       ['x']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $18load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>) ['$18load_global.2']
    $30load_method.4 = getattr(value=$18load_global.2, attr=empty) ['$18load_global.2', '$30load_method.4']
    $54load_global.6 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>) ['$54load_global.6']
    $66load_attr.7 = getattr(value=$54load_global.6, attr=bool_) ['$54load_global.6', '$66load_attr.7']
    out0 = call $30load_method.4(full_shape0, func=$30load_method.4, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($66load_attr.7, <string>:3))], vararg=None, varkwarg=None, target=None) ['$30load_method.4', '$66load_attr.7', 'full_shape0', 'out0']
    $const94.9 = const(int, 0)               ['$const94.9']
    $const98.11 = const(NoneType, None)      ['$const98.11']
    $const100.12 = const(int, 1)             ['$const100.12']
    $102build_slice.13 = global(slice: <class 'slice'>) ['$102build_slice.13']
    $102build_slice.14 = call $102build_slice.13($const98.11, $const100.12, func=$102build_slice.13, args=(Var($const98.11, <string>:4), Var($const100.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$102build_slice.13', '$102build_slice.14', '$const100.12', '$const98.11']
    out0[$102build_slice.14] = $const94.9    ['$102build_slice.14', '$const94.9', 'out0']
    $const108.15 = const(int, 0)             ['$const108.15']
    $const112.17 = const(int, -1)            ['$const112.17']
    $const114.18 = const(NoneType, None)     ['$const114.18']
    $116build_slice.19 = global(slice: <class 'slice'>) ['$116build_slice.19']
    $116build_slice.20 = call $116build_slice.19($const112.17, $const114.18, func=$116build_slice.19, args=(Var($const112.17, <string>:5), Var($const114.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$116build_slice.19', '$116build_slice.20', '$const112.17', '$const114.18']
    out0[$116build_slice.20] = $const108.15  ['$116build_slice.20', '$const108.15', 'out0']
    $122load_global.21 = global(range: <class 'range'>) ['$122load_global.21']
    $134load_global.23 = global(min: <built-in function min>) ['$134load_global.23']
    $const146.25 = const(int, 0)             ['$const146.25']
    $const148.26 = const(int, -1)            ['$const148.26']
    $154call.27 = call $134load_global.23($const146.25, $const148.26, func=$134load_global.23, args=[Var($const146.25, <string>:6), Var($const148.26, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$134load_global.23', '$154call.27', '$const146.25', '$const148.26']
    $164unary_negative.28 = unary(fn=<built-in function neg>, value=$154call.27) ['$154call.27', '$164unary_negative.28']
    $const168.30 = const(int, 0)             ['$const168.30']
    $170binary_subscr.31 = getitem(value=full_shape0, index=$const168.30, fn=<built-in function getitem>) ['$170binary_subscr.31', '$const168.30', 'full_shape0']
    $180load_global.32 = global(max: <built-in function max>) ['$180load_global.32']
    $const192.34 = const(int, 0)             ['$const192.34']
    $const194.35 = const(int, 1)             ['$const194.35']
    $200call.36 = call $180load_global.32($const192.34, $const194.35, func=$180load_global.32, args=[Var($const192.34, <string>:6), Var($const194.35, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$180load_global.32', '$200call.36', '$const192.34', '$const194.35']
    $binop_sub210.37 = $170binary_subscr.31 - $200call.36 ['$170binary_subscr.31', '$200call.36', '$binop_sub210.37']
    $218call.38 = call $122load_global.21($164unary_negative.28, $binop_sub210.37, func=$122load_global.21, args=[Var($164unary_negative.28, <string>:6), Var($binop_sub210.37, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$122load_global.21', '$164unary_negative.28', '$218call.38', '$binop_sub210.37']
    $228get_iter.39 = getiter(value=$218call.38) ['$218call.38', '$228get_iter.39']
    $phi230.0 = $228get_iter.39              ['$228get_iter.39', '$phi230.0']
    jump 230                                 []
label 230:
    $230for_iter.1 = iternext(value=$phi230.0) ['$230for_iter.1', '$phi230.0']
    $230for_iter.2 = pair_first(value=$230for_iter.1) ['$230for_iter.1', '$230for_iter.2']
    $230for_iter.3 = pair_second(value=$230for_iter.1) ['$230for_iter.1', '$230for_iter.3']
    $phi232.1 = $230for_iter.2               ['$230for_iter.2', '$phi232.1']
    branch $230for_iter.3, 232, 240          ['$230for_iter.3']
label 232:
    index00 = $phi232.1                      ['$phi232.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 230                                 []
label 240:
    $242return_value.1 = cast(value=out0)    ['$242return_value.1', 'out0']
    return $242return_value.1                ['$242return_value.1']

2023-08-13 11:42:45,911 ==== SSA block analysis pass on 0
2023-08-13 11:42:45,911 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696B3E1D0>
2023-08-13 11:42:45,911 on stmt: x = arg(0, name=x)
2023-08-13 11:42:45,911 on stmt: full_shape0 = getattr(value=x, attr=shape)
2023-08-13 11:42:45,911 on stmt: $18load_global.2.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:45,911 on stmt: $30load_method.4.1 = getattr(value=$18load_global.2.1, attr=empty)
2023-08-13 11:42:45,911 on stmt: $54load_global.6.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:45,911 on stmt: $66load_attr.7.1 = getattr(value=$54load_global.6.1, attr=bool_)
2023-08-13 11:42:45,911 on stmt: out0 = call $30load_method.4.1(full_shape0, func=$30load_method.4.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($66load_attr.7.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:45,911 on stmt: $const94.9.1 = const(int, 0)
2023-08-13 11:42:45,911 on stmt: $const98.11.1 = const(NoneType, None)
2023-08-13 11:42:45,912 on stmt: $const100.12.1 = const(int, 1)
2023-08-13 11:42:45,912 on stmt: $102build_slice.13.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:45,912 on stmt: $102build_slice.14.1 = call $102build_slice.13.1($const98.11.1, $const100.12.1, func=$102build_slice.13.1, args=(Var($const98.11.1, <string>:4), Var($const100.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:45,912 on stmt: out0[$102build_slice.14.1] = $const94.9.1
2023-08-13 11:42:45,912 on stmt: $const108.15.1 = const(int, 0)
2023-08-13 11:42:45,912 on stmt: $const112.17.1 = const(int, -1)
2023-08-13 11:42:45,912 on stmt: $const114.18.1 = const(NoneType, None)
2023-08-13 11:42:45,912 on stmt: $116build_slice.19.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:45,912 on stmt: $116build_slice.20.1 = call $116build_slice.19.1($const112.17.1, $const114.18.1, func=$116build_slice.19.1, args=(Var($const112.17.1, <string>:5), Var($const114.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:45,912 on stmt: out0[$116build_slice.20.1] = $const108.15.1
2023-08-13 11:42:45,912 on stmt: $122load_global.21.1 = global(range: <class 'range'>)
2023-08-13 11:42:45,912 on stmt: $134load_global.23.1 = global(min: <built-in function min>)
2023-08-13 11:42:45,912 on stmt: $const146.25.1 = const(int, 0)
2023-08-13 11:42:45,912 on stmt: $const148.26.1 = const(int, -1)
2023-08-13 11:42:45,912 on stmt: $154call.27.1 = call $134load_global.23.1($const146.25.1, $const148.26.1, func=$134load_global.23.1, args=[Var($const146.25.1, <string>:6), Var($const148.26.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:45,912 on stmt: $164unary_negative.28.1 = unary(fn=<built-in function neg>, value=$154call.27.1)
2023-08-13 11:42:45,913 on stmt: $const168.30.1 = const(int, 0)
2023-08-13 11:42:45,913 on stmt: $170binary_subscr.31.1 = getitem(value=full_shape0, index=$const168.30.1, fn=<built-in function getitem>)
2023-08-13 11:42:45,913 on stmt: $180load_global.32.1 = global(max: <built-in function max>)
2023-08-13 11:42:45,913 on stmt: $const192.34.1 = const(int, 0)
2023-08-13 11:42:45,913 on stmt: $const194.35.1 = const(int, 1)
2023-08-13 11:42:45,913 on stmt: $200call.36.1 = call $180load_global.32.1($const192.34.1, $const194.35.1, func=$180load_global.32.1, args=[Var($const192.34.1, <string>:6), Var($const194.35.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:45,913 on stmt: $binop_sub210.37.1 = $170binary_subscr.31.1 - $200call.36.1
2023-08-13 11:42:45,913 on stmt: $218call.38.1 = call $122load_global.21.1($164unary_negative.28.1, $binop_sub210.37.1, func=$122load_global.21.1, args=[Var($164unary_negative.28.1, <string>:6), Var($binop_sub210.37.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:45,913 on stmt: $228get_iter.39.1 = getiter(value=$218call.38.1)
2023-08-13 11:42:45,913 on stmt: $phi230.0.1 = $228get_iter.39.1
2023-08-13 11:42:45,913 on stmt: jump 230
2023-08-13 11:42:45,913 ==== SSA block analysis pass on 230
2023-08-13 11:42:45,914 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696B3E1D0>
2023-08-13 11:42:45,914 on stmt: $230for_iter.1.1 = iternext(value=$phi230.0.1)
2023-08-13 11:42:45,914 on stmt: $230for_iter.2.1 = pair_first(value=$230for_iter.1.1)
2023-08-13 11:42:45,914 on stmt: $230for_iter.3.1 = pair_second(value=$230for_iter.1.1)
2023-08-13 11:42:45,914 on stmt: $phi232.1.1 = $230for_iter.2.1
2023-08-13 11:42:45,914 on stmt: branch $230for_iter.3.1, 232, 242
2023-08-13 11:42:45,914 ==== SSA block analysis pass on 232
2023-08-13 11:42:45,914 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696B3E1D0>
2023-08-13 11:42:45,914 on stmt: index00 = $phi232.1.1
2023-08-13 11:42:45,914 on stmt: jump 240
2023-08-13 11:42:45,914 ==== SSA block analysis pass on 242
2023-08-13 11:42:45,914 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696B3E1D0>
2023-08-13 11:42:45,914 on stmt: $242return_value.1.1 = cast(value=out0)
2023-08-13 11:42:45,914 on stmt: return $242return_value.1.1
2023-08-13 11:42:45,914 ==== SSA block analysis pass on 240
2023-08-13 11:42:45,914 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696B3E1D0>
2023-08-13 11:42:45,915 on stmt: $const6.1 = const(int, 0)
2023-08-13 11:42:45,915 on stmt: stencil_index = $const6.1 + index00
2023-08-13 11:42:45,915 on stmt: $8binary_subscr.2 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:45,915 on stmt: $const20.4 = const(int, -1)
2023-08-13 11:42:45,915 on stmt: stencil_index.1 = $const20.4 + index00
2023-08-13 11:42:45,915 on stmt: $22binary_subscr.5 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2023-08-13 11:42:45,915 on stmt: $32compare_op.6 = $8binary_subscr.2 < $22binary_subscr.5
2023-08-13 11:42:45,916 on stmt: $const40.8 = const(int, 0)
2023-08-13 11:42:45,916 on stmt: stencil_index.2 = $const40.8 + index00
2023-08-13 11:42:45,916 on stmt: $42binary_subscr.9 = getitem(value=x, index=stencil_index.2, fn=<built-in function getitem>)
2023-08-13 11:42:45,916 on stmt: $const54.11 = const(int, 1)
2023-08-13 11:42:45,916 on stmt: stencil_index.3 = $const54.11 + index00
2023-08-13 11:42:45,916 on stmt: $56binary_subscr.12 = getitem(value=x, index=stencil_index.3, fn=<built-in function getitem>)
2023-08-13 11:42:45,916 on stmt: $66compare_op.13 = $42binary_subscr.9 <= $56binary_subscr.12
2023-08-13 11:42:45,916 on stmt: $binop_and_72.14 = $32compare_op.6 & $66compare_op.13
2023-08-13 11:42:45,916 on stmt: $76return_value.15 = cast(value=$binop_and_72.14)
2023-08-13 11:42:45,916 on stmt: out0[index00] = $76return_value.15
2023-08-13 11:42:45,916 on stmt: jump 241
2023-08-13 11:42:45,916 ==== SSA block analysis pass on 241
2023-08-13 11:42:45,916 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F696B3E1D0>
2023-08-13 11:42:45,916 on stmt: jump 230
2023-08-13 11:42:45,917 defs defaultdict(<class 'list'>,
            {'$102build_slice.13.1': [<numba.core.ir.Assign object at 0x000001F696BC41D0>],
             '$102build_slice.14.1': [<numba.core.ir.Assign object at 0x000001F696BC7110>],
             '$116build_slice.19.1': [<numba.core.ir.Assign object at 0x000001F696BC7190>],
             '$116build_slice.20.1': [<numba.core.ir.Assign object at 0x000001F696BC72D0>],
             '$122load_global.21.1': [<numba.core.ir.Assign object at 0x000001F696BC5110>],
             '$134load_global.23.1': [<numba.core.ir.Assign object at 0x000001F696BC67D0>],
             '$154call.27.1': [<numba.core.ir.Assign object at 0x000001F696B3C3D0>],
             '$164unary_negative.28.1': [<numba.core.ir.Assign object at 0x000001F696B3C610>],
             '$170binary_subscr.31.1': [<numba.core.ir.Assign object at 0x000001F696B3CB10>],
             '$180load_global.32.1': [<numba.core.ir.Assign object at 0x000001F696B3CC90>],
             '$18load_global.2.1': [<numba.core.ir.Assign object at 0x000001F696BC4950>],
             '$200call.36.1': [<numba.core.ir.Assign object at 0x000001F696B3D350>],
             '$218call.38.1': [<numba.core.ir.Assign object at 0x000001F696B3D7D0>],
             '$228get_iter.39.1': [<numba.core.ir.Assign object at 0x000001F696B3DA10>],
             '$22binary_subscr.5': [<numba.core.ir.Assign object at 0x000001F696B559D0>],
             '$230for_iter.1.1': [<numba.core.ir.Assign object at 0x000001F696B3DC10>],
             '$230for_iter.2.1': [<numba.core.ir.Assign object at 0x000001F696B3DD90>],
             '$230for_iter.3.1': [<numba.core.ir.Assign object at 0x000001F696B3DF10>],
             '$242return_value.1.1': [<numba.core.ir.Assign object at 0x000001F696B3EA10>],
             '$30load_method.4.1': [<numba.core.ir.Assign object at 0x000001F696BC4C50>],
             '$32compare_op.6': [<numba.core.ir.Assign object at 0x000001F696BB3910>],
             '$42binary_subscr.9': [<numba.core.ir.Assign object at 0x000001F696BC8110>],
             '$54load_global.6.1': [<numba.core.ir.Assign object at 0x000001F696BC51D0>],
             '$56binary_subscr.12': [<numba.core.ir.Assign object at 0x000001F696BC82D0>],
             '$66compare_op.13': [<numba.core.ir.Assign object at 0x000001F696B7E690>],
             '$66load_attr.7.1': [<numba.core.ir.Assign object at 0x000001F696BC5290>],
             '$76return_value.15': [<numba.core.ir.Assign object at 0x000001F696B57150>],
             '$8binary_subscr.2': [<numba.core.ir.Assign object at 0x000001F696B55250>],
             '$binop_and_72.14': [<numba.core.ir.Assign object at 0x000001F696B7CDD0>],
             '$binop_sub210.37.1': [<numba.core.ir.Assign object at 0x000001F696B3D5D0>],
             '$const100.12.1': [<numba.core.ir.Assign object at 0x000001F696BC43D0>],
             '$const108.15.1': [<numba.core.ir.Assign object at 0x000001F696BC78D0>],
             '$const112.17.1': [<numba.core.ir.Assign object at 0x000001F696BC64D0>],
             '$const114.18.1': [<numba.core.ir.Assign object at 0x000001F696BC6510>],
             '$const146.25.1': [<numba.core.ir.Assign object at 0x000001F696BC5DD0>],
             '$const148.26.1': [<numba.core.ir.Assign object at 0x000001F696B3C150>],
             '$const168.30.1': [<numba.core.ir.Assign object at 0x000001F696B3C910>],
             '$const192.34.1': [<numba.core.ir.Assign object at 0x000001F696B3CED0>],
             '$const194.35.1': [<numba.core.ir.Assign object at 0x000001F696B3D090>],
             '$const20.4': [<numba.core.ir.Assign object at 0x000001F696BB0510>],
             '$const40.8': [<numba.core.ir.Assign object at 0x000001F696B73810>],
             '$const54.11': [<numba.core.ir.Assign object at 0x000001F696B70AD0>],
             '$const6.1': [<numba.core.ir.Assign object at 0x000001F696B8C110>],
             '$const94.9.1': [<numba.core.ir.Assign object at 0x000001F696BC5690>],
             '$const98.11.1': [<numba.core.ir.Assign object at 0x000001F696BC5D10>],
             '$phi230.0.1': [<numba.core.ir.Assign object at 0x000001F696BC4810>],
             '$phi232.1.1': [<numba.core.ir.Assign object at 0x000001F696B3DFD0>],
             'full_shape0': [<numba.core.ir.Assign object at 0x000001F696BC45D0>],
             'index00': [<numba.core.ir.Assign object at 0x000001F696B3E290>],
             'out0': [<numba.core.ir.Assign object at 0x000001F696BC5450>],
             'stencil_index': [<numba.core.ir.Assign object at 0x000001F696B552D0>],
             'stencil_index.1': [<numba.core.ir.Assign object at 0x000001F696B54150>],
             'stencil_index.2': [<numba.core.ir.Assign object at 0x000001F696BC80D0>],
             'stencil_index.3': [<numba.core.ir.Assign object at 0x000001F696BC8250>],
             'x': [<numba.core.ir.Assign object at 0x000001F696BC6DD0>]})
2023-08-13 11:42:45,918 SSA violators set()
2023-08-13 11:42:47,057 bytecode dump:
>          0	NOP(arg=None, lineno=2472)
           2	RESUME(arg=0, lineno=2472)
           4	LOAD_FAST(arg=0, lineno=2477)
           6	LOAD_ATTR(arg=0, lineno=2477)
          16	LOAD_CONST(arg=1, lineno=2477)
          18	BINARY_OP(arg=8, lineno=2477)
          22	LOAD_FAST(arg=0, lineno=2477)
          24	LOAD_ATTR(arg=1, lineno=2477)
          34	LOAD_CONST(arg=1, lineno=2477)
          36	BINARY_OP(arg=8, lineno=2477)
          40	BINARY_OP(arg=0, lineno=2477)
          44	RETURN_VALUE(arg=None, lineno=2477)
2023-08-13 11:42:47,057 pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-13 11:42:47,057 stack: []
2023-08-13 11:42:47,057 state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-13 11:42:47,057 dispatch pc=0, inst=NOP(arg=None, lineno=2472)
2023-08-13 11:42:47,057 stack []
2023-08-13 11:42:47,058 dispatch pc=2, inst=RESUME(arg=0, lineno=2472)
2023-08-13 11:42:47,058 stack []
2023-08-13 11:42:47,058 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2477)
2023-08-13 11:42:47,058 stack []
2023-08-13 11:42:47,058 dispatch pc=6, inst=LOAD_ATTR(arg=0, lineno=2477)
2023-08-13 11:42:47,058 stack ['$x4.0']
2023-08-13 11:42:47,058 dispatch pc=16, inst=LOAD_CONST(arg=1, lineno=2477)
2023-08-13 11:42:47,058 stack ['$6load_attr.1']
2023-08-13 11:42:47,058 dispatch pc=18, inst=BINARY_OP(arg=8, lineno=2477)
2023-08-13 11:42:47,058 stack ['$6load_attr.1', '$const16.2']
2023-08-13 11:42:47,058 dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=2477)
2023-08-13 11:42:47,058 stack ['$binop_pow18.3']
2023-08-13 11:42:47,058 dispatch pc=24, inst=LOAD_ATTR(arg=1, lineno=2477)
2023-08-13 11:42:47,058 stack ['$binop_pow18.3', '$x22.4']
2023-08-13 11:42:47,058 dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=2477)
2023-08-13 11:42:47,058 stack ['$binop_pow18.3', '$24load_attr.5']
2023-08-13 11:42:47,058 dispatch pc=36, inst=BINARY_OP(arg=8, lineno=2477)
2023-08-13 11:42:47,058 stack ['$binop_pow18.3', '$24load_attr.5', '$const34.6']
2023-08-13 11:42:47,058 dispatch pc=40, inst=BINARY_OP(arg=0, lineno=2477)
2023-08-13 11:42:47,059 stack ['$binop_pow18.3', '$binop_pow36.7']
2023-08-13 11:42:47,059 dispatch pc=44, inst=RETURN_VALUE(arg=None, lineno=2477)
2023-08-13 11:42:47,059 stack ['$binop_add40.8']
2023-08-13 11:42:47,059 end state. edges=[]
2023-08-13 11:42:47,059 -------------------------Prune PHIs-------------------------
2023-08-13 11:42:47,059 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-08-13 11:42:47,059 defmap: {}
2023-08-13 11:42:47,059 phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:47,059 changing phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:47,059 keep phismap: {}
2023-08-13 11:42:47,059 new_out: defaultdict(<class 'dict'>, {})
2023-08-13 11:42:47,059 ----------------------DONE Prune PHIs-----------------------
2023-08-13 11:42:47,059 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$x4.0'}), (6, {'item': '$x4.0', 'res': '$6load_attr.1'}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'res': '$const16.2'}), (18, {'op': '**', 'lhs': '$6load_attr.1', 'rhs': '$const16.2', 'res': '$binop_pow18.3'}), (20, {}), (22, {'res': '$x22.4'}), (24, {'item': '$x22.4', 'res': '$24load_attr.5'}), (26, {}), (28, {}), (30, {}), (32, {}), (34, {'res': '$const34.6'}), (36, {'op': '**', 'lhs': '$24load_attr.5', 'rhs': '$const34.6', 'res': '$binop_pow36.7'}), (38, {}), (40, {'op': '+', 'lhs': '$binop_pow18.3', 'rhs': '$binop_pow36.7', 'res': '$binop_add40.8'}), (42, {}), (44, {'retval': '$binop_add40.8', 'castval': '$44return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:47,060 label 0:
    x = arg(0, name=x)                       ['x']
    $6load_attr.1 = getattr(value=x, attr=real) ['$6load_attr.1', 'x']
    $const16.2 = const(int, 2)               ['$const16.2']
    $binop_pow18.3 = $6load_attr.1 ** $const16.2 ['$6load_attr.1', '$binop_pow18.3', '$const16.2']
    $24load_attr.5 = getattr(value=x, attr=imag) ['$24load_attr.5', 'x']
    $const34.6 = const(int, 2)               ['$const34.6']
    $binop_pow36.7 = $24load_attr.5 ** $const34.6 ['$24load_attr.5', '$binop_pow36.7', '$const34.6']
    $binop_add40.8 = $binop_pow18.3 + $binop_pow36.7 ['$binop_add40.8', '$binop_pow18.3', '$binop_pow36.7']
    $44return_value.9 = cast(value=$binop_add40.8) ['$44return_value.9', '$binop_add40.8']
    return $44return_value.9                 ['$44return_value.9']

2023-08-13 11:42:47,068 ==== SSA block analysis pass on 0
2023-08-13 11:42:47,068 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6977854D0>
2023-08-13 11:42:47,068 on stmt: x = arg(0, name=x)
2023-08-13 11:42:47,068 on stmt: $6load_attr.1 = getattr(value=x, attr=real)
2023-08-13 11:42:47,068 on stmt: $const16.2 = const(int, 2)
2023-08-13 11:42:47,068 on stmt: $binop_pow18.3 = $6load_attr.1 ** $const16.2
2023-08-13 11:42:47,068 on stmt: $24load_attr.5 = getattr(value=x, attr=imag)
2023-08-13 11:42:47,068 on stmt: $const34.6 = const(int, 2)
2023-08-13 11:42:47,068 on stmt: $binop_pow36.7 = $24load_attr.5 ** $const34.6
2023-08-13 11:42:47,068 on stmt: $binop_add40.8 = $binop_pow18.3 + $binop_pow36.7
2023-08-13 11:42:47,069 on stmt: $44return_value.9 = cast(value=$binop_add40.8)
2023-08-13 11:42:47,069 on stmt: return $44return_value.9
2023-08-13 11:42:47,069 defs defaultdict(<class 'list'>,
            {'$24load_attr.5': [<numba.core.ir.Assign object at 0x000001F697786390>],
             '$44return_value.9': [<numba.core.ir.Assign object at 0x000001F697785F10>],
             '$6load_attr.1': [<numba.core.ir.Assign object at 0x000001F697784750>],
             '$binop_add40.8': [<numba.core.ir.Assign object at 0x000001F6977860D0>],
             '$binop_pow18.3': [<numba.core.ir.Assign object at 0x000001F697784410>],
             '$binop_pow36.7': [<numba.core.ir.Assign object at 0x000001F6977865D0>],
             '$const16.2': [<numba.core.ir.Assign object at 0x000001F697784290>],
             '$const34.6': [<numba.core.ir.Assign object at 0x000001F697786A10>],
             'x': [<numba.core.ir.Assign object at 0x000001F697787F10>]})
2023-08-13 11:42:47,069 SSA violators set()
2023-08-13 11:42:47,089 bytecode dump:
>          0	NOP(arg=None, lineno=214)
           2	COPY_FREE_VARS(arg=3, lineno=214)
           4	RESUME(arg=0, lineno=214)
           6	PUSH_NULL(arg=None, lineno=216)
           8	LOAD_DEREF(arg=6, lineno=216)
          10	LOAD_CONST(arg=1, lineno=216)
          12	PRECALL(arg=1, lineno=216)
          16	CALL(arg=1, lineno=216)
          26	STORE_FAST(arg=2, lineno=216)
          28	PUSH_NULL(arg=None, lineno=217)
          30	LOAD_DEREF(arg=6, lineno=217)
          32	LOAD_FAST(arg=0, lineno=217)
          34	PRECALL(arg=1, lineno=217)
          38	CALL(arg=1, lineno=217)
          48	STORE_FAST(arg=0, lineno=217)
          50	LOAD_FAST(arg=1, lineno=218)
          52	LOAD_CONST(arg=2, lineno=218)
          54	COMPARE_OP(arg=0, lineno=218)
          60	POP_JUMP_FORWARD_IF_FALSE(arg=60, lineno=218)
          62	LOAD_CONST(arg=3, lineno=219)
          64	STORE_FAST(arg=3, lineno=219)
          66	LOAD_FAST(arg=1, lineno=220)
          68	UNARY_NEGATIVE(arg=None, lineno=220)
          70	STORE_FAST(arg=4, lineno=220)
          72	LOAD_FAST(arg=4, lineno=221)
          74	LOAD_CONST(arg=2, lineno=221)
          76	COMPARE_OP(arg=0, lineno=221)
          82	POP_JUMP_FORWARD_IF_FALSE(arg=7, lineno=221)
          84	LOAD_GLOBAL(arg=0, lineno=222)
          96	RAISE_VARARGS(arg=1, lineno=222)
>         98	LOAD_DEREF(arg=5, lineno=223)
         100	POP_JUMP_FORWARD_IF_FALSE(arg=39, lineno=223)
         102	LOAD_FAST(arg=0, lineno=224)
         104	LOAD_CONST(arg=2, lineno=224)
         106	COMPARE_OP(arg=2, lineno=224)
         112	POP_JUMP_FORWARD_IF_FALSE(arg=19, lineno=224)
         114	LOAD_DEREF(arg=7, lineno=225)
         116	POP_JUMP_FORWARD_IF_FALSE(arg=2, lineno=225)
         118	LOAD_DEREF(arg=7, lineno=226)
         120	RETURN_VALUE(arg=None, lineno=226)
>        122	LOAD_GLOBAL(arg=3, lineno=228)
         134	LOAD_CONST(arg=4, lineno=228)
         136	PRECALL(arg=1, lineno=228)
         140	CALL(arg=1, lineno=228)
         150	RAISE_VARARGS(arg=1, lineno=228)
>        152	LOAD_FAST(arg=0, lineno=229)
         154	LOAD_CONST(arg=1, lineno=229)
         156	COMPARE_OP(arg=3, lineno=229)
         162	POP_JUMP_FORWARD_IF_FALSE(arg=8, lineno=229)
         164	LOAD_FAST(arg=0, lineno=229)
         166	LOAD_CONST(arg=5, lineno=229)
         168	COMPARE_OP(arg=3, lineno=229)
         174	POP_JUMP_FORWARD_IF_FALSE(arg=2, lineno=229)
         176	LOAD_CONST(arg=2, lineno=230)
         178	RETURN_VALUE(arg=None, lineno=230)
>        180	JUMP_FORWARD(arg=4, lineno=230)
>        182	LOAD_CONST(arg=6, lineno=232)
         184	STORE_FAST(arg=3, lineno=232)
         186	LOAD_FAST(arg=1, lineno=233)
         188	STORE_FAST(arg=4, lineno=233)
>        190	LOAD_FAST(arg=4, lineno=234)
         192	LOAD_CONST(arg=7, lineno=234)
         194	COMPARE_OP(arg=4, lineno=234)
         200	POP_JUMP_FORWARD_IF_FALSE(arg=34, lineno=234)
         202	LOAD_GLOBAL(arg=5, lineno=236)
         214	LOAD_ATTR(arg=3, lineno=236)
         224	LOAD_FAST(arg=0, lineno=236)
         226	LOAD_GLOBAL(arg=9, lineno=236)
         238	LOAD_FAST(arg=1, lineno=236)
         240	PRECALL(arg=1, lineno=236)
         244	CALL(arg=1, lineno=236)
         254	PRECALL(arg=2, lineno=236)
         258	CALL(arg=2, lineno=236)
         268	RETURN_VALUE(arg=None, lineno=236)
>        270	LOAD_FAST(arg=4, lineno=237)
         272	LOAD_CONST(arg=2, lineno=237)
         274	COMPARE_OP(arg=3, lineno=237)
         280	POP_JUMP_FORWARD_IF_FALSE(arg=26, lineno=237)
>        282	LOAD_FAST(arg=4, lineno=238)
         284	LOAD_CONST(arg=1, lineno=238)
         286	BINARY_OP(arg=1, lineno=238)
         290	POP_JUMP_FORWARD_IF_FALSE(arg=5, lineno=238)
         292	LOAD_FAST(arg=2, lineno=239)
         294	LOAD_FAST(arg=0, lineno=239)
         296	BINARY_OP(arg=18, lineno=239)
         300	STORE_FAST(arg=2, lineno=239)
>        302	LOAD_FAST(arg=4, lineno=240)
         304	LOAD_CONST(arg=1, lineno=240)
         306	BINARY_OP(arg=22, lineno=240)
         310	STORE_FAST(arg=4, lineno=240)
         312	LOAD_FAST(arg=0, lineno=241)
         314	LOAD_FAST(arg=0, lineno=241)
         316	BINARY_OP(arg=18, lineno=241)
         320	STORE_FAST(arg=0, lineno=241)
         322	LOAD_FAST(arg=4, lineno=237)
         324	LOAD_CONST(arg=2, lineno=237)
         326	COMPARE_OP(arg=3, lineno=237)
         332	POP_JUMP_BACKWARD_IF_TRUE(arg=26, lineno=237)
>        334	LOAD_FAST(arg=3, lineno=243)
         336	POP_JUMP_FORWARD_IF_FALSE(arg=5, lineno=243)
         338	LOAD_CONST(arg=8, lineno=243)
         340	LOAD_FAST(arg=2, lineno=243)
         342	BINARY_OP(arg=11, lineno=243)
         346	JUMP_FORWARD(arg=1, lineno=243)
>        348	LOAD_FAST(arg=2, lineno=243)
>        350	RETURN_VALUE(arg=None, lineno=243)
2023-08-13 11:42:47,089 pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-13 11:42:47,089 stack: []
2023-08-13 11:42:47,089 state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-13 11:42:47,090 dispatch pc=0, inst=NOP(arg=None, lineno=214)
2023-08-13 11:42:47,090 stack []
2023-08-13 11:42:47,090 dispatch pc=2, inst=COPY_FREE_VARS(arg=3, lineno=214)
2023-08-13 11:42:47,090 stack []
2023-08-13 11:42:47,090 dispatch pc=4, inst=RESUME(arg=0, lineno=214)
2023-08-13 11:42:47,090 stack []
2023-08-13 11:42:47,090 dispatch pc=6, inst=PUSH_NULL(arg=None, lineno=216)
2023-08-13 11:42:47,090 stack []
2023-08-13 11:42:47,090 dispatch pc=8, inst=LOAD_DEREF(arg=6, lineno=216)
2023-08-13 11:42:47,090 stack ['$null$6.0']
2023-08-13 11:42:47,090 dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=216)
2023-08-13 11:42:47,090 stack ['$null$6.0', '$8load_deref.1']
2023-08-13 11:42:47,090 dispatch pc=12, inst=PRECALL(arg=1, lineno=216)
2023-08-13 11:42:47,090 stack ['$null$6.0', '$8load_deref.1', '$const10.2']
2023-08-13 11:42:47,090 dispatch pc=16, inst=CALL(arg=1, lineno=216)
2023-08-13 11:42:47,090 stack ['$null$6.0', '$8load_deref.1', '$const10.2']
2023-08-13 11:42:47,090 dispatch pc=26, inst=STORE_FAST(arg=2, lineno=216)
2023-08-13 11:42:47,090 stack ['$16call.3']
2023-08-13 11:42:47,090 dispatch pc=28, inst=PUSH_NULL(arg=None, lineno=217)
2023-08-13 11:42:47,090 stack []
2023-08-13 11:42:47,091 dispatch pc=30, inst=LOAD_DEREF(arg=6, lineno=217)
2023-08-13 11:42:47,091 stack ['$null$28.4']
2023-08-13 11:42:47,091 dispatch pc=32, inst=LOAD_FAST(arg=0, lineno=217)
2023-08-13 11:42:47,091 stack ['$null$28.4', '$30load_deref.5']
2023-08-13 11:42:47,091 dispatch pc=34, inst=PRECALL(arg=1, lineno=217)
2023-08-13 11:42:47,091 stack ['$null$28.4', '$30load_deref.5', '$a32.6']
2023-08-13 11:42:47,091 dispatch pc=38, inst=CALL(arg=1, lineno=217)
2023-08-13 11:42:47,091 stack ['$null$28.4', '$30load_deref.5', '$a32.6']
2023-08-13 11:42:47,091 dispatch pc=48, inst=STORE_FAST(arg=0, lineno=217)
2023-08-13 11:42:47,091 stack ['$38call.7']
2023-08-13 11:42:47,091 dispatch pc=50, inst=LOAD_FAST(arg=1, lineno=218)
2023-08-13 11:42:47,091 stack []
2023-08-13 11:42:47,091 dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=218)
2023-08-13 11:42:47,091 stack ['$b50.8']
2023-08-13 11:42:47,091 dispatch pc=54, inst=COMPARE_OP(arg=0, lineno=218)
2023-08-13 11:42:47,091 stack ['$b50.8', '$const52.9']
2023-08-13 11:42:47,091 dispatch pc=60, inst=POP_JUMP_FORWARD_IF_FALSE(arg=60, lineno=218)
2023-08-13 11:42:47,091 stack ['$54compare_op.10']
2023-08-13 11:42:47,091 end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0), Edge(pc=182, stack=(), blockstack=(), npush=0)]
2023-08-13 11:42:47,092 pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=182 nstack_initial=0)])
2023-08-13 11:42:47,092 stack: []
2023-08-13 11:42:47,092 state.pc_initial: State(pc_initial=62 nstack_initial=0)
2023-08-13 11:42:47,092 dispatch pc=62, inst=LOAD_CONST(arg=3, lineno=219)
2023-08-13 11:42:47,092 stack []
2023-08-13 11:42:47,092 dispatch pc=64, inst=STORE_FAST(arg=3, lineno=219)
2023-08-13 11:42:47,092 stack ['$const62.0']
2023-08-13 11:42:47,092 dispatch pc=66, inst=LOAD_FAST(arg=1, lineno=220)
2023-08-13 11:42:47,092 stack []
2023-08-13 11:42:47,092 dispatch pc=68, inst=UNARY_NEGATIVE(arg=None, lineno=220)
2023-08-13 11:42:47,092 stack ['$b66.1']
2023-08-13 11:42:47,092 dispatch pc=70, inst=STORE_FAST(arg=4, lineno=220)
2023-08-13 11:42:47,092 stack ['$68unary_negative.2']
2023-08-13 11:42:47,092 dispatch pc=72, inst=LOAD_FAST(arg=4, lineno=221)
2023-08-13 11:42:47,092 stack []
2023-08-13 11:42:47,092 dispatch pc=74, inst=LOAD_CONST(arg=2, lineno=221)
2023-08-13 11:42:47,092 stack ['$exp72.3']
2023-08-13 11:42:47,092 dispatch pc=76, inst=COMPARE_OP(arg=0, lineno=221)
2023-08-13 11:42:47,092 stack ['$exp72.3', '$const74.4']
2023-08-13 11:42:47,092 dispatch pc=82, inst=POP_JUMP_FORWARD_IF_FALSE(arg=7, lineno=221)
2023-08-13 11:42:47,092 stack ['$76compare_op.5']
2023-08-13 11:42:47,093 end state. edges=[Edge(pc=84, stack=(), blockstack=(), npush=0), Edge(pc=98, stack=(), blockstack=(), npush=0)]
2023-08-13 11:42:47,093 pending: deque([State(pc_initial=182 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=98 nstack_initial=0)])
2023-08-13 11:42:47,093 stack: []
2023-08-13 11:42:47,093 state.pc_initial: State(pc_initial=182 nstack_initial=0)
2023-08-13 11:42:47,093 dispatch pc=182, inst=LOAD_CONST(arg=6, lineno=232)
2023-08-13 11:42:47,093 stack []
2023-08-13 11:42:47,093 dispatch pc=184, inst=STORE_FAST(arg=3, lineno=232)
2023-08-13 11:42:47,093 stack ['$const182.0']
2023-08-13 11:42:47,093 dispatch pc=186, inst=LOAD_FAST(arg=1, lineno=233)
2023-08-13 11:42:47,093 stack []
2023-08-13 11:42:47,093 dispatch pc=188, inst=STORE_FAST(arg=4, lineno=233)
2023-08-13 11:42:47,093 stack ['$b186.1']
2023-08-13 11:42:47,094 end state. edges=[Edge(pc=190, stack=(), blockstack=(), npush=0)]
2023-08-13 11:42:47,094 pending: deque([State(pc_initial=84 nstack_initial=0), State(pc_initial=98 nstack_initial=0), State(pc_initial=190 nstack_initial=0)])
2023-08-13 11:42:47,094 stack: []
2023-08-13 11:42:47,094 state.pc_initial: State(pc_initial=84 nstack_initial=0)
2023-08-13 11:42:47,094 dispatch pc=84, inst=LOAD_GLOBAL(arg=0, lineno=222)
2023-08-13 11:42:47,094 stack []
2023-08-13 11:42:47,094 dispatch pc=96, inst=RAISE_VARARGS(arg=1, lineno=222)
2023-08-13 11:42:47,094 stack ['$84load_global.0']
2023-08-13 11:42:47,094 end state. edges=[]
2023-08-13 11:42:47,094 pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=190 nstack_initial=0)])
2023-08-13 11:42:47,094 stack: []
2023-08-13 11:42:47,094 state.pc_initial: State(pc_initial=98 nstack_initial=0)
2023-08-13 11:42:47,094 dispatch pc=98, inst=LOAD_DEREF(arg=5, lineno=223)
2023-08-13 11:42:47,094 stack []
2023-08-13 11:42:47,095 dispatch pc=100, inst=POP_JUMP_FORWARD_IF_FALSE(arg=39, lineno=223)
2023-08-13 11:42:47,095 stack ['$98load_deref.0']
2023-08-13 11:42:47,095 end state. edges=[Edge(pc=102, stack=(), blockstack=(), npush=0), Edge(pc=180, stack=(), blockstack=(), npush=0)]
2023-08-13 11:42:47,095 pending: deque([State(pc_initial=190 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=180 nstack_initial=0)])
2023-08-13 11:42:47,095 stack: []
2023-08-13 11:42:47,095 state.pc_initial: State(pc_initial=190 nstack_initial=0)
2023-08-13 11:42:47,095 dispatch pc=190, inst=LOAD_FAST(arg=4, lineno=234)
2023-08-13 11:42:47,095 stack []
2023-08-13 11:42:47,095 dispatch pc=192, inst=LOAD_CONST(arg=7, lineno=234)
2023-08-13 11:42:47,095 stack ['$exp190.0']
2023-08-13 11:42:47,095 dispatch pc=194, inst=COMPARE_OP(arg=4, lineno=234)
2023-08-13 11:42:47,095 stack ['$exp190.0', '$const192.1']
2023-08-13 11:42:47,095 dispatch pc=200, inst=POP_JUMP_FORWARD_IF_FALSE(arg=34, lineno=234)
2023-08-13 11:42:47,095 stack ['$194compare_op.2']
2023-08-13 11:42:47,095 end state. edges=[Edge(pc=202, stack=(), blockstack=(), npush=0), Edge(pc=270, stack=(), blockstack=(), npush=0)]
2023-08-13 11:42:47,095 pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=180 nstack_initial=0), State(pc_initial=202 nstack_initial=0), State(pc_initial=270 nstack_initial=0)])
2023-08-13 11:42:47,095 stack: []
2023-08-13 11:42:47,095 state.pc_initial: State(pc_initial=102 nstack_initial=0)
2023-08-13 11:42:47,095 dispatch pc=102, inst=LOAD_FAST(arg=0, lineno=224)
2023-08-13 11:42:47,095 stack []
2023-08-13 11:42:47,096 dispatch pc=104, inst=LOAD_CONST(arg=2, lineno=224)
2023-08-13 11:42:47,096 stack ['$a102.0']
2023-08-13 11:42:47,096 dispatch pc=106, inst=COMPARE_OP(arg=2, lineno=224)
2023-08-13 11:42:47,096 stack ['$a102.0', '$const104.1']
2023-08-13 11:42:47,096 dispatch pc=112, inst=POP_JUMP_FORWARD_IF_FALSE(arg=19, lineno=224)
2023-08-13 11:42:47,096 stack ['$106compare_op.2']
2023-08-13 11:42:47,096 end state. edges=[Edge(pc=114, stack=(), blockstack=(), npush=0), Edge(pc=152, stack=(), blockstack=(), npush=0)]
2023-08-13 11:42:47,096 pending: deque([State(pc_initial=180 nstack_initial=0), State(pc_initial=202 nstack_initial=0), State(pc_initial=270 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=152 nstack_initial=0)])
2023-08-13 11:42:47,096 stack: []
2023-08-13 11:42:47,096 state.pc_initial: State(pc_initial=180 nstack_initial=0)
2023-08-13 11:42:47,096 dispatch pc=180, inst=JUMP_FORWARD(arg=4, lineno=230)
2023-08-13 11:42:47,096 stack []
2023-08-13 11:42:47,096 end state. edges=[Edge(pc=190, stack=(), blockstack=(), npush=0)]
2023-08-13 11:42:47,096 pending: deque([State(pc_initial=202 nstack_initial=0), State(pc_initial=270 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=152 nstack_initial=0), State(pc_initial=190 nstack_initial=0)])
2023-08-13 11:42:47,096 stack: []
2023-08-13 11:42:47,096 state.pc_initial: State(pc_initial=202 nstack_initial=0)
2023-08-13 11:42:47,096 dispatch pc=202, inst=LOAD_GLOBAL(arg=5, lineno=236)
2023-08-13 11:42:47,096 stack []
2023-08-13 11:42:47,096 dispatch pc=214, inst=LOAD_ATTR(arg=3, lineno=236)
2023-08-13 11:42:47,096 stack ['$null$202.1', '$202load_global.0']
2023-08-13 11:42:47,097 dispatch pc=224, inst=LOAD_FAST(arg=0, lineno=236)
2023-08-13 11:42:47,097 stack ['$null$202.1', '$214load_attr.2']
2023-08-13 11:42:47,097 dispatch pc=226, inst=LOAD_GLOBAL(arg=9, lineno=236)
2023-08-13 11:42:47,097 stack ['$null$202.1', '$214load_attr.2', '$a224.3']
2023-08-13 11:42:47,097 dispatch pc=238, inst=LOAD_FAST(arg=1, lineno=236)
2023-08-13 11:42:47,097 stack ['$null$202.1', '$214load_attr.2', '$a224.3', '$null$226.5', '$226load_global.4']
2023-08-13 11:42:47,097 dispatch pc=240, inst=PRECALL(arg=1, lineno=236)
2023-08-13 11:42:47,097 stack ['$null$202.1', '$214load_attr.2', '$a224.3', '$null$226.5', '$226load_global.4', '$b238.6']
2023-08-13 11:42:47,097 dispatch pc=244, inst=CALL(arg=1, lineno=236)
2023-08-13 11:42:47,097 stack ['$null$202.1', '$214load_attr.2', '$a224.3', '$null$226.5', '$226load_global.4', '$b238.6']
2023-08-13 11:42:47,097 dispatch pc=254, inst=PRECALL(arg=2, lineno=236)
2023-08-13 11:42:47,097 stack ['$null$202.1', '$214load_attr.2', '$a224.3', '$244call.7']
2023-08-13 11:42:47,097 dispatch pc=258, inst=CALL(arg=2, lineno=236)
2023-08-13 11:42:47,097 stack ['$null$202.1', '$214load_attr.2', '$a224.3', '$244call.7']
2023-08-13 11:42:47,097 dispatch pc=268, inst=RETURN_VALUE(arg=None, lineno=236)
2023-08-13 11:42:47,097 stack ['$258call.8']
2023-08-13 11:42:47,097 end state. edges=[]
2023-08-13 11:42:47,097 pending: deque([State(pc_initial=270 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=152 nstack_initial=0), State(pc_initial=190 nstack_initial=0)])
2023-08-13 11:42:47,098 stack: []
2023-08-13 11:42:47,098 state.pc_initial: State(pc_initial=270 nstack_initial=0)
2023-08-13 11:42:47,098 dispatch pc=270, inst=LOAD_FAST(arg=4, lineno=237)
2023-08-13 11:42:47,098 stack []
2023-08-13 11:42:47,098 dispatch pc=272, inst=LOAD_CONST(arg=2, lineno=237)
2023-08-13 11:42:47,098 stack ['$exp270.0']
2023-08-13 11:42:47,098 dispatch pc=274, inst=COMPARE_OP(arg=3, lineno=237)
2023-08-13 11:42:47,098 stack ['$exp270.0', '$const272.1']
2023-08-13 11:42:47,098 dispatch pc=280, inst=POP_JUMP_FORWARD_IF_FALSE(arg=26, lineno=237)
2023-08-13 11:42:47,099 stack ['$274compare_op.2']
2023-08-13 11:42:47,099 end state. edges=[Edge(pc=282, stack=(), blockstack=(), npush=0), Edge(pc=334, stack=(), blockstack=(), npush=0)]
2023-08-13 11:42:47,099 pending: deque([State(pc_initial=114 nstack_initial=0), State(pc_initial=152 nstack_initial=0), State(pc_initial=190 nstack_initial=0), State(pc_initial=282 nstack_initial=0), State(pc_initial=334 nstack_initial=0)])
2023-08-13 11:42:47,099 stack: []
2023-08-13 11:42:47,099 state.pc_initial: State(pc_initial=114 nstack_initial=0)
2023-08-13 11:42:47,099 dispatch pc=114, inst=LOAD_DEREF(arg=7, lineno=225)
2023-08-13 11:42:47,099 stack []
2023-08-13 11:42:47,099 dispatch pc=116, inst=POP_JUMP_FORWARD_IF_FALSE(arg=2, lineno=225)
2023-08-13 11:42:47,099 stack ['$114load_deref.0']
2023-08-13 11:42:47,099 end state. edges=[Edge(pc=118, stack=(), blockstack=(), npush=0), Edge(pc=122, stack=(), blockstack=(), npush=0)]
2023-08-13 11:42:47,099 pending: deque([State(pc_initial=152 nstack_initial=0), State(pc_initial=190 nstack_initial=0), State(pc_initial=282 nstack_initial=0), State(pc_initial=334 nstack_initial=0), State(pc_initial=118 nstack_initial=0), State(pc_initial=122 nstack_initial=0)])
2023-08-13 11:42:47,099 stack: []
2023-08-13 11:42:47,100 state.pc_initial: State(pc_initial=152 nstack_initial=0)
2023-08-13 11:42:47,100 dispatch pc=152, inst=LOAD_FAST(arg=0, lineno=229)
2023-08-13 11:42:47,100 stack []
2023-08-13 11:42:47,100 dispatch pc=154, inst=LOAD_CONST(arg=1, lineno=229)
2023-08-13 11:42:47,100 stack ['$a152.0']
2023-08-13 11:42:47,100 dispatch pc=156, inst=COMPARE_OP(arg=3, lineno=229)
2023-08-13 11:42:47,100 stack ['$a152.0', '$const154.1']
2023-08-13 11:42:47,100 dispatch pc=162, inst=POP_JUMP_FORWARD_IF_FALSE(arg=8, lineno=229)
2023-08-13 11:42:47,100 stack ['$156compare_op.2']
2023-08-13 11:42:47,100 end state. edges=[Edge(pc=164, stack=(), blockstack=(), npush=0), Edge(pc=180, stack=(), blockstack=(), npush=0)]
2023-08-13 11:42:47,100 pending: deque([State(pc_initial=190 nstack_initial=0), State(pc_initial=282 nstack_initial=0), State(pc_initial=334 nstack_initial=0), State(pc_initial=118 nstack_initial=0), State(pc_initial=122 nstack_initial=0), State(pc_initial=164 nstack_initial=0), State(pc_initial=180 nstack_initial=0)])
2023-08-13 11:42:47,100 pending: deque([State(pc_initial=282 nstack_initial=0), State(pc_initial=334 nstack_initial=0), State(pc_initial=118 nstack_initial=0), State(pc_initial=122 nstack_initial=0), State(pc_initial=164 nstack_initial=0), State(pc_initial=180 nstack_initial=0)])
2023-08-13 11:42:47,100 stack: []
2023-08-13 11:42:47,100 state.pc_initial: State(pc_initial=282 nstack_initial=0)
2023-08-13 11:42:47,100 dispatch pc=282, inst=LOAD_FAST(arg=4, lineno=238)
2023-08-13 11:42:47,100 stack []
2023-08-13 11:42:47,100 dispatch pc=284, inst=LOAD_CONST(arg=1, lineno=238)
2023-08-13 11:42:47,100 stack ['$exp282.0']
2023-08-13 11:42:47,100 dispatch pc=286, inst=BINARY_OP(arg=1, lineno=238)
2023-08-13 11:42:47,100 stack ['$exp282.0', '$const284.1']
2023-08-13 11:42:47,101 dispatch pc=290, inst=POP_JUMP_FORWARD_IF_FALSE(arg=5, lineno=238)
2023-08-13 11:42:47,101 stack ['$binop_and_286.2']
2023-08-13 11:42:47,101 end state. edges=[Edge(pc=292, stack=(), blockstack=(), npush=0), Edge(pc=302, stack=(), blockstack=(), npush=0)]
2023-08-13 11:42:47,101 pending: deque([State(pc_initial=334 nstack_initial=0), State(pc_initial=118 nstack_initial=0), State(pc_initial=122 nstack_initial=0), State(pc_initial=164 nstack_initial=0), State(pc_initial=180 nstack_initial=0), State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0)])
2023-08-13 11:42:47,101 stack: []
2023-08-13 11:42:47,101 state.pc_initial: State(pc_initial=334 nstack_initial=0)
2023-08-13 11:42:47,101 dispatch pc=334, inst=LOAD_FAST(arg=3, lineno=243)
2023-08-13 11:42:47,101 stack []
2023-08-13 11:42:47,101 dispatch pc=336, inst=POP_JUMP_FORWARD_IF_FALSE(arg=5, lineno=243)
2023-08-13 11:42:47,101 stack ['$invert334.0']
2023-08-13 11:42:47,101 end state. edges=[Edge(pc=338, stack=(), blockstack=(), npush=0), Edge(pc=348, stack=(), blockstack=(), npush=0)]
2023-08-13 11:42:47,101 pending: deque([State(pc_initial=118 nstack_initial=0), State(pc_initial=122 nstack_initial=0), State(pc_initial=164 nstack_initial=0), State(pc_initial=180 nstack_initial=0), State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0), State(pc_initial=338 nstack_initial=0), State(pc_initial=348 nstack_initial=0)])
2023-08-13 11:42:47,101 stack: []
2023-08-13 11:42:47,101 state.pc_initial: State(pc_initial=118 nstack_initial=0)
2023-08-13 11:42:47,101 dispatch pc=118, inst=LOAD_DEREF(arg=7, lineno=226)
2023-08-13 11:42:47,101 stack []
2023-08-13 11:42:47,101 dispatch pc=120, inst=RETURN_VALUE(arg=None, lineno=226)
2023-08-13 11:42:47,101 stack ['$118load_deref.0']
2023-08-13 11:42:47,101 end state. edges=[]
2023-08-13 11:42:47,101 pending: deque([State(pc_initial=122 nstack_initial=0), State(pc_initial=164 nstack_initial=0), State(pc_initial=180 nstack_initial=0), State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0), State(pc_initial=338 nstack_initial=0), State(pc_initial=348 nstack_initial=0)])
2023-08-13 11:42:47,102 stack: []
2023-08-13 11:42:47,102 state.pc_initial: State(pc_initial=122 nstack_initial=0)
2023-08-13 11:42:47,102 dispatch pc=122, inst=LOAD_GLOBAL(arg=3, lineno=228)
2023-08-13 11:42:47,102 stack []
2023-08-13 11:42:47,102 dispatch pc=134, inst=LOAD_CONST(arg=4, lineno=228)
2023-08-13 11:42:47,102 stack ['$null$122.1', '$122load_global.0']
2023-08-13 11:42:47,102 dispatch pc=136, inst=PRECALL(arg=1, lineno=228)
2023-08-13 11:42:47,102 stack ['$null$122.1', '$122load_global.0', '$const134.2']
2023-08-13 11:42:47,102 dispatch pc=140, inst=CALL(arg=1, lineno=228)
2023-08-13 11:42:47,102 stack ['$null$122.1', '$122load_global.0', '$const134.2']
2023-08-13 11:42:47,102 dispatch pc=150, inst=RAISE_VARARGS(arg=1, lineno=228)
2023-08-13 11:42:47,102 stack ['$140call.3']
2023-08-13 11:42:47,102 end state. edges=[]
2023-08-13 11:42:47,102 pending: deque([State(pc_initial=164 nstack_initial=0), State(pc_initial=180 nstack_initial=0), State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0), State(pc_initial=338 nstack_initial=0), State(pc_initial=348 nstack_initial=0)])
2023-08-13 11:42:47,102 stack: []
2023-08-13 11:42:47,102 state.pc_initial: State(pc_initial=164 nstack_initial=0)
2023-08-13 11:42:47,102 dispatch pc=164, inst=LOAD_FAST(arg=0, lineno=229)
2023-08-13 11:42:47,102 stack []
2023-08-13 11:42:47,102 dispatch pc=166, inst=LOAD_CONST(arg=5, lineno=229)
2023-08-13 11:42:47,102 stack ['$a164.0']
2023-08-13 11:42:47,103 dispatch pc=168, inst=COMPARE_OP(arg=3, lineno=229)
2023-08-13 11:42:47,103 stack ['$a164.0', '$const166.1']
2023-08-13 11:42:47,103 dispatch pc=174, inst=POP_JUMP_FORWARD_IF_FALSE(arg=2, lineno=229)
2023-08-13 11:42:47,103 stack ['$168compare_op.2']
2023-08-13 11:42:47,103 end state. edges=[Edge(pc=176, stack=(), blockstack=(), npush=0), Edge(pc=180, stack=(), blockstack=(), npush=0)]
2023-08-13 11:42:47,103 pending: deque([State(pc_initial=180 nstack_initial=0), State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0), State(pc_initial=338 nstack_initial=0), State(pc_initial=348 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=180 nstack_initial=0)])
2023-08-13 11:42:47,103 pending: deque([State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0), State(pc_initial=338 nstack_initial=0), State(pc_initial=348 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=180 nstack_initial=0)])
2023-08-13 11:42:47,103 stack: []
2023-08-13 11:42:47,103 state.pc_initial: State(pc_initial=292 nstack_initial=0)
2023-08-13 11:42:47,103 dispatch pc=292, inst=LOAD_FAST(arg=2, lineno=239)
2023-08-13 11:42:47,103 stack []
2023-08-13 11:42:47,103 dispatch pc=294, inst=LOAD_FAST(arg=0, lineno=239)
2023-08-13 11:42:47,103 stack ['$r292.0']
2023-08-13 11:42:47,103 dispatch pc=296, inst=BINARY_OP(arg=18, lineno=239)
2023-08-13 11:42:47,103 stack ['$r292.0', '$a294.1']
2023-08-13 11:42:47,103 dispatch pc=300, inst=STORE_FAST(arg=2, lineno=239)
2023-08-13 11:42:47,103 stack ['$binop_imul296.2']
2023-08-13 11:42:47,103 end state. edges=[Edge(pc=302, stack=(), blockstack=(), npush=0)]
2023-08-13 11:42:47,103 pending: deque([State(pc_initial=302 nstack_initial=0), State(pc_initial=338 nstack_initial=0), State(pc_initial=348 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=180 nstack_initial=0), State(pc_initial=302 nstack_initial=0)])
2023-08-13 11:42:47,104 stack: []
2023-08-13 11:42:47,104 state.pc_initial: State(pc_initial=302 nstack_initial=0)
2023-08-13 11:42:47,104 dispatch pc=302, inst=LOAD_FAST(arg=4, lineno=240)
2023-08-13 11:42:47,104 stack []
2023-08-13 11:42:47,104 dispatch pc=304, inst=LOAD_CONST(arg=1, lineno=240)
2023-08-13 11:42:47,104 stack ['$exp302.0']
2023-08-13 11:42:47,104 dispatch pc=306, inst=BINARY_OP(arg=22, lineno=240)
2023-08-13 11:42:47,104 stack ['$exp302.0', '$const304.1']
2023-08-13 11:42:47,104 dispatch pc=310, inst=STORE_FAST(arg=4, lineno=240)
2023-08-13 11:42:47,104 stack ['$binop_irshift306.2']
2023-08-13 11:42:47,104 dispatch pc=312, inst=LOAD_FAST(arg=0, lineno=241)
2023-08-13 11:42:47,104 stack []
2023-08-13 11:42:47,104 dispatch pc=314, inst=LOAD_FAST(arg=0, lineno=241)
2023-08-13 11:42:47,104 stack ['$a312.3']
2023-08-13 11:42:47,104 dispatch pc=316, inst=BINARY_OP(arg=18, lineno=241)
2023-08-13 11:42:47,104 stack ['$a312.3', '$a314.4']
2023-08-13 11:42:47,104 dispatch pc=320, inst=STORE_FAST(arg=0, lineno=241)
2023-08-13 11:42:47,104 stack ['$binop_imul316.5']
2023-08-13 11:42:47,104 dispatch pc=322, inst=LOAD_FAST(arg=4, lineno=237)
2023-08-13 11:42:47,104 stack []
2023-08-13 11:42:47,105 dispatch pc=324, inst=LOAD_CONST(arg=2, lineno=237)
2023-08-13 11:42:47,105 stack ['$exp322.6']
2023-08-13 11:42:47,105 dispatch pc=326, inst=COMPARE_OP(arg=3, lineno=237)
2023-08-13 11:42:47,105 stack ['$exp322.6', '$const324.7']
2023-08-13 11:42:47,105 dispatch pc=332, inst=POP_JUMP_BACKWARD_IF_TRUE(arg=26, lineno=237)
2023-08-13 11:42:47,105 stack ['$326compare_op.8']
2023-08-13 11:42:47,105 end state. edges=[Edge(pc=334, stack=(), blockstack=(), npush=0), Edge(pc=282, stack=(), blockstack=(), npush=0)]
2023-08-13 11:42:47,105 pending: deque([State(pc_initial=338 nstack_initial=0), State(pc_initial=348 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=180 nstack_initial=0), State(pc_initial=302 nstack_initial=0), State(pc_initial=334 nstack_initial=0), State(pc_initial=282 nstack_initial=0)])
2023-08-13 11:42:47,105 stack: []
2023-08-13 11:42:47,105 state.pc_initial: State(pc_initial=338 nstack_initial=0)
2023-08-13 11:42:47,105 dispatch pc=338, inst=LOAD_CONST(arg=8, lineno=243)
2023-08-13 11:42:47,105 stack []
2023-08-13 11:42:47,105 dispatch pc=340, inst=LOAD_FAST(arg=2, lineno=243)
2023-08-13 11:42:47,105 stack ['$const338.0']
2023-08-13 11:42:47,105 dispatch pc=342, inst=BINARY_OP(arg=11, lineno=243)
2023-08-13 11:42:47,105 stack ['$const338.0', '$r340.1']
2023-08-13 11:42:47,105 dispatch pc=346, inst=JUMP_FORWARD(arg=1, lineno=243)
2023-08-13 11:42:47,105 stack ['$binop_truediv342.2']
2023-08-13 11:42:47,105 end state. edges=[Edge(pc=350, stack=('$binop_truediv342.2',), blockstack=(), npush=0)]
2023-08-13 11:42:47,105 pending: deque([State(pc_initial=348 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=180 nstack_initial=0), State(pc_initial=302 nstack_initial=0), State(pc_initial=334 nstack_initial=0), State(pc_initial=282 nstack_initial=0), State(pc_initial=350 nstack_initial=1)])
2023-08-13 11:42:47,106 stack: []
2023-08-13 11:42:47,106 state.pc_initial: State(pc_initial=348 nstack_initial=0)
2023-08-13 11:42:47,106 dispatch pc=348, inst=LOAD_FAST(arg=2, lineno=243)
2023-08-13 11:42:47,106 stack []
2023-08-13 11:42:47,106 end state. edges=[Edge(pc=350, stack=('$r348.0',), blockstack=(), npush=0)]
2023-08-13 11:42:47,106 pending: deque([State(pc_initial=176 nstack_initial=0), State(pc_initial=180 nstack_initial=0), State(pc_initial=302 nstack_initial=0), State(pc_initial=334 nstack_initial=0), State(pc_initial=282 nstack_initial=0), State(pc_initial=350 nstack_initial=1), State(pc_initial=350 nstack_initial=1)])
2023-08-13 11:42:47,106 stack: []
2023-08-13 11:42:47,106 state.pc_initial: State(pc_initial=176 nstack_initial=0)
2023-08-13 11:42:47,106 dispatch pc=176, inst=LOAD_CONST(arg=2, lineno=230)
2023-08-13 11:42:47,106 stack []
2023-08-13 11:42:47,106 dispatch pc=178, inst=RETURN_VALUE(arg=None, lineno=230)
2023-08-13 11:42:47,106 stack ['$const176.0']
2023-08-13 11:42:47,106 end state. edges=[]
2023-08-13 11:42:47,106 pending: deque([State(pc_initial=180 nstack_initial=0), State(pc_initial=302 nstack_initial=0), State(pc_initial=334 nstack_initial=0), State(pc_initial=282 nstack_initial=0), State(pc_initial=350 nstack_initial=1), State(pc_initial=350 nstack_initial=1)])
2023-08-13 11:42:47,106 pending: deque([State(pc_initial=302 nstack_initial=0), State(pc_initial=334 nstack_initial=0), State(pc_initial=282 nstack_initial=0), State(pc_initial=350 nstack_initial=1), State(pc_initial=350 nstack_initial=1)])
2023-08-13 11:42:47,106 pending: deque([State(pc_initial=334 nstack_initial=0), State(pc_initial=282 nstack_initial=0), State(pc_initial=350 nstack_initial=1), State(pc_initial=350 nstack_initial=1)])
2023-08-13 11:42:47,106 pending: deque([State(pc_initial=282 nstack_initial=0), State(pc_initial=350 nstack_initial=1), State(pc_initial=350 nstack_initial=1)])
2023-08-13 11:42:47,106 pending: deque([State(pc_initial=350 nstack_initial=1), State(pc_initial=350 nstack_initial=1)])
2023-08-13 11:42:47,106 stack: ['$phi350.0']
2023-08-13 11:42:47,106 state.pc_initial: State(pc_initial=350 nstack_initial=1)
2023-08-13 11:42:47,107 dispatch pc=350, inst=RETURN_VALUE(arg=None, lineno=243)
2023-08-13 11:42:47,107 stack ['$phi350.0']
2023-08-13 11:42:47,107 end state. edges=[]
2023-08-13 11:42:47,107 pending: deque([State(pc_initial=350 nstack_initial=1)])
2023-08-13 11:42:47,107 -------------------------Prune PHIs-------------------------
2023-08-13 11:42:47,107 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=84 nstack_initial=0): set(),
             State(pc_initial=98 nstack_initial=0): set(),
             State(pc_initial=102 nstack_initial=0): set(),
             State(pc_initial=114 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=122 nstack_initial=0): set(),
             State(pc_initial=152 nstack_initial=0): set(),
             State(pc_initial=164 nstack_initial=0): set(),
             State(pc_initial=176 nstack_initial=0): set(),
             State(pc_initial=180 nstack_initial=0): set(),
             State(pc_initial=182 nstack_initial=0): set(),
             State(pc_initial=190 nstack_initial=0): set(),
             State(pc_initial=202 nstack_initial=0): set(),
             State(pc_initial=270 nstack_initial=0): set(),
             State(pc_initial=282 nstack_initial=0): set(),
             State(pc_initial=292 nstack_initial=0): set(),
             State(pc_initial=302 nstack_initial=0): set(),
             State(pc_initial=334 nstack_initial=0): set(),
             State(pc_initial=338 nstack_initial=0): set(),
             State(pc_initial=348 nstack_initial=0): set(),
             State(pc_initial=350 nstack_initial=1): {'$phi350.0'}})
2023-08-13 11:42:47,107 defmap: {'$phi350.0': State(pc_initial=348 nstack_initial=0)}
2023-08-13 11:42:47,107 phismap: defaultdict(<class 'set'>,
            {'$phi350.0': {('$binop_truediv342.2',
                            State(pc_initial=338 nstack_initial=0)),
                           ('$r348.0',
                            State(pc_initial=348 nstack_initial=0))}})
2023-08-13 11:42:47,107 changing phismap: defaultdict(<class 'set'>,
            {'$phi350.0': {('$binop_truediv342.2',
                            State(pc_initial=338 nstack_initial=0)),
                           ('$r348.0',
                            State(pc_initial=348 nstack_initial=0))}})
2023-08-13 11:42:47,108 keep phismap: {'$phi350.0': {('$binop_truediv342.2', State(pc_initial=338 nstack_initial=0)),
               ('$r348.0', State(pc_initial=348 nstack_initial=0))}}
2023-08-13 11:42:47,108 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=338 nstack_initial=0): {'$phi350.0': '$binop_truediv342.2'},
             State(pc_initial=348 nstack_initial=0): {'$phi350.0': '$r348.0'}})
2023-08-13 11:42:47,108 ----------------------DONE Prune PHIs-----------------------
2023-08-13 11:42:47,108 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {}), (6, {}), (8, {'res': '$8load_deref.1'}), (10, {'res': '$const10.2'}), (12, {}), (14, {}), (16, {'func': '$8load_deref.1', 'args': ['$const10.2'], 'kw_names': None, 'res': '$16call.3'}), (18, {}), (20, {}), (22, {}), (24, {}), (26, {'value': '$16call.3'}), (28, {}), (30, {'res': '$30load_deref.5'}), (32, {'res': '$a32.6'}), (34, {}), (36, {}), (38, {'func': '$30load_deref.5', 'args': ['$a32.6'], 'kw_names': None, 'res': '$38call.7'}), (40, {}), (42, {}), (44, {}), (46, {}), (48, {'value': '$38call.7'}), (50, {'res': '$b50.8'}), (52, {'res': '$const52.9'}), (54, {'lhs': '$b50.8', 'rhs': '$const52.9', 'res': '$54compare_op.10'}), (56, {}), (58, {}), (60, {'pred': '$54compare_op.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: (), 182: ()})
2023-08-13 11:42:47,108 block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$const62.0'}), (64, {'value': '$const62.0'}), (66, {'res': '$b66.1'}), (68, {'value': '$b66.1', 'res': '$68unary_negative.2'}), (70, {'value': '$68unary_negative.2'}), (72, {'res': '$exp72.3'}), (74, {'res': '$const74.4'}), (76, {'lhs': '$exp72.3', 'rhs': '$const74.4', 'res': '$76compare_op.5'}), (78, {}), (80, {}), (82, {'pred': '$76compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={84: (), 98: ()})
2023-08-13 11:42:47,108 block_infos State(pc_initial=84 nstack_initial=0):
AdaptBlockInfo(insts=((84, {'idx': 0, 'res': '$84load_global.0'}), (86, {}), (88, {}), (90, {}), (92, {}), (94, {}), (96, {'exc': '$84load_global.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:47,108 block_infos State(pc_initial=98 nstack_initial=0):
AdaptBlockInfo(insts=((98, {'res': '$98load_deref.0'}), (100, {'pred': '$98load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={102: (), 180: ()})
2023-08-13 11:42:47,108 block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {'res': '$a102.0'}), (104, {'res': '$const104.1'}), (106, {'lhs': '$a102.0', 'rhs': '$const104.1', 'res': '$106compare_op.2'}), (108, {}), (110, {}), (112, {'pred': '$106compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: (), 152: ()})
2023-08-13 11:42:47,108 block_infos State(pc_initial=114 nstack_initial=0):
AdaptBlockInfo(insts=((114, {'res': '$114load_deref.0'}), (116, {'pred': '$114load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={118: (), 122: ()})
2023-08-13 11:42:47,108 block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'res': '$118load_deref.0'}), (120, {'retval': '$118load_deref.0', 'castval': '$120return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:47,108 block_infos State(pc_initial=122 nstack_initial=0):
AdaptBlockInfo(insts=((122, {'idx': 1, 'res': '$122load_global.0'}), (124, {}), (126, {}), (128, {}), (130, {}), (132, {}), (134, {'res': '$const134.2'}), (136, {}), (138, {}), (140, {'func': '$122load_global.0', 'args': ['$const134.2'], 'kw_names': None, 'res': '$140call.3'}), (142, {}), (144, {}), (146, {}), (148, {}), (150, {'exc': '$140call.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:47,108 block_infos State(pc_initial=152 nstack_initial=0):
AdaptBlockInfo(insts=((152, {'res': '$a152.0'}), (154, {'res': '$const154.1'}), (156, {'lhs': '$a152.0', 'rhs': '$const154.1', 'res': '$156compare_op.2'}), (158, {}), (160, {}), (162, {'pred': '$156compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={164: (), 180: ()})
2023-08-13 11:42:47,109 block_infos State(pc_initial=164 nstack_initial=0):
AdaptBlockInfo(insts=((164, {'res': '$a164.0'}), (166, {'res': '$const166.1'}), (168, {'lhs': '$a164.0', 'rhs': '$const166.1', 'res': '$168compare_op.2'}), (170, {}), (172, {}), (174, {'pred': '$168compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={176: (), 180: ()})
2023-08-13 11:42:47,109 block_infos State(pc_initial=176 nstack_initial=0):
AdaptBlockInfo(insts=((176, {'res': '$const176.0'}), (178, {'retval': '$const176.0', 'castval': '$178return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:47,109 block_infos State(pc_initial=180 nstack_initial=0):
AdaptBlockInfo(insts=((180, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={190: ()})
2023-08-13 11:42:47,109 block_infos State(pc_initial=182 nstack_initial=0):
AdaptBlockInfo(insts=((182, {'res': '$const182.0'}), (184, {'value': '$const182.0'}), (186, {'res': '$b186.1'}), (188, {'value': '$b186.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={190: ()})
2023-08-13 11:42:47,109 block_infos State(pc_initial=190 nstack_initial=0):
AdaptBlockInfo(insts=((190, {'res': '$exp190.0'}), (192, {'res': '$const192.1'}), (194, {'lhs': '$exp190.0', 'rhs': '$const192.1', 'res': '$194compare_op.2'}), (196, {}), (198, {}), (200, {'pred': '$194compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={202: (), 270: ()})
2023-08-13 11:42:47,109 block_infos State(pc_initial=202 nstack_initial=0):
AdaptBlockInfo(insts=((202, {'idx': 2, 'res': '$202load_global.0'}), (204, {}), (206, {}), (208, {}), (210, {}), (212, {}), (214, {'item': '$202load_global.0', 'res': '$214load_attr.2'}), (216, {}), (218, {}), (220, {}), (222, {}), (224, {'res': '$a224.3'}), (226, {'idx': 4, 'res': '$226load_global.4'}), (228, {}), (230, {}), (232, {}), (234, {}), (236, {}), (238, {'res': '$b238.6'}), (240, {}), (242, {}), (244, {'func': '$226load_global.4', 'args': ['$b238.6'], 'kw_names': None, 'res': '$244call.7'}), (246, {}), (248, {}), (250, {}), (252, {}), (254, {}), (256, {}), (258, {'func': '$214load_attr.2', 'args': ['$a224.3', '$244call.7'], 'kw_names': None, 'res': '$258call.8'}), (260, {}), (262, {}), (264, {}), (266, {}), (268, {'retval': '$258call.8', 'castval': '$268return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:47,109 block_infos State(pc_initial=270 nstack_initial=0):
AdaptBlockInfo(insts=((270, {'res': '$exp270.0'}), (272, {'res': '$const272.1'}), (274, {'lhs': '$exp270.0', 'rhs': '$const272.1', 'res': '$274compare_op.2'}), (276, {}), (278, {}), (280, {'pred': '$274compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={282: (), 334: ()})
2023-08-13 11:42:47,110 block_infos State(pc_initial=282 nstack_initial=0):
AdaptBlockInfo(insts=((282, {'res': '$exp282.0'}), (284, {'res': '$const284.1'}), (286, {'op': '&', 'lhs': '$exp282.0', 'rhs': '$const284.1', 'res': '$binop_and_286.2'}), (288, {}), (290, {'pred': '$binop_and_286.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={292: (), 302: ()})
2023-08-13 11:42:47,110 block_infos State(pc_initial=292 nstack_initial=0):
AdaptBlockInfo(insts=((292, {'res': '$r292.0'}), (294, {'res': '$a294.1'}), (296, {'op': '*=', 'lhs': '$r292.0', 'rhs': '$a294.1', 'res': '$binop_imul296.2'}), (298, {}), (300, {'value': '$binop_imul296.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={302: ()})
2023-08-13 11:42:47,110 block_infos State(pc_initial=302 nstack_initial=0):
AdaptBlockInfo(insts=((302, {'res': '$exp302.0'}), (304, {'res': '$const304.1'}), (306, {'op': '>>=', 'lhs': '$exp302.0', 'rhs': '$const304.1', 'res': '$binop_irshift306.2'}), (308, {}), (310, {'value': '$binop_irshift306.2'}), (312, {'res': '$a312.3'}), (314, {'res': '$a314.4'}), (316, {'op': '*=', 'lhs': '$a312.3', 'rhs': '$a314.4', 'res': '$binop_imul316.5'}), (318, {}), (320, {'value': '$binop_imul316.5'}), (322, {'res': '$exp322.6'}), (324, {'res': '$const324.7'}), (326, {'lhs': '$exp322.6', 'rhs': '$const324.7', 'res': '$326compare_op.8'}), (328, {}), (330, {}), (332, {'pred': '$326compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={334: (), 282: ()})
2023-08-13 11:42:47,110 block_infos State(pc_initial=334 nstack_initial=0):
AdaptBlockInfo(insts=((334, {'res': '$invert334.0'}), (336, {'pred': '$invert334.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={338: (), 348: ()})
2023-08-13 11:42:47,110 block_infos State(pc_initial=338 nstack_initial=0):
AdaptBlockInfo(insts=((338, {'res': '$const338.0'}), (340, {'res': '$r340.1'}), (342, {'op': '/', 'lhs': '$const338.0', 'rhs': '$r340.1', 'res': '$binop_truediv342.2'}), (344, {}), (346, {})), outgoing_phis={'$phi350.0': '$binop_truediv342.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={350: ('$binop_truediv342.2',)})
2023-08-13 11:42:47,110 block_infos State(pc_initial=348 nstack_initial=0):
AdaptBlockInfo(insts=((348, {'res': '$r348.0'}),), outgoing_phis={'$phi350.0': '$r348.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={350: ('$r348.0',)})
2023-08-13 11:42:47,110 block_infos State(pc_initial=350 nstack_initial=1):
AdaptBlockInfo(insts=((350, {'retval': '$phi350.0', 'castval': '$350return_value.1'}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:47,115 label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $8load_deref.1 = freevar(tp: float32)    ['$8load_deref.1']
    $const10.2 = const(int, 1)               ['$const10.2']
    r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None) ['$8load_deref.1', '$const10.2', 'r']
    $30load_deref.5 = freevar(tp: float32)   ['$30load_deref.5']
    a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_deref.5', 'a', 'a.1']
    $const52.9 = const(int, 0)               ['$const52.9']
    $54compare_op.10 = b < $const52.9        ['$54compare_op.10', '$const52.9', 'b']
    bool60 = global(bool: <class 'bool'>)    ['bool60']
    $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None) ['$54compare_op.10', '$60pred', 'bool60']
    branch $60pred, 62, 182                  ['$60pred']
label 62:
    invert = const(bool, True)               ['invert']
    exp = unary(fn=<built-in function neg>, value=b) ['b', 'exp']
    $const74.4 = const(int, 0)               ['$const74.4']
    $76compare_op.5 = exp < $const74.4       ['$76compare_op.5', '$const74.4', 'exp']
    bool82 = global(bool: <class 'bool'>)    ['bool82']
    $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None) ['$76compare_op.5', '$82pred', 'bool82']
    branch $82pred, 84, 98                   ['$82pred']
label 84:
    $84load_global.0 = global(OverflowError: <class 'OverflowError'>) ['$84load_global.0']
    raise $84load_global.0                   ['$84load_global.0']
label 98:
    $98load_deref.0 = freevar(is_integer: False) ['$98load_deref.0']
    bool100 = global(bool: <class 'bool'>)   ['bool100']
    $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None) ['$100pred', '$98load_deref.0', 'bool100']
    branch $100pred, 102, 180                ['$100pred']
label 102:
    $const104.1 = const(int, 0)              ['$const104.1']
    $106compare_op.2 = a.1 == $const104.1    ['$106compare_op.2', '$const104.1', 'a.1']
    bool112 = global(bool: <class 'bool'>)   ['bool112']
    $112pred = call bool112($106compare_op.2, func=bool112, args=(Var($106compare_op.2, numbers.py:224),), kws=(), vararg=None, varkwarg=None, target=None) ['$106compare_op.2', '$112pred', 'bool112']
    branch $112pred, 114, 152                ['$112pred']
label 114:
    $114load_deref.0 = freevar(zerodiv_return: False) ['$114load_deref.0']
    bool116 = global(bool: <class 'bool'>)   ['bool116']
    $116pred = call bool116($114load_deref.0, func=bool116, args=(Var($114load_deref.0, numbers.py:225),), kws=(), vararg=None, varkwarg=None, target=None) ['$114load_deref.0', '$116pred', 'bool116']
    branch $116pred, 118, 122                ['$116pred']
label 118:
    $118load_deref.0 = freevar(zerodiv_return: False) ['$118load_deref.0']
    $120return_value.1 = cast(value=$118load_deref.0) ['$118load_deref.0', '$120return_value.1']
    return $120return_value.1                ['$120return_value.1']
label 122:
    $122load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>) ['$122load_global.0']
    $const134.2 = const(str, 0 cannot be raised to a negative power) ['$const134.2']
    $140call.3 = call $122load_global.0($const134.2, func=$122load_global.0, args=[Var($const134.2, numbers.py:228)], kws=(), vararg=None, varkwarg=None, target=None) ['$122load_global.0', '$140call.3', '$const134.2']
    raise $140call.3                         ['$140call.3']
label 152:
    $const154.1 = const(int, 1)              ['$const154.1']
    $156compare_op.2 = a.1 != $const154.1    ['$156compare_op.2', '$const154.1', 'a.1']
    bool162 = global(bool: <class 'bool'>)   ['bool162']
    $162pred = call bool162($156compare_op.2, func=bool162, args=(Var($156compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None) ['$156compare_op.2', '$162pred', 'bool162']
    branch $162pred, 164, 180                ['$162pred']
label 164:
    $const166.1 = const(int, -1)             ['$const166.1']
    $168compare_op.2 = a.1 != $const166.1    ['$168compare_op.2', '$const166.1', 'a.1']
    bool174 = global(bool: <class 'bool'>)   ['bool174']
    $174pred = call bool174($168compare_op.2, func=bool174, args=(Var($168compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None) ['$168compare_op.2', '$174pred', 'bool174']
    branch $174pred, 176, 180                ['$174pred']
label 176:
    $const176.0 = const(int, 0)              ['$const176.0']
    $178return_value.1 = cast(value=$const176.0) ['$178return_value.1', '$const176.0']
    return $178return_value.1                ['$178return_value.1']
label 180:
    jump 190                                 []
label 182:
    invert = const(bool, False)              ['invert']
    exp = b                                  ['b', 'exp']
    jump 190                                 []
label 190:
    $const192.1 = const(int, 65536)          ['$const192.1']
    $194compare_op.2 = exp > $const192.1     ['$194compare_op.2', '$const192.1', 'exp']
    bool200 = global(bool: <class 'bool'>)   ['bool200']
    $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None) ['$194compare_op.2', '$200pred', 'bool200']
    branch $200pred, 202, 270                ['$200pred']
label 202:
    $202load_global.0 = global(math: <module 'math' (built-in)>) ['$202load_global.0']
    $214load_attr.2 = getattr(value=$202load_global.0, attr=pow) ['$202load_global.0', '$214load_attr.2']
    $226load_global.4 = global(float: <class 'float'>) ['$226load_global.4']
    $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None) ['$226load_global.4', '$244call.7', 'b']
    $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None) ['$214load_attr.2', '$244call.7', '$258call.8', 'a.1']
    $268return_value.9 = cast(value=$258call.8) ['$258call.8', '$268return_value.9']
    return $268return_value.9                ['$268return_value.9']
label 270:
    $const272.1 = const(int, 0)              ['$const272.1']
    $274compare_op.2 = exp != $const272.1    ['$274compare_op.2', '$const272.1', 'exp']
    bool280 = global(bool: <class 'bool'>)   ['bool280']
    $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None) ['$274compare_op.2', '$280pred', 'bool280']
    branch $280pred, 282, 334                ['$280pred']
label 282:
    $const284.1 = const(int, 1)              ['$const284.1']
    $binop_and_286.2 = exp & $const284.1     ['$binop_and_286.2', '$const284.1', 'exp']
    bool290 = global(bool: <class 'bool'>)   ['bool290']
    $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None) ['$290pred', '$binop_and_286.2', 'bool290']
    branch $290pred, 292, 302                ['$290pred']
label 292:
    $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$binop_imul296.2', 'a.1', 'r']
    r = $binop_imul296.2                     ['$binop_imul296.2', 'r']
    jump 302                                 []
label 302:
    $const304.1 = const(int, 1)              ['$const304.1']
    $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined) ['$binop_irshift306.2', '$const304.1', 'exp']
    exp = $binop_irshift306.2                ['$binop_irshift306.2', 'exp']
    $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$binop_imul316.5', 'a.1', 'a.1']
    a.1 = $binop_imul316.5                   ['$binop_imul316.5', 'a.1']
    $const324.7 = const(int, 0)              ['$const324.7']
    $326compare_op.8 = exp != $const324.7    ['$326compare_op.8', '$const324.7', 'exp']
    bool332 = global(bool: <class 'bool'>)   ['bool332']
    $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None) ['$326compare_op.8', '$332pred', 'bool332']
    branch $332pred, 282, 334                ['$332pred']
label 334:
    bool336 = global(bool: <class 'bool'>)   ['bool336']
    $336pred = call bool336(invert, func=bool336, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None) ['$336pred', 'bool336', 'invert']
    branch $336pred, 338, 348                ['$336pred']
label 338:
    $const338.0 = const(float, 1.0)          ['$const338.0']
    $binop_truediv342.2 = $const338.0 / r    ['$binop_truediv342.2', '$const338.0', 'r']
    $phi350.0 = $binop_truediv342.2          ['$binop_truediv342.2', '$phi350.0']
    jump 350                                 []
label 348:
    $phi350.0 = r                            ['$phi350.0', 'r']
    jump 350                                 []
label 350:
    $350return_value.1 = cast(value=$phi350.0) ['$350return_value.1', '$phi350.0']
    return $350return_value.1                ['$350return_value.1']

2023-08-13 11:42:47,157 ==== SSA block analysis pass on 0
2023-08-13 11:42:47,158 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F697787AD0>
2023-08-13 11:42:47,158 on stmt: a = arg(0, name=a)
2023-08-13 11:42:47,158 on stmt: b = arg(1, name=b)
2023-08-13 11:42:47,158 on stmt: $8load_deref.1 = freevar(tp: float32)
2023-08-13 11:42:47,158 on stmt: $const10.2 = const(int, 1)
2023-08-13 11:42:47,158 on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,158 on stmt: $30load_deref.5 = freevar(tp: float32)
2023-08-13 11:42:47,158 on stmt: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,158 on stmt: $const52.9 = const(int, 0)
2023-08-13 11:42:47,158 on stmt: $54compare_op.10 = b < $const52.9
2023-08-13 11:42:47,158 on stmt: bool60 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,158 on stmt: $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,158 on stmt: branch $60pred, 62, 182
2023-08-13 11:42:47,158 ==== SSA block analysis pass on 62
2023-08-13 11:42:47,158 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F697787AD0>
2023-08-13 11:42:47,158 on stmt: invert = const(bool, True)
2023-08-13 11:42:47,158 on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-08-13 11:42:47,158 on stmt: $const74.4 = const(int, 0)
2023-08-13 11:42:47,159 on stmt: $76compare_op.5 = exp < $const74.4
2023-08-13 11:42:47,159 on stmt: bool82 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,159 on stmt: $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,159 on stmt: branch $82pred, 84, 98
2023-08-13 11:42:47,159 ==== SSA block analysis pass on 84
2023-08-13 11:42:47,159 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F697787AD0>
2023-08-13 11:42:47,159 on stmt: $84load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-08-13 11:42:47,159 on stmt: <static> raise <class 'OverflowError'>
2023-08-13 11:42:47,159 ==== SSA block analysis pass on 98
2023-08-13 11:42:47,159 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F697787AD0>
2023-08-13 11:42:47,159 on stmt: $98load_deref.0 = freevar(is_integer: False)
2023-08-13 11:42:47,159 on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,159 on stmt: $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,159 on stmt: jump 180
2023-08-13 11:42:47,159 ==== SSA block analysis pass on 180
2023-08-13 11:42:47,160 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F697787AD0>
2023-08-13 11:42:47,160 on stmt: jump 190
2023-08-13 11:42:47,160 ==== SSA block analysis pass on 182
2023-08-13 11:42:47,160 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F697787AD0>
2023-08-13 11:42:47,160 on stmt: invert = const(bool, False)
2023-08-13 11:42:47,160 on stmt: exp = b
2023-08-13 11:42:47,160 on stmt: jump 190
2023-08-13 11:42:47,160 ==== SSA block analysis pass on 190
2023-08-13 11:42:47,160 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F697787AD0>
2023-08-13 11:42:47,160 on stmt: $const192.1 = const(int, 65536)
2023-08-13 11:42:47,160 on stmt: $194compare_op.2 = exp > $const192.1
2023-08-13 11:42:47,160 on stmt: bool200 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,161 on stmt: $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,161 on stmt: branch $200pred, 202, 270
2023-08-13 11:42:47,161 ==== SSA block analysis pass on 202
2023-08-13 11:42:47,161 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F697787AD0>
2023-08-13 11:42:47,161 on stmt: $202load_global.0 = global(math: <module 'math' (built-in)>)
2023-08-13 11:42:47,161 on stmt: $214load_attr.2 = getattr(value=$202load_global.0, attr=pow)
2023-08-13 11:42:47,161 on stmt: $226load_global.4 = global(float: <class 'float'>)
2023-08-13 11:42:47,161 on stmt: $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,161 on stmt: $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,161 on stmt: $268return_value.9 = cast(value=$258call.8)
2023-08-13 11:42:47,161 on stmt: return $268return_value.9
2023-08-13 11:42:47,162 ==== SSA block analysis pass on 270
2023-08-13 11:42:47,162 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F697787AD0>
2023-08-13 11:42:47,162 on stmt: $const272.1 = const(int, 0)
2023-08-13 11:42:47,162 on stmt: $274compare_op.2 = exp != $const272.1
2023-08-13 11:42:47,162 on stmt: bool280 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,162 on stmt: $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,162 on stmt: branch $280pred, 282, 334
2023-08-13 11:42:47,162 ==== SSA block analysis pass on 282
2023-08-13 11:42:47,162 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F697787AD0>
2023-08-13 11:42:47,162 on stmt: $const284.1 = const(int, 1)
2023-08-13 11:42:47,162 on stmt: $binop_and_286.2 = exp & $const284.1
2023-08-13 11:42:47,162 on stmt: bool290 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,162 on stmt: $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,162 on stmt: branch $290pred, 292, 302
2023-08-13 11:42:47,162 ==== SSA block analysis pass on 292
2023-08-13 11:42:47,162 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F697787AD0>
2023-08-13 11:42:47,162 on stmt: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,162 on stmt: r = $binop_imul296.2
2023-08-13 11:42:47,162 on stmt: jump 302
2023-08-13 11:42:47,162 ==== SSA block analysis pass on 302
2023-08-13 11:42:47,162 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F697787AD0>
2023-08-13 11:42:47,163 on stmt: $const304.1 = const(int, 1)
2023-08-13 11:42:47,163 on stmt: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,163 on stmt: exp = $binop_irshift306.2
2023-08-13 11:42:47,163 on stmt: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,163 on stmt: a.1 = $binop_imul316.5
2023-08-13 11:42:47,163 on stmt: $const324.7 = const(int, 0)
2023-08-13 11:42:47,163 on stmt: $326compare_op.8 = exp != $const324.7
2023-08-13 11:42:47,163 on stmt: bool332 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,163 on stmt: $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,163 on stmt: branch $332pred, 282, 334
2023-08-13 11:42:47,163 ==== SSA block analysis pass on 334
2023-08-13 11:42:47,163 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F697787AD0>
2023-08-13 11:42:47,163 on stmt: bool336 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,163 on stmt: $336pred = call bool336(invert, func=bool336, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,163 on stmt: branch $336pred, 338, 348
2023-08-13 11:42:47,163 ==== SSA block analysis pass on 338
2023-08-13 11:42:47,163 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F697787AD0>
2023-08-13 11:42:47,163 on stmt: $const338.0 = const(float, 1.0)
2023-08-13 11:42:47,163 on stmt: $binop_truediv342.2 = $const338.0 / r
2023-08-13 11:42:47,163 on stmt: $phi350.0 = $binop_truediv342.2
2023-08-13 11:42:47,164 on stmt: jump 350
2023-08-13 11:42:47,164 ==== SSA block analysis pass on 348
2023-08-13 11:42:47,164 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F697787AD0>
2023-08-13 11:42:47,164 on stmt: $phi350.0 = r
2023-08-13 11:42:47,164 on stmt: jump 350
2023-08-13 11:42:47,164 ==== SSA block analysis pass on 350
2023-08-13 11:42:47,164 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F697787AD0>
2023-08-13 11:42:47,164 on stmt: $350return_value.1 = cast(value=$phi350.0)
2023-08-13 11:42:47,164 on stmt: return $350return_value.1
2023-08-13 11:42:47,165 defs defaultdict(<class 'list'>,
            {'$100pred': [<numba.core.ir.Assign object at 0x000001F696CB7410>],
             '$194compare_op.2': [<numba.core.ir.Assign object at 0x000001F69669F810>],
             '$200pred': [<numba.core.ir.Assign object at 0x000001F69669F550>],
             '$202load_global.0': [<numba.core.ir.Assign object at 0x000001F69669F510>],
             '$214load_attr.2': [<numba.core.ir.Assign object at 0x000001F69669F010>],
             '$226load_global.4': [<numba.core.ir.Assign object at 0x000001F69669E250>],
             '$244call.7': [<numba.core.ir.Assign object at 0x000001F69669EA10>],
             '$258call.8': [<numba.core.ir.Assign object at 0x000001F69669EC10>],
             '$268return_value.9': [<numba.core.ir.Assign object at 0x000001F69669E850>],
             '$274compare_op.2': [<numba.core.ir.Assign object at 0x000001F69669D010>],
             '$280pred': [<numba.core.ir.Assign object at 0x000001F69669D690>],
             '$290pred': [<numba.core.ir.Assign object at 0x000001F69669CA90>],
             '$30load_deref.5': [<numba.core.ir.Assign object at 0x000001F6977B7F90>],
             '$326compare_op.8': [<numba.core.ir.Assign object at 0x000001F696D6C250>],
             '$332pred': [<numba.core.ir.Assign object at 0x000001F696D6CAD0>],
             '$336pred': [<numba.core.ir.Assign object at 0x000001F696D6D2D0>],
             '$350return_value.1': [<numba.core.ir.Assign object at 0x000001F696D6E1D0>],
             '$54compare_op.10': [<numba.core.ir.Assign object at 0x000001F697696BD0>],
             '$60pred': [<numba.core.ir.Assign object at 0x000001F697696E50>],
             '$76compare_op.5': [<numba.core.ir.Assign object at 0x000001F697697AD0>],
             '$82pred': [<numba.core.ir.Assign object at 0x000001F697697D90>],
             '$84load_global.0': [<numba.core.ir.Assign object at 0x000001F697697F90>],
             '$8load_deref.1': [<numba.core.ir.Assign object at 0x000001F697011390>],
             '$98load_deref.0': [<numba.core.ir.Assign object at 0x000001F696CB56D0>],
             '$binop_and_286.2': [<numba.core.ir.Assign object at 0x000001F69669CE90>],
             '$binop_imul296.2': [<numba.core.ir.Assign object at 0x000001F69669C450>],
             '$binop_imul316.5': [<numba.core.ir.Assign object at 0x000001F696D6FC10>],
             '$binop_irshift306.2': [<numba.core.ir.Assign object at 0x000001F69669DBD0>],
             '$binop_truediv342.2': [<numba.core.ir.Assign object at 0x000001F696D6D990>],
             '$const10.2': [<numba.core.ir.Assign object at 0x000001F6977C1F90>],
             '$const192.1': [<numba.core.ir.Assign object at 0x000001F69669FDD0>],
             '$const272.1': [<numba.core.ir.Assign object at 0x000001F69669DA90>],
             '$const284.1': [<numba.core.ir.Assign object at 0x000001F69669E010>],
             '$const304.1': [<numba.core.ir.Assign object at 0x000001F69669D310>],
             '$const324.7': [<numba.core.ir.Assign object at 0x000001F696D6C350>],
             '$const338.0': [<numba.core.ir.Assign object at 0x000001F696D6C8D0>],
             '$const52.9': [<numba.core.ir.Assign object at 0x000001F697696A50>],
             '$const74.4': [<numba.core.ir.Assign object at 0x000001F697697910>],
             '$phi350.0': [<numba.core.ir.Assign object at 0x000001F696D6D690>,
                           <numba.core.ir.Assign object at 0x000001F696EF5E10>],
             'a': [<numba.core.ir.Assign object at 0x000001F6977C1450>],
             'a.1': [<numba.core.ir.Assign object at 0x000001F697786BD0>,
                     <numba.core.ir.Assign object at 0x000001F696D6F350>],
             'b': [<numba.core.ir.Assign object at 0x000001F6977C1D90>],
             'bool100': [<numba.core.ir.Assign object at 0x000001F696CB7ED0>],
             'bool200': [<numba.core.ir.Assign object at 0x000001F69669F8D0>],
             'bool280': [<numba.core.ir.Assign object at 0x000001F69669D410>],
             'bool290': [<numba.core.ir.Assign object at 0x000001F69669CD10>],
             'bool332': [<numba.core.ir.Assign object at 0x000001F696D6C7D0>],
             'bool336': [<numba.core.ir.Assign object at 0x000001F696D6CFD0>],
             'bool60': [<numba.core.ir.Assign object at 0x000001F697696D10>],
             'bool82': [<numba.core.ir.Assign object at 0x000001F697697C90>],
             'exp': [<numba.core.ir.Assign object at 0x000001F697697410>,
                     <numba.core.ir.Assign object at 0x000001F69669FB50>,
                     <numba.core.ir.Assign object at 0x000001F69669DED0>],
             'invert': [<numba.core.ir.Assign object at 0x000001F697696F50>,
                        <numba.core.ir.Assign object at 0x000001F69669E590>],
             'r': [<numba.core.ir.Assign object at 0x000001F6977C0C90>,
                   <numba.core.ir.Assign object at 0x000001F6970115D0>]})
2023-08-13 11:42:47,166 SSA violators {'invert', 'exp', '$phi350.0', 'a.1', 'r'}
2023-08-13 11:42:47,166 Fix SSA violator on var invert
2023-08-13 11:42:47,166 ==== SSA block rewrite pass on 0
2023-08-13 11:42:47,166 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6976196D0>
2023-08-13 11:42:47,166 on stmt: a = arg(0, name=a)
2023-08-13 11:42:47,166 on stmt: b = arg(1, name=b)
2023-08-13 11:42:47,166 on stmt: $8load_deref.1 = freevar(tp: float32)
2023-08-13 11:42:47,166 on stmt: $const10.2 = const(int, 1)
2023-08-13 11:42:47,166 on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,166 on stmt: $30load_deref.5 = freevar(tp: float32)
2023-08-13 11:42:47,166 on stmt: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,166 on stmt: $const52.9 = const(int, 0)
2023-08-13 11:42:47,166 on stmt: $54compare_op.10 = b < $const52.9
2023-08-13 11:42:47,166 on stmt: bool60 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,166 on stmt: $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,166 on stmt: branch $60pred, 62, 182
2023-08-13 11:42:47,167 ==== SSA block rewrite pass on 62
2023-08-13 11:42:47,167 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6976196D0>
2023-08-13 11:42:47,167 on stmt: invert = const(bool, True)
2023-08-13 11:42:47,167 first assign: invert
2023-08-13 11:42:47,167 replaced with: invert = const(bool, True)
2023-08-13 11:42:47,167 on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-08-13 11:42:47,167 on stmt: $const74.4 = const(int, 0)
2023-08-13 11:42:47,167 on stmt: $76compare_op.5 = exp < $const74.4
2023-08-13 11:42:47,167 on stmt: bool82 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,167 on stmt: $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,167 on stmt: branch $82pred, 84, 98
2023-08-13 11:42:47,167 ==== SSA block rewrite pass on 84
2023-08-13 11:42:47,167 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6976196D0>
2023-08-13 11:42:47,167 on stmt: $84load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-08-13 11:42:47,167 on stmt: <static> raise <class 'OverflowError'>
2023-08-13 11:42:47,167 ==== SSA block rewrite pass on 98
2023-08-13 11:42:47,167 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6976196D0>
2023-08-13 11:42:47,167 on stmt: $98load_deref.0 = freevar(is_integer: False)
2023-08-13 11:42:47,167 on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,167 on stmt: $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,168 on stmt: jump 180
2023-08-13 11:42:47,168 ==== SSA block rewrite pass on 180
2023-08-13 11:42:47,168 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6976196D0>
2023-08-13 11:42:47,168 on stmt: jump 190
2023-08-13 11:42:47,168 ==== SSA block rewrite pass on 182
2023-08-13 11:42:47,168 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6976196D0>
2023-08-13 11:42:47,168 on stmt: invert = const(bool, False)
2023-08-13 11:42:47,168 replaced with: invert.1 = const(bool, False)
2023-08-13 11:42:47,168 on stmt: exp = b
2023-08-13 11:42:47,168 on stmt: jump 190
2023-08-13 11:42:47,168 ==== SSA block rewrite pass on 190
2023-08-13 11:42:47,168 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6976196D0>
2023-08-13 11:42:47,168 on stmt: $const192.1 = const(int, 65536)
2023-08-13 11:42:47,168 on stmt: $194compare_op.2 = exp > $const192.1
2023-08-13 11:42:47,168 on stmt: bool200 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,168 on stmt: $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,168 on stmt: branch $200pred, 202, 270
2023-08-13 11:42:47,168 ==== SSA block rewrite pass on 202
2023-08-13 11:42:47,168 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6976196D0>
2023-08-13 11:42:47,168 on stmt: $202load_global.0 = global(math: <module 'math' (built-in)>)
2023-08-13 11:42:47,168 on stmt: $214load_attr.2 = getattr(value=$202load_global.0, attr=pow)
2023-08-13 11:42:47,169 on stmt: $226load_global.4 = global(float: <class 'float'>)
2023-08-13 11:42:47,169 on stmt: $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,169 on stmt: $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,169 on stmt: $268return_value.9 = cast(value=$258call.8)
2023-08-13 11:42:47,169 on stmt: return $268return_value.9
2023-08-13 11:42:47,169 ==== SSA block rewrite pass on 270
2023-08-13 11:42:47,169 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6976196D0>
2023-08-13 11:42:47,169 on stmt: $const272.1 = const(int, 0)
2023-08-13 11:42:47,169 on stmt: $274compare_op.2 = exp != $const272.1
2023-08-13 11:42:47,169 on stmt: bool280 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,169 on stmt: $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,169 on stmt: branch $280pred, 282, 334
2023-08-13 11:42:47,169 ==== SSA block rewrite pass on 282
2023-08-13 11:42:47,169 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6976196D0>
2023-08-13 11:42:47,169 on stmt: $const284.1 = const(int, 1)
2023-08-13 11:42:47,169 on stmt: $binop_and_286.2 = exp & $const284.1
2023-08-13 11:42:47,169 on stmt: bool290 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,169 on stmt: $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,170 on stmt: branch $290pred, 292, 302
2023-08-13 11:42:47,170 ==== SSA block rewrite pass on 292
2023-08-13 11:42:47,170 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6976196D0>
2023-08-13 11:42:47,170 on stmt: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,170 on stmt: r = $binop_imul296.2
2023-08-13 11:42:47,170 on stmt: jump 302
2023-08-13 11:42:47,170 ==== SSA block rewrite pass on 302
2023-08-13 11:42:47,170 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6976196D0>
2023-08-13 11:42:47,170 on stmt: $const304.1 = const(int, 1)
2023-08-13 11:42:47,170 on stmt: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,170 on stmt: exp = $binop_irshift306.2
2023-08-13 11:42:47,170 on stmt: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,170 on stmt: a.1 = $binop_imul316.5
2023-08-13 11:42:47,170 on stmt: $const324.7 = const(int, 0)
2023-08-13 11:42:47,170 on stmt: $326compare_op.8 = exp != $const324.7
2023-08-13 11:42:47,170 on stmt: bool332 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,170 on stmt: $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,170 on stmt: branch $332pred, 282, 334
2023-08-13 11:42:47,170 ==== SSA block rewrite pass on 334
2023-08-13 11:42:47,171 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6976196D0>
2023-08-13 11:42:47,171 on stmt: bool336 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,171 on stmt: $336pred = call bool336(invert, func=bool336, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,171 on stmt: branch $336pred, 338, 348
2023-08-13 11:42:47,171 ==== SSA block rewrite pass on 338
2023-08-13 11:42:47,171 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6976196D0>
2023-08-13 11:42:47,171 on stmt: $const338.0 = const(float, 1.0)
2023-08-13 11:42:47,171 on stmt: $binop_truediv342.2 = $const338.0 / r
2023-08-13 11:42:47,171 on stmt: $phi350.0 = $binop_truediv342.2
2023-08-13 11:42:47,171 on stmt: jump 350
2023-08-13 11:42:47,171 ==== SSA block rewrite pass on 348
2023-08-13 11:42:47,171 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6976196D0>
2023-08-13 11:42:47,171 on stmt: $phi350.0 = r
2023-08-13 11:42:47,171 on stmt: jump 350
2023-08-13 11:42:47,171 ==== SSA block rewrite pass on 350
2023-08-13 11:42:47,171 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6976196D0>
2023-08-13 11:42:47,171 on stmt: $350return_value.1 = cast(value=$phi350.0)
2023-08-13 11:42:47,171 on stmt: return $350return_value.1
2023-08-13 11:42:47,171 Replaced assignments: defaultdict(<class 'list'>,
            {62: [<numba.core.ir.Assign object at 0x000001F6977C22D0>],
             182: [<numba.core.ir.Assign object at 0x000001F6977C0E10>]})
2023-08-13 11:42:47,172 ==== SSA block rewrite pass on 0
2023-08-13 11:42:47,172 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977C11D0>
2023-08-13 11:42:47,172 on stmt: a = arg(0, name=a)
2023-08-13 11:42:47,172 on stmt: b = arg(1, name=b)
2023-08-13 11:42:47,172 on stmt: $8load_deref.1 = freevar(tp: float32)
2023-08-13 11:42:47,172 on stmt: $const10.2 = const(int, 1)
2023-08-13 11:42:47,172 on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,172 on stmt: $30load_deref.5 = freevar(tp: float32)
2023-08-13 11:42:47,172 on stmt: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,172 on stmt: $const52.9 = const(int, 0)
2023-08-13 11:42:47,172 on stmt: $54compare_op.10 = b < $const52.9
2023-08-13 11:42:47,172 on stmt: bool60 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,172 on stmt: $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,172 on stmt: branch $60pred, 62, 182
2023-08-13 11:42:47,172 ==== SSA block rewrite pass on 62
2023-08-13 11:42:47,172 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977C11D0>
2023-08-13 11:42:47,172 on stmt: invert = const(bool, True)
2023-08-13 11:42:47,172 on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-08-13 11:42:47,173 on stmt: $const74.4 = const(int, 0)
2023-08-13 11:42:47,173 on stmt: $76compare_op.5 = exp < $const74.4
2023-08-13 11:42:47,173 on stmt: bool82 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,173 on stmt: $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,173 on stmt: branch $82pred, 84, 98
2023-08-13 11:42:47,173 ==== SSA block rewrite pass on 84
2023-08-13 11:42:47,173 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977C11D0>
2023-08-13 11:42:47,173 on stmt: $84load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-08-13 11:42:47,173 on stmt: <static> raise <class 'OverflowError'>
2023-08-13 11:42:47,173 ==== SSA block rewrite pass on 98
2023-08-13 11:42:47,173 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977C11D0>
2023-08-13 11:42:47,173 on stmt: $98load_deref.0 = freevar(is_integer: False)
2023-08-13 11:42:47,173 on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,173 on stmt: $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,173 on stmt: jump 180
2023-08-13 11:42:47,173 ==== SSA block rewrite pass on 180
2023-08-13 11:42:47,173 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977C11D0>
2023-08-13 11:42:47,173 on stmt: jump 190
2023-08-13 11:42:47,173 ==== SSA block rewrite pass on 182
2023-08-13 11:42:47,174 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977C11D0>
2023-08-13 11:42:47,174 on stmt: invert.1 = const(bool, False)
2023-08-13 11:42:47,174 on stmt: exp = b
2023-08-13 11:42:47,174 on stmt: jump 190
2023-08-13 11:42:47,174 ==== SSA block rewrite pass on 190
2023-08-13 11:42:47,174 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977C11D0>
2023-08-13 11:42:47,174 on stmt: $const192.1 = const(int, 65536)
2023-08-13 11:42:47,174 on stmt: $194compare_op.2 = exp > $const192.1
2023-08-13 11:42:47,174 on stmt: bool200 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,174 on stmt: $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,174 on stmt: branch $200pred, 202, 270
2023-08-13 11:42:47,174 ==== SSA block rewrite pass on 202
2023-08-13 11:42:47,174 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977C11D0>
2023-08-13 11:42:47,174 on stmt: $202load_global.0 = global(math: <module 'math' (built-in)>)
2023-08-13 11:42:47,174 on stmt: $214load_attr.2 = getattr(value=$202load_global.0, attr=pow)
2023-08-13 11:42:47,174 on stmt: $226load_global.4 = global(float: <class 'float'>)
2023-08-13 11:42:47,174 on stmt: $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,174 on stmt: $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,175 on stmt: $268return_value.9 = cast(value=$258call.8)
2023-08-13 11:42:47,175 on stmt: return $268return_value.9
2023-08-13 11:42:47,175 ==== SSA block rewrite pass on 270
2023-08-13 11:42:47,175 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977C11D0>
2023-08-13 11:42:47,175 on stmt: $const272.1 = const(int, 0)
2023-08-13 11:42:47,175 on stmt: $274compare_op.2 = exp != $const272.1
2023-08-13 11:42:47,175 on stmt: bool280 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,175 on stmt: $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,175 on stmt: branch $280pred, 282, 334
2023-08-13 11:42:47,175 ==== SSA block rewrite pass on 282
2023-08-13 11:42:47,175 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977C11D0>
2023-08-13 11:42:47,175 on stmt: $const284.1 = const(int, 1)
2023-08-13 11:42:47,175 on stmt: $binop_and_286.2 = exp & $const284.1
2023-08-13 11:42:47,175 on stmt: bool290 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,175 on stmt: $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,175 on stmt: branch $290pred, 292, 302
2023-08-13 11:42:47,175 ==== SSA block rewrite pass on 292
2023-08-13 11:42:47,175 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977C11D0>
2023-08-13 11:42:47,175 on stmt: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,176 on stmt: r = $binop_imul296.2
2023-08-13 11:42:47,176 on stmt: jump 302
2023-08-13 11:42:47,176 ==== SSA block rewrite pass on 302
2023-08-13 11:42:47,176 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977C11D0>
2023-08-13 11:42:47,176 on stmt: $const304.1 = const(int, 1)
2023-08-13 11:42:47,176 on stmt: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,176 on stmt: exp = $binop_irshift306.2
2023-08-13 11:42:47,176 on stmt: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,176 on stmt: a.1 = $binop_imul316.5
2023-08-13 11:42:47,176 on stmt: $const324.7 = const(int, 0)
2023-08-13 11:42:47,176 on stmt: $326compare_op.8 = exp != $const324.7
2023-08-13 11:42:47,176 on stmt: bool332 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,176 on stmt: $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,177 on stmt: branch $332pred, 282, 334
2023-08-13 11:42:47,177 ==== SSA block rewrite pass on 334
2023-08-13 11:42:47,177 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977C11D0>
2023-08-13 11:42:47,177 on stmt: bool336 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,177 on stmt: $336pred = call bool336(invert, func=bool336, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,177 find_def var='invert' stmt=$336pred = call bool336(invert, func=bool336, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,177 find_def_from_top label 334
2023-08-13 11:42:47,177 idom 270 from label 334
2023-08-13 11:42:47,177 find_def_from_bottom label 270
2023-08-13 11:42:47,177 find_def_from_top label 270
2023-08-13 11:42:47,177 idom 190 from label 270
2023-08-13 11:42:47,178 find_def_from_bottom label 190
2023-08-13 11:42:47,178 find_def_from_top label 190
2023-08-13 11:42:47,178 insert phi node invert.2 = phi(incoming_values=[], incoming_blocks=[]) at 190
2023-08-13 11:42:47,178 find_def_from_bottom label 180
2023-08-13 11:42:47,178 find_def_from_top label 180
2023-08-13 11:42:47,178 idom 98 from label 180
2023-08-13 11:42:47,178 find_def_from_bottom label 98
2023-08-13 11:42:47,178 find_def_from_top label 98
2023-08-13 11:42:47,178 idom 62 from label 98
2023-08-13 11:42:47,178 find_def_from_bottom label 62
2023-08-13 11:42:47,178 incoming_def invert = const(bool, True)
2023-08-13 11:42:47,178 find_def_from_bottom label 182
2023-08-13 11:42:47,178 incoming_def invert.1 = const(bool, False)
2023-08-13 11:42:47,178 replaced with: $336pred = call bool336(invert.2, func=bool336, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,178 on stmt: branch $336pred, 338, 348
2023-08-13 11:42:47,178 ==== SSA block rewrite pass on 338
2023-08-13 11:42:47,178 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977C11D0>
2023-08-13 11:42:47,178 on stmt: $const338.0 = const(float, 1.0)
2023-08-13 11:42:47,179 on stmt: $binop_truediv342.2 = $const338.0 / r
2023-08-13 11:42:47,179 on stmt: $phi350.0 = $binop_truediv342.2
2023-08-13 11:42:47,179 on stmt: jump 350
2023-08-13 11:42:47,179 ==== SSA block rewrite pass on 348
2023-08-13 11:42:47,179 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977C11D0>
2023-08-13 11:42:47,179 on stmt: $phi350.0 = r
2023-08-13 11:42:47,179 on stmt: jump 350
2023-08-13 11:42:47,179 ==== SSA block rewrite pass on 350
2023-08-13 11:42:47,179 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977C11D0>
2023-08-13 11:42:47,179 on stmt: $350return_value.1 = cast(value=$phi350.0)
2023-08-13 11:42:47,179 on stmt: return $350return_value.1
2023-08-13 11:42:47,179 Fix SSA violator on var exp
2023-08-13 11:42:47,179 ==== SSA block rewrite pass on 0
2023-08-13 11:42:47,179 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977C3B10>
2023-08-13 11:42:47,179 on stmt: a = arg(0, name=a)
2023-08-13 11:42:47,179 on stmt: b = arg(1, name=b)
2023-08-13 11:42:47,179 on stmt: $8load_deref.1 = freevar(tp: float32)
2023-08-13 11:42:47,179 on stmt: $const10.2 = const(int, 1)
2023-08-13 11:42:47,179 on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,179 on stmt: $30load_deref.5 = freevar(tp: float32)
2023-08-13 11:42:47,180 on stmt: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,180 on stmt: $const52.9 = const(int, 0)
2023-08-13 11:42:47,180 on stmt: $54compare_op.10 = b < $const52.9
2023-08-13 11:42:47,180 on stmt: bool60 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,180 on stmt: $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,180 on stmt: branch $60pred, 62, 182
2023-08-13 11:42:47,180 ==== SSA block rewrite pass on 62
2023-08-13 11:42:47,180 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977C3B10>
2023-08-13 11:42:47,180 on stmt: invert = const(bool, True)
2023-08-13 11:42:47,180 on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-08-13 11:42:47,180 first assign: exp
2023-08-13 11:42:47,180 replaced with: exp = unary(fn=<built-in function neg>, value=b)
2023-08-13 11:42:47,180 on stmt: $const74.4 = const(int, 0)
2023-08-13 11:42:47,180 on stmt: $76compare_op.5 = exp < $const74.4
2023-08-13 11:42:47,180 on stmt: bool82 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,180 on stmt: $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,180 on stmt: branch $82pred, 84, 98
2023-08-13 11:42:47,180 ==== SSA block rewrite pass on 84
2023-08-13 11:42:47,180 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977C3B10>
2023-08-13 11:42:47,181 on stmt: $84load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-08-13 11:42:47,181 on stmt: <static> raise <class 'OverflowError'>
2023-08-13 11:42:47,181 ==== SSA block rewrite pass on 98
2023-08-13 11:42:47,181 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977C3B10>
2023-08-13 11:42:47,181 on stmt: $98load_deref.0 = freevar(is_integer: False)
2023-08-13 11:42:47,181 on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,181 on stmt: $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,181 on stmt: jump 180
2023-08-13 11:42:47,181 ==== SSA block rewrite pass on 180
2023-08-13 11:42:47,181 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977C3B10>
2023-08-13 11:42:47,181 on stmt: jump 190
2023-08-13 11:42:47,181 ==== SSA block rewrite pass on 182
2023-08-13 11:42:47,182 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977C3B10>
2023-08-13 11:42:47,182 on stmt: invert.1 = const(bool, False)
2023-08-13 11:42:47,182 on stmt: exp = b
2023-08-13 11:42:47,182 replaced with: exp.1 = b
2023-08-13 11:42:47,182 on stmt: jump 190
2023-08-13 11:42:47,182 ==== SSA block rewrite pass on 190
2023-08-13 11:42:47,182 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977C3B10>
2023-08-13 11:42:47,182 on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:219), Var(invert.1, numbers.py:232)], incoming_blocks=[180, 182])
2023-08-13 11:42:47,182 on stmt: $const192.1 = const(int, 65536)
2023-08-13 11:42:47,182 on stmt: $194compare_op.2 = exp > $const192.1
2023-08-13 11:42:47,182 on stmt: bool200 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,182 on stmt: $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,183 on stmt: branch $200pred, 202, 270
2023-08-13 11:42:47,183 ==== SSA block rewrite pass on 202
2023-08-13 11:42:47,183 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977C3B10>
2023-08-13 11:42:47,183 on stmt: $202load_global.0 = global(math: <module 'math' (built-in)>)
2023-08-13 11:42:47,183 on stmt: $214load_attr.2 = getattr(value=$202load_global.0, attr=pow)
2023-08-13 11:42:47,183 on stmt: $226load_global.4 = global(float: <class 'float'>)
2023-08-13 11:42:47,183 on stmt: $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,183 on stmt: $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,183 on stmt: $268return_value.9 = cast(value=$258call.8)
2023-08-13 11:42:47,183 on stmt: return $268return_value.9
2023-08-13 11:42:47,183 ==== SSA block rewrite pass on 270
2023-08-13 11:42:47,183 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977C3B10>
2023-08-13 11:42:47,183 on stmt: $const272.1 = const(int, 0)
2023-08-13 11:42:47,183 on stmt: $274compare_op.2 = exp != $const272.1
2023-08-13 11:42:47,183 on stmt: bool280 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,183 on stmt: $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,183 on stmt: branch $280pred, 282, 334
2023-08-13 11:42:47,183 ==== SSA block rewrite pass on 282
2023-08-13 11:42:47,183 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977C3B10>
2023-08-13 11:42:47,183 on stmt: $const284.1 = const(int, 1)
2023-08-13 11:42:47,184 on stmt: $binop_and_286.2 = exp & $const284.1
2023-08-13 11:42:47,184 on stmt: bool290 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,184 on stmt: $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,184 on stmt: branch $290pred, 292, 302
2023-08-13 11:42:47,184 ==== SSA block rewrite pass on 292
2023-08-13 11:42:47,184 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977C3B10>
2023-08-13 11:42:47,184 on stmt: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,184 on stmt: r = $binop_imul296.2
2023-08-13 11:42:47,184 on stmt: jump 302
2023-08-13 11:42:47,184 ==== SSA block rewrite pass on 302
2023-08-13 11:42:47,184 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977C3B10>
2023-08-13 11:42:47,184 on stmt: $const304.1 = const(int, 1)
2023-08-13 11:42:47,184 on stmt: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,184 on stmt: exp = $binop_irshift306.2
2023-08-13 11:42:47,184 replaced with: exp.2 = $binop_irshift306.2
2023-08-13 11:42:47,184 on stmt: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,184 on stmt: a.1 = $binop_imul316.5
2023-08-13 11:42:47,185 on stmt: $const324.7 = const(int, 0)
2023-08-13 11:42:47,185 on stmt: $326compare_op.8 = exp != $const324.7
2023-08-13 11:42:47,185 on stmt: bool332 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,185 on stmt: $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,185 on stmt: branch $332pred, 282, 334
2023-08-13 11:42:47,185 ==== SSA block rewrite pass on 334
2023-08-13 11:42:47,185 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977C3B10>
2023-08-13 11:42:47,185 on stmt: bool336 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,185 on stmt: $336pred = call bool336(invert.2, func=bool336, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,185 on stmt: branch $336pred, 338, 348
2023-08-13 11:42:47,185 ==== SSA block rewrite pass on 338
2023-08-13 11:42:47,185 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977C3B10>
2023-08-13 11:42:47,185 on stmt: $const338.0 = const(float, 1.0)
2023-08-13 11:42:47,185 on stmt: $binop_truediv342.2 = $const338.0 / r
2023-08-13 11:42:47,185 on stmt: $phi350.0 = $binop_truediv342.2
2023-08-13 11:42:47,185 on stmt: jump 350
2023-08-13 11:42:47,185 ==== SSA block rewrite pass on 348
2023-08-13 11:42:47,185 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977C3B10>
2023-08-13 11:42:47,185 on stmt: $phi350.0 = r
2023-08-13 11:42:47,185 on stmt: jump 350
2023-08-13 11:42:47,185 ==== SSA block rewrite pass on 350
2023-08-13 11:42:47,185 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977C3B10>
2023-08-13 11:42:47,186 on stmt: $350return_value.1 = cast(value=$phi350.0)
2023-08-13 11:42:47,186 on stmt: return $350return_value.1
2023-08-13 11:42:47,186 Replaced assignments: defaultdict(<class 'list'>,
            {62: [<numba.core.ir.Assign object at 0x000001F6977C0210>],
             182: [<numba.core.ir.Assign object at 0x000001F6977C2E90>],
             302: [<numba.core.ir.Assign object at 0x000001F6977B5F90>]})
2023-08-13 11:42:47,186 ==== SSA block rewrite pass on 0
2023-08-13 11:42:47,186 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977C03D0>
2023-08-13 11:42:47,186 on stmt: a = arg(0, name=a)
2023-08-13 11:42:47,186 on stmt: b = arg(1, name=b)
2023-08-13 11:42:47,186 on stmt: $8load_deref.1 = freevar(tp: float32)
2023-08-13 11:42:47,186 on stmt: $const10.2 = const(int, 1)
2023-08-13 11:42:47,186 on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,186 on stmt: $30load_deref.5 = freevar(tp: float32)
2023-08-13 11:42:47,186 on stmt: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,186 on stmt: $const52.9 = const(int, 0)
2023-08-13 11:42:47,186 on stmt: $54compare_op.10 = b < $const52.9
2023-08-13 11:42:47,186 on stmt: bool60 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,186 on stmt: $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,186 on stmt: branch $60pred, 62, 182
2023-08-13 11:42:47,186 ==== SSA block rewrite pass on 62
2023-08-13 11:42:47,187 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977C03D0>
2023-08-13 11:42:47,187 on stmt: invert = const(bool, True)
2023-08-13 11:42:47,187 on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-08-13 11:42:47,187 on stmt: $const74.4 = const(int, 0)
2023-08-13 11:42:47,187 on stmt: $76compare_op.5 = exp < $const74.4
2023-08-13 11:42:47,187 find_def var='exp' stmt=$76compare_op.5 = exp < $const74.4
2023-08-13 11:42:47,187 on stmt: bool82 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,187 on stmt: $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,187 on stmt: branch $82pred, 84, 98
2023-08-13 11:42:47,187 ==== SSA block rewrite pass on 84
2023-08-13 11:42:47,187 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977C03D0>
2023-08-13 11:42:47,187 on stmt: $84load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-08-13 11:42:47,187 on stmt: <static> raise <class 'OverflowError'>
2023-08-13 11:42:47,187 ==== SSA block rewrite pass on 98
2023-08-13 11:42:47,187 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977C03D0>
2023-08-13 11:42:47,187 on stmt: $98load_deref.0 = freevar(is_integer: False)
2023-08-13 11:42:47,188 on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,188 on stmt: $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,188 on stmt: jump 180
2023-08-13 11:42:47,188 ==== SSA block rewrite pass on 180
2023-08-13 11:42:47,188 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977C03D0>
2023-08-13 11:42:47,188 on stmt: jump 190
2023-08-13 11:42:47,188 ==== SSA block rewrite pass on 182
2023-08-13 11:42:47,188 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977C03D0>
2023-08-13 11:42:47,188 on stmt: invert.1 = const(bool, False)
2023-08-13 11:42:47,188 on stmt: exp.1 = b
2023-08-13 11:42:47,188 on stmt: jump 190
2023-08-13 11:42:47,188 ==== SSA block rewrite pass on 190
2023-08-13 11:42:47,188 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977C03D0>
2023-08-13 11:42:47,188 on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:219), Var(invert.1, numbers.py:232)], incoming_blocks=[180, 182])
2023-08-13 11:42:47,188 on stmt: $const192.1 = const(int, 65536)
2023-08-13 11:42:47,188 on stmt: $194compare_op.2 = exp > $const192.1
2023-08-13 11:42:47,188 find_def var='exp' stmt=$194compare_op.2 = exp > $const192.1
2023-08-13 11:42:47,188 find_def_from_top label 190
2023-08-13 11:42:47,188 insert phi node exp.3 = phi(incoming_values=[], incoming_blocks=[]) at 190
2023-08-13 11:42:47,188 find_def_from_bottom label 180
2023-08-13 11:42:47,189 find_def_from_top label 180
2023-08-13 11:42:47,189 idom 98 from label 180
2023-08-13 11:42:47,189 find_def_from_bottom label 98
2023-08-13 11:42:47,189 find_def_from_top label 98
2023-08-13 11:42:47,189 idom 62 from label 98
2023-08-13 11:42:47,189 find_def_from_bottom label 62
2023-08-13 11:42:47,189 incoming_def exp = unary(fn=<built-in function neg>, value=b)
2023-08-13 11:42:47,189 find_def_from_bottom label 182
2023-08-13 11:42:47,189 incoming_def exp.1 = b
2023-08-13 11:42:47,189 replaced with: $194compare_op.2 = exp.3 > $const192.1
2023-08-13 11:42:47,189 on stmt: bool200 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,189 on stmt: $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,189 on stmt: branch $200pred, 202, 270
2023-08-13 11:42:47,189 ==== SSA block rewrite pass on 202
2023-08-13 11:42:47,189 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977C03D0>
2023-08-13 11:42:47,189 on stmt: $202load_global.0 = global(math: <module 'math' (built-in)>)
2023-08-13 11:42:47,189 on stmt: $214load_attr.2 = getattr(value=$202load_global.0, attr=pow)
2023-08-13 11:42:47,189 on stmt: $226load_global.4 = global(float: <class 'float'>)
2023-08-13 11:42:47,189 on stmt: $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,190 on stmt: $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,190 on stmt: $268return_value.9 = cast(value=$258call.8)
2023-08-13 11:42:47,190 on stmt: return $268return_value.9
2023-08-13 11:42:47,190 ==== SSA block rewrite pass on 270
2023-08-13 11:42:47,190 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977C03D0>
2023-08-13 11:42:47,190 on stmt: $const272.1 = const(int, 0)
2023-08-13 11:42:47,190 on stmt: $274compare_op.2 = exp != $const272.1
2023-08-13 11:42:47,190 find_def var='exp' stmt=$274compare_op.2 = exp != $const272.1
2023-08-13 11:42:47,190 find_def_from_top label 270
2023-08-13 11:42:47,190 idom 190 from label 270
2023-08-13 11:42:47,190 find_def_from_bottom label 190
2023-08-13 11:42:47,190 replaced with: $274compare_op.2 = exp.3 != $const272.1
2023-08-13 11:42:47,190 on stmt: bool280 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,190 on stmt: $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,190 on stmt: branch $280pred, 282, 334
2023-08-13 11:42:47,190 ==== SSA block rewrite pass on 282
2023-08-13 11:42:47,190 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977C03D0>
2023-08-13 11:42:47,190 on stmt: $const284.1 = const(int, 1)
2023-08-13 11:42:47,190 on stmt: $binop_and_286.2 = exp & $const284.1
2023-08-13 11:42:47,191 find_def var='exp' stmt=$binop_and_286.2 = exp & $const284.1
2023-08-13 11:42:47,191 find_def_from_top label 282
2023-08-13 11:42:47,191 insert phi node exp.4 = phi(incoming_values=[], incoming_blocks=[]) at 282
2023-08-13 11:42:47,191 find_def_from_bottom label 302
2023-08-13 11:42:47,191 incoming_def exp.2 = $binop_irshift306.2
2023-08-13 11:42:47,191 find_def_from_bottom label 270
2023-08-13 11:42:47,191 find_def_from_top label 270
2023-08-13 11:42:47,191 idom 190 from label 270
2023-08-13 11:42:47,191 find_def_from_bottom label 190
2023-08-13 11:42:47,191 incoming_def exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[180, 182])
2023-08-13 11:42:47,191 replaced with: $binop_and_286.2 = exp.4 & $const284.1
2023-08-13 11:42:47,191 on stmt: bool290 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,191 on stmt: $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,191 on stmt: branch $290pred, 292, 302
2023-08-13 11:42:47,191 ==== SSA block rewrite pass on 292
2023-08-13 11:42:47,191 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977C03D0>
2023-08-13 11:42:47,191 on stmt: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,191 on stmt: r = $binop_imul296.2
2023-08-13 11:42:47,191 on stmt: jump 302
2023-08-13 11:42:47,191 ==== SSA block rewrite pass on 302
2023-08-13 11:42:47,192 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977C03D0>
2023-08-13 11:42:47,192 on stmt: $const304.1 = const(int, 1)
2023-08-13 11:42:47,192 on stmt: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,192 find_def var='exp' stmt=$binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,192 find_def_from_top label 302
2023-08-13 11:42:47,192 idom 282 from label 302
2023-08-13 11:42:47,192 find_def_from_bottom label 282
2023-08-13 11:42:47,192 replaced with: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,192 on stmt: exp.2 = $binop_irshift306.2
2023-08-13 11:42:47,192 on stmt: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,192 on stmt: a.1 = $binop_imul316.5
2023-08-13 11:42:47,192 on stmt: $const324.7 = const(int, 0)
2023-08-13 11:42:47,192 on stmt: $326compare_op.8 = exp != $const324.7
2023-08-13 11:42:47,192 find_def var='exp' stmt=$326compare_op.8 = exp != $const324.7
2023-08-13 11:42:47,192 replaced with: $326compare_op.8 = exp.2 != $const324.7
2023-08-13 11:42:47,192 on stmt: bool332 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,192 on stmt: $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,192 on stmt: branch $332pred, 282, 334
2023-08-13 11:42:47,193 ==== SSA block rewrite pass on 334
2023-08-13 11:42:47,193 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977C03D0>
2023-08-13 11:42:47,193 on stmt: bool336 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,193 on stmt: $336pred = call bool336(invert.2, func=bool336, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,193 on stmt: branch $336pred, 338, 348
2023-08-13 11:42:47,193 ==== SSA block rewrite pass on 338
2023-08-13 11:42:47,193 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977C03D0>
2023-08-13 11:42:47,193 on stmt: $const338.0 = const(float, 1.0)
2023-08-13 11:42:47,193 on stmt: $binop_truediv342.2 = $const338.0 / r
2023-08-13 11:42:47,193 on stmt: $phi350.0 = $binop_truediv342.2
2023-08-13 11:42:47,193 on stmt: jump 350
2023-08-13 11:42:47,193 ==== SSA block rewrite pass on 348
2023-08-13 11:42:47,193 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977C03D0>
2023-08-13 11:42:47,193 on stmt: $phi350.0 = r
2023-08-13 11:42:47,194 on stmt: jump 350
2023-08-13 11:42:47,194 ==== SSA block rewrite pass on 350
2023-08-13 11:42:47,194 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977C03D0>
2023-08-13 11:42:47,194 on stmt: $350return_value.1 = cast(value=$phi350.0)
2023-08-13 11:42:47,194 on stmt: return $350return_value.1
2023-08-13 11:42:47,194 Fix SSA violator on var $phi350.0
2023-08-13 11:42:47,194 ==== SSA block rewrite pass on 0
2023-08-13 11:42:47,194 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977C02D0>
2023-08-13 11:42:47,194 on stmt: a = arg(0, name=a)
2023-08-13 11:42:47,194 on stmt: b = arg(1, name=b)
2023-08-13 11:42:47,194 on stmt: $8load_deref.1 = freevar(tp: float32)
2023-08-13 11:42:47,195 on stmt: $const10.2 = const(int, 1)
2023-08-13 11:42:47,195 on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,195 on stmt: $30load_deref.5 = freevar(tp: float32)
2023-08-13 11:42:47,195 on stmt: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,195 on stmt: $const52.9 = const(int, 0)
2023-08-13 11:42:47,195 on stmt: $54compare_op.10 = b < $const52.9
2023-08-13 11:42:47,195 on stmt: bool60 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,195 on stmt: $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,195 on stmt: branch $60pred, 62, 182
2023-08-13 11:42:47,195 ==== SSA block rewrite pass on 62
2023-08-13 11:42:47,195 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977C02D0>
2023-08-13 11:42:47,196 on stmt: invert = const(bool, True)
2023-08-13 11:42:47,196 on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-08-13 11:42:47,196 on stmt: $const74.4 = const(int, 0)
2023-08-13 11:42:47,196 on stmt: $76compare_op.5 = exp < $const74.4
2023-08-13 11:42:47,196 on stmt: bool82 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,196 on stmt: $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,196 on stmt: branch $82pred, 84, 98
2023-08-13 11:42:47,196 ==== SSA block rewrite pass on 84
2023-08-13 11:42:47,196 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977C02D0>
2023-08-13 11:42:47,196 on stmt: $84load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-08-13 11:42:47,196 on stmt: <static> raise <class 'OverflowError'>
2023-08-13 11:42:47,196 ==== SSA block rewrite pass on 98
2023-08-13 11:42:47,197 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977C02D0>
2023-08-13 11:42:47,197 on stmt: $98load_deref.0 = freevar(is_integer: False)
2023-08-13 11:42:47,197 on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,197 on stmt: $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,197 on stmt: jump 180
2023-08-13 11:42:47,197 ==== SSA block rewrite pass on 180
2023-08-13 11:42:47,197 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977C02D0>
2023-08-13 11:42:47,197 on stmt: jump 190
2023-08-13 11:42:47,197 ==== SSA block rewrite pass on 182
2023-08-13 11:42:47,197 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977C02D0>
2023-08-13 11:42:47,197 on stmt: invert.1 = const(bool, False)
2023-08-13 11:42:47,198 on stmt: exp.1 = b
2023-08-13 11:42:47,198 on stmt: jump 190
2023-08-13 11:42:47,198 ==== SSA block rewrite pass on 190
2023-08-13 11:42:47,198 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977C02D0>
2023-08-13 11:42:47,198 on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[180, 182])
2023-08-13 11:42:47,198 on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:219), Var(invert.1, numbers.py:232)], incoming_blocks=[180, 182])
2023-08-13 11:42:47,198 on stmt: $const192.1 = const(int, 65536)
2023-08-13 11:42:47,199 on stmt: $194compare_op.2 = exp.3 > $const192.1
2023-08-13 11:42:47,199 on stmt: bool200 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,199 on stmt: $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,199 on stmt: branch $200pred, 202, 270
2023-08-13 11:42:47,199 ==== SSA block rewrite pass on 202
2023-08-13 11:42:47,199 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977C02D0>
2023-08-13 11:42:47,199 on stmt: $202load_global.0 = global(math: <module 'math' (built-in)>)
2023-08-13 11:42:47,199 on stmt: $214load_attr.2 = getattr(value=$202load_global.0, attr=pow)
2023-08-13 11:42:47,199 on stmt: $226load_global.4 = global(float: <class 'float'>)
2023-08-13 11:42:47,200 on stmt: $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,200 on stmt: $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,200 on stmt: $268return_value.9 = cast(value=$258call.8)
2023-08-13 11:42:47,200 on stmt: return $268return_value.9
2023-08-13 11:42:47,200 ==== SSA block rewrite pass on 270
2023-08-13 11:42:47,200 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977C02D0>
2023-08-13 11:42:47,200 on stmt: $const272.1 = const(int, 0)
2023-08-13 11:42:47,200 on stmt: $274compare_op.2 = exp.3 != $const272.1
2023-08-13 11:42:47,200 on stmt: bool280 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,200 on stmt: $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,200 on stmt: branch $280pred, 282, 334
2023-08-13 11:42:47,200 ==== SSA block rewrite pass on 282
2023-08-13 11:42:47,200 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977C02D0>
2023-08-13 11:42:47,200 on stmt: exp.4 = phi(incoming_values=[Var(exp.2, numbers.py:240), Var(exp.3, numbers.py:234)], incoming_blocks=[302, 270])
2023-08-13 11:42:47,200 on stmt: $const284.1 = const(int, 1)
2023-08-13 11:42:47,200 on stmt: $binop_and_286.2 = exp.4 & $const284.1
2023-08-13 11:42:47,200 on stmt: bool290 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,200 on stmt: $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,201 on stmt: branch $290pred, 292, 302
2023-08-13 11:42:47,201 ==== SSA block rewrite pass on 292
2023-08-13 11:42:47,201 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977C02D0>
2023-08-13 11:42:47,201 on stmt: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,201 on stmt: r = $binop_imul296.2
2023-08-13 11:42:47,201 on stmt: jump 302
2023-08-13 11:42:47,201 ==== SSA block rewrite pass on 302
2023-08-13 11:42:47,201 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977C02D0>
2023-08-13 11:42:47,201 on stmt: $const304.1 = const(int, 1)
2023-08-13 11:42:47,201 on stmt: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,201 on stmt: exp.2 = $binop_irshift306.2
2023-08-13 11:42:47,201 on stmt: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,201 on stmt: a.1 = $binop_imul316.5
2023-08-13 11:42:47,201 on stmt: $const324.7 = const(int, 0)
2023-08-13 11:42:47,201 on stmt: $326compare_op.8 = exp.2 != $const324.7
2023-08-13 11:42:47,201 on stmt: bool332 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,201 on stmt: $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,201 on stmt: branch $332pred, 282, 334
2023-08-13 11:42:47,201 ==== SSA block rewrite pass on 334
2023-08-13 11:42:47,201 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977C02D0>
2023-08-13 11:42:47,201 on stmt: bool336 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,202 on stmt: $336pred = call bool336(invert.2, func=bool336, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,202 on stmt: branch $336pred, 338, 348
2023-08-13 11:42:47,202 ==== SSA block rewrite pass on 338
2023-08-13 11:42:47,202 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977C02D0>
2023-08-13 11:42:47,202 on stmt: $const338.0 = const(float, 1.0)
2023-08-13 11:42:47,202 on stmt: $binop_truediv342.2 = $const338.0 / r
2023-08-13 11:42:47,202 on stmt: $phi350.0 = $binop_truediv342.2
2023-08-13 11:42:47,202 first assign: $phi350.0
2023-08-13 11:42:47,202 replaced with: $phi350.0 = $binop_truediv342.2
2023-08-13 11:42:47,202 on stmt: jump 350
2023-08-13 11:42:47,202 ==== SSA block rewrite pass on 348
2023-08-13 11:42:47,202 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977C02D0>
2023-08-13 11:42:47,202 on stmt: $phi350.0 = r
2023-08-13 11:42:47,202 replaced with: $phi350.0.1 = r
2023-08-13 11:42:47,202 on stmt: jump 350
2023-08-13 11:42:47,202 ==== SSA block rewrite pass on 350
2023-08-13 11:42:47,202 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977C02D0>
2023-08-13 11:42:47,202 on stmt: $350return_value.1 = cast(value=$phi350.0)
2023-08-13 11:42:47,202 on stmt: return $350return_value.1
2023-08-13 11:42:47,202 Replaced assignments: defaultdict(<class 'list'>,
            {338: [<numba.core.ir.Assign object at 0x000001F6977B6D10>],
             348: [<numba.core.ir.Assign object at 0x000001F696CB72D0>]})
2023-08-13 11:42:47,203 ==== SSA block rewrite pass on 0
2023-08-13 11:42:47,203 Running <numba.core.ssa._FixSSAVars object at 0x000001F69669FBD0>
2023-08-13 11:42:47,203 on stmt: a = arg(0, name=a)
2023-08-13 11:42:47,203 on stmt: b = arg(1, name=b)
2023-08-13 11:42:47,203 on stmt: $8load_deref.1 = freevar(tp: float32)
2023-08-13 11:42:47,203 on stmt: $const10.2 = const(int, 1)
2023-08-13 11:42:47,203 on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,203 on stmt: $30load_deref.5 = freevar(tp: float32)
2023-08-13 11:42:47,203 on stmt: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,203 on stmt: $const52.9 = const(int, 0)
2023-08-13 11:42:47,203 on stmt: $54compare_op.10 = b < $const52.9
2023-08-13 11:42:47,203 on stmt: bool60 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,203 on stmt: $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,203 on stmt: branch $60pred, 62, 182
2023-08-13 11:42:47,203 ==== SSA block rewrite pass on 62
2023-08-13 11:42:47,203 Running <numba.core.ssa._FixSSAVars object at 0x000001F69669FBD0>
2023-08-13 11:42:47,204 on stmt: invert = const(bool, True)
2023-08-13 11:42:47,204 on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-08-13 11:42:47,204 on stmt: $const74.4 = const(int, 0)
2023-08-13 11:42:47,204 on stmt: $76compare_op.5 = exp < $const74.4
2023-08-13 11:42:47,204 on stmt: bool82 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,204 on stmt: $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,204 on stmt: branch $82pred, 84, 98
2023-08-13 11:42:47,204 ==== SSA block rewrite pass on 84
2023-08-13 11:42:47,204 Running <numba.core.ssa._FixSSAVars object at 0x000001F69669FBD0>
2023-08-13 11:42:47,204 on stmt: $84load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-08-13 11:42:47,204 on stmt: <static> raise <class 'OverflowError'>
2023-08-13 11:42:47,204 ==== SSA block rewrite pass on 98
2023-08-13 11:42:47,204 Running <numba.core.ssa._FixSSAVars object at 0x000001F69669FBD0>
2023-08-13 11:42:47,204 on stmt: $98load_deref.0 = freevar(is_integer: False)
2023-08-13 11:42:47,204 on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,204 on stmt: $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,204 on stmt: jump 180
2023-08-13 11:42:47,204 ==== SSA block rewrite pass on 180
2023-08-13 11:42:47,204 Running <numba.core.ssa._FixSSAVars object at 0x000001F69669FBD0>
2023-08-13 11:42:47,204 on stmt: jump 190
2023-08-13 11:42:47,205 ==== SSA block rewrite pass on 182
2023-08-13 11:42:47,205 Running <numba.core.ssa._FixSSAVars object at 0x000001F69669FBD0>
2023-08-13 11:42:47,205 on stmt: invert.1 = const(bool, False)
2023-08-13 11:42:47,205 on stmt: exp.1 = b
2023-08-13 11:42:47,205 on stmt: jump 190
2023-08-13 11:42:47,205 ==== SSA block rewrite pass on 190
2023-08-13 11:42:47,205 Running <numba.core.ssa._FixSSAVars object at 0x000001F69669FBD0>
2023-08-13 11:42:47,205 on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[180, 182])
2023-08-13 11:42:47,205 on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:219), Var(invert.1, numbers.py:232)], incoming_blocks=[180, 182])
2023-08-13 11:42:47,205 on stmt: $const192.1 = const(int, 65536)
2023-08-13 11:42:47,205 on stmt: $194compare_op.2 = exp.3 > $const192.1
2023-08-13 11:42:47,205 on stmt: bool200 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,205 on stmt: $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,205 on stmt: branch $200pred, 202, 270
2023-08-13 11:42:47,205 ==== SSA block rewrite pass on 202
2023-08-13 11:42:47,205 Running <numba.core.ssa._FixSSAVars object at 0x000001F69669FBD0>
2023-08-13 11:42:47,205 on stmt: $202load_global.0 = global(math: <module 'math' (built-in)>)
2023-08-13 11:42:47,205 on stmt: $214load_attr.2 = getattr(value=$202load_global.0, attr=pow)
2023-08-13 11:42:47,205 on stmt: $226load_global.4 = global(float: <class 'float'>)
2023-08-13 11:42:47,205 on stmt: $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,206 on stmt: $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,206 on stmt: $268return_value.9 = cast(value=$258call.8)
2023-08-13 11:42:47,206 on stmt: return $268return_value.9
2023-08-13 11:42:47,206 ==== SSA block rewrite pass on 270
2023-08-13 11:42:47,206 Running <numba.core.ssa._FixSSAVars object at 0x000001F69669FBD0>
2023-08-13 11:42:47,206 on stmt: $const272.1 = const(int, 0)
2023-08-13 11:42:47,206 on stmt: $274compare_op.2 = exp.3 != $const272.1
2023-08-13 11:42:47,206 on stmt: bool280 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,206 on stmt: $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,206 on stmt: branch $280pred, 282, 334
2023-08-13 11:42:47,206 ==== SSA block rewrite pass on 282
2023-08-13 11:42:47,206 Running <numba.core.ssa._FixSSAVars object at 0x000001F69669FBD0>
2023-08-13 11:42:47,206 on stmt: exp.4 = phi(incoming_values=[Var(exp.2, numbers.py:240), Var(exp.3, numbers.py:234)], incoming_blocks=[302, 270])
2023-08-13 11:42:47,206 on stmt: $const284.1 = const(int, 1)
2023-08-13 11:42:47,206 on stmt: $binop_and_286.2 = exp.4 & $const284.1
2023-08-13 11:42:47,206 on stmt: bool290 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,206 on stmt: $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,206 on stmt: branch $290pred, 292, 302
2023-08-13 11:42:47,206 ==== SSA block rewrite pass on 292
2023-08-13 11:42:47,207 Running <numba.core.ssa._FixSSAVars object at 0x000001F69669FBD0>
2023-08-13 11:42:47,207 on stmt: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,207 on stmt: r = $binop_imul296.2
2023-08-13 11:42:47,207 on stmt: jump 302
2023-08-13 11:42:47,207 ==== SSA block rewrite pass on 302
2023-08-13 11:42:47,207 Running <numba.core.ssa._FixSSAVars object at 0x000001F69669FBD0>
2023-08-13 11:42:47,207 on stmt: $const304.1 = const(int, 1)
2023-08-13 11:42:47,207 on stmt: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,207 on stmt: exp.2 = $binop_irshift306.2
2023-08-13 11:42:47,207 on stmt: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,207 on stmt: a.1 = $binop_imul316.5
2023-08-13 11:42:47,207 on stmt: $const324.7 = const(int, 0)
2023-08-13 11:42:47,207 on stmt: $326compare_op.8 = exp.2 != $const324.7
2023-08-13 11:42:47,207 on stmt: bool332 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,207 on stmt: $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,207 on stmt: branch $332pred, 282, 334
2023-08-13 11:42:47,207 ==== SSA block rewrite pass on 334
2023-08-13 11:42:47,207 Running <numba.core.ssa._FixSSAVars object at 0x000001F69669FBD0>
2023-08-13 11:42:47,207 on stmt: bool336 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,207 on stmt: $336pred = call bool336(invert.2, func=bool336, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,208 on stmt: branch $336pred, 338, 348
2023-08-13 11:42:47,208 ==== SSA block rewrite pass on 338
2023-08-13 11:42:47,208 Running <numba.core.ssa._FixSSAVars object at 0x000001F69669FBD0>
2023-08-13 11:42:47,208 on stmt: $const338.0 = const(float, 1.0)
2023-08-13 11:42:47,208 on stmt: $binop_truediv342.2 = $const338.0 / r
2023-08-13 11:42:47,208 on stmt: $phi350.0 = $binop_truediv342.2
2023-08-13 11:42:47,208 on stmt: jump 350
2023-08-13 11:42:47,208 ==== SSA block rewrite pass on 348
2023-08-13 11:42:47,208 Running <numba.core.ssa._FixSSAVars object at 0x000001F69669FBD0>
2023-08-13 11:42:47,208 on stmt: $phi350.0.1 = r
2023-08-13 11:42:47,208 on stmt: jump 350
2023-08-13 11:42:47,208 ==== SSA block rewrite pass on 350
2023-08-13 11:42:47,208 Running <numba.core.ssa._FixSSAVars object at 0x000001F69669FBD0>
2023-08-13 11:42:47,208 on stmt: $350return_value.1 = cast(value=$phi350.0)
2023-08-13 11:42:47,208 find_def var='$phi350.0' stmt=$350return_value.1 = cast(value=$phi350.0)
2023-08-13 11:42:47,208 find_def_from_top label 350
2023-08-13 11:42:47,208 insert phi node $phi350.0.2 = phi(incoming_values=[], incoming_blocks=[]) at 350
2023-08-13 11:42:47,208 find_def_from_bottom label 338
2023-08-13 11:42:47,208 incoming_def $phi350.0 = $binop_truediv342.2
2023-08-13 11:42:47,208 find_def_from_bottom label 348
2023-08-13 11:42:47,208 incoming_def $phi350.0.1 = r
2023-08-13 11:42:47,209 replaced with: $350return_value.1 = cast(value=$phi350.0.2)
2023-08-13 11:42:47,209 on stmt: return $350return_value.1
2023-08-13 11:42:47,209 Fix SSA violator on var a.1
2023-08-13 11:42:47,209 ==== SSA block rewrite pass on 0
2023-08-13 11:42:47,209 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977B4E10>
2023-08-13 11:42:47,209 on stmt: a = arg(0, name=a)
2023-08-13 11:42:47,209 on stmt: b = arg(1, name=b)
2023-08-13 11:42:47,209 on stmt: $8load_deref.1 = freevar(tp: float32)
2023-08-13 11:42:47,209 on stmt: $const10.2 = const(int, 1)
2023-08-13 11:42:47,209 on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,209 on stmt: $30load_deref.5 = freevar(tp: float32)
2023-08-13 11:42:47,209 on stmt: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,209 first assign: a.1
2023-08-13 11:42:47,209 replaced with: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,209 on stmt: $const52.9 = const(int, 0)
2023-08-13 11:42:47,209 on stmt: $54compare_op.10 = b < $const52.9
2023-08-13 11:42:47,209 on stmt: bool60 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,210 on stmt: $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,210 on stmt: branch $60pred, 62, 182
2023-08-13 11:42:47,210 ==== SSA block rewrite pass on 62
2023-08-13 11:42:47,210 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977B4E10>
2023-08-13 11:42:47,210 on stmt: invert = const(bool, True)
2023-08-13 11:42:47,210 on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-08-13 11:42:47,210 on stmt: $const74.4 = const(int, 0)
2023-08-13 11:42:47,210 on stmt: $76compare_op.5 = exp < $const74.4
2023-08-13 11:42:47,210 on stmt: bool82 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,210 on stmt: $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,210 on stmt: branch $82pred, 84, 98
2023-08-13 11:42:47,210 ==== SSA block rewrite pass on 84
2023-08-13 11:42:47,210 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977B4E10>
2023-08-13 11:42:47,210 on stmt: $84load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-08-13 11:42:47,210 on stmt: <static> raise <class 'OverflowError'>
2023-08-13 11:42:47,210 ==== SSA block rewrite pass on 98
2023-08-13 11:42:47,210 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977B4E10>
2023-08-13 11:42:47,211 on stmt: $98load_deref.0 = freevar(is_integer: False)
2023-08-13 11:42:47,211 on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,211 on stmt: $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,211 on stmt: jump 180
2023-08-13 11:42:47,211 ==== SSA block rewrite pass on 180
2023-08-13 11:42:47,211 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977B4E10>
2023-08-13 11:42:47,211 on stmt: jump 190
2023-08-13 11:42:47,211 ==== SSA block rewrite pass on 182
2023-08-13 11:42:47,211 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977B4E10>
2023-08-13 11:42:47,211 on stmt: invert.1 = const(bool, False)
2023-08-13 11:42:47,211 on stmt: exp.1 = b
2023-08-13 11:42:47,211 on stmt: jump 190
2023-08-13 11:42:47,211 ==== SSA block rewrite pass on 190
2023-08-13 11:42:47,211 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977B4E10>
2023-08-13 11:42:47,211 on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[180, 182])
2023-08-13 11:42:47,211 on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:219), Var(invert.1, numbers.py:232)], incoming_blocks=[180, 182])
2023-08-13 11:42:47,211 on stmt: $const192.1 = const(int, 65536)
2023-08-13 11:42:47,211 on stmt: $194compare_op.2 = exp.3 > $const192.1
2023-08-13 11:42:47,211 on stmt: bool200 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,211 on stmt: $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,211 on stmt: branch $200pred, 202, 270
2023-08-13 11:42:47,211 ==== SSA block rewrite pass on 202
2023-08-13 11:42:47,212 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977B4E10>
2023-08-13 11:42:47,212 on stmt: $202load_global.0 = global(math: <module 'math' (built-in)>)
2023-08-13 11:42:47,212 on stmt: $214load_attr.2 = getattr(value=$202load_global.0, attr=pow)
2023-08-13 11:42:47,212 on stmt: $226load_global.4 = global(float: <class 'float'>)
2023-08-13 11:42:47,212 on stmt: $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,212 on stmt: $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,212 on stmt: $268return_value.9 = cast(value=$258call.8)
2023-08-13 11:42:47,212 on stmt: return $268return_value.9
2023-08-13 11:42:47,212 ==== SSA block rewrite pass on 270
2023-08-13 11:42:47,212 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977B4E10>
2023-08-13 11:42:47,212 on stmt: $const272.1 = const(int, 0)
2023-08-13 11:42:47,212 on stmt: $274compare_op.2 = exp.3 != $const272.1
2023-08-13 11:42:47,212 on stmt: bool280 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,212 on stmt: $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,212 on stmt: branch $280pred, 282, 334
2023-08-13 11:42:47,212 ==== SSA block rewrite pass on 282
2023-08-13 11:42:47,212 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977B4E10>
2023-08-13 11:42:47,212 on stmt: exp.4 = phi(incoming_values=[Var(exp.2, numbers.py:240), Var(exp.3, numbers.py:234)], incoming_blocks=[302, 270])
2023-08-13 11:42:47,212 on stmt: $const284.1 = const(int, 1)
2023-08-13 11:42:47,212 on stmt: $binop_and_286.2 = exp.4 & $const284.1
2023-08-13 11:42:47,213 on stmt: bool290 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,213 on stmt: $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,213 on stmt: branch $290pred, 292, 302
2023-08-13 11:42:47,213 ==== SSA block rewrite pass on 292
2023-08-13 11:42:47,213 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977B4E10>
2023-08-13 11:42:47,213 on stmt: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,213 on stmt: r = $binop_imul296.2
2023-08-13 11:42:47,213 on stmt: jump 302
2023-08-13 11:42:47,213 ==== SSA block rewrite pass on 302
2023-08-13 11:42:47,213 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977B4E10>
2023-08-13 11:42:47,213 on stmt: $const304.1 = const(int, 1)
2023-08-13 11:42:47,213 on stmt: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,213 on stmt: exp.2 = $binop_irshift306.2
2023-08-13 11:42:47,213 on stmt: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,213 on stmt: a.1 = $binop_imul316.5
2023-08-13 11:42:47,213 replaced with: a.1.1 = $binop_imul316.5
2023-08-13 11:42:47,213 on stmt: $const324.7 = const(int, 0)
2023-08-13 11:42:47,213 on stmt: $326compare_op.8 = exp.2 != $const324.7
2023-08-13 11:42:47,213 on stmt: bool332 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,213 on stmt: $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,213 on stmt: branch $332pred, 282, 334
2023-08-13 11:42:47,213 ==== SSA block rewrite pass on 334
2023-08-13 11:42:47,213 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977B4E10>
2023-08-13 11:42:47,213 on stmt: bool336 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,213 on stmt: $336pred = call bool336(invert.2, func=bool336, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,213 on stmt: branch $336pred, 338, 348
2023-08-13 11:42:47,213 ==== SSA block rewrite pass on 338
2023-08-13 11:42:47,214 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977B4E10>
2023-08-13 11:42:47,214 on stmt: $const338.0 = const(float, 1.0)
2023-08-13 11:42:47,214 on stmt: $binop_truediv342.2 = $const338.0 / r
2023-08-13 11:42:47,214 on stmt: $phi350.0 = $binop_truediv342.2
2023-08-13 11:42:47,214 on stmt: jump 350
2023-08-13 11:42:47,214 ==== SSA block rewrite pass on 348
2023-08-13 11:42:47,214 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977B4E10>
2023-08-13 11:42:47,214 on stmt: $phi350.0.1 = r
2023-08-13 11:42:47,214 on stmt: jump 350
2023-08-13 11:42:47,214 ==== SSA block rewrite pass on 350
2023-08-13 11:42:47,214 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6977B4E10>
2023-08-13 11:42:47,214 on stmt: $phi350.0.2 = phi(incoming_values=[Var($phi350.0, numbers.py:243), Var($phi350.0.1, numbers.py:243)], incoming_blocks=[338, 348])
2023-08-13 11:42:47,214 on stmt: $350return_value.1 = cast(value=$phi350.0.2)
2023-08-13 11:42:47,215 on stmt: return $350return_value.1
2023-08-13 11:42:47,215 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001F6977B7ED0>],
             302: [<numba.core.ir.Assign object at 0x000001F696D6D5D0>]})
2023-08-13 11:42:47,215 ==== SSA block rewrite pass on 0
2023-08-13 11:42:47,215 Running <numba.core.ssa._FixSSAVars object at 0x000001F696CB78D0>
2023-08-13 11:42:47,215 on stmt: a = arg(0, name=a)
2023-08-13 11:42:47,215 on stmt: b = arg(1, name=b)
2023-08-13 11:42:47,215 on stmt: $8load_deref.1 = freevar(tp: float32)
2023-08-13 11:42:47,215 on stmt: $const10.2 = const(int, 1)
2023-08-13 11:42:47,215 on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,216 on stmt: $30load_deref.5 = freevar(tp: float32)
2023-08-13 11:42:47,216 on stmt: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,216 on stmt: $const52.9 = const(int, 0)
2023-08-13 11:42:47,216 on stmt: $54compare_op.10 = b < $const52.9
2023-08-13 11:42:47,216 on stmt: bool60 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,216 on stmt: $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,216 on stmt: branch $60pred, 62, 182
2023-08-13 11:42:47,216 ==== SSA block rewrite pass on 62
2023-08-13 11:42:47,216 Running <numba.core.ssa._FixSSAVars object at 0x000001F696CB78D0>
2023-08-13 11:42:47,216 on stmt: invert = const(bool, True)
2023-08-13 11:42:47,216 on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-08-13 11:42:47,216 on stmt: $const74.4 = const(int, 0)
2023-08-13 11:42:47,216 on stmt: $76compare_op.5 = exp < $const74.4
2023-08-13 11:42:47,216 on stmt: bool82 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,216 on stmt: $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,216 on stmt: branch $82pred, 84, 98
2023-08-13 11:42:47,216 ==== SSA block rewrite pass on 84
2023-08-13 11:42:47,216 Running <numba.core.ssa._FixSSAVars object at 0x000001F696CB78D0>
2023-08-13 11:42:47,216 on stmt: $84load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-08-13 11:42:47,217 on stmt: <static> raise <class 'OverflowError'>
2023-08-13 11:42:47,217 ==== SSA block rewrite pass on 98
2023-08-13 11:42:47,217 Running <numba.core.ssa._FixSSAVars object at 0x000001F696CB78D0>
2023-08-13 11:42:47,217 on stmt: $98load_deref.0 = freevar(is_integer: False)
2023-08-13 11:42:47,217 on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,217 on stmt: $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,217 on stmt: jump 180
2023-08-13 11:42:47,217 ==== SSA block rewrite pass on 180
2023-08-13 11:42:47,217 Running <numba.core.ssa._FixSSAVars object at 0x000001F696CB78D0>
2023-08-13 11:42:47,217 on stmt: jump 190
2023-08-13 11:42:47,217 ==== SSA block rewrite pass on 182
2023-08-13 11:42:47,217 Running <numba.core.ssa._FixSSAVars object at 0x000001F696CB78D0>
2023-08-13 11:42:47,217 on stmt: invert.1 = const(bool, False)
2023-08-13 11:42:47,217 on stmt: exp.1 = b
2023-08-13 11:42:47,217 on stmt: jump 190
2023-08-13 11:42:47,217 ==== SSA block rewrite pass on 190
2023-08-13 11:42:47,217 Running <numba.core.ssa._FixSSAVars object at 0x000001F696CB78D0>
2023-08-13 11:42:47,217 on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[180, 182])
2023-08-13 11:42:47,217 on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:219), Var(invert.1, numbers.py:232)], incoming_blocks=[180, 182])
2023-08-13 11:42:47,217 on stmt: $const192.1 = const(int, 65536)
2023-08-13 11:42:47,217 on stmt: $194compare_op.2 = exp.3 > $const192.1
2023-08-13 11:42:47,217 on stmt: bool200 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,218 on stmt: $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,218 on stmt: branch $200pred, 202, 270
2023-08-13 11:42:47,218 ==== SSA block rewrite pass on 202
2023-08-13 11:42:47,218 Running <numba.core.ssa._FixSSAVars object at 0x000001F696CB78D0>
2023-08-13 11:42:47,218 on stmt: $202load_global.0 = global(math: <module 'math' (built-in)>)
2023-08-13 11:42:47,218 on stmt: $214load_attr.2 = getattr(value=$202load_global.0, attr=pow)
2023-08-13 11:42:47,218 on stmt: $226load_global.4 = global(float: <class 'float'>)
2023-08-13 11:42:47,218 on stmt: $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,218 on stmt: $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,218 find_def var='a.1' stmt=$258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,218 find_def_from_top label 202
2023-08-13 11:42:47,218 idom 190 from label 202
2023-08-13 11:42:47,218 find_def_from_bottom label 190
2023-08-13 11:42:47,218 find_def_from_top label 190
2023-08-13 11:42:47,218 idom 0 from label 190
2023-08-13 11:42:47,218 find_def_from_bottom label 0
2023-08-13 11:42:47,218 on stmt: $268return_value.9 = cast(value=$258call.8)
2023-08-13 11:42:47,218 on stmt: return $268return_value.9
2023-08-13 11:42:47,218 ==== SSA block rewrite pass on 270
2023-08-13 11:42:47,219 Running <numba.core.ssa._FixSSAVars object at 0x000001F696CB78D0>
2023-08-13 11:42:47,219 on stmt: $const272.1 = const(int, 0)
2023-08-13 11:42:47,219 on stmt: $274compare_op.2 = exp.3 != $const272.1
2023-08-13 11:42:47,219 on stmt: bool280 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,219 on stmt: $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,219 on stmt: branch $280pred, 282, 334
2023-08-13 11:42:47,219 ==== SSA block rewrite pass on 282
2023-08-13 11:42:47,219 Running <numba.core.ssa._FixSSAVars object at 0x000001F696CB78D0>
2023-08-13 11:42:47,219 on stmt: exp.4 = phi(incoming_values=[Var(exp.2, numbers.py:240), Var(exp.3, numbers.py:234)], incoming_blocks=[302, 270])
2023-08-13 11:42:47,219 on stmt: $const284.1 = const(int, 1)
2023-08-13 11:42:47,219 on stmt: $binop_and_286.2 = exp.4 & $const284.1
2023-08-13 11:42:47,219 on stmt: bool290 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,219 on stmt: $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,219 on stmt: branch $290pred, 292, 302
2023-08-13 11:42:47,219 ==== SSA block rewrite pass on 292
2023-08-13 11:42:47,219 Running <numba.core.ssa._FixSSAVars object at 0x000001F696CB78D0>
2023-08-13 11:42:47,219 on stmt: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,219 find_def var='a.1' stmt=$binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,219 find_def_from_top label 292
2023-08-13 11:42:47,220 idom 282 from label 292
2023-08-13 11:42:47,220 find_def_from_bottom label 282
2023-08-13 11:42:47,220 find_def_from_top label 282
2023-08-13 11:42:47,220 insert phi node a.1.2 = phi(incoming_values=[], incoming_blocks=[]) at 282
2023-08-13 11:42:47,220 find_def_from_bottom label 302
2023-08-13 11:42:47,220 incoming_def a.1.1 = $binop_imul316.5
2023-08-13 11:42:47,220 find_def_from_bottom label 270
2023-08-13 11:42:47,220 find_def_from_top label 270
2023-08-13 11:42:47,220 idom 190 from label 270
2023-08-13 11:42:47,220 find_def_from_bottom label 190
2023-08-13 11:42:47,220 find_def_from_top label 190
2023-08-13 11:42:47,220 idom 0 from label 190
2023-08-13 11:42:47,220 find_def_from_bottom label 0
2023-08-13 11:42:47,220 incoming_def a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,220 replaced with: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,220 on stmt: r = $binop_imul296.2
2023-08-13 11:42:47,220 on stmt: jump 302
2023-08-13 11:42:47,220 ==== SSA block rewrite pass on 302
2023-08-13 11:42:47,220 Running <numba.core.ssa._FixSSAVars object at 0x000001F696CB78D0>
2023-08-13 11:42:47,220 on stmt: $const304.1 = const(int, 1)
2023-08-13 11:42:47,220 on stmt: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,220 on stmt: exp.2 = $binop_irshift306.2
2023-08-13 11:42:47,221 on stmt: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,221 find_def var='a.1' stmt=$binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,221 find_def_from_top label 302
2023-08-13 11:42:47,221 idom 282 from label 302
2023-08-13 11:42:47,221 find_def_from_bottom label 282
2023-08-13 11:42:47,221 replaced with: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,221 on stmt: a.1.1 = $binop_imul316.5
2023-08-13 11:42:47,221 on stmt: $const324.7 = const(int, 0)
2023-08-13 11:42:47,221 on stmt: $326compare_op.8 = exp.2 != $const324.7
2023-08-13 11:42:47,221 on stmt: bool332 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,221 on stmt: $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,221 on stmt: branch $332pred, 282, 334
2023-08-13 11:42:47,221 ==== SSA block rewrite pass on 334
2023-08-13 11:42:47,221 Running <numba.core.ssa._FixSSAVars object at 0x000001F696CB78D0>
2023-08-13 11:42:47,221 on stmt: bool336 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,221 on stmt: $336pred = call bool336(invert.2, func=bool336, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,221 on stmt: branch $336pred, 338, 348
2023-08-13 11:42:47,221 ==== SSA block rewrite pass on 338
2023-08-13 11:42:47,221 Running <numba.core.ssa._FixSSAVars object at 0x000001F696CB78D0>
2023-08-13 11:42:47,221 on stmt: $const338.0 = const(float, 1.0)
2023-08-13 11:42:47,222 on stmt: $binop_truediv342.2 = $const338.0 / r
2023-08-13 11:42:47,222 on stmt: $phi350.0 = $binop_truediv342.2
2023-08-13 11:42:47,222 on stmt: jump 350
2023-08-13 11:42:47,222 ==== SSA block rewrite pass on 348
2023-08-13 11:42:47,222 Running <numba.core.ssa._FixSSAVars object at 0x000001F696CB78D0>
2023-08-13 11:42:47,222 on stmt: $phi350.0.1 = r
2023-08-13 11:42:47,222 on stmt: jump 350
2023-08-13 11:42:47,222 ==== SSA block rewrite pass on 350
2023-08-13 11:42:47,222 Running <numba.core.ssa._FixSSAVars object at 0x000001F696CB78D0>
2023-08-13 11:42:47,222 on stmt: $phi350.0.2 = phi(incoming_values=[Var($phi350.0, numbers.py:243), Var($phi350.0.1, numbers.py:243)], incoming_blocks=[338, 348])
2023-08-13 11:42:47,222 on stmt: $350return_value.1 = cast(value=$phi350.0.2)
2023-08-13 11:42:47,222 on stmt: return $350return_value.1
2023-08-13 11:42:47,222 Fix SSA violator on var r
2023-08-13 11:42:47,222 ==== SSA block rewrite pass on 0
2023-08-13 11:42:47,222 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696D6D650>
2023-08-13 11:42:47,222 on stmt: a = arg(0, name=a)
2023-08-13 11:42:47,222 on stmt: b = arg(1, name=b)
2023-08-13 11:42:47,222 on stmt: $8load_deref.1 = freevar(tp: float32)
2023-08-13 11:42:47,222 on stmt: $const10.2 = const(int, 1)
2023-08-13 11:42:47,222 on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,222 first assign: r
2023-08-13 11:42:47,223 replaced with: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,223 on stmt: $30load_deref.5 = freevar(tp: float32)
2023-08-13 11:42:47,223 on stmt: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,223 on stmt: $const52.9 = const(int, 0)
2023-08-13 11:42:47,223 on stmt: $54compare_op.10 = b < $const52.9
2023-08-13 11:42:47,223 on stmt: bool60 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,223 on stmt: $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,223 on stmt: branch $60pred, 62, 182
2023-08-13 11:42:47,223 ==== SSA block rewrite pass on 62
2023-08-13 11:42:47,223 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696D6D650>
2023-08-13 11:42:47,223 on stmt: invert = const(bool, True)
2023-08-13 11:42:47,223 on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-08-13 11:42:47,223 on stmt: $const74.4 = const(int, 0)
2023-08-13 11:42:47,223 on stmt: $76compare_op.5 = exp < $const74.4
2023-08-13 11:42:47,223 on stmt: bool82 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,223 on stmt: $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,223 on stmt: branch $82pred, 84, 98
2023-08-13 11:42:47,223 ==== SSA block rewrite pass on 84
2023-08-13 11:42:47,223 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696D6D650>
2023-08-13 11:42:47,224 on stmt: $84load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-08-13 11:42:47,224 on stmt: <static> raise <class 'OverflowError'>
2023-08-13 11:42:47,224 ==== SSA block rewrite pass on 98
2023-08-13 11:42:47,224 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696D6D650>
2023-08-13 11:42:47,224 on stmt: $98load_deref.0 = freevar(is_integer: False)
2023-08-13 11:42:47,224 on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,224 on stmt: $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,224 on stmt: jump 180
2023-08-13 11:42:47,224 ==== SSA block rewrite pass on 180
2023-08-13 11:42:47,224 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696D6D650>
2023-08-13 11:42:47,224 on stmt: jump 190
2023-08-13 11:42:47,224 ==== SSA block rewrite pass on 182
2023-08-13 11:42:47,224 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696D6D650>
2023-08-13 11:42:47,224 on stmt: invert.1 = const(bool, False)
2023-08-13 11:42:47,224 on stmt: exp.1 = b
2023-08-13 11:42:47,224 on stmt: jump 190
2023-08-13 11:42:47,224 ==== SSA block rewrite pass on 190
2023-08-13 11:42:47,224 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696D6D650>
2023-08-13 11:42:47,224 on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[180, 182])
2023-08-13 11:42:47,224 on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:219), Var(invert.1, numbers.py:232)], incoming_blocks=[180, 182])
2023-08-13 11:42:47,224 on stmt: $const192.1 = const(int, 65536)
2023-08-13 11:42:47,224 on stmt: $194compare_op.2 = exp.3 > $const192.1
2023-08-13 11:42:47,225 on stmt: bool200 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,225 on stmt: $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,225 on stmt: branch $200pred, 202, 270
2023-08-13 11:42:47,225 ==== SSA block rewrite pass on 202
2023-08-13 11:42:47,225 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696D6D650>
2023-08-13 11:42:47,225 on stmt: $202load_global.0 = global(math: <module 'math' (built-in)>)
2023-08-13 11:42:47,225 on stmt: $214load_attr.2 = getattr(value=$202load_global.0, attr=pow)
2023-08-13 11:42:47,225 on stmt: $226load_global.4 = global(float: <class 'float'>)
2023-08-13 11:42:47,225 on stmt: $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,225 on stmt: $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,225 on stmt: $268return_value.9 = cast(value=$258call.8)
2023-08-13 11:42:47,225 on stmt: return $268return_value.9
2023-08-13 11:42:47,225 ==== SSA block rewrite pass on 270
2023-08-13 11:42:47,225 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696D6D650>
2023-08-13 11:42:47,225 on stmt: $const272.1 = const(int, 0)
2023-08-13 11:42:47,225 on stmt: $274compare_op.2 = exp.3 != $const272.1
2023-08-13 11:42:47,225 on stmt: bool280 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,225 on stmt: $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,225 on stmt: branch $280pred, 282, 334
2023-08-13 11:42:47,225 ==== SSA block rewrite pass on 282
2023-08-13 11:42:47,226 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696D6D650>
2023-08-13 11:42:47,226 on stmt: a.1.2 = phi(incoming_values=[Var(a.1.1, numbers.py:241), Var(a.1, numbers.py:217)], incoming_blocks=[302, 270])
2023-08-13 11:42:47,226 on stmt: exp.4 = phi(incoming_values=[Var(exp.2, numbers.py:240), Var(exp.3, numbers.py:234)], incoming_blocks=[302, 270])
2023-08-13 11:42:47,226 on stmt: $const284.1 = const(int, 1)
2023-08-13 11:42:47,226 on stmt: $binop_and_286.2 = exp.4 & $const284.1
2023-08-13 11:42:47,226 on stmt: bool290 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,226 on stmt: $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,226 on stmt: branch $290pred, 292, 302
2023-08-13 11:42:47,226 ==== SSA block rewrite pass on 292
2023-08-13 11:42:47,226 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696D6D650>
2023-08-13 11:42:47,226 on stmt: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,226 on stmt: r = $binop_imul296.2
2023-08-13 11:42:47,226 replaced with: r.1 = $binop_imul296.2
2023-08-13 11:42:47,226 on stmt: jump 302
2023-08-13 11:42:47,227 ==== SSA block rewrite pass on 302
2023-08-13 11:42:47,227 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696D6D650>
2023-08-13 11:42:47,227 on stmt: $const304.1 = const(int, 1)
2023-08-13 11:42:47,227 on stmt: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,227 on stmt: exp.2 = $binop_irshift306.2
2023-08-13 11:42:47,227 on stmt: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,227 on stmt: a.1.1 = $binop_imul316.5
2023-08-13 11:42:47,227 on stmt: $const324.7 = const(int, 0)
2023-08-13 11:42:47,227 on stmt: $326compare_op.8 = exp.2 != $const324.7
2023-08-13 11:42:47,227 on stmt: bool332 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,227 on stmt: $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,227 on stmt: branch $332pred, 282, 334
2023-08-13 11:42:47,227 ==== SSA block rewrite pass on 334
2023-08-13 11:42:47,227 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696D6D650>
2023-08-13 11:42:47,227 on stmt: bool336 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,227 on stmt: $336pred = call bool336(invert.2, func=bool336, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,228 on stmt: branch $336pred, 338, 348
2023-08-13 11:42:47,228 ==== SSA block rewrite pass on 338
2023-08-13 11:42:47,228 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696D6D650>
2023-08-13 11:42:47,228 on stmt: $const338.0 = const(float, 1.0)
2023-08-13 11:42:47,228 on stmt: $binop_truediv342.2 = $const338.0 / r
2023-08-13 11:42:47,228 on stmt: $phi350.0 = $binop_truediv342.2
2023-08-13 11:42:47,228 on stmt: jump 350
2023-08-13 11:42:47,228 ==== SSA block rewrite pass on 348
2023-08-13 11:42:47,228 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696D6D650>
2023-08-13 11:42:47,228 on stmt: $phi350.0.1 = r
2023-08-13 11:42:47,228 on stmt: jump 350
2023-08-13 11:42:47,228 ==== SSA block rewrite pass on 350
2023-08-13 11:42:47,228 Running <numba.core.ssa._FreshVarHandler object at 0x000001F696D6D650>
2023-08-13 11:42:47,228 on stmt: $phi350.0.2 = phi(incoming_values=[Var($phi350.0, numbers.py:243), Var($phi350.0.1, numbers.py:243)], incoming_blocks=[338, 348])
2023-08-13 11:42:47,228 on stmt: $350return_value.1 = cast(value=$phi350.0.2)
2023-08-13 11:42:47,228 on stmt: return $350return_value.1
2023-08-13 11:42:47,228 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001F696D6DE90>],
             292: [<numba.core.ir.Assign object at 0x000001F696E5F550>]})
2023-08-13 11:42:47,228 ==== SSA block rewrite pass on 0
2023-08-13 11:42:47,228 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977B4E10>
2023-08-13 11:42:47,228 on stmt: a = arg(0, name=a)
2023-08-13 11:42:47,229 on stmt: b = arg(1, name=b)
2023-08-13 11:42:47,229 on stmt: $8load_deref.1 = freevar(tp: float32)
2023-08-13 11:42:47,229 on stmt: $const10.2 = const(int, 1)
2023-08-13 11:42:47,229 on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,229 on stmt: $30load_deref.5 = freevar(tp: float32)
2023-08-13 11:42:47,229 on stmt: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,229 on stmt: $const52.9 = const(int, 0)
2023-08-13 11:42:47,229 on stmt: $54compare_op.10 = b < $const52.9
2023-08-13 11:42:47,229 on stmt: bool60 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,229 on stmt: $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,229 on stmt: branch $60pred, 62, 182
2023-08-13 11:42:47,229 ==== SSA block rewrite pass on 62
2023-08-13 11:42:47,229 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977B4E10>
2023-08-13 11:42:47,229 on stmt: invert = const(bool, True)
2023-08-13 11:42:47,230 on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-08-13 11:42:47,230 on stmt: $const74.4 = const(int, 0)
2023-08-13 11:42:47,230 on stmt: $76compare_op.5 = exp < $const74.4
2023-08-13 11:42:47,230 on stmt: bool82 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,230 on stmt: $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,230 on stmt: branch $82pred, 84, 98
2023-08-13 11:42:47,230 ==== SSA block rewrite pass on 84
2023-08-13 11:42:47,230 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977B4E10>
2023-08-13 11:42:47,230 on stmt: $84load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-08-13 11:42:47,230 on stmt: <static> raise <class 'OverflowError'>
2023-08-13 11:42:47,230 ==== SSA block rewrite pass on 98
2023-08-13 11:42:47,230 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977B4E10>
2023-08-13 11:42:47,230 on stmt: $98load_deref.0 = freevar(is_integer: False)
2023-08-13 11:42:47,230 on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,230 on stmt: $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,230 on stmt: jump 180
2023-08-13 11:42:47,230 ==== SSA block rewrite pass on 180
2023-08-13 11:42:47,230 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977B4E10>
2023-08-13 11:42:47,230 on stmt: jump 190
2023-08-13 11:42:47,230 ==== SSA block rewrite pass on 182
2023-08-13 11:42:47,231 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977B4E10>
2023-08-13 11:42:47,231 on stmt: invert.1 = const(bool, False)
2023-08-13 11:42:47,231 on stmt: exp.1 = b
2023-08-13 11:42:47,231 on stmt: jump 190
2023-08-13 11:42:47,231 ==== SSA block rewrite pass on 190
2023-08-13 11:42:47,231 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977B4E10>
2023-08-13 11:42:47,231 on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[180, 182])
2023-08-13 11:42:47,231 on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:219), Var(invert.1, numbers.py:232)], incoming_blocks=[180, 182])
2023-08-13 11:42:47,232 on stmt: $const192.1 = const(int, 65536)
2023-08-13 11:42:47,232 on stmt: $194compare_op.2 = exp.3 > $const192.1
2023-08-13 11:42:47,232 on stmt: bool200 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,232 on stmt: $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,232 on stmt: branch $200pred, 202, 270
2023-08-13 11:42:47,232 ==== SSA block rewrite pass on 202
2023-08-13 11:42:47,232 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977B4E10>
2023-08-13 11:42:47,232 on stmt: $202load_global.0 = global(math: <module 'math' (built-in)>)
2023-08-13 11:42:47,232 on stmt: $214load_attr.2 = getattr(value=$202load_global.0, attr=pow)
2023-08-13 11:42:47,232 on stmt: $226load_global.4 = global(float: <class 'float'>)
2023-08-13 11:42:47,232 on stmt: $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,232 on stmt: $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,232 on stmt: $268return_value.9 = cast(value=$258call.8)
2023-08-13 11:42:47,232 on stmt: return $268return_value.9
2023-08-13 11:42:47,232 ==== SSA block rewrite pass on 270
2023-08-13 11:42:47,233 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977B4E10>
2023-08-13 11:42:47,233 on stmt: $const272.1 = const(int, 0)
2023-08-13 11:42:47,233 on stmt: $274compare_op.2 = exp.3 != $const272.1
2023-08-13 11:42:47,233 on stmt: bool280 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,233 on stmt: $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,233 on stmt: branch $280pred, 282, 334
2023-08-13 11:42:47,233 ==== SSA block rewrite pass on 282
2023-08-13 11:42:47,233 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977B4E10>
2023-08-13 11:42:47,233 on stmt: a.1.2 = phi(incoming_values=[Var(a.1.1, numbers.py:241), Var(a.1, numbers.py:217)], incoming_blocks=[302, 270])
2023-08-13 11:42:47,233 on stmt: exp.4 = phi(incoming_values=[Var(exp.2, numbers.py:240), Var(exp.3, numbers.py:234)], incoming_blocks=[302, 270])
2023-08-13 11:42:47,233 on stmt: $const284.1 = const(int, 1)
2023-08-13 11:42:47,233 on stmt: $binop_and_286.2 = exp.4 & $const284.1
2023-08-13 11:42:47,233 on stmt: bool290 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,233 on stmt: $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,233 on stmt: branch $290pred, 292, 302
2023-08-13 11:42:47,233 ==== SSA block rewrite pass on 292
2023-08-13 11:42:47,233 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977B4E10>
2023-08-13 11:42:47,233 on stmt: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,234 find_def var='r' stmt=$binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,234 find_def_from_top label 292
2023-08-13 11:42:47,234 idom 282 from label 292
2023-08-13 11:42:47,234 find_def_from_bottom label 282
2023-08-13 11:42:47,234 find_def_from_top label 282
2023-08-13 11:42:47,234 insert phi node r.2 = phi(incoming_values=[], incoming_blocks=[]) at 282
2023-08-13 11:42:47,234 find_def_from_bottom label 302
2023-08-13 11:42:47,234 find_def_from_top label 302
2023-08-13 11:42:47,234 insert phi node r.3 = phi(incoming_values=[], incoming_blocks=[]) at 302
2023-08-13 11:42:47,234 find_def_from_bottom label 282
2023-08-13 11:42:47,234 incoming_def r.2 = phi(incoming_values=[], incoming_blocks=[])
2023-08-13 11:42:47,234 find_def_from_bottom label 292
2023-08-13 11:42:47,234 incoming_def r.1 = $binop_imul296.2
2023-08-13 11:42:47,234 incoming_def r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[282, 292])
2023-08-13 11:42:47,234 find_def_from_bottom label 270
2023-08-13 11:42:47,234 find_def_from_top label 270
2023-08-13 11:42:47,234 idom 190 from label 270
2023-08-13 11:42:47,234 find_def_from_bottom label 190
2023-08-13 11:42:47,234 find_def_from_top label 190
2023-08-13 11:42:47,235 idom 0 from label 190
2023-08-13 11:42:47,235 find_def_from_bottom label 0
2023-08-13 11:42:47,235 incoming_def r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,235 replaced with: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,235 on stmt: r.1 = $binop_imul296.2
2023-08-13 11:42:47,235 on stmt: jump 302
2023-08-13 11:42:47,235 ==== SSA block rewrite pass on 302
2023-08-13 11:42:47,235 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977B4E10>
2023-08-13 11:42:47,235 on stmt: $const304.1 = const(int, 1)
2023-08-13 11:42:47,235 on stmt: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,235 on stmt: exp.2 = $binop_irshift306.2
2023-08-13 11:42:47,235 on stmt: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,235 on stmt: a.1.1 = $binop_imul316.5
2023-08-13 11:42:47,235 on stmt: $const324.7 = const(int, 0)
2023-08-13 11:42:47,235 on stmt: $326compare_op.8 = exp.2 != $const324.7
2023-08-13 11:42:47,235 on stmt: bool332 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,235 on stmt: $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,235 on stmt: branch $332pred, 282, 334
2023-08-13 11:42:47,235 ==== SSA block rewrite pass on 334
2023-08-13 11:42:47,236 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977B4E10>
2023-08-13 11:42:47,236 on stmt: bool336 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,236 on stmt: $336pred = call bool336(invert.2, func=bool336, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,236 on stmt: branch $336pred, 338, 348
2023-08-13 11:42:47,236 ==== SSA block rewrite pass on 338
2023-08-13 11:42:47,236 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977B4E10>
2023-08-13 11:42:47,236 on stmt: $const338.0 = const(float, 1.0)
2023-08-13 11:42:47,236 on stmt: $binop_truediv342.2 = $const338.0 / r
2023-08-13 11:42:47,236 find_def var='r' stmt=$binop_truediv342.2 = $const338.0 / r
2023-08-13 11:42:47,236 find_def_from_top label 338
2023-08-13 11:42:47,236 idom 334 from label 338
2023-08-13 11:42:47,236 find_def_from_bottom label 334
2023-08-13 11:42:47,236 find_def_from_top label 334
2023-08-13 11:42:47,236 insert phi node r.4 = phi(incoming_values=[], incoming_blocks=[]) at 334
2023-08-13 11:42:47,236 find_def_from_bottom label 302
2023-08-13 11:42:47,236 incoming_def r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[282, 292])
2023-08-13 11:42:47,236 find_def_from_bottom label 270
2023-08-13 11:42:47,236 find_def_from_top label 270
2023-08-13 11:42:47,236 idom 190 from label 270
2023-08-13 11:42:47,236 find_def_from_bottom label 190
2023-08-13 11:42:47,236 find_def_from_top label 190
2023-08-13 11:42:47,236 idom 0 from label 190
2023-08-13 11:42:47,236 find_def_from_bottom label 0
2023-08-13 11:42:47,237 incoming_def r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,237 replaced with: $binop_truediv342.2 = $const338.0 / r.4
2023-08-13 11:42:47,237 on stmt: $phi350.0 = $binop_truediv342.2
2023-08-13 11:42:47,237 on stmt: jump 350
2023-08-13 11:42:47,237 ==== SSA block rewrite pass on 348
2023-08-13 11:42:47,237 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977B4E10>
2023-08-13 11:42:47,237 on stmt: $phi350.0.1 = r
2023-08-13 11:42:47,237 find_def var='r' stmt=$phi350.0.1 = r
2023-08-13 11:42:47,237 find_def_from_top label 348
2023-08-13 11:42:47,237 idom 334 from label 348
2023-08-13 11:42:47,237 find_def_from_bottom label 334
2023-08-13 11:42:47,237 replaced with: $phi350.0.1 = r.4
2023-08-13 11:42:47,237 on stmt: jump 350
2023-08-13 11:42:47,237 ==== SSA block rewrite pass on 350
2023-08-13 11:42:47,237 Running <numba.core.ssa._FixSSAVars object at 0x000001F6977B4E10>
2023-08-13 11:42:47,237 on stmt: $phi350.0.2 = phi(incoming_values=[Var($phi350.0, numbers.py:243), Var($phi350.0.1, numbers.py:243)], incoming_blocks=[338, 348])
2023-08-13 11:42:47,237 on stmt: $350return_value.1 = cast(value=$phi350.0.2)
2023-08-13 11:42:47,237 on stmt: return $350return_value.1
2023-08-13 11:42:47,478 bytecode dump:
>          0	NOP(arg=None, lineno=2472)
           2	RESUME(arg=0, lineno=2472)
           4	LOAD_FAST(arg=0, lineno=2477)
           6	LOAD_ATTR(arg=0, lineno=2477)
          16	LOAD_CONST(arg=1, lineno=2477)
          18	BINARY_OP(arg=8, lineno=2477)
          22	LOAD_FAST(arg=0, lineno=2477)
          24	LOAD_ATTR(arg=1, lineno=2477)
          34	LOAD_CONST(arg=1, lineno=2477)
          36	BINARY_OP(arg=8, lineno=2477)
          40	BINARY_OP(arg=0, lineno=2477)
          44	RETURN_VALUE(arg=None, lineno=2477)
2023-08-13 11:42:47,478 pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-13 11:42:47,478 stack: []
2023-08-13 11:42:47,478 state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-13 11:42:47,478 dispatch pc=0, inst=NOP(arg=None, lineno=2472)
2023-08-13 11:42:47,478 stack []
2023-08-13 11:42:47,478 dispatch pc=2, inst=RESUME(arg=0, lineno=2472)
2023-08-13 11:42:47,478 stack []
2023-08-13 11:42:47,478 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2477)
2023-08-13 11:42:47,478 stack []
2023-08-13 11:42:47,478 dispatch pc=6, inst=LOAD_ATTR(arg=0, lineno=2477)
2023-08-13 11:42:47,478 stack ['$x4.0']
2023-08-13 11:42:47,478 dispatch pc=16, inst=LOAD_CONST(arg=1, lineno=2477)
2023-08-13 11:42:47,479 stack ['$6load_attr.1']
2023-08-13 11:42:47,479 dispatch pc=18, inst=BINARY_OP(arg=8, lineno=2477)
2023-08-13 11:42:47,479 stack ['$6load_attr.1', '$const16.2']
2023-08-13 11:42:47,479 dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=2477)
2023-08-13 11:42:47,479 stack ['$binop_pow18.3']
2023-08-13 11:42:47,479 dispatch pc=24, inst=LOAD_ATTR(arg=1, lineno=2477)
2023-08-13 11:42:47,479 stack ['$binop_pow18.3', '$x22.4']
2023-08-13 11:42:47,479 dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=2477)
2023-08-13 11:42:47,479 stack ['$binop_pow18.3', '$24load_attr.5']
2023-08-13 11:42:47,479 dispatch pc=36, inst=BINARY_OP(arg=8, lineno=2477)
2023-08-13 11:42:47,479 stack ['$binop_pow18.3', '$24load_attr.5', '$const34.6']
2023-08-13 11:42:47,479 dispatch pc=40, inst=BINARY_OP(arg=0, lineno=2477)
2023-08-13 11:42:47,479 stack ['$binop_pow18.3', '$binop_pow36.7']
2023-08-13 11:42:47,480 dispatch pc=44, inst=RETURN_VALUE(arg=None, lineno=2477)
2023-08-13 11:42:47,480 stack ['$binop_add40.8']
2023-08-13 11:42:47,480 end state. edges=[]
2023-08-13 11:42:47,480 -------------------------Prune PHIs-------------------------
2023-08-13 11:42:47,480 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-08-13 11:42:47,480 defmap: {}
2023-08-13 11:42:47,480 phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:47,480 changing phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:47,480 keep phismap: {}
2023-08-13 11:42:47,480 new_out: defaultdict(<class 'dict'>, {})
2023-08-13 11:42:47,480 ----------------------DONE Prune PHIs-----------------------
2023-08-13 11:42:47,481 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$x4.0'}), (6, {'item': '$x4.0', 'res': '$6load_attr.1'}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'res': '$const16.2'}), (18, {'op': '**', 'lhs': '$6load_attr.1', 'rhs': '$const16.2', 'res': '$binop_pow18.3'}), (20, {}), (22, {'res': '$x22.4'}), (24, {'item': '$x22.4', 'res': '$24load_attr.5'}), (26, {}), (28, {}), (30, {}), (32, {}), (34, {'res': '$const34.6'}), (36, {'op': '**', 'lhs': '$24load_attr.5', 'rhs': '$const34.6', 'res': '$binop_pow36.7'}), (38, {}), (40, {'op': '+', 'lhs': '$binop_pow18.3', 'rhs': '$binop_pow36.7', 'res': '$binop_add40.8'}), (42, {}), (44, {'retval': '$binop_add40.8', 'castval': '$44return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:47,482 label 0:
    x = arg(0, name=x)                       ['x']
    $6load_attr.1 = getattr(value=x, attr=real) ['$6load_attr.1', 'x']
    $const16.2 = const(int, 2)               ['$const16.2']
    $binop_pow18.3 = $6load_attr.1 ** $const16.2 ['$6load_attr.1', '$binop_pow18.3', '$const16.2']
    $24load_attr.5 = getattr(value=x, attr=imag) ['$24load_attr.5', 'x']
    $const34.6 = const(int, 2)               ['$const34.6']
    $binop_pow36.7 = $24load_attr.5 ** $const34.6 ['$24load_attr.5', '$binop_pow36.7', '$const34.6']
    $binop_add40.8 = $binop_pow18.3 + $binop_pow36.7 ['$binop_add40.8', '$binop_pow18.3', '$binop_pow36.7']
    $44return_value.9 = cast(value=$binop_add40.8) ['$44return_value.9', '$binop_add40.8']
    return $44return_value.9                 ['$44return_value.9']

2023-08-13 11:42:47,487 ==== SSA block analysis pass on 0
2023-08-13 11:42:47,487 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F697125E50>
2023-08-13 11:42:47,487 on stmt: x = arg(0, name=x)
2023-08-13 11:42:47,487 on stmt: $6load_attr.1 = getattr(value=x, attr=real)
2023-08-13 11:42:47,487 on stmt: $const16.2 = const(int, 2)
2023-08-13 11:42:47,487 on stmt: $binop_pow18.3 = $6load_attr.1 ** $const16.2
2023-08-13 11:42:47,487 on stmt: $24load_attr.5 = getattr(value=x, attr=imag)
2023-08-13 11:42:47,487 on stmt: $const34.6 = const(int, 2)
2023-08-13 11:42:47,487 on stmt: $binop_pow36.7 = $24load_attr.5 ** $const34.6
2023-08-13 11:42:47,487 on stmt: $binop_add40.8 = $binop_pow18.3 + $binop_pow36.7
2023-08-13 11:42:47,487 on stmt: $44return_value.9 = cast(value=$binop_add40.8)
2023-08-13 11:42:47,487 on stmt: return $44return_value.9
2023-08-13 11:42:47,487 defs defaultdict(<class 'list'>,
            {'$24load_attr.5': [<numba.core.ir.Assign object at 0x000001F6971247D0>],
             '$44return_value.9': [<numba.core.ir.Assign object at 0x000001F697125110>],
             '$6load_attr.1': [<numba.core.ir.Assign object at 0x000001F697137FD0>],
             '$binop_add40.8': [<numba.core.ir.Assign object at 0x000001F697124E90>],
             '$binop_pow18.3': [<numba.core.ir.Assign object at 0x000001F697124450>],
             '$binop_pow36.7': [<numba.core.ir.Assign object at 0x000001F697124C50>],
             '$const16.2': [<numba.core.ir.Assign object at 0x000001F697124210>],
             '$const34.6': [<numba.core.ir.Assign object at 0x000001F697124A10>],
             'x': [<numba.core.ir.Assign object at 0x000001F697137BD0>]})
2023-08-13 11:42:47,487 SSA violators set()
2023-08-13 11:42:47,506 bytecode dump:
>          0	NOP(arg=None, lineno=214)
           2	COPY_FREE_VARS(arg=3, lineno=214)
           4	RESUME(arg=0, lineno=214)
           6	PUSH_NULL(arg=None, lineno=216)
           8	LOAD_DEREF(arg=6, lineno=216)
          10	LOAD_CONST(arg=1, lineno=216)
          12	PRECALL(arg=1, lineno=216)
          16	CALL(arg=1, lineno=216)
          26	STORE_FAST(arg=2, lineno=216)
          28	PUSH_NULL(arg=None, lineno=217)
          30	LOAD_DEREF(arg=6, lineno=217)
          32	LOAD_FAST(arg=0, lineno=217)
          34	PRECALL(arg=1, lineno=217)
          38	CALL(arg=1, lineno=217)
          48	STORE_FAST(arg=0, lineno=217)
          50	LOAD_FAST(arg=1, lineno=218)
          52	LOAD_CONST(arg=2, lineno=218)
          54	COMPARE_OP(arg=0, lineno=218)
          60	POP_JUMP_FORWARD_IF_FALSE(arg=60, lineno=218)
          62	LOAD_CONST(arg=3, lineno=219)
          64	STORE_FAST(arg=3, lineno=219)
          66	LOAD_FAST(arg=1, lineno=220)
          68	UNARY_NEGATIVE(arg=None, lineno=220)
          70	STORE_FAST(arg=4, lineno=220)
          72	LOAD_FAST(arg=4, lineno=221)
          74	LOAD_CONST(arg=2, lineno=221)
          76	COMPARE_OP(arg=0, lineno=221)
          82	POP_JUMP_FORWARD_IF_FALSE(arg=7, lineno=221)
          84	LOAD_GLOBAL(arg=0, lineno=222)
          96	RAISE_VARARGS(arg=1, lineno=222)
>         98	LOAD_DEREF(arg=5, lineno=223)
         100	POP_JUMP_FORWARD_IF_FALSE(arg=39, lineno=223)
         102	LOAD_FAST(arg=0, lineno=224)
         104	LOAD_CONST(arg=2, lineno=224)
         106	COMPARE_OP(arg=2, lineno=224)
         112	POP_JUMP_FORWARD_IF_FALSE(arg=19, lineno=224)
         114	LOAD_DEREF(arg=7, lineno=225)
         116	POP_JUMP_FORWARD_IF_FALSE(arg=2, lineno=225)
         118	LOAD_DEREF(arg=7, lineno=226)
         120	RETURN_VALUE(arg=None, lineno=226)
>        122	LOAD_GLOBAL(arg=3, lineno=228)
         134	LOAD_CONST(arg=4, lineno=228)
         136	PRECALL(arg=1, lineno=228)
         140	CALL(arg=1, lineno=228)
         150	RAISE_VARARGS(arg=1, lineno=228)
>        152	LOAD_FAST(arg=0, lineno=229)
         154	LOAD_CONST(arg=1, lineno=229)
         156	COMPARE_OP(arg=3, lineno=229)
         162	POP_JUMP_FORWARD_IF_FALSE(arg=8, lineno=229)
         164	LOAD_FAST(arg=0, lineno=229)
         166	LOAD_CONST(arg=5, lineno=229)
         168	COMPARE_OP(arg=3, lineno=229)
         174	POP_JUMP_FORWARD_IF_FALSE(arg=2, lineno=229)
         176	LOAD_CONST(arg=2, lineno=230)
         178	RETURN_VALUE(arg=None, lineno=230)
>        180	JUMP_FORWARD(arg=4, lineno=230)
>        182	LOAD_CONST(arg=6, lineno=232)
         184	STORE_FAST(arg=3, lineno=232)
         186	LOAD_FAST(arg=1, lineno=233)
         188	STORE_FAST(arg=4, lineno=233)
>        190	LOAD_FAST(arg=4, lineno=234)
         192	LOAD_CONST(arg=7, lineno=234)
         194	COMPARE_OP(arg=4, lineno=234)
         200	POP_JUMP_FORWARD_IF_FALSE(arg=34, lineno=234)
         202	LOAD_GLOBAL(arg=5, lineno=236)
         214	LOAD_ATTR(arg=3, lineno=236)
         224	LOAD_FAST(arg=0, lineno=236)
         226	LOAD_GLOBAL(arg=9, lineno=236)
         238	LOAD_FAST(arg=1, lineno=236)
         240	PRECALL(arg=1, lineno=236)
         244	CALL(arg=1, lineno=236)
         254	PRECALL(arg=2, lineno=236)
         258	CALL(arg=2, lineno=236)
         268	RETURN_VALUE(arg=None, lineno=236)
>        270	LOAD_FAST(arg=4, lineno=237)
         272	LOAD_CONST(arg=2, lineno=237)
         274	COMPARE_OP(arg=3, lineno=237)
         280	POP_JUMP_FORWARD_IF_FALSE(arg=26, lineno=237)
>        282	LOAD_FAST(arg=4, lineno=238)
         284	LOAD_CONST(arg=1, lineno=238)
         286	BINARY_OP(arg=1, lineno=238)
         290	POP_JUMP_FORWARD_IF_FALSE(arg=5, lineno=238)
         292	LOAD_FAST(arg=2, lineno=239)
         294	LOAD_FAST(arg=0, lineno=239)
         296	BINARY_OP(arg=18, lineno=239)
         300	STORE_FAST(arg=2, lineno=239)
>        302	LOAD_FAST(arg=4, lineno=240)
         304	LOAD_CONST(arg=1, lineno=240)
         306	BINARY_OP(arg=22, lineno=240)
         310	STORE_FAST(arg=4, lineno=240)
         312	LOAD_FAST(arg=0, lineno=241)
         314	LOAD_FAST(arg=0, lineno=241)
         316	BINARY_OP(arg=18, lineno=241)
         320	STORE_FAST(arg=0, lineno=241)
         322	LOAD_FAST(arg=4, lineno=237)
         324	LOAD_CONST(arg=2, lineno=237)
         326	COMPARE_OP(arg=3, lineno=237)
         332	POP_JUMP_BACKWARD_IF_TRUE(arg=26, lineno=237)
>        334	LOAD_FAST(arg=3, lineno=243)
         336	POP_JUMP_FORWARD_IF_FALSE(arg=5, lineno=243)
         338	LOAD_CONST(arg=8, lineno=243)
         340	LOAD_FAST(arg=2, lineno=243)
         342	BINARY_OP(arg=11, lineno=243)
         346	JUMP_FORWARD(arg=1, lineno=243)
>        348	LOAD_FAST(arg=2, lineno=243)
>        350	RETURN_VALUE(arg=None, lineno=243)
2023-08-13 11:42:47,506 pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-13 11:42:47,506 stack: []
2023-08-13 11:42:47,506 state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-13 11:42:47,506 dispatch pc=0, inst=NOP(arg=None, lineno=214)
2023-08-13 11:42:47,506 stack []
2023-08-13 11:42:47,506 dispatch pc=2, inst=COPY_FREE_VARS(arg=3, lineno=214)
2023-08-13 11:42:47,506 stack []
2023-08-13 11:42:47,506 dispatch pc=4, inst=RESUME(arg=0, lineno=214)
2023-08-13 11:42:47,506 stack []
2023-08-13 11:42:47,507 dispatch pc=6, inst=PUSH_NULL(arg=None, lineno=216)
2023-08-13 11:42:47,507 stack []
2023-08-13 11:42:47,507 dispatch pc=8, inst=LOAD_DEREF(arg=6, lineno=216)
2023-08-13 11:42:47,507 stack ['$null$6.0']
2023-08-13 11:42:47,507 dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=216)
2023-08-13 11:42:47,507 stack ['$null$6.0', '$8load_deref.1']
2023-08-13 11:42:47,507 dispatch pc=12, inst=PRECALL(arg=1, lineno=216)
2023-08-13 11:42:47,507 stack ['$null$6.0', '$8load_deref.1', '$const10.2']
2023-08-13 11:42:47,507 dispatch pc=16, inst=CALL(arg=1, lineno=216)
2023-08-13 11:42:47,507 stack ['$null$6.0', '$8load_deref.1', '$const10.2']
2023-08-13 11:42:47,507 dispatch pc=26, inst=STORE_FAST(arg=2, lineno=216)
2023-08-13 11:42:47,507 stack ['$16call.3']
2023-08-13 11:42:47,507 dispatch pc=28, inst=PUSH_NULL(arg=None, lineno=217)
2023-08-13 11:42:47,507 stack []
2023-08-13 11:42:47,508 dispatch pc=30, inst=LOAD_DEREF(arg=6, lineno=217)
2023-08-13 11:42:47,508 stack ['$null$28.4']
2023-08-13 11:42:47,508 dispatch pc=32, inst=LOAD_FAST(arg=0, lineno=217)
2023-08-13 11:42:47,508 stack ['$null$28.4', '$30load_deref.5']
2023-08-13 11:42:47,508 dispatch pc=34, inst=PRECALL(arg=1, lineno=217)
2023-08-13 11:42:47,508 stack ['$null$28.4', '$30load_deref.5', '$a32.6']
2023-08-13 11:42:47,508 dispatch pc=38, inst=CALL(arg=1, lineno=217)
2023-08-13 11:42:47,508 stack ['$null$28.4', '$30load_deref.5', '$a32.6']
2023-08-13 11:42:47,508 dispatch pc=48, inst=STORE_FAST(arg=0, lineno=217)
2023-08-13 11:42:47,508 stack ['$38call.7']
2023-08-13 11:42:47,508 dispatch pc=50, inst=LOAD_FAST(arg=1, lineno=218)
2023-08-13 11:42:47,508 stack []
2023-08-13 11:42:47,508 dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=218)
2023-08-13 11:42:47,508 stack ['$b50.8']
2023-08-13 11:42:47,508 dispatch pc=54, inst=COMPARE_OP(arg=0, lineno=218)
2023-08-13 11:42:47,508 stack ['$b50.8', '$const52.9']
2023-08-13 11:42:47,508 dispatch pc=60, inst=POP_JUMP_FORWARD_IF_FALSE(arg=60, lineno=218)
2023-08-13 11:42:47,509 stack ['$54compare_op.10']
2023-08-13 11:42:47,509 end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0), Edge(pc=182, stack=(), blockstack=(), npush=0)]
2023-08-13 11:42:47,509 pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=182 nstack_initial=0)])
2023-08-13 11:42:47,509 stack: []
2023-08-13 11:42:47,509 state.pc_initial: State(pc_initial=62 nstack_initial=0)
2023-08-13 11:42:47,509 dispatch pc=62, inst=LOAD_CONST(arg=3, lineno=219)
2023-08-13 11:42:47,509 stack []
2023-08-13 11:42:47,509 dispatch pc=64, inst=STORE_FAST(arg=3, lineno=219)
2023-08-13 11:42:47,509 stack ['$const62.0']
2023-08-13 11:42:47,510 dispatch pc=66, inst=LOAD_FAST(arg=1, lineno=220)
2023-08-13 11:42:47,510 stack []
2023-08-13 11:42:47,510 dispatch pc=68, inst=UNARY_NEGATIVE(arg=None, lineno=220)
2023-08-13 11:42:47,510 stack ['$b66.1']
2023-08-13 11:42:47,510 dispatch pc=70, inst=STORE_FAST(arg=4, lineno=220)
2023-08-13 11:42:47,510 stack ['$68unary_negative.2']
2023-08-13 11:42:47,510 dispatch pc=72, inst=LOAD_FAST(arg=4, lineno=221)
2023-08-13 11:42:47,510 stack []
2023-08-13 11:42:47,510 dispatch pc=74, inst=LOAD_CONST(arg=2, lineno=221)
2023-08-13 11:42:47,510 stack ['$exp72.3']
2023-08-13 11:42:47,510 dispatch pc=76, inst=COMPARE_OP(arg=0, lineno=221)
2023-08-13 11:42:47,511 stack ['$exp72.3', '$const74.4']
2023-08-13 11:42:47,511 dispatch pc=82, inst=POP_JUMP_FORWARD_IF_FALSE(arg=7, lineno=221)
2023-08-13 11:42:47,511 stack ['$76compare_op.5']
2023-08-13 11:42:47,511 end state. edges=[Edge(pc=84, stack=(), blockstack=(), npush=0), Edge(pc=98, stack=(), blockstack=(), npush=0)]
2023-08-13 11:42:47,511 pending: deque([State(pc_initial=182 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=98 nstack_initial=0)])
2023-08-13 11:42:47,511 stack: []
2023-08-13 11:42:47,511 state.pc_initial: State(pc_initial=182 nstack_initial=0)
2023-08-13 11:42:47,511 dispatch pc=182, inst=LOAD_CONST(arg=6, lineno=232)
2023-08-13 11:42:47,511 stack []
2023-08-13 11:42:47,511 dispatch pc=184, inst=STORE_FAST(arg=3, lineno=232)
2023-08-13 11:42:47,512 stack ['$const182.0']
2023-08-13 11:42:47,512 dispatch pc=186, inst=LOAD_FAST(arg=1, lineno=233)
2023-08-13 11:42:47,512 stack []
2023-08-13 11:42:47,512 dispatch pc=188, inst=STORE_FAST(arg=4, lineno=233)
2023-08-13 11:42:47,512 stack ['$b186.1']
2023-08-13 11:42:47,512 end state. edges=[Edge(pc=190, stack=(), blockstack=(), npush=0)]
2023-08-13 11:42:47,512 pending: deque([State(pc_initial=84 nstack_initial=0), State(pc_initial=98 nstack_initial=0), State(pc_initial=190 nstack_initial=0)])
2023-08-13 11:42:47,512 stack: []
2023-08-13 11:42:47,512 state.pc_initial: State(pc_initial=84 nstack_initial=0)
2023-08-13 11:42:47,512 dispatch pc=84, inst=LOAD_GLOBAL(arg=0, lineno=222)
2023-08-13 11:42:47,512 stack []
2023-08-13 11:42:47,512 dispatch pc=96, inst=RAISE_VARARGS(arg=1, lineno=222)
2023-08-13 11:42:47,512 stack ['$84load_global.0']
2023-08-13 11:42:47,513 end state. edges=[]
2023-08-13 11:42:47,513 pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=190 nstack_initial=0)])
2023-08-13 11:42:47,513 stack: []
2023-08-13 11:42:47,513 state.pc_initial: State(pc_initial=98 nstack_initial=0)
2023-08-13 11:42:47,513 dispatch pc=98, inst=LOAD_DEREF(arg=5, lineno=223)
2023-08-13 11:42:47,513 stack []
2023-08-13 11:42:47,513 dispatch pc=100, inst=POP_JUMP_FORWARD_IF_FALSE(arg=39, lineno=223)
2023-08-13 11:42:47,513 stack ['$98load_deref.0']
2023-08-13 11:42:47,513 end state. edges=[Edge(pc=102, stack=(), blockstack=(), npush=0), Edge(pc=180, stack=(), blockstack=(), npush=0)]
2023-08-13 11:42:47,513 pending: deque([State(pc_initial=190 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=180 nstack_initial=0)])
2023-08-13 11:42:47,513 stack: []
2023-08-13 11:42:47,513 state.pc_initial: State(pc_initial=190 nstack_initial=0)
2023-08-13 11:42:47,513 dispatch pc=190, inst=LOAD_FAST(arg=4, lineno=234)
2023-08-13 11:42:47,513 stack []
2023-08-13 11:42:47,514 dispatch pc=192, inst=LOAD_CONST(arg=7, lineno=234)
2023-08-13 11:42:47,514 stack ['$exp190.0']
2023-08-13 11:42:47,514 dispatch pc=194, inst=COMPARE_OP(arg=4, lineno=234)
2023-08-13 11:42:47,514 stack ['$exp190.0', '$const192.1']
2023-08-13 11:42:47,514 dispatch pc=200, inst=POP_JUMP_FORWARD_IF_FALSE(arg=34, lineno=234)
2023-08-13 11:42:47,514 stack ['$194compare_op.2']
2023-08-13 11:42:47,514 end state. edges=[Edge(pc=202, stack=(), blockstack=(), npush=0), Edge(pc=270, stack=(), blockstack=(), npush=0)]
2023-08-13 11:42:47,514 pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=180 nstack_initial=0), State(pc_initial=202 nstack_initial=0), State(pc_initial=270 nstack_initial=0)])
2023-08-13 11:42:47,515 stack: []
2023-08-13 11:42:47,515 state.pc_initial: State(pc_initial=102 nstack_initial=0)
2023-08-13 11:42:47,515 dispatch pc=102, inst=LOAD_FAST(arg=0, lineno=224)
2023-08-13 11:42:47,515 stack []
2023-08-13 11:42:47,515 dispatch pc=104, inst=LOAD_CONST(arg=2, lineno=224)
2023-08-13 11:42:47,515 stack ['$a102.0']
2023-08-13 11:42:47,516 dispatch pc=106, inst=COMPARE_OP(arg=2, lineno=224)
2023-08-13 11:42:47,516 stack ['$a102.0', '$const104.1']
2023-08-13 11:42:47,516 dispatch pc=112, inst=POP_JUMP_FORWARD_IF_FALSE(arg=19, lineno=224)
2023-08-13 11:42:47,516 stack ['$106compare_op.2']
2023-08-13 11:42:47,516 end state. edges=[Edge(pc=114, stack=(), blockstack=(), npush=0), Edge(pc=152, stack=(), blockstack=(), npush=0)]
2023-08-13 11:42:47,516 pending: deque([State(pc_initial=180 nstack_initial=0), State(pc_initial=202 nstack_initial=0), State(pc_initial=270 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=152 nstack_initial=0)])
2023-08-13 11:42:47,516 stack: []
2023-08-13 11:42:47,516 state.pc_initial: State(pc_initial=180 nstack_initial=0)
2023-08-13 11:42:47,516 dispatch pc=180, inst=JUMP_FORWARD(arg=4, lineno=230)
2023-08-13 11:42:47,516 stack []
2023-08-13 11:42:47,516 end state. edges=[Edge(pc=190, stack=(), blockstack=(), npush=0)]
2023-08-13 11:42:47,516 pending: deque([State(pc_initial=202 nstack_initial=0), State(pc_initial=270 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=152 nstack_initial=0), State(pc_initial=190 nstack_initial=0)])
2023-08-13 11:42:47,516 stack: []
2023-08-13 11:42:47,516 state.pc_initial: State(pc_initial=202 nstack_initial=0)
2023-08-13 11:42:47,516 dispatch pc=202, inst=LOAD_GLOBAL(arg=5, lineno=236)
2023-08-13 11:42:47,517 stack []
2023-08-13 11:42:47,517 dispatch pc=214, inst=LOAD_ATTR(arg=3, lineno=236)
2023-08-13 11:42:47,517 stack ['$null$202.1', '$202load_global.0']
2023-08-13 11:42:47,517 dispatch pc=224, inst=LOAD_FAST(arg=0, lineno=236)
2023-08-13 11:42:47,517 stack ['$null$202.1', '$214load_attr.2']
2023-08-13 11:42:47,517 dispatch pc=226, inst=LOAD_GLOBAL(arg=9, lineno=236)
2023-08-13 11:42:47,517 stack ['$null$202.1', '$214load_attr.2', '$a224.3']
2023-08-13 11:42:47,517 dispatch pc=238, inst=LOAD_FAST(arg=1, lineno=236)
2023-08-13 11:42:47,517 stack ['$null$202.1', '$214load_attr.2', '$a224.3', '$null$226.5', '$226load_global.4']
2023-08-13 11:42:47,517 dispatch pc=240, inst=PRECALL(arg=1, lineno=236)
2023-08-13 11:42:47,517 stack ['$null$202.1', '$214load_attr.2', '$a224.3', '$null$226.5', '$226load_global.4', '$b238.6']
2023-08-13 11:42:47,517 dispatch pc=244, inst=CALL(arg=1, lineno=236)
2023-08-13 11:42:47,517 stack ['$null$202.1', '$214load_attr.2', '$a224.3', '$null$226.5', '$226load_global.4', '$b238.6']
2023-08-13 11:42:47,518 dispatch pc=254, inst=PRECALL(arg=2, lineno=236)
2023-08-13 11:42:47,518 stack ['$null$202.1', '$214load_attr.2', '$a224.3', '$244call.7']
2023-08-13 11:42:47,518 dispatch pc=258, inst=CALL(arg=2, lineno=236)
2023-08-13 11:42:47,518 stack ['$null$202.1', '$214load_attr.2', '$a224.3', '$244call.7']
2023-08-13 11:42:47,518 dispatch pc=268, inst=RETURN_VALUE(arg=None, lineno=236)
2023-08-13 11:42:47,518 stack ['$258call.8']
2023-08-13 11:42:47,518 end state. edges=[]
2023-08-13 11:42:47,518 pending: deque([State(pc_initial=270 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=152 nstack_initial=0), State(pc_initial=190 nstack_initial=0)])
2023-08-13 11:42:47,518 stack: []
2023-08-13 11:42:47,518 state.pc_initial: State(pc_initial=270 nstack_initial=0)
2023-08-13 11:42:47,518 dispatch pc=270, inst=LOAD_FAST(arg=4, lineno=237)
2023-08-13 11:42:47,518 stack []
2023-08-13 11:42:47,518 dispatch pc=272, inst=LOAD_CONST(arg=2, lineno=237)
2023-08-13 11:42:47,518 stack ['$exp270.0']
2023-08-13 11:42:47,518 dispatch pc=274, inst=COMPARE_OP(arg=3, lineno=237)
2023-08-13 11:42:47,519 stack ['$exp270.0', '$const272.1']
2023-08-13 11:42:47,519 dispatch pc=280, inst=POP_JUMP_FORWARD_IF_FALSE(arg=26, lineno=237)
2023-08-13 11:42:47,519 stack ['$274compare_op.2']
2023-08-13 11:42:47,519 end state. edges=[Edge(pc=282, stack=(), blockstack=(), npush=0), Edge(pc=334, stack=(), blockstack=(), npush=0)]
2023-08-13 11:42:47,519 pending: deque([State(pc_initial=114 nstack_initial=0), State(pc_initial=152 nstack_initial=0), State(pc_initial=190 nstack_initial=0), State(pc_initial=282 nstack_initial=0), State(pc_initial=334 nstack_initial=0)])
2023-08-13 11:42:47,519 stack: []
2023-08-13 11:42:47,519 state.pc_initial: State(pc_initial=114 nstack_initial=0)
2023-08-13 11:42:47,519 dispatch pc=114, inst=LOAD_DEREF(arg=7, lineno=225)
2023-08-13 11:42:47,519 stack []
2023-08-13 11:42:47,519 dispatch pc=116, inst=POP_JUMP_FORWARD_IF_FALSE(arg=2, lineno=225)
2023-08-13 11:42:47,519 stack ['$114load_deref.0']
2023-08-13 11:42:47,520 end state. edges=[Edge(pc=118, stack=(), blockstack=(), npush=0), Edge(pc=122, stack=(), blockstack=(), npush=0)]
2023-08-13 11:42:47,520 pending: deque([State(pc_initial=152 nstack_initial=0), State(pc_initial=190 nstack_initial=0), State(pc_initial=282 nstack_initial=0), State(pc_initial=334 nstack_initial=0), State(pc_initial=118 nstack_initial=0), State(pc_initial=122 nstack_initial=0)])
2023-08-13 11:42:47,520 stack: []
2023-08-13 11:42:47,520 state.pc_initial: State(pc_initial=152 nstack_initial=0)
2023-08-13 11:42:47,520 dispatch pc=152, inst=LOAD_FAST(arg=0, lineno=229)
2023-08-13 11:42:47,520 stack []
2023-08-13 11:42:47,520 dispatch pc=154, inst=LOAD_CONST(arg=1, lineno=229)
2023-08-13 11:42:47,520 stack ['$a152.0']
2023-08-13 11:42:47,520 dispatch pc=156, inst=COMPARE_OP(arg=3, lineno=229)
2023-08-13 11:42:47,520 stack ['$a152.0', '$const154.1']
2023-08-13 11:42:47,520 dispatch pc=162, inst=POP_JUMP_FORWARD_IF_FALSE(arg=8, lineno=229)
2023-08-13 11:42:47,520 stack ['$156compare_op.2']
2023-08-13 11:42:47,520 end state. edges=[Edge(pc=164, stack=(), blockstack=(), npush=0), Edge(pc=180, stack=(), blockstack=(), npush=0)]
2023-08-13 11:42:47,520 pending: deque([State(pc_initial=190 nstack_initial=0), State(pc_initial=282 nstack_initial=0), State(pc_initial=334 nstack_initial=0), State(pc_initial=118 nstack_initial=0), State(pc_initial=122 nstack_initial=0), State(pc_initial=164 nstack_initial=0), State(pc_initial=180 nstack_initial=0)])
2023-08-13 11:42:47,521 pending: deque([State(pc_initial=282 nstack_initial=0), State(pc_initial=334 nstack_initial=0), State(pc_initial=118 nstack_initial=0), State(pc_initial=122 nstack_initial=0), State(pc_initial=164 nstack_initial=0), State(pc_initial=180 nstack_initial=0)])
2023-08-13 11:42:47,521 stack: []
2023-08-13 11:42:47,521 state.pc_initial: State(pc_initial=282 nstack_initial=0)
2023-08-13 11:42:47,521 dispatch pc=282, inst=LOAD_FAST(arg=4, lineno=238)
2023-08-13 11:42:47,521 stack []
2023-08-13 11:42:47,521 dispatch pc=284, inst=LOAD_CONST(arg=1, lineno=238)
2023-08-13 11:42:47,521 stack ['$exp282.0']
2023-08-13 11:42:47,521 dispatch pc=286, inst=BINARY_OP(arg=1, lineno=238)
2023-08-13 11:42:47,521 stack ['$exp282.0', '$const284.1']
2023-08-13 11:42:47,521 dispatch pc=290, inst=POP_JUMP_FORWARD_IF_FALSE(arg=5, lineno=238)
2023-08-13 11:42:47,521 stack ['$binop_and_286.2']
2023-08-13 11:42:47,521 end state. edges=[Edge(pc=292, stack=(), blockstack=(), npush=0), Edge(pc=302, stack=(), blockstack=(), npush=0)]
2023-08-13 11:42:47,521 pending: deque([State(pc_initial=334 nstack_initial=0), State(pc_initial=118 nstack_initial=0), State(pc_initial=122 nstack_initial=0), State(pc_initial=164 nstack_initial=0), State(pc_initial=180 nstack_initial=0), State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0)])
2023-08-13 11:42:47,522 stack: []
2023-08-13 11:42:47,522 state.pc_initial: State(pc_initial=334 nstack_initial=0)
2023-08-13 11:42:47,522 dispatch pc=334, inst=LOAD_FAST(arg=3, lineno=243)
2023-08-13 11:42:47,522 stack []
2023-08-13 11:42:47,522 dispatch pc=336, inst=POP_JUMP_FORWARD_IF_FALSE(arg=5, lineno=243)
2023-08-13 11:42:47,522 stack ['$invert334.0']
2023-08-13 11:42:47,522 end state. edges=[Edge(pc=338, stack=(), blockstack=(), npush=0), Edge(pc=348, stack=(), blockstack=(), npush=0)]
2023-08-13 11:42:47,522 pending: deque([State(pc_initial=118 nstack_initial=0), State(pc_initial=122 nstack_initial=0), State(pc_initial=164 nstack_initial=0), State(pc_initial=180 nstack_initial=0), State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0), State(pc_initial=338 nstack_initial=0), State(pc_initial=348 nstack_initial=0)])
2023-08-13 11:42:47,522 stack: []
2023-08-13 11:42:47,522 state.pc_initial: State(pc_initial=118 nstack_initial=0)
2023-08-13 11:42:47,522 dispatch pc=118, inst=LOAD_DEREF(arg=7, lineno=226)
2023-08-13 11:42:47,522 stack []
2023-08-13 11:42:47,522 dispatch pc=120, inst=RETURN_VALUE(arg=None, lineno=226)
2023-08-13 11:42:47,522 stack ['$118load_deref.0']
2023-08-13 11:42:47,522 end state. edges=[]
2023-08-13 11:42:47,523 pending: deque([State(pc_initial=122 nstack_initial=0), State(pc_initial=164 nstack_initial=0), State(pc_initial=180 nstack_initial=0), State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0), State(pc_initial=338 nstack_initial=0), State(pc_initial=348 nstack_initial=0)])
2023-08-13 11:42:47,523 stack: []
2023-08-13 11:42:47,523 state.pc_initial: State(pc_initial=122 nstack_initial=0)
2023-08-13 11:42:47,523 dispatch pc=122, inst=LOAD_GLOBAL(arg=3, lineno=228)
2023-08-13 11:42:47,523 stack []
2023-08-13 11:42:47,523 dispatch pc=134, inst=LOAD_CONST(arg=4, lineno=228)
2023-08-13 11:42:47,523 stack ['$null$122.1', '$122load_global.0']
2023-08-13 11:42:47,523 dispatch pc=136, inst=PRECALL(arg=1, lineno=228)
2023-08-13 11:42:47,523 stack ['$null$122.1', '$122load_global.0', '$const134.2']
2023-08-13 11:42:47,523 dispatch pc=140, inst=CALL(arg=1, lineno=228)
2023-08-13 11:42:47,523 stack ['$null$122.1', '$122load_global.0', '$const134.2']
2023-08-13 11:42:47,523 dispatch pc=150, inst=RAISE_VARARGS(arg=1, lineno=228)
2023-08-13 11:42:47,523 stack ['$140call.3']
2023-08-13 11:42:47,523 end state. edges=[]
2023-08-13 11:42:47,524 pending: deque([State(pc_initial=164 nstack_initial=0), State(pc_initial=180 nstack_initial=0), State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0), State(pc_initial=338 nstack_initial=0), State(pc_initial=348 nstack_initial=0)])
2023-08-13 11:42:47,524 stack: []
2023-08-13 11:42:47,524 state.pc_initial: State(pc_initial=164 nstack_initial=0)
2023-08-13 11:42:47,524 dispatch pc=164, inst=LOAD_FAST(arg=0, lineno=229)
2023-08-13 11:42:47,524 stack []
2023-08-13 11:42:47,524 dispatch pc=166, inst=LOAD_CONST(arg=5, lineno=229)
2023-08-13 11:42:47,524 stack ['$a164.0']
2023-08-13 11:42:47,524 dispatch pc=168, inst=COMPARE_OP(arg=3, lineno=229)
2023-08-13 11:42:47,524 stack ['$a164.0', '$const166.1']
2023-08-13 11:42:47,524 dispatch pc=174, inst=POP_JUMP_FORWARD_IF_FALSE(arg=2, lineno=229)
2023-08-13 11:42:47,524 stack ['$168compare_op.2']
2023-08-13 11:42:47,524 end state. edges=[Edge(pc=176, stack=(), blockstack=(), npush=0), Edge(pc=180, stack=(), blockstack=(), npush=0)]
2023-08-13 11:42:47,524 pending: deque([State(pc_initial=180 nstack_initial=0), State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0), State(pc_initial=338 nstack_initial=0), State(pc_initial=348 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=180 nstack_initial=0)])
2023-08-13 11:42:47,524 pending: deque([State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0), State(pc_initial=338 nstack_initial=0), State(pc_initial=348 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=180 nstack_initial=0)])
2023-08-13 11:42:47,525 stack: []
2023-08-13 11:42:47,525 state.pc_initial: State(pc_initial=292 nstack_initial=0)
2023-08-13 11:42:47,525 dispatch pc=292, inst=LOAD_FAST(arg=2, lineno=239)
2023-08-13 11:42:47,525 stack []
2023-08-13 11:42:47,525 dispatch pc=294, inst=LOAD_FAST(arg=0, lineno=239)
2023-08-13 11:42:47,525 stack ['$r292.0']
2023-08-13 11:42:47,525 dispatch pc=296, inst=BINARY_OP(arg=18, lineno=239)
2023-08-13 11:42:47,525 stack ['$r292.0', '$a294.1']
2023-08-13 11:42:47,525 dispatch pc=300, inst=STORE_FAST(arg=2, lineno=239)
2023-08-13 11:42:47,525 stack ['$binop_imul296.2']
2023-08-13 11:42:47,525 end state. edges=[Edge(pc=302, stack=(), blockstack=(), npush=0)]
2023-08-13 11:42:47,525 pending: deque([State(pc_initial=302 nstack_initial=0), State(pc_initial=338 nstack_initial=0), State(pc_initial=348 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=180 nstack_initial=0), State(pc_initial=302 nstack_initial=0)])
2023-08-13 11:42:47,526 stack: []
2023-08-13 11:42:47,526 state.pc_initial: State(pc_initial=302 nstack_initial=0)
2023-08-13 11:42:47,526 dispatch pc=302, inst=LOAD_FAST(arg=4, lineno=240)
2023-08-13 11:42:47,526 stack []
2023-08-13 11:42:47,526 dispatch pc=304, inst=LOAD_CONST(arg=1, lineno=240)
2023-08-13 11:42:47,526 stack ['$exp302.0']
2023-08-13 11:42:47,526 dispatch pc=306, inst=BINARY_OP(arg=22, lineno=240)
2023-08-13 11:42:47,526 stack ['$exp302.0', '$const304.1']
2023-08-13 11:42:47,526 dispatch pc=310, inst=STORE_FAST(arg=4, lineno=240)
2023-08-13 11:42:47,527 stack ['$binop_irshift306.2']
2023-08-13 11:42:47,527 dispatch pc=312, inst=LOAD_FAST(arg=0, lineno=241)
2023-08-13 11:42:47,527 stack []
2023-08-13 11:42:47,527 dispatch pc=314, inst=LOAD_FAST(arg=0, lineno=241)
2023-08-13 11:42:47,527 stack ['$a312.3']
2023-08-13 11:42:47,527 dispatch pc=316, inst=BINARY_OP(arg=18, lineno=241)
2023-08-13 11:42:47,527 stack ['$a312.3', '$a314.4']
2023-08-13 11:42:47,527 dispatch pc=320, inst=STORE_FAST(arg=0, lineno=241)
2023-08-13 11:42:47,527 stack ['$binop_imul316.5']
2023-08-13 11:42:47,527 dispatch pc=322, inst=LOAD_FAST(arg=4, lineno=237)
2023-08-13 11:42:47,527 stack []
2023-08-13 11:42:47,527 dispatch pc=324, inst=LOAD_CONST(arg=2, lineno=237)
2023-08-13 11:42:47,528 stack ['$exp322.6']
2023-08-13 11:42:47,528 dispatch pc=326, inst=COMPARE_OP(arg=3, lineno=237)
2023-08-13 11:42:47,528 stack ['$exp322.6', '$const324.7']
2023-08-13 11:42:47,528 dispatch pc=332, inst=POP_JUMP_BACKWARD_IF_TRUE(arg=26, lineno=237)
2023-08-13 11:42:47,528 stack ['$326compare_op.8']
2023-08-13 11:42:47,528 end state. edges=[Edge(pc=334, stack=(), blockstack=(), npush=0), Edge(pc=282, stack=(), blockstack=(), npush=0)]
2023-08-13 11:42:47,528 pending: deque([State(pc_initial=338 nstack_initial=0), State(pc_initial=348 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=180 nstack_initial=0), State(pc_initial=302 nstack_initial=0), State(pc_initial=334 nstack_initial=0), State(pc_initial=282 nstack_initial=0)])
2023-08-13 11:42:47,528 stack: []
2023-08-13 11:42:47,528 state.pc_initial: State(pc_initial=338 nstack_initial=0)
2023-08-13 11:42:47,528 dispatch pc=338, inst=LOAD_CONST(arg=8, lineno=243)
2023-08-13 11:42:47,528 stack []
2023-08-13 11:42:47,528 dispatch pc=340, inst=LOAD_FAST(arg=2, lineno=243)
2023-08-13 11:42:47,528 stack ['$const338.0']
2023-08-13 11:42:47,528 dispatch pc=342, inst=BINARY_OP(arg=11, lineno=243)
2023-08-13 11:42:47,529 stack ['$const338.0', '$r340.1']
2023-08-13 11:42:47,529 dispatch pc=346, inst=JUMP_FORWARD(arg=1, lineno=243)
2023-08-13 11:42:47,529 stack ['$binop_truediv342.2']
2023-08-13 11:42:47,529 end state. edges=[Edge(pc=350, stack=('$binop_truediv342.2',), blockstack=(), npush=0)]
2023-08-13 11:42:47,529 pending: deque([State(pc_initial=348 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=180 nstack_initial=0), State(pc_initial=302 nstack_initial=0), State(pc_initial=334 nstack_initial=0), State(pc_initial=282 nstack_initial=0), State(pc_initial=350 nstack_initial=1)])
2023-08-13 11:42:47,529 stack: []
2023-08-13 11:42:47,529 state.pc_initial: State(pc_initial=348 nstack_initial=0)
2023-08-13 11:42:47,529 dispatch pc=348, inst=LOAD_FAST(arg=2, lineno=243)
2023-08-13 11:42:47,529 stack []
2023-08-13 11:42:47,529 end state. edges=[Edge(pc=350, stack=('$r348.0',), blockstack=(), npush=0)]
2023-08-13 11:42:47,529 pending: deque([State(pc_initial=176 nstack_initial=0), State(pc_initial=180 nstack_initial=0), State(pc_initial=302 nstack_initial=0), State(pc_initial=334 nstack_initial=0), State(pc_initial=282 nstack_initial=0), State(pc_initial=350 nstack_initial=1), State(pc_initial=350 nstack_initial=1)])
2023-08-13 11:42:47,529 stack: []
2023-08-13 11:42:47,529 state.pc_initial: State(pc_initial=176 nstack_initial=0)
2023-08-13 11:42:47,530 dispatch pc=176, inst=LOAD_CONST(arg=2, lineno=230)
2023-08-13 11:42:47,530 stack []
2023-08-13 11:42:47,530 dispatch pc=178, inst=RETURN_VALUE(arg=None, lineno=230)
2023-08-13 11:42:47,530 stack ['$const176.0']
2023-08-13 11:42:47,530 end state. edges=[]
2023-08-13 11:42:47,530 pending: deque([State(pc_initial=180 nstack_initial=0), State(pc_initial=302 nstack_initial=0), State(pc_initial=334 nstack_initial=0), State(pc_initial=282 nstack_initial=0), State(pc_initial=350 nstack_initial=1), State(pc_initial=350 nstack_initial=1)])
2023-08-13 11:42:47,530 pending: deque([State(pc_initial=302 nstack_initial=0), State(pc_initial=334 nstack_initial=0), State(pc_initial=282 nstack_initial=0), State(pc_initial=350 nstack_initial=1), State(pc_initial=350 nstack_initial=1)])
2023-08-13 11:42:47,530 pending: deque([State(pc_initial=334 nstack_initial=0), State(pc_initial=282 nstack_initial=0), State(pc_initial=350 nstack_initial=1), State(pc_initial=350 nstack_initial=1)])
2023-08-13 11:42:47,530 pending: deque([State(pc_initial=282 nstack_initial=0), State(pc_initial=350 nstack_initial=1), State(pc_initial=350 nstack_initial=1)])
2023-08-13 11:42:47,530 pending: deque([State(pc_initial=350 nstack_initial=1), State(pc_initial=350 nstack_initial=1)])
2023-08-13 11:42:47,530 stack: ['$phi350.0']
2023-08-13 11:42:47,530 state.pc_initial: State(pc_initial=350 nstack_initial=1)
2023-08-13 11:42:47,530 dispatch pc=350, inst=RETURN_VALUE(arg=None, lineno=243)
2023-08-13 11:42:47,530 stack ['$phi350.0']
2023-08-13 11:42:47,531 end state. edges=[]
2023-08-13 11:42:47,531 pending: deque([State(pc_initial=350 nstack_initial=1)])
2023-08-13 11:42:47,531 -------------------------Prune PHIs-------------------------
2023-08-13 11:42:47,532 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=84 nstack_initial=0): set(),
             State(pc_initial=98 nstack_initial=0): set(),
             State(pc_initial=102 nstack_initial=0): set(),
             State(pc_initial=114 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=122 nstack_initial=0): set(),
             State(pc_initial=152 nstack_initial=0): set(),
             State(pc_initial=164 nstack_initial=0): set(),
             State(pc_initial=176 nstack_initial=0): set(),
             State(pc_initial=180 nstack_initial=0): set(),
             State(pc_initial=182 nstack_initial=0): set(),
             State(pc_initial=190 nstack_initial=0): set(),
             State(pc_initial=202 nstack_initial=0): set(),
             State(pc_initial=270 nstack_initial=0): set(),
             State(pc_initial=282 nstack_initial=0): set(),
             State(pc_initial=292 nstack_initial=0): set(),
             State(pc_initial=302 nstack_initial=0): set(),
             State(pc_initial=334 nstack_initial=0): set(),
             State(pc_initial=338 nstack_initial=0): set(),
             State(pc_initial=348 nstack_initial=0): set(),
             State(pc_initial=350 nstack_initial=1): {'$phi350.0'}})
2023-08-13 11:42:47,532 defmap: {'$phi350.0': State(pc_initial=348 nstack_initial=0)}
2023-08-13 11:42:47,532 phismap: defaultdict(<class 'set'>,
            {'$phi350.0': {('$binop_truediv342.2',
                            State(pc_initial=338 nstack_initial=0)),
                           ('$r348.0',
                            State(pc_initial=348 nstack_initial=0))}})
2023-08-13 11:42:47,532 changing phismap: defaultdict(<class 'set'>,
            {'$phi350.0': {('$binop_truediv342.2',
                            State(pc_initial=338 nstack_initial=0)),
                           ('$r348.0',
                            State(pc_initial=348 nstack_initial=0))}})
2023-08-13 11:42:47,533 keep phismap: {'$phi350.0': {('$binop_truediv342.2', State(pc_initial=338 nstack_initial=0)),
               ('$r348.0', State(pc_initial=348 nstack_initial=0))}}
2023-08-13 11:42:47,533 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=338 nstack_initial=0): {'$phi350.0': '$binop_truediv342.2'},
             State(pc_initial=348 nstack_initial=0): {'$phi350.0': '$r348.0'}})
2023-08-13 11:42:47,533 ----------------------DONE Prune PHIs-----------------------
2023-08-13 11:42:47,533 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {}), (6, {}), (8, {'res': '$8load_deref.1'}), (10, {'res': '$const10.2'}), (12, {}), (14, {}), (16, {'func': '$8load_deref.1', 'args': ['$const10.2'], 'kw_names': None, 'res': '$16call.3'}), (18, {}), (20, {}), (22, {}), (24, {}), (26, {'value': '$16call.3'}), (28, {}), (30, {'res': '$30load_deref.5'}), (32, {'res': '$a32.6'}), (34, {}), (36, {}), (38, {'func': '$30load_deref.5', 'args': ['$a32.6'], 'kw_names': None, 'res': '$38call.7'}), (40, {}), (42, {}), (44, {}), (46, {}), (48, {'value': '$38call.7'}), (50, {'res': '$b50.8'}), (52, {'res': '$const52.9'}), (54, {'lhs': '$b50.8', 'rhs': '$const52.9', 'res': '$54compare_op.10'}), (56, {}), (58, {}), (60, {'pred': '$54compare_op.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: (), 182: ()})
2023-08-13 11:42:47,533 block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$const62.0'}), (64, {'value': '$const62.0'}), (66, {'res': '$b66.1'}), (68, {'value': '$b66.1', 'res': '$68unary_negative.2'}), (70, {'value': '$68unary_negative.2'}), (72, {'res': '$exp72.3'}), (74, {'res': '$const74.4'}), (76, {'lhs': '$exp72.3', 'rhs': '$const74.4', 'res': '$76compare_op.5'}), (78, {}), (80, {}), (82, {'pred': '$76compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={84: (), 98: ()})
2023-08-13 11:42:47,533 block_infos State(pc_initial=84 nstack_initial=0):
AdaptBlockInfo(insts=((84, {'idx': 0, 'res': '$84load_global.0'}), (86, {}), (88, {}), (90, {}), (92, {}), (94, {}), (96, {'exc': '$84load_global.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:47,533 block_infos State(pc_initial=98 nstack_initial=0):
AdaptBlockInfo(insts=((98, {'res': '$98load_deref.0'}), (100, {'pred': '$98load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={102: (), 180: ()})
2023-08-13 11:42:47,533 block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {'res': '$a102.0'}), (104, {'res': '$const104.1'}), (106, {'lhs': '$a102.0', 'rhs': '$const104.1', 'res': '$106compare_op.2'}), (108, {}), (110, {}), (112, {'pred': '$106compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: (), 152: ()})
2023-08-13 11:42:47,534 block_infos State(pc_initial=114 nstack_initial=0):
AdaptBlockInfo(insts=((114, {'res': '$114load_deref.0'}), (116, {'pred': '$114load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={118: (), 122: ()})
2023-08-13 11:42:47,534 block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'res': '$118load_deref.0'}), (120, {'retval': '$118load_deref.0', 'castval': '$120return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:47,534 block_infos State(pc_initial=122 nstack_initial=0):
AdaptBlockInfo(insts=((122, {'idx': 1, 'res': '$122load_global.0'}), (124, {}), (126, {}), (128, {}), (130, {}), (132, {}), (134, {'res': '$const134.2'}), (136, {}), (138, {}), (140, {'func': '$122load_global.0', 'args': ['$const134.2'], 'kw_names': None, 'res': '$140call.3'}), (142, {}), (144, {}), (146, {}), (148, {}), (150, {'exc': '$140call.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:47,534 block_infos State(pc_initial=152 nstack_initial=0):
AdaptBlockInfo(insts=((152, {'res': '$a152.0'}), (154, {'res': '$const154.1'}), (156, {'lhs': '$a152.0', 'rhs': '$const154.1', 'res': '$156compare_op.2'}), (158, {}), (160, {}), (162, {'pred': '$156compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={164: (), 180: ()})
2023-08-13 11:42:47,534 block_infos State(pc_initial=164 nstack_initial=0):
AdaptBlockInfo(insts=((164, {'res': '$a164.0'}), (166, {'res': '$const166.1'}), (168, {'lhs': '$a164.0', 'rhs': '$const166.1', 'res': '$168compare_op.2'}), (170, {}), (172, {}), (174, {'pred': '$168compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={176: (), 180: ()})
2023-08-13 11:42:47,534 block_infos State(pc_initial=176 nstack_initial=0):
AdaptBlockInfo(insts=((176, {'res': '$const176.0'}), (178, {'retval': '$const176.0', 'castval': '$178return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:47,534 block_infos State(pc_initial=180 nstack_initial=0):
AdaptBlockInfo(insts=((180, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={190: ()})
2023-08-13 11:42:47,534 block_infos State(pc_initial=182 nstack_initial=0):
AdaptBlockInfo(insts=((182, {'res': '$const182.0'}), (184, {'value': '$const182.0'}), (186, {'res': '$b186.1'}), (188, {'value': '$b186.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={190: ()})
2023-08-13 11:42:47,534 block_infos State(pc_initial=190 nstack_initial=0):
AdaptBlockInfo(insts=((190, {'res': '$exp190.0'}), (192, {'res': '$const192.1'}), (194, {'lhs': '$exp190.0', 'rhs': '$const192.1', 'res': '$194compare_op.2'}), (196, {}), (198, {}), (200, {'pred': '$194compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={202: (), 270: ()})
2023-08-13 11:42:47,534 block_infos State(pc_initial=202 nstack_initial=0):
AdaptBlockInfo(insts=((202, {'idx': 2, 'res': '$202load_global.0'}), (204, {}), (206, {}), (208, {}), (210, {}), (212, {}), (214, {'item': '$202load_global.0', 'res': '$214load_attr.2'}), (216, {}), (218, {}), (220, {}), (222, {}), (224, {'res': '$a224.3'}), (226, {'idx': 4, 'res': '$226load_global.4'}), (228, {}), (230, {}), (232, {}), (234, {}), (236, {}), (238, {'res': '$b238.6'}), (240, {}), (242, {}), (244, {'func': '$226load_global.4', 'args': ['$b238.6'], 'kw_names': None, 'res': '$244call.7'}), (246, {}), (248, {}), (250, {}), (252, {}), (254, {}), (256, {}), (258, {'func': '$214load_attr.2', 'args': ['$a224.3', '$244call.7'], 'kw_names': None, 'res': '$258call.8'}), (260, {}), (262, {}), (264, {}), (266, {}), (268, {'retval': '$258call.8', 'castval': '$268return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:47,534 block_infos State(pc_initial=270 nstack_initial=0):
AdaptBlockInfo(insts=((270, {'res': '$exp270.0'}), (272, {'res': '$const272.1'}), (274, {'lhs': '$exp270.0', 'rhs': '$const272.1', 'res': '$274compare_op.2'}), (276, {}), (278, {}), (280, {'pred': '$274compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={282: (), 334: ()})
2023-08-13 11:42:47,535 block_infos State(pc_initial=282 nstack_initial=0):
AdaptBlockInfo(insts=((282, {'res': '$exp282.0'}), (284, {'res': '$const284.1'}), (286, {'op': '&', 'lhs': '$exp282.0', 'rhs': '$const284.1', 'res': '$binop_and_286.2'}), (288, {}), (290, {'pred': '$binop_and_286.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={292: (), 302: ()})
2023-08-13 11:42:47,535 block_infos State(pc_initial=292 nstack_initial=0):
AdaptBlockInfo(insts=((292, {'res': '$r292.0'}), (294, {'res': '$a294.1'}), (296, {'op': '*=', 'lhs': '$r292.0', 'rhs': '$a294.1', 'res': '$binop_imul296.2'}), (298, {}), (300, {'value': '$binop_imul296.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={302: ()})
2023-08-13 11:42:47,535 block_infos State(pc_initial=302 nstack_initial=0):
AdaptBlockInfo(insts=((302, {'res': '$exp302.0'}), (304, {'res': '$const304.1'}), (306, {'op': '>>=', 'lhs': '$exp302.0', 'rhs': '$const304.1', 'res': '$binop_irshift306.2'}), (308, {}), (310, {'value': '$binop_irshift306.2'}), (312, {'res': '$a312.3'}), (314, {'res': '$a314.4'}), (316, {'op': '*=', 'lhs': '$a312.3', 'rhs': '$a314.4', 'res': '$binop_imul316.5'}), (318, {}), (320, {'value': '$binop_imul316.5'}), (322, {'res': '$exp322.6'}), (324, {'res': '$const324.7'}), (326, {'lhs': '$exp322.6', 'rhs': '$const324.7', 'res': '$326compare_op.8'}), (328, {}), (330, {}), (332, {'pred': '$326compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={334: (), 282: ()})
2023-08-13 11:42:47,535 block_infos State(pc_initial=334 nstack_initial=0):
AdaptBlockInfo(insts=((334, {'res': '$invert334.0'}), (336, {'pred': '$invert334.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={338: (), 348: ()})
2023-08-13 11:42:47,535 block_infos State(pc_initial=338 nstack_initial=0):
AdaptBlockInfo(insts=((338, {'res': '$const338.0'}), (340, {'res': '$r340.1'}), (342, {'op': '/', 'lhs': '$const338.0', 'rhs': '$r340.1', 'res': '$binop_truediv342.2'}), (344, {}), (346, {})), outgoing_phis={'$phi350.0': '$binop_truediv342.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={350: ('$binop_truediv342.2',)})
2023-08-13 11:42:47,535 block_infos State(pc_initial=348 nstack_initial=0):
AdaptBlockInfo(insts=((348, {'res': '$r348.0'}),), outgoing_phis={'$phi350.0': '$r348.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={350: ('$r348.0',)})
2023-08-13 11:42:47,535 block_infos State(pc_initial=350 nstack_initial=1):
AdaptBlockInfo(insts=((350, {'retval': '$phi350.0', 'castval': '$350return_value.1'}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:47,538 label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $8load_deref.1 = freevar(tp: float64)    ['$8load_deref.1']
    $const10.2 = const(int, 1)               ['$const10.2']
    r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None) ['$8load_deref.1', '$const10.2', 'r']
    $30load_deref.5 = freevar(tp: float64)   ['$30load_deref.5']
    a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_deref.5', 'a', 'a.1']
    $const52.9 = const(int, 0)               ['$const52.9']
    $54compare_op.10 = b < $const52.9        ['$54compare_op.10', '$const52.9', 'b']
    bool60 = global(bool: <class 'bool'>)    ['bool60']
    $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None) ['$54compare_op.10', '$60pred', 'bool60']
    branch $60pred, 62, 182                  ['$60pred']
label 62:
    invert = const(bool, True)               ['invert']
    exp = unary(fn=<built-in function neg>, value=b) ['b', 'exp']
    $const74.4 = const(int, 0)               ['$const74.4']
    $76compare_op.5 = exp < $const74.4       ['$76compare_op.5', '$const74.4', 'exp']
    bool82 = global(bool: <class 'bool'>)    ['bool82']
    $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None) ['$76compare_op.5', '$82pred', 'bool82']
    branch $82pred, 84, 98                   ['$82pred']
label 84:
    $84load_global.0 = global(OverflowError: <class 'OverflowError'>) ['$84load_global.0']
    raise $84load_global.0                   ['$84load_global.0']
label 98:
    $98load_deref.0 = freevar(is_integer: False) ['$98load_deref.0']
    bool100 = global(bool: <class 'bool'>)   ['bool100']
    $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None) ['$100pred', '$98load_deref.0', 'bool100']
    branch $100pred, 102, 180                ['$100pred']
label 102:
    $const104.1 = const(int, 0)              ['$const104.1']
    $106compare_op.2 = a.1 == $const104.1    ['$106compare_op.2', '$const104.1', 'a.1']
    bool112 = global(bool: <class 'bool'>)   ['bool112']
    $112pred = call bool112($106compare_op.2, func=bool112, args=(Var($106compare_op.2, numbers.py:224),), kws=(), vararg=None, varkwarg=None, target=None) ['$106compare_op.2', '$112pred', 'bool112']
    branch $112pred, 114, 152                ['$112pred']
label 114:
    $114load_deref.0 = freevar(zerodiv_return: False) ['$114load_deref.0']
    bool116 = global(bool: <class 'bool'>)   ['bool116']
    $116pred = call bool116($114load_deref.0, func=bool116, args=(Var($114load_deref.0, numbers.py:225),), kws=(), vararg=None, varkwarg=None, target=None) ['$114load_deref.0', '$116pred', 'bool116']
    branch $116pred, 118, 122                ['$116pred']
label 118:
    $118load_deref.0 = freevar(zerodiv_return: False) ['$118load_deref.0']
    $120return_value.1 = cast(value=$118load_deref.0) ['$118load_deref.0', '$120return_value.1']
    return $120return_value.1                ['$120return_value.1']
label 122:
    $122load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>) ['$122load_global.0']
    $const134.2 = const(str, 0 cannot be raised to a negative power) ['$const134.2']
    $140call.3 = call $122load_global.0($const134.2, func=$122load_global.0, args=[Var($const134.2, numbers.py:228)], kws=(), vararg=None, varkwarg=None, target=None) ['$122load_global.0', '$140call.3', '$const134.2']
    raise $140call.3                         ['$140call.3']
label 152:
    $const154.1 = const(int, 1)              ['$const154.1']
    $156compare_op.2 = a.1 != $const154.1    ['$156compare_op.2', '$const154.1', 'a.1']
    bool162 = global(bool: <class 'bool'>)   ['bool162']
    $162pred = call bool162($156compare_op.2, func=bool162, args=(Var($156compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None) ['$156compare_op.2', '$162pred', 'bool162']
    branch $162pred, 164, 180                ['$162pred']
label 164:
    $const166.1 = const(int, -1)             ['$const166.1']
    $168compare_op.2 = a.1 != $const166.1    ['$168compare_op.2', '$const166.1', 'a.1']
    bool174 = global(bool: <class 'bool'>)   ['bool174']
    $174pred = call bool174($168compare_op.2, func=bool174, args=(Var($168compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None) ['$168compare_op.2', '$174pred', 'bool174']
    branch $174pred, 176, 180                ['$174pred']
label 176:
    $const176.0 = const(int, 0)              ['$const176.0']
    $178return_value.1 = cast(value=$const176.0) ['$178return_value.1', '$const176.0']
    return $178return_value.1                ['$178return_value.1']
label 180:
    jump 190                                 []
label 182:
    invert = const(bool, False)              ['invert']
    exp = b                                  ['b', 'exp']
    jump 190                                 []
label 190:
    $const192.1 = const(int, 65536)          ['$const192.1']
    $194compare_op.2 = exp > $const192.1     ['$194compare_op.2', '$const192.1', 'exp']
    bool200 = global(bool: <class 'bool'>)   ['bool200']
    $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None) ['$194compare_op.2', '$200pred', 'bool200']
    branch $200pred, 202, 270                ['$200pred']
label 202:
    $202load_global.0 = global(math: <module 'math' (built-in)>) ['$202load_global.0']
    $214load_attr.2 = getattr(value=$202load_global.0, attr=pow) ['$202load_global.0', '$214load_attr.2']
    $226load_global.4 = global(float: <class 'float'>) ['$226load_global.4']
    $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None) ['$226load_global.4', '$244call.7', 'b']
    $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None) ['$214load_attr.2', '$244call.7', '$258call.8', 'a.1']
    $268return_value.9 = cast(value=$258call.8) ['$258call.8', '$268return_value.9']
    return $268return_value.9                ['$268return_value.9']
label 270:
    $const272.1 = const(int, 0)              ['$const272.1']
    $274compare_op.2 = exp != $const272.1    ['$274compare_op.2', '$const272.1', 'exp']
    bool280 = global(bool: <class 'bool'>)   ['bool280']
    $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None) ['$274compare_op.2', '$280pred', 'bool280']
    branch $280pred, 282, 334                ['$280pred']
label 282:
    $const284.1 = const(int, 1)              ['$const284.1']
    $binop_and_286.2 = exp & $const284.1     ['$binop_and_286.2', '$const284.1', 'exp']
    bool290 = global(bool: <class 'bool'>)   ['bool290']
    $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None) ['$290pred', '$binop_and_286.2', 'bool290']
    branch $290pred, 292, 302                ['$290pred']
label 292:
    $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$binop_imul296.2', 'a.1', 'r']
    r = $binop_imul296.2                     ['$binop_imul296.2', 'r']
    jump 302                                 []
label 302:
    $const304.1 = const(int, 1)              ['$const304.1']
    $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined) ['$binop_irshift306.2', '$const304.1', 'exp']
    exp = $binop_irshift306.2                ['$binop_irshift306.2', 'exp']
    $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$binop_imul316.5', 'a.1', 'a.1']
    a.1 = $binop_imul316.5                   ['$binop_imul316.5', 'a.1']
    $const324.7 = const(int, 0)              ['$const324.7']
    $326compare_op.8 = exp != $const324.7    ['$326compare_op.8', '$const324.7', 'exp']
    bool332 = global(bool: <class 'bool'>)   ['bool332']
    $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None) ['$326compare_op.8', '$332pred', 'bool332']
    branch $332pred, 282, 334                ['$332pred']
label 334:
    bool336 = global(bool: <class 'bool'>)   ['bool336']
    $336pred = call bool336(invert, func=bool336, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None) ['$336pred', 'bool336', 'invert']
    branch $336pred, 338, 348                ['$336pred']
label 338:
    $const338.0 = const(float, 1.0)          ['$const338.0']
    $binop_truediv342.2 = $const338.0 / r    ['$binop_truediv342.2', '$const338.0', 'r']
    $phi350.0 = $binop_truediv342.2          ['$binop_truediv342.2', '$phi350.0']
    jump 350                                 []
label 348:
    $phi350.0 = r                            ['$phi350.0', 'r']
    jump 350                                 []
label 350:
    $350return_value.1 = cast(value=$phi350.0) ['$350return_value.1', '$phi350.0']
    return $350return_value.1                ['$350return_value.1']

2023-08-13 11:42:47,555 ==== SSA block analysis pass on 0
2023-08-13 11:42:47,555 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6971A34D0>
2023-08-13 11:42:47,555 on stmt: a = arg(0, name=a)
2023-08-13 11:42:47,555 on stmt: b = arg(1, name=b)
2023-08-13 11:42:47,555 on stmt: $8load_deref.1 = freevar(tp: float64)
2023-08-13 11:42:47,555 on stmt: $const10.2 = const(int, 1)
2023-08-13 11:42:47,555 on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,555 on stmt: $30load_deref.5 = freevar(tp: float64)
2023-08-13 11:42:47,555 on stmt: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,555 on stmt: $const52.9 = const(int, 0)
2023-08-13 11:42:47,555 on stmt: $54compare_op.10 = b < $const52.9
2023-08-13 11:42:47,556 on stmt: bool60 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,556 on stmt: $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,556 on stmt: branch $60pred, 62, 182
2023-08-13 11:42:47,556 ==== SSA block analysis pass on 62
2023-08-13 11:42:47,556 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6971A34D0>
2023-08-13 11:42:47,556 on stmt: invert = const(bool, True)
2023-08-13 11:42:47,556 on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-08-13 11:42:47,556 on stmt: $const74.4 = const(int, 0)
2023-08-13 11:42:47,556 on stmt: $76compare_op.5 = exp < $const74.4
2023-08-13 11:42:47,556 on stmt: bool82 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,556 on stmt: $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,556 on stmt: branch $82pred, 84, 98
2023-08-13 11:42:47,556 ==== SSA block analysis pass on 84
2023-08-13 11:42:47,556 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6971A34D0>
2023-08-13 11:42:47,556 on stmt: $84load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-08-13 11:42:47,556 on stmt: <static> raise <class 'OverflowError'>
2023-08-13 11:42:47,557 ==== SSA block analysis pass on 98
2023-08-13 11:42:47,557 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6971A34D0>
2023-08-13 11:42:47,557 on stmt: $98load_deref.0 = freevar(is_integer: False)
2023-08-13 11:42:47,557 on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,557 on stmt: $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,557 on stmt: jump 180
2023-08-13 11:42:47,557 ==== SSA block analysis pass on 180
2023-08-13 11:42:47,557 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6971A34D0>
2023-08-13 11:42:47,557 on stmt: jump 190
2023-08-13 11:42:47,557 ==== SSA block analysis pass on 182
2023-08-13 11:42:47,557 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6971A34D0>
2023-08-13 11:42:47,557 on stmt: invert = const(bool, False)
2023-08-13 11:42:47,557 on stmt: exp = b
2023-08-13 11:42:47,558 on stmt: jump 190
2023-08-13 11:42:47,558 ==== SSA block analysis pass on 190
2023-08-13 11:42:47,558 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6971A34D0>
2023-08-13 11:42:47,558 on stmt: $const192.1 = const(int, 65536)
2023-08-13 11:42:47,558 on stmt: $194compare_op.2 = exp > $const192.1
2023-08-13 11:42:47,558 on stmt: bool200 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,558 on stmt: $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,558 on stmt: branch $200pred, 202, 270
2023-08-13 11:42:47,558 ==== SSA block analysis pass on 202
2023-08-13 11:42:47,558 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6971A34D0>
2023-08-13 11:42:47,558 on stmt: $202load_global.0 = global(math: <module 'math' (built-in)>)
2023-08-13 11:42:47,558 on stmt: $214load_attr.2 = getattr(value=$202load_global.0, attr=pow)
2023-08-13 11:42:47,558 on stmt: $226load_global.4 = global(float: <class 'float'>)
2023-08-13 11:42:47,558 on stmt: $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,558 on stmt: $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,559 on stmt: $268return_value.9 = cast(value=$258call.8)
2023-08-13 11:42:47,559 on stmt: return $268return_value.9
2023-08-13 11:42:47,559 ==== SSA block analysis pass on 270
2023-08-13 11:42:47,559 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6971A34D0>
2023-08-13 11:42:47,559 on stmt: $const272.1 = const(int, 0)
2023-08-13 11:42:47,559 on stmt: $274compare_op.2 = exp != $const272.1
2023-08-13 11:42:47,559 on stmt: bool280 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,559 on stmt: $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,559 on stmt: branch $280pred, 282, 334
2023-08-13 11:42:47,559 ==== SSA block analysis pass on 282
2023-08-13 11:42:47,560 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6971A34D0>
2023-08-13 11:42:47,560 on stmt: $const284.1 = const(int, 1)
2023-08-13 11:42:47,560 on stmt: $binop_and_286.2 = exp & $const284.1
2023-08-13 11:42:47,560 on stmt: bool290 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,560 on stmt: $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,560 on stmt: branch $290pred, 292, 302
2023-08-13 11:42:47,560 ==== SSA block analysis pass on 292
2023-08-13 11:42:47,560 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6971A34D0>
2023-08-13 11:42:47,560 on stmt: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,561 on stmt: r = $binop_imul296.2
2023-08-13 11:42:47,561 on stmt: jump 302
2023-08-13 11:42:47,561 ==== SSA block analysis pass on 302
2023-08-13 11:42:47,561 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6971A34D0>
2023-08-13 11:42:47,561 on stmt: $const304.1 = const(int, 1)
2023-08-13 11:42:47,561 on stmt: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,561 on stmt: exp = $binop_irshift306.2
2023-08-13 11:42:47,561 on stmt: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,561 on stmt: a.1 = $binop_imul316.5
2023-08-13 11:42:47,561 on stmt: $const324.7 = const(int, 0)
2023-08-13 11:42:47,561 on stmt: $326compare_op.8 = exp != $const324.7
2023-08-13 11:42:47,561 on stmt: bool332 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,561 on stmt: $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,561 on stmt: branch $332pred, 282, 334
2023-08-13 11:42:47,562 ==== SSA block analysis pass on 334
2023-08-13 11:42:47,562 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6971A34D0>
2023-08-13 11:42:47,562 on stmt: bool336 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,562 on stmt: $336pred = call bool336(invert, func=bool336, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,562 on stmt: branch $336pred, 338, 348
2023-08-13 11:42:47,562 ==== SSA block analysis pass on 338
2023-08-13 11:42:47,562 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6971A34D0>
2023-08-13 11:42:47,562 on stmt: $const338.0 = const(float, 1.0)
2023-08-13 11:42:47,562 on stmt: $binop_truediv342.2 = $const338.0 / r
2023-08-13 11:42:47,562 on stmt: $phi350.0 = $binop_truediv342.2
2023-08-13 11:42:47,562 on stmt: jump 350
2023-08-13 11:42:47,562 ==== SSA block analysis pass on 348
2023-08-13 11:42:47,562 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6971A34D0>
2023-08-13 11:42:47,562 on stmt: $phi350.0 = r
2023-08-13 11:42:47,562 on stmt: jump 350
2023-08-13 11:42:47,562 ==== SSA block analysis pass on 350
2023-08-13 11:42:47,563 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6971A34D0>
2023-08-13 11:42:47,563 on stmt: $350return_value.1 = cast(value=$phi350.0)
2023-08-13 11:42:47,563 on stmt: return $350return_value.1
2023-08-13 11:42:47,563 defs defaultdict(<class 'list'>,
            {'$100pred': [<numba.core.ir.Assign object at 0x000001F697145B10>],
             '$194compare_op.2': [<numba.core.ir.Assign object at 0x000001F697111E50>],
             '$200pred': [<numba.core.ir.Assign object at 0x000001F697112250>],
             '$202load_global.0': [<numba.core.ir.Assign object at 0x000001F697112510>],
             '$214load_attr.2': [<numba.core.ir.Assign object at 0x000001F697112850>],
             '$226load_global.4': [<numba.core.ir.Assign object at 0x000001F697112C50>],
             '$244call.7': [<numba.core.ir.Assign object at 0x000001F6971131D0>],
             '$258call.8': [<numba.core.ir.Assign object at 0x000001F697113590>],
             '$268return_value.9': [<numba.core.ir.Assign object at 0x000001F697113850>],
             '$274compare_op.2': [<numba.core.ir.Assign object at 0x000001F697113DD0>],
             '$280pred': [<numba.core.ir.Assign object at 0x000001F6971A0250>],
             '$290pred': [<numba.core.ir.Assign object at 0x000001F6971A0C50>],
             '$30load_deref.5': [<numba.core.ir.Assign object at 0x000001F697197110>],
             '$326compare_op.8': [<numba.core.ir.Assign object at 0x000001F6971A2750>],
             '$332pred': [<numba.core.ir.Assign object at 0x000001F6971A2AD0>],
             '$336pred': [<numba.core.ir.Assign object at 0x000001F6971A2FD0>],
             '$350return_value.1': [<numba.core.ir.Assign object at 0x000001F6971A3D10>],
             '$54compare_op.10': [<numba.core.ir.Assign object at 0x000001F697144050>],
             '$60pred': [<numba.core.ir.Assign object at 0x000001F6971443D0>],
             '$76compare_op.5': [<numba.core.ir.Assign object at 0x000001F697144FD0>],
             '$82pred': [<numba.core.ir.Assign object at 0x000001F697145310>],
             '$84load_global.0': [<numba.core.ir.Assign object at 0x000001F697145510>],
             '$8load_deref.1': [<numba.core.ir.Assign object at 0x000001F697125FD0>],
             '$98load_deref.0': [<numba.core.ir.Assign object at 0x000001F697145810>],
             '$binop_and_286.2': [<numba.core.ir.Assign object at 0x000001F6971A08D0>],
             '$binop_imul296.2': [<numba.core.ir.Assign object at 0x000001F6971A1290>],
             '$binop_imul316.5': [<numba.core.ir.Assign object at 0x000001F6971A20D0>],
             '$binop_irshift306.2': [<numba.core.ir.Assign object at 0x000001F6971A19D0>],
             '$binop_truediv342.2': [<numba.core.ir.Assign object at 0x000001F6971A35D0>],
             '$const10.2': [<numba.core.ir.Assign object at 0x000001F697125AD0>],
             '$const192.1': [<numba.core.ir.Assign object at 0x000001F697111C10>],
             '$const272.1': [<numba.core.ir.Assign object at 0x000001F697113BD0>],
             '$const284.1': [<numba.core.ir.Assign object at 0x000001F6971A06D0>],
             '$const304.1': [<numba.core.ir.Assign object at 0x000001F6971A17D0>],
             '$const324.7': [<numba.core.ir.Assign object at 0x000001F6971A2510>],
             '$const338.0': [<numba.core.ir.Assign object at 0x000001F6971A3250>],
             '$const52.9': [<numba.core.ir.Assign object at 0x000001F6971976D0>],
             '$const74.4': [<numba.core.ir.Assign object at 0x000001F697144E10>],
             '$phi350.0': [<numba.core.ir.Assign object at 0x000001F6971A3650>,
                           <numba.core.ir.Assign object at 0x000001F6971A39D0>],
             'a': [<numba.core.ir.Assign object at 0x000001F6971D5B10>],
             'a.1': [<numba.core.ir.Assign object at 0x000001F6971953D0>,
                     <numba.core.ir.Assign object at 0x000001F6971A2250>],
             'b': [<numba.core.ir.Assign object at 0x000001F6971D5CD0>],
             'bool100': [<numba.core.ir.Assign object at 0x000001F6971459D0>],
             'bool200': [<numba.core.ir.Assign object at 0x000001F697112090>],
             'bool280': [<numba.core.ir.Assign object at 0x000001F6971A0090>],
             'bool290': [<numba.core.ir.Assign object at 0x000001F6971A0A90>],
             'bool332': [<numba.core.ir.Assign object at 0x000001F6971A2910>],
             'bool336': [<numba.core.ir.Assign object at 0x000001F6971A2E10>],
             'bool60': [<numba.core.ir.Assign object at 0x000001F697144290>],
             'bool82': [<numba.core.ir.Assign object at 0x000001F697145210>],
             'exp': [<numba.core.ir.Assign object at 0x000001F6971448D0>,
                     <numba.core.ir.Assign object at 0x000001F6971118D0>,
                     <numba.core.ir.Assign object at 0x000001F6971A1B50>],
             'invert': [<numba.core.ir.Assign object at 0x000001F697144490>,
                        <numba.core.ir.Assign object at 0x000001F6971114D0>],
             'r': [<numba.core.ir.Assign object at 0x000001F697125D90>,
                   <numba.core.ir.Assign object at 0x000001F6971A1410>]})
2023-08-13 11:42:47,564 SSA violators {'invert', 'exp', '$phi350.0', 'a.1', 'r'}
2023-08-13 11:42:47,564 Fix SSA violator on var invert
2023-08-13 11:42:47,564 ==== SSA block rewrite pass on 0
2023-08-13 11:42:47,564 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D6FD0>
2023-08-13 11:42:47,564 on stmt: a = arg(0, name=a)
2023-08-13 11:42:47,564 on stmt: b = arg(1, name=b)
2023-08-13 11:42:47,565 on stmt: $8load_deref.1 = freevar(tp: float64)
2023-08-13 11:42:47,565 on stmt: $const10.2 = const(int, 1)
2023-08-13 11:42:47,565 on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,565 on stmt: $30load_deref.5 = freevar(tp: float64)
2023-08-13 11:42:47,565 on stmt: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,565 on stmt: $const52.9 = const(int, 0)
2023-08-13 11:42:47,565 on stmt: $54compare_op.10 = b < $const52.9
2023-08-13 11:42:47,566 on stmt: bool60 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,566 on stmt: $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,566 on stmt: branch $60pred, 62, 182
2023-08-13 11:42:47,566 ==== SSA block rewrite pass on 62
2023-08-13 11:42:47,566 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D6FD0>
2023-08-13 11:42:47,566 on stmt: invert = const(bool, True)
2023-08-13 11:42:47,566 first assign: invert
2023-08-13 11:42:47,566 replaced with: invert = const(bool, True)
2023-08-13 11:42:47,566 on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-08-13 11:42:47,566 on stmt: $const74.4 = const(int, 0)
2023-08-13 11:42:47,566 on stmt: $76compare_op.5 = exp < $const74.4
2023-08-13 11:42:47,566 on stmt: bool82 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,566 on stmt: $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,566 on stmt: branch $82pred, 84, 98
2023-08-13 11:42:47,566 ==== SSA block rewrite pass on 84
2023-08-13 11:42:47,567 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D6FD0>
2023-08-13 11:42:47,567 on stmt: $84load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-08-13 11:42:47,567 on stmt: <static> raise <class 'OverflowError'>
2023-08-13 11:42:47,567 ==== SSA block rewrite pass on 98
2023-08-13 11:42:47,567 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D6FD0>
2023-08-13 11:42:47,567 on stmt: $98load_deref.0 = freevar(is_integer: False)
2023-08-13 11:42:47,567 on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,567 on stmt: $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,567 on stmt: jump 180
2023-08-13 11:42:47,567 ==== SSA block rewrite pass on 180
2023-08-13 11:42:47,567 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D6FD0>
2023-08-13 11:42:47,567 on stmt: jump 190
2023-08-13 11:42:47,567 ==== SSA block rewrite pass on 182
2023-08-13 11:42:47,567 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D6FD0>
2023-08-13 11:42:47,567 on stmt: invert = const(bool, False)
2023-08-13 11:42:47,568 replaced with: invert.1 = const(bool, False)
2023-08-13 11:42:47,568 on stmt: exp = b
2023-08-13 11:42:47,568 on stmt: jump 190
2023-08-13 11:42:47,568 ==== SSA block rewrite pass on 190
2023-08-13 11:42:47,568 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D6FD0>
2023-08-13 11:42:47,568 on stmt: $const192.1 = const(int, 65536)
2023-08-13 11:42:47,568 on stmt: $194compare_op.2 = exp > $const192.1
2023-08-13 11:42:47,568 on stmt: bool200 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,568 on stmt: $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,568 on stmt: branch $200pred, 202, 270
2023-08-13 11:42:47,568 ==== SSA block rewrite pass on 202
2023-08-13 11:42:47,568 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D6FD0>
2023-08-13 11:42:47,568 on stmt: $202load_global.0 = global(math: <module 'math' (built-in)>)
2023-08-13 11:42:47,568 on stmt: $214load_attr.2 = getattr(value=$202load_global.0, attr=pow)
2023-08-13 11:42:47,568 on stmt: $226load_global.4 = global(float: <class 'float'>)
2023-08-13 11:42:47,568 on stmt: $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,569 on stmt: $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,569 on stmt: $268return_value.9 = cast(value=$258call.8)
2023-08-13 11:42:47,569 on stmt: return $268return_value.9
2023-08-13 11:42:47,569 ==== SSA block rewrite pass on 270
2023-08-13 11:42:47,569 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D6FD0>
2023-08-13 11:42:47,569 on stmt: $const272.1 = const(int, 0)
2023-08-13 11:42:47,569 on stmt: $274compare_op.2 = exp != $const272.1
2023-08-13 11:42:47,569 on stmt: bool280 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,569 on stmt: $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,569 on stmt: branch $280pred, 282, 334
2023-08-13 11:42:47,569 ==== SSA block rewrite pass on 282
2023-08-13 11:42:47,569 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D6FD0>
2023-08-13 11:42:47,570 on stmt: $const284.1 = const(int, 1)
2023-08-13 11:42:47,570 on stmt: $binop_and_286.2 = exp & $const284.1
2023-08-13 11:42:47,570 on stmt: bool290 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,570 on stmt: $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,570 on stmt: branch $290pred, 292, 302
2023-08-13 11:42:47,570 ==== SSA block rewrite pass on 292
2023-08-13 11:42:47,570 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D6FD0>
2023-08-13 11:42:47,570 on stmt: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,570 on stmt: r = $binop_imul296.2
2023-08-13 11:42:47,570 on stmt: jump 302
2023-08-13 11:42:47,570 ==== SSA block rewrite pass on 302
2023-08-13 11:42:47,570 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D6FD0>
2023-08-13 11:42:47,570 on stmt: $const304.1 = const(int, 1)
2023-08-13 11:42:47,570 on stmt: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,570 on stmt: exp = $binop_irshift306.2
2023-08-13 11:42:47,570 on stmt: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,571 on stmt: a.1 = $binop_imul316.5
2023-08-13 11:42:47,571 on stmt: $const324.7 = const(int, 0)
2023-08-13 11:42:47,571 on stmt: $326compare_op.8 = exp != $const324.7
2023-08-13 11:42:47,571 on stmt: bool332 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,571 on stmt: $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,571 on stmt: branch $332pred, 282, 334
2023-08-13 11:42:47,571 ==== SSA block rewrite pass on 334
2023-08-13 11:42:47,571 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D6FD0>
2023-08-13 11:42:47,571 on stmt: bool336 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,571 on stmt: $336pred = call bool336(invert, func=bool336, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,571 on stmt: branch $336pred, 338, 348
2023-08-13 11:42:47,571 ==== SSA block rewrite pass on 338
2023-08-13 11:42:47,571 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D6FD0>
2023-08-13 11:42:47,571 on stmt: $const338.0 = const(float, 1.0)
2023-08-13 11:42:47,571 on stmt: $binop_truediv342.2 = $const338.0 / r
2023-08-13 11:42:47,572 on stmt: $phi350.0 = $binop_truediv342.2
2023-08-13 11:42:47,572 on stmt: jump 350
2023-08-13 11:42:47,572 ==== SSA block rewrite pass on 348
2023-08-13 11:42:47,572 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D6FD0>
2023-08-13 11:42:47,572 on stmt: $phi350.0 = r
2023-08-13 11:42:47,572 on stmt: jump 350
2023-08-13 11:42:47,572 ==== SSA block rewrite pass on 350
2023-08-13 11:42:47,572 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D6FD0>
2023-08-13 11:42:47,572 on stmt: $350return_value.1 = cast(value=$phi350.0)
2023-08-13 11:42:47,572 on stmt: return $350return_value.1
2023-08-13 11:42:47,572 Replaced assignments: defaultdict(<class 'list'>,
            {62: [<numba.core.ir.Assign object at 0x000001F6971D6190>],
             182: [<numba.core.ir.Assign object at 0x000001F6971D7190>]})
2023-08-13 11:42:47,572 ==== SSA block rewrite pass on 0
2023-08-13 11:42:47,572 Running <numba.core.ssa._FixSSAVars object at 0x000001F697196B10>
2023-08-13 11:42:47,572 on stmt: a = arg(0, name=a)
2023-08-13 11:42:47,573 on stmt: b = arg(1, name=b)
2023-08-13 11:42:47,573 on stmt: $8load_deref.1 = freevar(tp: float64)
2023-08-13 11:42:47,573 on stmt: $const10.2 = const(int, 1)
2023-08-13 11:42:47,573 on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,573 on stmt: $30load_deref.5 = freevar(tp: float64)
2023-08-13 11:42:47,573 on stmt: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,573 on stmt: $const52.9 = const(int, 0)
2023-08-13 11:42:47,573 on stmt: $54compare_op.10 = b < $const52.9
2023-08-13 11:42:47,573 on stmt: bool60 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,573 on stmt: $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,573 on stmt: branch $60pred, 62, 182
2023-08-13 11:42:47,573 ==== SSA block rewrite pass on 62
2023-08-13 11:42:47,573 Running <numba.core.ssa._FixSSAVars object at 0x000001F697196B10>
2023-08-13 11:42:47,574 on stmt: invert = const(bool, True)
2023-08-13 11:42:47,574 on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-08-13 11:42:47,574 on stmt: $const74.4 = const(int, 0)
2023-08-13 11:42:47,574 on stmt: $76compare_op.5 = exp < $const74.4
2023-08-13 11:42:47,574 on stmt: bool82 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,574 on stmt: $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,574 on stmt: branch $82pred, 84, 98
2023-08-13 11:42:47,574 ==== SSA block rewrite pass on 84
2023-08-13 11:42:47,574 Running <numba.core.ssa._FixSSAVars object at 0x000001F697196B10>
2023-08-13 11:42:47,574 on stmt: $84load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-08-13 11:42:47,574 on stmt: <static> raise <class 'OverflowError'>
2023-08-13 11:42:47,574 ==== SSA block rewrite pass on 98
2023-08-13 11:42:47,574 Running <numba.core.ssa._FixSSAVars object at 0x000001F697196B10>
2023-08-13 11:42:47,574 on stmt: $98load_deref.0 = freevar(is_integer: False)
2023-08-13 11:42:47,574 on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,575 on stmt: $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,575 on stmt: jump 180
2023-08-13 11:42:47,575 ==== SSA block rewrite pass on 180
2023-08-13 11:42:47,575 Running <numba.core.ssa._FixSSAVars object at 0x000001F697196B10>
2023-08-13 11:42:47,575 on stmt: jump 190
2023-08-13 11:42:47,575 ==== SSA block rewrite pass on 182
2023-08-13 11:42:47,575 Running <numba.core.ssa._FixSSAVars object at 0x000001F697196B10>
2023-08-13 11:42:47,575 on stmt: invert.1 = const(bool, False)
2023-08-13 11:42:47,575 on stmt: exp = b
2023-08-13 11:42:47,575 on stmt: jump 190
2023-08-13 11:42:47,575 ==== SSA block rewrite pass on 190
2023-08-13 11:42:47,575 Running <numba.core.ssa._FixSSAVars object at 0x000001F697196B10>
2023-08-13 11:42:47,575 on stmt: $const192.1 = const(int, 65536)
2023-08-13 11:42:47,575 on stmt: $194compare_op.2 = exp > $const192.1
2023-08-13 11:42:47,575 on stmt: bool200 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,576 on stmt: $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,576 on stmt: branch $200pred, 202, 270
2023-08-13 11:42:47,576 ==== SSA block rewrite pass on 202
2023-08-13 11:42:47,576 Running <numba.core.ssa._FixSSAVars object at 0x000001F697196B10>
2023-08-13 11:42:47,576 on stmt: $202load_global.0 = global(math: <module 'math' (built-in)>)
2023-08-13 11:42:47,576 on stmt: $214load_attr.2 = getattr(value=$202load_global.0, attr=pow)
2023-08-13 11:42:47,576 on stmt: $226load_global.4 = global(float: <class 'float'>)
2023-08-13 11:42:47,576 on stmt: $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,576 on stmt: $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,577 on stmt: $268return_value.9 = cast(value=$258call.8)
2023-08-13 11:42:47,577 on stmt: return $268return_value.9
2023-08-13 11:42:47,577 ==== SSA block rewrite pass on 270
2023-08-13 11:42:47,577 Running <numba.core.ssa._FixSSAVars object at 0x000001F697196B10>
2023-08-13 11:42:47,577 on stmt: $const272.1 = const(int, 0)
2023-08-13 11:42:47,577 on stmt: $274compare_op.2 = exp != $const272.1
2023-08-13 11:42:47,577 on stmt: bool280 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,577 on stmt: $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,577 on stmt: branch $280pred, 282, 334
2023-08-13 11:42:47,577 ==== SSA block rewrite pass on 282
2023-08-13 11:42:47,577 Running <numba.core.ssa._FixSSAVars object at 0x000001F697196B10>
2023-08-13 11:42:47,577 on stmt: $const284.1 = const(int, 1)
2023-08-13 11:42:47,578 on stmt: $binop_and_286.2 = exp & $const284.1
2023-08-13 11:42:47,578 on stmt: bool290 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,578 on stmt: $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,578 on stmt: branch $290pred, 292, 302
2023-08-13 11:42:47,578 ==== SSA block rewrite pass on 292
2023-08-13 11:42:47,578 Running <numba.core.ssa._FixSSAVars object at 0x000001F697196B10>
2023-08-13 11:42:47,578 on stmt: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,578 on stmt: r = $binop_imul296.2
2023-08-13 11:42:47,578 on stmt: jump 302
2023-08-13 11:42:47,578 ==== SSA block rewrite pass on 302
2023-08-13 11:42:47,578 Running <numba.core.ssa._FixSSAVars object at 0x000001F697196B10>
2023-08-13 11:42:47,578 on stmt: $const304.1 = const(int, 1)
2023-08-13 11:42:47,578 on stmt: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,578 on stmt: exp = $binop_irshift306.2
2023-08-13 11:42:47,578 on stmt: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,579 on stmt: a.1 = $binop_imul316.5
2023-08-13 11:42:47,579 on stmt: $const324.7 = const(int, 0)
2023-08-13 11:42:47,579 on stmt: $326compare_op.8 = exp != $const324.7
2023-08-13 11:42:47,579 on stmt: bool332 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,579 on stmt: $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,579 on stmt: branch $332pred, 282, 334
2023-08-13 11:42:47,579 ==== SSA block rewrite pass on 334
2023-08-13 11:42:47,579 Running <numba.core.ssa._FixSSAVars object at 0x000001F697196B10>
2023-08-13 11:42:47,579 on stmt: bool336 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,579 on stmt: $336pred = call bool336(invert, func=bool336, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,579 find_def var='invert' stmt=$336pred = call bool336(invert, func=bool336, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,579 find_def_from_top label 334
2023-08-13 11:42:47,579 idom 270 from label 334
2023-08-13 11:42:47,580 find_def_from_bottom label 270
2023-08-13 11:42:47,580 find_def_from_top label 270
2023-08-13 11:42:47,580 idom 190 from label 270
2023-08-13 11:42:47,580 find_def_from_bottom label 190
2023-08-13 11:42:47,580 find_def_from_top label 190
2023-08-13 11:42:47,580 insert phi node invert.2 = phi(incoming_values=[], incoming_blocks=[]) at 190
2023-08-13 11:42:47,580 find_def_from_bottom label 180
2023-08-13 11:42:47,580 find_def_from_top label 180
2023-08-13 11:42:47,580 idom 98 from label 180
2023-08-13 11:42:47,580 find_def_from_bottom label 98
2023-08-13 11:42:47,580 find_def_from_top label 98
2023-08-13 11:42:47,581 idom 62 from label 98
2023-08-13 11:42:47,581 find_def_from_bottom label 62
2023-08-13 11:42:47,581 incoming_def invert = const(bool, True)
2023-08-13 11:42:47,581 find_def_from_bottom label 182
2023-08-13 11:42:47,581 incoming_def invert.1 = const(bool, False)
2023-08-13 11:42:47,581 replaced with: $336pred = call bool336(invert.2, func=bool336, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,581 on stmt: branch $336pred, 338, 348
2023-08-13 11:42:47,582 ==== SSA block rewrite pass on 338
2023-08-13 11:42:47,582 Running <numba.core.ssa._FixSSAVars object at 0x000001F697196B10>
2023-08-13 11:42:47,582 on stmt: $const338.0 = const(float, 1.0)
2023-08-13 11:42:47,582 on stmt: $binop_truediv342.2 = $const338.0 / r
2023-08-13 11:42:47,582 on stmt: $phi350.0 = $binop_truediv342.2
2023-08-13 11:42:47,582 on stmt: jump 350
2023-08-13 11:42:47,582 ==== SSA block rewrite pass on 348
2023-08-13 11:42:47,582 Running <numba.core.ssa._FixSSAVars object at 0x000001F697196B10>
2023-08-13 11:42:47,582 on stmt: $phi350.0 = r
2023-08-13 11:42:47,582 on stmt: jump 350
2023-08-13 11:42:47,582 ==== SSA block rewrite pass on 350
2023-08-13 11:42:47,582 Running <numba.core.ssa._FixSSAVars object at 0x000001F697196B10>
2023-08-13 11:42:47,582 on stmt: $350return_value.1 = cast(value=$phi350.0)
2023-08-13 11:42:47,582 on stmt: return $350return_value.1
2023-08-13 11:42:47,582 Fix SSA violator on var exp
2023-08-13 11:42:47,583 ==== SSA block rewrite pass on 0
2023-08-13 11:42:47,583 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971FDA50>
2023-08-13 11:42:47,583 on stmt: a = arg(0, name=a)
2023-08-13 11:42:47,583 on stmt: b = arg(1, name=b)
2023-08-13 11:42:47,583 on stmt: $8load_deref.1 = freevar(tp: float64)
2023-08-13 11:42:47,583 on stmt: $const10.2 = const(int, 1)
2023-08-13 11:42:47,583 on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,583 on stmt: $30load_deref.5 = freevar(tp: float64)
2023-08-13 11:42:47,583 on stmt: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,583 on stmt: $const52.9 = const(int, 0)
2023-08-13 11:42:47,583 on stmt: $54compare_op.10 = b < $const52.9
2023-08-13 11:42:47,583 on stmt: bool60 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,583 on stmt: $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,584 on stmt: branch $60pred, 62, 182
2023-08-13 11:42:47,584 ==== SSA block rewrite pass on 62
2023-08-13 11:42:47,584 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971FDA50>
2023-08-13 11:42:47,584 on stmt: invert = const(bool, True)
2023-08-13 11:42:47,584 on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-08-13 11:42:47,584 first assign: exp
2023-08-13 11:42:47,584 replaced with: exp = unary(fn=<built-in function neg>, value=b)
2023-08-13 11:42:47,584 on stmt: $const74.4 = const(int, 0)
2023-08-13 11:42:47,584 on stmt: $76compare_op.5 = exp < $const74.4
2023-08-13 11:42:47,584 on stmt: bool82 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,584 on stmt: $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,584 on stmt: branch $82pred, 84, 98
2023-08-13 11:42:47,584 ==== SSA block rewrite pass on 84
2023-08-13 11:42:47,584 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971FDA50>
2023-08-13 11:42:47,584 on stmt: $84load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-08-13 11:42:47,585 on stmt: <static> raise <class 'OverflowError'>
2023-08-13 11:42:47,585 ==== SSA block rewrite pass on 98
2023-08-13 11:42:47,585 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971FDA50>
2023-08-13 11:42:47,585 on stmt: $98load_deref.0 = freevar(is_integer: False)
2023-08-13 11:42:47,585 on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,585 on stmt: $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,585 on stmt: jump 180
2023-08-13 11:42:47,585 ==== SSA block rewrite pass on 180
2023-08-13 11:42:47,585 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971FDA50>
2023-08-13 11:42:47,585 on stmt: jump 190
2023-08-13 11:42:47,585 ==== SSA block rewrite pass on 182
2023-08-13 11:42:47,585 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971FDA50>
2023-08-13 11:42:47,585 on stmt: invert.1 = const(bool, False)
2023-08-13 11:42:47,585 on stmt: exp = b
2023-08-13 11:42:47,586 replaced with: exp.1 = b
2023-08-13 11:42:47,586 on stmt: jump 190
2023-08-13 11:42:47,586 ==== SSA block rewrite pass on 190
2023-08-13 11:42:47,586 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971FDA50>
2023-08-13 11:42:47,586 on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:219), Var(invert.1, numbers.py:232)], incoming_blocks=[180, 182])
2023-08-13 11:42:47,586 on stmt: $const192.1 = const(int, 65536)
2023-08-13 11:42:47,586 on stmt: $194compare_op.2 = exp > $const192.1
2023-08-13 11:42:47,586 on stmt: bool200 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,586 on stmt: $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,586 on stmt: branch $200pred, 202, 270
2023-08-13 11:42:47,586 ==== SSA block rewrite pass on 202
2023-08-13 11:42:47,586 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971FDA50>
2023-08-13 11:42:47,586 on stmt: $202load_global.0 = global(math: <module 'math' (built-in)>)
2023-08-13 11:42:47,586 on stmt: $214load_attr.2 = getattr(value=$202load_global.0, attr=pow)
2023-08-13 11:42:47,586 on stmt: $226load_global.4 = global(float: <class 'float'>)
2023-08-13 11:42:47,587 on stmt: $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,587 on stmt: $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,587 on stmt: $268return_value.9 = cast(value=$258call.8)
2023-08-13 11:42:47,587 on stmt: return $268return_value.9
2023-08-13 11:42:47,587 ==== SSA block rewrite pass on 270
2023-08-13 11:42:47,587 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971FDA50>
2023-08-13 11:42:47,587 on stmt: $const272.1 = const(int, 0)
2023-08-13 11:42:47,587 on stmt: $274compare_op.2 = exp != $const272.1
2023-08-13 11:42:47,587 on stmt: bool280 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,587 on stmt: $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,587 on stmt: branch $280pred, 282, 334
2023-08-13 11:42:47,587 ==== SSA block rewrite pass on 282
2023-08-13 11:42:47,587 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971FDA50>
2023-08-13 11:42:47,587 on stmt: $const284.1 = const(int, 1)
2023-08-13 11:42:47,587 on stmt: $binop_and_286.2 = exp & $const284.1
2023-08-13 11:42:47,587 on stmt: bool290 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,588 on stmt: $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,588 on stmt: branch $290pred, 292, 302
2023-08-13 11:42:47,588 ==== SSA block rewrite pass on 292
2023-08-13 11:42:47,588 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971FDA50>
2023-08-13 11:42:47,588 on stmt: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,588 on stmt: r = $binop_imul296.2
2023-08-13 11:42:47,588 on stmt: jump 302
2023-08-13 11:42:47,588 ==== SSA block rewrite pass on 302
2023-08-13 11:42:47,588 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971FDA50>
2023-08-13 11:42:47,588 on stmt: $const304.1 = const(int, 1)
2023-08-13 11:42:47,588 on stmt: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,588 on stmt: exp = $binop_irshift306.2
2023-08-13 11:42:47,588 replaced with: exp.2 = $binop_irshift306.2
2023-08-13 11:42:47,588 on stmt: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,589 on stmt: a.1 = $binop_imul316.5
2023-08-13 11:42:47,589 on stmt: $const324.7 = const(int, 0)
2023-08-13 11:42:47,589 on stmt: $326compare_op.8 = exp != $const324.7
2023-08-13 11:42:47,589 on stmt: bool332 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,589 on stmt: $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,589 on stmt: branch $332pred, 282, 334
2023-08-13 11:42:47,589 ==== SSA block rewrite pass on 334
2023-08-13 11:42:47,589 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971FDA50>
2023-08-13 11:42:47,589 on stmt: bool336 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,589 on stmt: $336pred = call bool336(invert.2, func=bool336, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,589 on stmt: branch $336pred, 338, 348
2023-08-13 11:42:47,589 ==== SSA block rewrite pass on 338
2023-08-13 11:42:47,589 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971FDA50>
2023-08-13 11:42:47,589 on stmt: $const338.0 = const(float, 1.0)
2023-08-13 11:42:47,589 on stmt: $binop_truediv342.2 = $const338.0 / r
2023-08-13 11:42:47,590 on stmt: $phi350.0 = $binop_truediv342.2
2023-08-13 11:42:47,590 on stmt: jump 350
2023-08-13 11:42:47,590 ==== SSA block rewrite pass on 348
2023-08-13 11:42:47,590 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971FDA50>
2023-08-13 11:42:47,590 on stmt: $phi350.0 = r
2023-08-13 11:42:47,590 on stmt: jump 350
2023-08-13 11:42:47,590 ==== SSA block rewrite pass on 350
2023-08-13 11:42:47,590 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971FDA50>
2023-08-13 11:42:47,590 on stmt: $350return_value.1 = cast(value=$phi350.0)
2023-08-13 11:42:47,590 on stmt: return $350return_value.1
2023-08-13 11:42:47,590 Replaced assignments: defaultdict(<class 'list'>,
            {62: [<numba.core.ir.Assign object at 0x000001F6971D5C50>],
             182: [<numba.core.ir.Assign object at 0x000001F697197CD0>],
             302: [<numba.core.ir.Assign object at 0x000001F697136150>]})
2023-08-13 11:42:47,590 ==== SSA block rewrite pass on 0
2023-08-13 11:42:47,590 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971D7B50>
2023-08-13 11:42:47,590 on stmt: a = arg(0, name=a)
2023-08-13 11:42:47,590 on stmt: b = arg(1, name=b)
2023-08-13 11:42:47,591 on stmt: $8load_deref.1 = freevar(tp: float64)
2023-08-13 11:42:47,591 on stmt: $const10.2 = const(int, 1)
2023-08-13 11:42:47,591 on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,591 on stmt: $30load_deref.5 = freevar(tp: float64)
2023-08-13 11:42:47,591 on stmt: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,591 on stmt: $const52.9 = const(int, 0)
2023-08-13 11:42:47,591 on stmt: $54compare_op.10 = b < $const52.9
2023-08-13 11:42:47,591 on stmt: bool60 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,591 on stmt: $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,591 on stmt: branch $60pred, 62, 182
2023-08-13 11:42:47,591 ==== SSA block rewrite pass on 62
2023-08-13 11:42:47,591 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971D7B50>
2023-08-13 11:42:47,591 on stmt: invert = const(bool, True)
2023-08-13 11:42:47,591 on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-08-13 11:42:47,592 on stmt: $const74.4 = const(int, 0)
2023-08-13 11:42:47,592 on stmt: $76compare_op.5 = exp < $const74.4
2023-08-13 11:42:47,592 find_def var='exp' stmt=$76compare_op.5 = exp < $const74.4
2023-08-13 11:42:47,592 on stmt: bool82 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,592 on stmt: $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,592 on stmt: branch $82pred, 84, 98
2023-08-13 11:42:47,592 ==== SSA block rewrite pass on 84
2023-08-13 11:42:47,592 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971D7B50>
2023-08-13 11:42:47,592 on stmt: $84load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-08-13 11:42:47,592 on stmt: <static> raise <class 'OverflowError'>
2023-08-13 11:42:47,592 ==== SSA block rewrite pass on 98
2023-08-13 11:42:47,592 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971D7B50>
2023-08-13 11:42:47,592 on stmt: $98load_deref.0 = freevar(is_integer: False)
2023-08-13 11:42:47,593 on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,593 on stmt: $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,593 on stmt: jump 180
2023-08-13 11:42:47,593 ==== SSA block rewrite pass on 180
2023-08-13 11:42:47,593 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971D7B50>
2023-08-13 11:42:47,593 on stmt: jump 190
2023-08-13 11:42:47,593 ==== SSA block rewrite pass on 182
2023-08-13 11:42:47,593 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971D7B50>
2023-08-13 11:42:47,593 on stmt: invert.1 = const(bool, False)
2023-08-13 11:42:47,593 on stmt: exp.1 = b
2023-08-13 11:42:47,593 on stmt: jump 190
2023-08-13 11:42:47,593 ==== SSA block rewrite pass on 190
2023-08-13 11:42:47,594 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971D7B50>
2023-08-13 11:42:47,594 on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:219), Var(invert.1, numbers.py:232)], incoming_blocks=[180, 182])
2023-08-13 11:42:47,594 on stmt: $const192.1 = const(int, 65536)
2023-08-13 11:42:47,594 on stmt: $194compare_op.2 = exp > $const192.1
2023-08-13 11:42:47,594 find_def var='exp' stmt=$194compare_op.2 = exp > $const192.1
2023-08-13 11:42:47,594 find_def_from_top label 190
2023-08-13 11:42:47,594 insert phi node exp.3 = phi(incoming_values=[], incoming_blocks=[]) at 190
2023-08-13 11:42:47,594 find_def_from_bottom label 180
2023-08-13 11:42:47,594 find_def_from_top label 180
2023-08-13 11:42:47,594 idom 98 from label 180
2023-08-13 11:42:47,594 find_def_from_bottom label 98
2023-08-13 11:42:47,594 find_def_from_top label 98
2023-08-13 11:42:47,594 idom 62 from label 98
2023-08-13 11:42:47,594 find_def_from_bottom label 62
2023-08-13 11:42:47,594 incoming_def exp = unary(fn=<built-in function neg>, value=b)
2023-08-13 11:42:47,594 find_def_from_bottom label 182
2023-08-13 11:42:47,595 incoming_def exp.1 = b
2023-08-13 11:42:47,595 replaced with: $194compare_op.2 = exp.3 > $const192.1
2023-08-13 11:42:47,595 on stmt: bool200 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,595 on stmt: $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,595 on stmt: branch $200pred, 202, 270
2023-08-13 11:42:47,595 ==== SSA block rewrite pass on 202
2023-08-13 11:42:47,595 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971D7B50>
2023-08-13 11:42:47,595 on stmt: $202load_global.0 = global(math: <module 'math' (built-in)>)
2023-08-13 11:42:47,595 on stmt: $214load_attr.2 = getattr(value=$202load_global.0, attr=pow)
2023-08-13 11:42:47,595 on stmt: $226load_global.4 = global(float: <class 'float'>)
2023-08-13 11:42:47,595 on stmt: $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,595 on stmt: $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,595 on stmt: $268return_value.9 = cast(value=$258call.8)
2023-08-13 11:42:47,595 on stmt: return $268return_value.9
2023-08-13 11:42:47,596 ==== SSA block rewrite pass on 270
2023-08-13 11:42:47,596 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971D7B50>
2023-08-13 11:42:47,596 on stmt: $const272.1 = const(int, 0)
2023-08-13 11:42:47,596 on stmt: $274compare_op.2 = exp != $const272.1
2023-08-13 11:42:47,596 find_def var='exp' stmt=$274compare_op.2 = exp != $const272.1
2023-08-13 11:42:47,596 find_def_from_top label 270
2023-08-13 11:42:47,596 idom 190 from label 270
2023-08-13 11:42:47,596 find_def_from_bottom label 190
2023-08-13 11:42:47,596 replaced with: $274compare_op.2 = exp.3 != $const272.1
2023-08-13 11:42:47,596 on stmt: bool280 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,596 on stmt: $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,596 on stmt: branch $280pred, 282, 334
2023-08-13 11:42:47,596 ==== SSA block rewrite pass on 282
2023-08-13 11:42:47,596 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971D7B50>
2023-08-13 11:42:47,596 on stmt: $const284.1 = const(int, 1)
2023-08-13 11:42:47,596 on stmt: $binop_and_286.2 = exp & $const284.1
2023-08-13 11:42:47,596 find_def var='exp' stmt=$binop_and_286.2 = exp & $const284.1
2023-08-13 11:42:47,596 find_def_from_top label 282
2023-08-13 11:42:47,597 insert phi node exp.4 = phi(incoming_values=[], incoming_blocks=[]) at 282
2023-08-13 11:42:47,597 find_def_from_bottom label 302
2023-08-13 11:42:47,597 incoming_def exp.2 = $binop_irshift306.2
2023-08-13 11:42:47,597 find_def_from_bottom label 270
2023-08-13 11:42:47,597 find_def_from_top label 270
2023-08-13 11:42:47,597 idom 190 from label 270
2023-08-13 11:42:47,597 find_def_from_bottom label 190
2023-08-13 11:42:47,597 incoming_def exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[180, 182])
2023-08-13 11:42:47,597 replaced with: $binop_and_286.2 = exp.4 & $const284.1
2023-08-13 11:42:47,597 on stmt: bool290 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,597 on stmt: $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,597 on stmt: branch $290pred, 292, 302
2023-08-13 11:42:47,597 ==== SSA block rewrite pass on 292
2023-08-13 11:42:47,598 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971D7B50>
2023-08-13 11:42:47,598 on stmt: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,598 on stmt: r = $binop_imul296.2
2023-08-13 11:42:47,598 on stmt: jump 302
2023-08-13 11:42:47,598 ==== SSA block rewrite pass on 302
2023-08-13 11:42:47,598 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971D7B50>
2023-08-13 11:42:47,598 on stmt: $const304.1 = const(int, 1)
2023-08-13 11:42:47,598 on stmt: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,598 find_def var='exp' stmt=$binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,598 find_def_from_top label 302
2023-08-13 11:42:47,599 idom 282 from label 302
2023-08-13 11:42:47,599 find_def_from_bottom label 282
2023-08-13 11:42:47,599 replaced with: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,599 on stmt: exp.2 = $binop_irshift306.2
2023-08-13 11:42:47,599 on stmt: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,599 on stmt: a.1 = $binop_imul316.5
2023-08-13 11:42:47,599 on stmt: $const324.7 = const(int, 0)
2023-08-13 11:42:47,599 on stmt: $326compare_op.8 = exp != $const324.7
2023-08-13 11:42:47,599 find_def var='exp' stmt=$326compare_op.8 = exp != $const324.7
2023-08-13 11:42:47,599 replaced with: $326compare_op.8 = exp.2 != $const324.7
2023-08-13 11:42:47,599 on stmt: bool332 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,599 on stmt: $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,599 on stmt: branch $332pred, 282, 334
2023-08-13 11:42:47,599 ==== SSA block rewrite pass on 334
2023-08-13 11:42:47,599 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971D7B50>
2023-08-13 11:42:47,599 on stmt: bool336 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,600 on stmt: $336pred = call bool336(invert.2, func=bool336, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,600 on stmt: branch $336pred, 338, 348
2023-08-13 11:42:47,600 ==== SSA block rewrite pass on 338
2023-08-13 11:42:47,600 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971D7B50>
2023-08-13 11:42:47,600 on stmt: $const338.0 = const(float, 1.0)
2023-08-13 11:42:47,600 on stmt: $binop_truediv342.2 = $const338.0 / r
2023-08-13 11:42:47,600 on stmt: $phi350.0 = $binop_truediv342.2
2023-08-13 11:42:47,600 on stmt: jump 350
2023-08-13 11:42:47,600 ==== SSA block rewrite pass on 348
2023-08-13 11:42:47,600 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971D7B50>
2023-08-13 11:42:47,600 on stmt: $phi350.0 = r
2023-08-13 11:42:47,600 on stmt: jump 350
2023-08-13 11:42:47,600 ==== SSA block rewrite pass on 350
2023-08-13 11:42:47,600 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971D7B50>
2023-08-13 11:42:47,600 on stmt: $350return_value.1 = cast(value=$phi350.0)
2023-08-13 11:42:47,600 on stmt: return $350return_value.1
2023-08-13 11:42:47,601 Fix SSA violator on var $phi350.0
2023-08-13 11:42:47,601 ==== SSA block rewrite pass on 0
2023-08-13 11:42:47,601 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D7ED0>
2023-08-13 11:42:47,601 on stmt: a = arg(0, name=a)
2023-08-13 11:42:47,601 on stmt: b = arg(1, name=b)
2023-08-13 11:42:47,601 on stmt: $8load_deref.1 = freevar(tp: float64)
2023-08-13 11:42:47,601 on stmt: $const10.2 = const(int, 1)
2023-08-13 11:42:47,601 on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,601 on stmt: $30load_deref.5 = freevar(tp: float64)
2023-08-13 11:42:47,601 on stmt: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,601 on stmt: $const52.9 = const(int, 0)
2023-08-13 11:42:47,601 on stmt: $54compare_op.10 = b < $const52.9
2023-08-13 11:42:47,601 on stmt: bool60 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,601 on stmt: $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,601 on stmt: branch $60pred, 62, 182
2023-08-13 11:42:47,601 ==== SSA block rewrite pass on 62
2023-08-13 11:42:47,602 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D7ED0>
2023-08-13 11:42:47,602 on stmt: invert = const(bool, True)
2023-08-13 11:42:47,602 on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-08-13 11:42:47,602 on stmt: $const74.4 = const(int, 0)
2023-08-13 11:42:47,602 on stmt: $76compare_op.5 = exp < $const74.4
2023-08-13 11:42:47,602 on stmt: bool82 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,602 on stmt: $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,602 on stmt: branch $82pred, 84, 98
2023-08-13 11:42:47,602 ==== SSA block rewrite pass on 84
2023-08-13 11:42:47,602 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D7ED0>
2023-08-13 11:42:47,602 on stmt: $84load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-08-13 11:42:47,602 on stmt: <static> raise <class 'OverflowError'>
2023-08-13 11:42:47,602 ==== SSA block rewrite pass on 98
2023-08-13 11:42:47,602 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D7ED0>
2023-08-13 11:42:47,602 on stmt: $98load_deref.0 = freevar(is_integer: False)
2023-08-13 11:42:47,602 on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,603 on stmt: $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,603 on stmt: jump 180
2023-08-13 11:42:47,603 ==== SSA block rewrite pass on 180
2023-08-13 11:42:47,603 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D7ED0>
2023-08-13 11:42:47,603 on stmt: jump 190
2023-08-13 11:42:47,603 ==== SSA block rewrite pass on 182
2023-08-13 11:42:47,603 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D7ED0>
2023-08-13 11:42:47,603 on stmt: invert.1 = const(bool, False)
2023-08-13 11:42:47,603 on stmt: exp.1 = b
2023-08-13 11:42:47,603 on stmt: jump 190
2023-08-13 11:42:47,603 ==== SSA block rewrite pass on 190
2023-08-13 11:42:47,603 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D7ED0>
2023-08-13 11:42:47,603 on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[180, 182])
2023-08-13 11:42:47,603 on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:219), Var(invert.1, numbers.py:232)], incoming_blocks=[180, 182])
2023-08-13 11:42:47,604 on stmt: $const192.1 = const(int, 65536)
2023-08-13 11:42:47,604 on stmt: $194compare_op.2 = exp.3 > $const192.1
2023-08-13 11:42:47,604 on stmt: bool200 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,604 on stmt: $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,604 on stmt: branch $200pred, 202, 270
2023-08-13 11:42:47,604 ==== SSA block rewrite pass on 202
2023-08-13 11:42:47,604 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D7ED0>
2023-08-13 11:42:47,604 on stmt: $202load_global.0 = global(math: <module 'math' (built-in)>)
2023-08-13 11:42:47,604 on stmt: $214load_attr.2 = getattr(value=$202load_global.0, attr=pow)
2023-08-13 11:42:47,604 on stmt: $226load_global.4 = global(float: <class 'float'>)
2023-08-13 11:42:47,604 on stmt: $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,604 on stmt: $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,604 on stmt: $268return_value.9 = cast(value=$258call.8)
2023-08-13 11:42:47,605 on stmt: return $268return_value.9
2023-08-13 11:42:47,605 ==== SSA block rewrite pass on 270
2023-08-13 11:42:47,605 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D7ED0>
2023-08-13 11:42:47,605 on stmt: $const272.1 = const(int, 0)
2023-08-13 11:42:47,605 on stmt: $274compare_op.2 = exp.3 != $const272.1
2023-08-13 11:42:47,605 on stmt: bool280 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,605 on stmt: $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,605 on stmt: branch $280pred, 282, 334
2023-08-13 11:42:47,605 ==== SSA block rewrite pass on 282
2023-08-13 11:42:47,605 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D7ED0>
2023-08-13 11:42:47,605 on stmt: exp.4 = phi(incoming_values=[Var(exp.2, numbers.py:240), Var(exp.3, numbers.py:234)], incoming_blocks=[302, 270])
2023-08-13 11:42:47,605 on stmt: $const284.1 = const(int, 1)
2023-08-13 11:42:47,605 on stmt: $binop_and_286.2 = exp.4 & $const284.1
2023-08-13 11:42:47,605 on stmt: bool290 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,605 on stmt: $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,606 on stmt: branch $290pred, 292, 302
2023-08-13 11:42:47,606 ==== SSA block rewrite pass on 292
2023-08-13 11:42:47,606 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D7ED0>
2023-08-13 11:42:47,606 on stmt: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,606 on stmt: r = $binop_imul296.2
2023-08-13 11:42:47,606 on stmt: jump 302
2023-08-13 11:42:47,606 ==== SSA block rewrite pass on 302
2023-08-13 11:42:47,606 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D7ED0>
2023-08-13 11:42:47,606 on stmt: $const304.1 = const(int, 1)
2023-08-13 11:42:47,606 on stmt: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,606 on stmt: exp.2 = $binop_irshift306.2
2023-08-13 11:42:47,606 on stmt: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,606 on stmt: a.1 = $binop_imul316.5
2023-08-13 11:42:47,606 on stmt: $const324.7 = const(int, 0)
2023-08-13 11:42:47,606 on stmt: $326compare_op.8 = exp.2 != $const324.7
2023-08-13 11:42:47,607 on stmt: bool332 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,607 on stmt: $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,607 on stmt: branch $332pred, 282, 334
2023-08-13 11:42:47,607 ==== SSA block rewrite pass on 334
2023-08-13 11:42:47,607 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D7ED0>
2023-08-13 11:42:47,607 on stmt: bool336 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,607 on stmt: $336pred = call bool336(invert.2, func=bool336, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,607 on stmt: branch $336pred, 338, 348
2023-08-13 11:42:47,607 ==== SSA block rewrite pass on 338
2023-08-13 11:42:47,607 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D7ED0>
2023-08-13 11:42:47,607 on stmt: $const338.0 = const(float, 1.0)
2023-08-13 11:42:47,607 on stmt: $binop_truediv342.2 = $const338.0 / r
2023-08-13 11:42:47,607 on stmt: $phi350.0 = $binop_truediv342.2
2023-08-13 11:42:47,607 first assign: $phi350.0
2023-08-13 11:42:47,607 replaced with: $phi350.0 = $binop_truediv342.2
2023-08-13 11:42:47,607 on stmt: jump 350
2023-08-13 11:42:47,608 ==== SSA block rewrite pass on 348
2023-08-13 11:42:47,608 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D7ED0>
2023-08-13 11:42:47,608 on stmt: $phi350.0 = r
2023-08-13 11:42:47,608 replaced with: $phi350.0.1 = r
2023-08-13 11:42:47,608 on stmt: jump 350
2023-08-13 11:42:47,608 ==== SSA block rewrite pass on 350
2023-08-13 11:42:47,608 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D7ED0>
2023-08-13 11:42:47,608 on stmt: $350return_value.1 = cast(value=$phi350.0)
2023-08-13 11:42:47,608 on stmt: return $350return_value.1
2023-08-13 11:42:47,608 Replaced assignments: defaultdict(<class 'list'>,
            {338: [<numba.core.ir.Assign object at 0x000001F6971C8CD0>],
             348: [<numba.core.ir.Assign object at 0x000001F697197DD0>]})
2023-08-13 11:42:47,608 ==== SSA block rewrite pass on 0
2023-08-13 11:42:47,608 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971FDA50>
2023-08-13 11:42:47,608 on stmt: a = arg(0, name=a)
2023-08-13 11:42:47,608 on stmt: b = arg(1, name=b)
2023-08-13 11:42:47,608 on stmt: $8load_deref.1 = freevar(tp: float64)
2023-08-13 11:42:47,609 on stmt: $const10.2 = const(int, 1)
2023-08-13 11:42:47,609 on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,609 on stmt: $30load_deref.5 = freevar(tp: float64)
2023-08-13 11:42:47,609 on stmt: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,609 on stmt: $const52.9 = const(int, 0)
2023-08-13 11:42:47,609 on stmt: $54compare_op.10 = b < $const52.9
2023-08-13 11:42:47,609 on stmt: bool60 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,609 on stmt: $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,610 on stmt: branch $60pred, 62, 182
2023-08-13 11:42:47,610 ==== SSA block rewrite pass on 62
2023-08-13 11:42:47,610 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971FDA50>
2023-08-13 11:42:47,610 on stmt: invert = const(bool, True)
2023-08-13 11:42:47,610 on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-08-13 11:42:47,610 on stmt: $const74.4 = const(int, 0)
2023-08-13 11:42:47,610 on stmt: $76compare_op.5 = exp < $const74.4
2023-08-13 11:42:47,610 on stmt: bool82 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,610 on stmt: $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,611 on stmt: branch $82pred, 84, 98
2023-08-13 11:42:47,611 ==== SSA block rewrite pass on 84
2023-08-13 11:42:47,611 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971FDA50>
2023-08-13 11:42:47,611 on stmt: $84load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-08-13 11:42:47,611 on stmt: <static> raise <class 'OverflowError'>
2023-08-13 11:42:47,611 ==== SSA block rewrite pass on 98
2023-08-13 11:42:47,611 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971FDA50>
2023-08-13 11:42:47,611 on stmt: $98load_deref.0 = freevar(is_integer: False)
2023-08-13 11:42:47,611 on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,611 on stmt: $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,611 on stmt: jump 180
2023-08-13 11:42:47,611 ==== SSA block rewrite pass on 180
2023-08-13 11:42:47,611 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971FDA50>
2023-08-13 11:42:47,612 on stmt: jump 190
2023-08-13 11:42:47,612 ==== SSA block rewrite pass on 182
2023-08-13 11:42:47,612 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971FDA50>
2023-08-13 11:42:47,612 on stmt: invert.1 = const(bool, False)
2023-08-13 11:42:47,612 on stmt: exp.1 = b
2023-08-13 11:42:47,612 on stmt: jump 190
2023-08-13 11:42:47,612 ==== SSA block rewrite pass on 190
2023-08-13 11:42:47,612 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971FDA50>
2023-08-13 11:42:47,612 on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[180, 182])
2023-08-13 11:42:47,612 on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:219), Var(invert.1, numbers.py:232)], incoming_blocks=[180, 182])
2023-08-13 11:42:47,612 on stmt: $const192.1 = const(int, 65536)
2023-08-13 11:42:47,612 on stmt: $194compare_op.2 = exp.3 > $const192.1
2023-08-13 11:42:47,612 on stmt: bool200 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,613 on stmt: $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,613 on stmt: branch $200pred, 202, 270
2023-08-13 11:42:47,613 ==== SSA block rewrite pass on 202
2023-08-13 11:42:47,613 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971FDA50>
2023-08-13 11:42:47,613 on stmt: $202load_global.0 = global(math: <module 'math' (built-in)>)
2023-08-13 11:42:47,613 on stmt: $214load_attr.2 = getattr(value=$202load_global.0, attr=pow)
2023-08-13 11:42:47,613 on stmt: $226load_global.4 = global(float: <class 'float'>)
2023-08-13 11:42:47,613 on stmt: $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,613 on stmt: $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,613 on stmt: $268return_value.9 = cast(value=$258call.8)
2023-08-13 11:42:47,613 on stmt: return $268return_value.9
2023-08-13 11:42:47,613 ==== SSA block rewrite pass on 270
2023-08-13 11:42:47,613 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971FDA50>
2023-08-13 11:42:47,613 on stmt: $const272.1 = const(int, 0)
2023-08-13 11:42:47,613 on stmt: $274compare_op.2 = exp.3 != $const272.1
2023-08-13 11:42:47,614 on stmt: bool280 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,614 on stmt: $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,614 on stmt: branch $280pred, 282, 334
2023-08-13 11:42:47,614 ==== SSA block rewrite pass on 282
2023-08-13 11:42:47,614 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971FDA50>
2023-08-13 11:42:47,614 on stmt: exp.4 = phi(incoming_values=[Var(exp.2, numbers.py:240), Var(exp.3, numbers.py:234)], incoming_blocks=[302, 270])
2023-08-13 11:42:47,614 on stmt: $const284.1 = const(int, 1)
2023-08-13 11:42:47,614 on stmt: $binop_and_286.2 = exp.4 & $const284.1
2023-08-13 11:42:47,614 on stmt: bool290 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,614 on stmt: $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,615 on stmt: branch $290pred, 292, 302
2023-08-13 11:42:47,615 ==== SSA block rewrite pass on 292
2023-08-13 11:42:47,615 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971FDA50>
2023-08-13 11:42:47,615 on stmt: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,615 on stmt: r = $binop_imul296.2
2023-08-13 11:42:47,615 on stmt: jump 302
2023-08-13 11:42:47,616 ==== SSA block rewrite pass on 302
2023-08-13 11:42:47,616 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971FDA50>
2023-08-13 11:42:47,616 on stmt: $const304.1 = const(int, 1)
2023-08-13 11:42:47,616 on stmt: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,616 on stmt: exp.2 = $binop_irshift306.2
2023-08-13 11:42:47,616 on stmt: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,616 on stmt: a.1 = $binop_imul316.5
2023-08-13 11:42:47,616 on stmt: $const324.7 = const(int, 0)
2023-08-13 11:42:47,616 on stmt: $326compare_op.8 = exp.2 != $const324.7
2023-08-13 11:42:47,616 on stmt: bool332 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,616 on stmt: $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,617 on stmt: branch $332pred, 282, 334
2023-08-13 11:42:47,617 ==== SSA block rewrite pass on 334
2023-08-13 11:42:47,617 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971FDA50>
2023-08-13 11:42:47,617 on stmt: bool336 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,617 on stmt: $336pred = call bool336(invert.2, func=bool336, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,617 on stmt: branch $336pred, 338, 348
2023-08-13 11:42:47,617 ==== SSA block rewrite pass on 338
2023-08-13 11:42:47,617 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971FDA50>
2023-08-13 11:42:47,617 on stmt: $const338.0 = const(float, 1.0)
2023-08-13 11:42:47,617 on stmt: $binop_truediv342.2 = $const338.0 / r
2023-08-13 11:42:47,617 on stmt: $phi350.0 = $binop_truediv342.2
2023-08-13 11:42:47,617 on stmt: jump 350
2023-08-13 11:42:47,617 ==== SSA block rewrite pass on 348
2023-08-13 11:42:47,617 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971FDA50>
2023-08-13 11:42:47,617 on stmt: $phi350.0.1 = r
2023-08-13 11:42:47,618 on stmt: jump 350
2023-08-13 11:42:47,618 ==== SSA block rewrite pass on 350
2023-08-13 11:42:47,618 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971FDA50>
2023-08-13 11:42:47,618 on stmt: $350return_value.1 = cast(value=$phi350.0)
2023-08-13 11:42:47,618 find_def var='$phi350.0' stmt=$350return_value.1 = cast(value=$phi350.0)
2023-08-13 11:42:47,618 find_def_from_top label 350
2023-08-13 11:42:47,618 insert phi node $phi350.0.2 = phi(incoming_values=[], incoming_blocks=[]) at 350
2023-08-13 11:42:47,618 find_def_from_bottom label 338
2023-08-13 11:42:47,618 incoming_def $phi350.0 = $binop_truediv342.2
2023-08-13 11:42:47,618 find_def_from_bottom label 348
2023-08-13 11:42:47,618 incoming_def $phi350.0.1 = r
2023-08-13 11:42:47,618 replaced with: $350return_value.1 = cast(value=$phi350.0.2)
2023-08-13 11:42:47,618 on stmt: return $350return_value.1
2023-08-13 11:42:47,618 Fix SSA violator on var a.1
2023-08-13 11:42:47,618 ==== SSA block rewrite pass on 0
2023-08-13 11:42:47,619 Running <numba.core.ssa._FreshVarHandler object at 0x000001F697197D50>
2023-08-13 11:42:47,619 on stmt: a = arg(0, name=a)
2023-08-13 11:42:47,619 on stmt: b = arg(1, name=b)
2023-08-13 11:42:47,619 on stmt: $8load_deref.1 = freevar(tp: float64)
2023-08-13 11:42:47,619 on stmt: $const10.2 = const(int, 1)
2023-08-13 11:42:47,619 on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,619 on stmt: $30load_deref.5 = freevar(tp: float64)
2023-08-13 11:42:47,619 on stmt: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,619 first assign: a.1
2023-08-13 11:42:47,619 replaced with: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,619 on stmt: $const52.9 = const(int, 0)
2023-08-13 11:42:47,619 on stmt: $54compare_op.10 = b < $const52.9
2023-08-13 11:42:47,619 on stmt: bool60 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,620 on stmt: $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,620 on stmt: branch $60pred, 62, 182
2023-08-13 11:42:47,620 ==== SSA block rewrite pass on 62
2023-08-13 11:42:47,620 Running <numba.core.ssa._FreshVarHandler object at 0x000001F697197D50>
2023-08-13 11:42:47,620 on stmt: invert = const(bool, True)
2023-08-13 11:42:47,620 on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-08-13 11:42:47,620 on stmt: $const74.4 = const(int, 0)
2023-08-13 11:42:47,620 on stmt: $76compare_op.5 = exp < $const74.4
2023-08-13 11:42:47,620 on stmt: bool82 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,620 on stmt: $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,620 on stmt: branch $82pred, 84, 98
2023-08-13 11:42:47,620 ==== SSA block rewrite pass on 84
2023-08-13 11:42:47,620 Running <numba.core.ssa._FreshVarHandler object at 0x000001F697197D50>
2023-08-13 11:42:47,621 on stmt: $84load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-08-13 11:42:47,621 on stmt: <static> raise <class 'OverflowError'>
2023-08-13 11:42:47,621 ==== SSA block rewrite pass on 98
2023-08-13 11:42:47,621 Running <numba.core.ssa._FreshVarHandler object at 0x000001F697197D50>
2023-08-13 11:42:47,621 on stmt: $98load_deref.0 = freevar(is_integer: False)
2023-08-13 11:42:47,621 on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,621 on stmt: $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,621 on stmt: jump 180
2023-08-13 11:42:47,621 ==== SSA block rewrite pass on 180
2023-08-13 11:42:47,621 Running <numba.core.ssa._FreshVarHandler object at 0x000001F697197D50>
2023-08-13 11:42:47,621 on stmt: jump 190
2023-08-13 11:42:47,621 ==== SSA block rewrite pass on 182
2023-08-13 11:42:47,621 Running <numba.core.ssa._FreshVarHandler object at 0x000001F697197D50>
2023-08-13 11:42:47,622 on stmt: invert.1 = const(bool, False)
2023-08-13 11:42:47,622 on stmt: exp.1 = b
2023-08-13 11:42:47,622 on stmt: jump 190
2023-08-13 11:42:47,622 ==== SSA block rewrite pass on 190
2023-08-13 11:42:47,622 Running <numba.core.ssa._FreshVarHandler object at 0x000001F697197D50>
2023-08-13 11:42:47,622 on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[180, 182])
2023-08-13 11:42:47,622 on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:219), Var(invert.1, numbers.py:232)], incoming_blocks=[180, 182])
2023-08-13 11:42:47,622 on stmt: $const192.1 = const(int, 65536)
2023-08-13 11:42:47,622 on stmt: $194compare_op.2 = exp.3 > $const192.1
2023-08-13 11:42:47,622 on stmt: bool200 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,622 on stmt: $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,622 on stmt: branch $200pred, 202, 270
2023-08-13 11:42:47,622 ==== SSA block rewrite pass on 202
2023-08-13 11:42:47,622 Running <numba.core.ssa._FreshVarHandler object at 0x000001F697197D50>
2023-08-13 11:42:47,622 on stmt: $202load_global.0 = global(math: <module 'math' (built-in)>)
2023-08-13 11:42:47,623 on stmt: $214load_attr.2 = getattr(value=$202load_global.0, attr=pow)
2023-08-13 11:42:47,623 on stmt: $226load_global.4 = global(float: <class 'float'>)
2023-08-13 11:42:47,623 on stmt: $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,623 on stmt: $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,623 on stmt: $268return_value.9 = cast(value=$258call.8)
2023-08-13 11:42:47,623 on stmt: return $268return_value.9
2023-08-13 11:42:47,623 ==== SSA block rewrite pass on 270
2023-08-13 11:42:47,623 Running <numba.core.ssa._FreshVarHandler object at 0x000001F697197D50>
2023-08-13 11:42:47,623 on stmt: $const272.1 = const(int, 0)
2023-08-13 11:42:47,623 on stmt: $274compare_op.2 = exp.3 != $const272.1
2023-08-13 11:42:47,623 on stmt: bool280 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,623 on stmt: $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,623 on stmt: branch $280pred, 282, 334
2023-08-13 11:42:47,623 ==== SSA block rewrite pass on 282
2023-08-13 11:42:47,623 Running <numba.core.ssa._FreshVarHandler object at 0x000001F697197D50>
2023-08-13 11:42:47,623 on stmt: exp.4 = phi(incoming_values=[Var(exp.2, numbers.py:240), Var(exp.3, numbers.py:234)], incoming_blocks=[302, 270])
2023-08-13 11:42:47,624 on stmt: $const284.1 = const(int, 1)
2023-08-13 11:42:47,624 on stmt: $binop_and_286.2 = exp.4 & $const284.1
2023-08-13 11:42:47,624 on stmt: bool290 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,624 on stmt: $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,624 on stmt: branch $290pred, 292, 302
2023-08-13 11:42:47,624 ==== SSA block rewrite pass on 292
2023-08-13 11:42:47,624 Running <numba.core.ssa._FreshVarHandler object at 0x000001F697197D50>
2023-08-13 11:42:47,624 on stmt: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,624 on stmt: r = $binop_imul296.2
2023-08-13 11:42:47,624 on stmt: jump 302
2023-08-13 11:42:47,624 ==== SSA block rewrite pass on 302
2023-08-13 11:42:47,624 Running <numba.core.ssa._FreshVarHandler object at 0x000001F697197D50>
2023-08-13 11:42:47,625 on stmt: $const304.1 = const(int, 1)
2023-08-13 11:42:47,625 on stmt: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,625 on stmt: exp.2 = $binop_irshift306.2
2023-08-13 11:42:47,625 on stmt: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,625 on stmt: a.1 = $binop_imul316.5
2023-08-13 11:42:47,625 replaced with: a.1.1 = $binop_imul316.5
2023-08-13 11:42:47,625 on stmt: $const324.7 = const(int, 0)
2023-08-13 11:42:47,625 on stmt: $326compare_op.8 = exp.2 != $const324.7
2023-08-13 11:42:47,625 on stmt: bool332 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,625 on stmt: $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,625 on stmt: branch $332pred, 282, 334
2023-08-13 11:42:47,625 ==== SSA block rewrite pass on 334
2023-08-13 11:42:47,625 Running <numba.core.ssa._FreshVarHandler object at 0x000001F697197D50>
2023-08-13 11:42:47,625 on stmt: bool336 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,625 on stmt: $336pred = call bool336(invert.2, func=bool336, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,625 on stmt: branch $336pred, 338, 348
2023-08-13 11:42:47,626 ==== SSA block rewrite pass on 338
2023-08-13 11:42:47,626 Running <numba.core.ssa._FreshVarHandler object at 0x000001F697197D50>
2023-08-13 11:42:47,626 on stmt: $const338.0 = const(float, 1.0)
2023-08-13 11:42:47,626 on stmt: $binop_truediv342.2 = $const338.0 / r
2023-08-13 11:42:47,626 on stmt: $phi350.0 = $binop_truediv342.2
2023-08-13 11:42:47,626 on stmt: jump 350
2023-08-13 11:42:47,626 ==== SSA block rewrite pass on 348
2023-08-13 11:42:47,626 Running <numba.core.ssa._FreshVarHandler object at 0x000001F697197D50>
2023-08-13 11:42:47,626 on stmt: $phi350.0.1 = r
2023-08-13 11:42:47,626 on stmt: jump 350
2023-08-13 11:42:47,626 ==== SSA block rewrite pass on 350
2023-08-13 11:42:47,626 Running <numba.core.ssa._FreshVarHandler object at 0x000001F697197D50>
2023-08-13 11:42:47,627 on stmt: $phi350.0.2 = phi(incoming_values=[Var($phi350.0, numbers.py:243), Var($phi350.0.1, numbers.py:243)], incoming_blocks=[338, 348])
2023-08-13 11:42:47,627 on stmt: $350return_value.1 = cast(value=$phi350.0.2)
2023-08-13 11:42:47,627 on stmt: return $350return_value.1
2023-08-13 11:42:47,627 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001F6971FDA50>],
             302: [<numba.core.ir.Assign object at 0x000001F6971C8990>]})
2023-08-13 11:42:47,627 ==== SSA block rewrite pass on 0
2023-08-13 11:42:47,627 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971D7590>
2023-08-13 11:42:47,627 on stmt: a = arg(0, name=a)
2023-08-13 11:42:47,627 on stmt: b = arg(1, name=b)
2023-08-13 11:42:47,627 on stmt: $8load_deref.1 = freevar(tp: float64)
2023-08-13 11:42:47,627 on stmt: $const10.2 = const(int, 1)
2023-08-13 11:42:47,627 on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,628 on stmt: $30load_deref.5 = freevar(tp: float64)
2023-08-13 11:42:47,628 on stmt: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,628 on stmt: $const52.9 = const(int, 0)
2023-08-13 11:42:47,628 on stmt: $54compare_op.10 = b < $const52.9
2023-08-13 11:42:47,628 on stmt: bool60 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,628 on stmt: $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,628 on stmt: branch $60pred, 62, 182
2023-08-13 11:42:47,628 ==== SSA block rewrite pass on 62
2023-08-13 11:42:47,628 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971D7590>
2023-08-13 11:42:47,628 on stmt: invert = const(bool, True)
2023-08-13 11:42:47,628 on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-08-13 11:42:47,628 on stmt: $const74.4 = const(int, 0)
2023-08-13 11:42:47,628 on stmt: $76compare_op.5 = exp < $const74.4
2023-08-13 11:42:47,628 on stmt: bool82 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,629 on stmt: $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,629 on stmt: branch $82pred, 84, 98
2023-08-13 11:42:47,629 ==== SSA block rewrite pass on 84
2023-08-13 11:42:47,629 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971D7590>
2023-08-13 11:42:47,629 on stmt: $84load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-08-13 11:42:47,629 on stmt: <static> raise <class 'OverflowError'>
2023-08-13 11:42:47,629 ==== SSA block rewrite pass on 98
2023-08-13 11:42:47,629 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971D7590>
2023-08-13 11:42:47,629 on stmt: $98load_deref.0 = freevar(is_integer: False)
2023-08-13 11:42:47,629 on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,629 on stmt: $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,629 on stmt: jump 180
2023-08-13 11:42:47,629 ==== SSA block rewrite pass on 180
2023-08-13 11:42:47,629 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971D7590>
2023-08-13 11:42:47,630 on stmt: jump 190
2023-08-13 11:42:47,630 ==== SSA block rewrite pass on 182
2023-08-13 11:42:47,630 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971D7590>
2023-08-13 11:42:47,630 on stmt: invert.1 = const(bool, False)
2023-08-13 11:42:47,630 on stmt: exp.1 = b
2023-08-13 11:42:47,630 on stmt: jump 190
2023-08-13 11:42:47,630 ==== SSA block rewrite pass on 190
2023-08-13 11:42:47,630 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971D7590>
2023-08-13 11:42:47,630 on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[180, 182])
2023-08-13 11:42:47,630 on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:219), Var(invert.1, numbers.py:232)], incoming_blocks=[180, 182])
2023-08-13 11:42:47,630 on stmt: $const192.1 = const(int, 65536)
2023-08-13 11:42:47,630 on stmt: $194compare_op.2 = exp.3 > $const192.1
2023-08-13 11:42:47,631 on stmt: bool200 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,631 on stmt: $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,631 on stmt: branch $200pred, 202, 270
2023-08-13 11:42:47,631 ==== SSA block rewrite pass on 202
2023-08-13 11:42:47,631 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971D7590>
2023-08-13 11:42:47,631 on stmt: $202load_global.0 = global(math: <module 'math' (built-in)>)
2023-08-13 11:42:47,631 on stmt: $214load_attr.2 = getattr(value=$202load_global.0, attr=pow)
2023-08-13 11:42:47,632 on stmt: $226load_global.4 = global(float: <class 'float'>)
2023-08-13 11:42:47,632 on stmt: $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,632 on stmt: $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,632 find_def var='a.1' stmt=$258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,632 find_def_from_top label 202
2023-08-13 11:42:47,632 idom 190 from label 202
2023-08-13 11:42:47,632 find_def_from_bottom label 190
2023-08-13 11:42:47,632 find_def_from_top label 190
2023-08-13 11:42:47,632 idom 0 from label 190
2023-08-13 11:42:47,632 find_def_from_bottom label 0
2023-08-13 11:42:47,632 on stmt: $268return_value.9 = cast(value=$258call.8)
2023-08-13 11:42:47,632 on stmt: return $268return_value.9
2023-08-13 11:42:47,632 ==== SSA block rewrite pass on 270
2023-08-13 11:42:47,633 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971D7590>
2023-08-13 11:42:47,633 on stmt: $const272.1 = const(int, 0)
2023-08-13 11:42:47,633 on stmt: $274compare_op.2 = exp.3 != $const272.1
2023-08-13 11:42:47,633 on stmt: bool280 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,633 on stmt: $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,633 on stmt: branch $280pred, 282, 334
2023-08-13 11:42:47,633 ==== SSA block rewrite pass on 282
2023-08-13 11:42:47,633 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971D7590>
2023-08-13 11:42:47,633 on stmt: exp.4 = phi(incoming_values=[Var(exp.2, numbers.py:240), Var(exp.3, numbers.py:234)], incoming_blocks=[302, 270])
2023-08-13 11:42:47,633 on stmt: $const284.1 = const(int, 1)
2023-08-13 11:42:47,633 on stmt: $binop_and_286.2 = exp.4 & $const284.1
2023-08-13 11:42:47,633 on stmt: bool290 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,633 on stmt: $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,633 on stmt: branch $290pred, 292, 302
2023-08-13 11:42:47,633 ==== SSA block rewrite pass on 292
2023-08-13 11:42:47,633 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971D7590>
2023-08-13 11:42:47,634 on stmt: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,634 find_def var='a.1' stmt=$binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,634 find_def_from_top label 292
2023-08-13 11:42:47,634 idom 282 from label 292
2023-08-13 11:42:47,634 find_def_from_bottom label 282
2023-08-13 11:42:47,634 find_def_from_top label 282
2023-08-13 11:42:47,634 insert phi node a.1.2 = phi(incoming_values=[], incoming_blocks=[]) at 282
2023-08-13 11:42:47,634 find_def_from_bottom label 302
2023-08-13 11:42:47,634 incoming_def a.1.1 = $binop_imul316.5
2023-08-13 11:42:47,634 find_def_from_bottom label 270
2023-08-13 11:42:47,634 find_def_from_top label 270
2023-08-13 11:42:47,634 idom 190 from label 270
2023-08-13 11:42:47,634 find_def_from_bottom label 190
2023-08-13 11:42:47,634 find_def_from_top label 190
2023-08-13 11:42:47,634 idom 0 from label 190
2023-08-13 11:42:47,634 find_def_from_bottom label 0
2023-08-13 11:42:47,634 incoming_def a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,635 replaced with: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,635 on stmt: r = $binop_imul296.2
2023-08-13 11:42:47,635 on stmt: jump 302
2023-08-13 11:42:47,635 ==== SSA block rewrite pass on 302
2023-08-13 11:42:47,635 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971D7590>
2023-08-13 11:42:47,635 on stmt: $const304.1 = const(int, 1)
2023-08-13 11:42:47,635 on stmt: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,635 on stmt: exp.2 = $binop_irshift306.2
2023-08-13 11:42:47,635 on stmt: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,635 find_def var='a.1' stmt=$binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,635 find_def_from_top label 302
2023-08-13 11:42:47,635 idom 282 from label 302
2023-08-13 11:42:47,635 find_def_from_bottom label 282
2023-08-13 11:42:47,635 replaced with: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,636 on stmt: a.1.1 = $binop_imul316.5
2023-08-13 11:42:47,636 on stmt: $const324.7 = const(int, 0)
2023-08-13 11:42:47,636 on stmt: $326compare_op.8 = exp.2 != $const324.7
2023-08-13 11:42:47,636 on stmt: bool332 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,636 on stmt: $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,636 on stmt: branch $332pred, 282, 334
2023-08-13 11:42:47,636 ==== SSA block rewrite pass on 334
2023-08-13 11:42:47,636 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971D7590>
2023-08-13 11:42:47,636 on stmt: bool336 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,636 on stmt: $336pred = call bool336(invert.2, func=bool336, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,637 on stmt: branch $336pred, 338, 348
2023-08-13 11:42:47,637 ==== SSA block rewrite pass on 338
2023-08-13 11:42:47,637 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971D7590>
2023-08-13 11:42:47,637 on stmt: $const338.0 = const(float, 1.0)
2023-08-13 11:42:47,637 on stmt: $binop_truediv342.2 = $const338.0 / r
2023-08-13 11:42:47,637 on stmt: $phi350.0 = $binop_truediv342.2
2023-08-13 11:42:47,637 on stmt: jump 350
2023-08-13 11:42:47,637 ==== SSA block rewrite pass on 348
2023-08-13 11:42:47,637 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971D7590>
2023-08-13 11:42:47,637 on stmt: $phi350.0.1 = r
2023-08-13 11:42:47,637 on stmt: jump 350
2023-08-13 11:42:47,637 ==== SSA block rewrite pass on 350
2023-08-13 11:42:47,637 Running <numba.core.ssa._FixSSAVars object at 0x000001F6971D7590>
2023-08-13 11:42:47,637 on stmt: $phi350.0.2 = phi(incoming_values=[Var($phi350.0, numbers.py:243), Var($phi350.0.1, numbers.py:243)], incoming_blocks=[338, 348])
2023-08-13 11:42:47,637 on stmt: $350return_value.1 = cast(value=$phi350.0.2)
2023-08-13 11:42:47,638 on stmt: return $350return_value.1
2023-08-13 11:42:47,638 Fix SSA violator on var r
2023-08-13 11:42:47,638 ==== SSA block rewrite pass on 0
2023-08-13 11:42:47,638 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D5D50>
2023-08-13 11:42:47,638 on stmt: a = arg(0, name=a)
2023-08-13 11:42:47,638 on stmt: b = arg(1, name=b)
2023-08-13 11:42:47,638 on stmt: $8load_deref.1 = freevar(tp: float64)
2023-08-13 11:42:47,638 on stmt: $const10.2 = const(int, 1)
2023-08-13 11:42:47,638 on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,638 first assign: r
2023-08-13 11:42:47,638 replaced with: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,638 on stmt: $30load_deref.5 = freevar(tp: float64)
2023-08-13 11:42:47,638 on stmt: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,638 on stmt: $const52.9 = const(int, 0)
2023-08-13 11:42:47,638 on stmt: $54compare_op.10 = b < $const52.9
2023-08-13 11:42:47,638 on stmt: bool60 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,639 on stmt: $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,639 on stmt: branch $60pred, 62, 182
2023-08-13 11:42:47,639 ==== SSA block rewrite pass on 62
2023-08-13 11:42:47,639 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D5D50>
2023-08-13 11:42:47,639 on stmt: invert = const(bool, True)
2023-08-13 11:42:47,639 on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-08-13 11:42:47,639 on stmt: $const74.4 = const(int, 0)
2023-08-13 11:42:47,639 on stmt: $76compare_op.5 = exp < $const74.4
2023-08-13 11:42:47,639 on stmt: bool82 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,639 on stmt: $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,639 on stmt: branch $82pred, 84, 98
2023-08-13 11:42:47,639 ==== SSA block rewrite pass on 84
2023-08-13 11:42:47,639 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D5D50>
2023-08-13 11:42:47,639 on stmt: $84load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-08-13 11:42:47,640 on stmt: <static> raise <class 'OverflowError'>
2023-08-13 11:42:47,640 ==== SSA block rewrite pass on 98
2023-08-13 11:42:47,640 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D5D50>
2023-08-13 11:42:47,640 on stmt: $98load_deref.0 = freevar(is_integer: False)
2023-08-13 11:42:47,640 on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,640 on stmt: $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,640 on stmt: jump 180
2023-08-13 11:42:47,640 ==== SSA block rewrite pass on 180
2023-08-13 11:42:47,640 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D5D50>
2023-08-13 11:42:47,640 on stmt: jump 190
2023-08-13 11:42:47,640 ==== SSA block rewrite pass on 182
2023-08-13 11:42:47,640 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D5D50>
2023-08-13 11:42:47,640 on stmt: invert.1 = const(bool, False)
2023-08-13 11:42:47,640 on stmt: exp.1 = b
2023-08-13 11:42:47,640 on stmt: jump 190
2023-08-13 11:42:47,640 ==== SSA block rewrite pass on 190
2023-08-13 11:42:47,640 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D5D50>
2023-08-13 11:42:47,641 on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[180, 182])
2023-08-13 11:42:47,641 on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:219), Var(invert.1, numbers.py:232)], incoming_blocks=[180, 182])
2023-08-13 11:42:47,641 on stmt: $const192.1 = const(int, 65536)
2023-08-13 11:42:47,641 on stmt: $194compare_op.2 = exp.3 > $const192.1
2023-08-13 11:42:47,641 on stmt: bool200 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,641 on stmt: $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,641 on stmt: branch $200pred, 202, 270
2023-08-13 11:42:47,641 ==== SSA block rewrite pass on 202
2023-08-13 11:42:47,641 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D5D50>
2023-08-13 11:42:47,641 on stmt: $202load_global.0 = global(math: <module 'math' (built-in)>)
2023-08-13 11:42:47,641 on stmt: $214load_attr.2 = getattr(value=$202load_global.0, attr=pow)
2023-08-13 11:42:47,641 on stmt: $226load_global.4 = global(float: <class 'float'>)
2023-08-13 11:42:47,641 on stmt: $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,641 on stmt: $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,642 on stmt: $268return_value.9 = cast(value=$258call.8)
2023-08-13 11:42:47,642 on stmt: return $268return_value.9
2023-08-13 11:42:47,642 ==== SSA block rewrite pass on 270
2023-08-13 11:42:47,642 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D5D50>
2023-08-13 11:42:47,642 on stmt: $const272.1 = const(int, 0)
2023-08-13 11:42:47,642 on stmt: $274compare_op.2 = exp.3 != $const272.1
2023-08-13 11:42:47,642 on stmt: bool280 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,642 on stmt: $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,642 on stmt: branch $280pred, 282, 334
2023-08-13 11:42:47,642 ==== SSA block rewrite pass on 282
2023-08-13 11:42:47,642 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D5D50>
2023-08-13 11:42:47,642 on stmt: a.1.2 = phi(incoming_values=[Var(a.1.1, numbers.py:241), Var(a.1, numbers.py:217)], incoming_blocks=[302, 270])
2023-08-13 11:42:47,643 on stmt: exp.4 = phi(incoming_values=[Var(exp.2, numbers.py:240), Var(exp.3, numbers.py:234)], incoming_blocks=[302, 270])
2023-08-13 11:42:47,643 on stmt: $const284.1 = const(int, 1)
2023-08-13 11:42:47,643 on stmt: $binop_and_286.2 = exp.4 & $const284.1
2023-08-13 11:42:47,643 on stmt: bool290 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,643 on stmt: $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,643 on stmt: branch $290pred, 292, 302
2023-08-13 11:42:47,643 ==== SSA block rewrite pass on 292
2023-08-13 11:42:47,643 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D5D50>
2023-08-13 11:42:47,643 on stmt: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,644 on stmt: r = $binop_imul296.2
2023-08-13 11:42:47,644 replaced with: r.1 = $binop_imul296.2
2023-08-13 11:42:47,644 on stmt: jump 302
2023-08-13 11:42:47,644 ==== SSA block rewrite pass on 302
2023-08-13 11:42:47,644 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D5D50>
2023-08-13 11:42:47,644 on stmt: $const304.1 = const(int, 1)
2023-08-13 11:42:47,644 on stmt: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,644 on stmt: exp.2 = $binop_irshift306.2
2023-08-13 11:42:47,644 on stmt: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,644 on stmt: a.1.1 = $binop_imul316.5
2023-08-13 11:42:47,644 on stmt: $const324.7 = const(int, 0)
2023-08-13 11:42:47,645 on stmt: $326compare_op.8 = exp.2 != $const324.7
2023-08-13 11:42:47,645 on stmt: bool332 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,645 on stmt: $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,645 on stmt: branch $332pred, 282, 334
2023-08-13 11:42:47,645 ==== SSA block rewrite pass on 334
2023-08-13 11:42:47,645 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D5D50>
2023-08-13 11:42:47,645 on stmt: bool336 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,645 on stmt: $336pred = call bool336(invert.2, func=bool336, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,645 on stmt: branch $336pred, 338, 348
2023-08-13 11:42:47,645 ==== SSA block rewrite pass on 338
2023-08-13 11:42:47,645 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D5D50>
2023-08-13 11:42:47,645 on stmt: $const338.0 = const(float, 1.0)
2023-08-13 11:42:47,645 on stmt: $binop_truediv342.2 = $const338.0 / r
2023-08-13 11:42:47,645 on stmt: $phi350.0 = $binop_truediv342.2
2023-08-13 11:42:47,645 on stmt: jump 350
2023-08-13 11:42:47,645 ==== SSA block rewrite pass on 348
2023-08-13 11:42:47,646 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D5D50>
2023-08-13 11:42:47,646 on stmt: $phi350.0.1 = r
2023-08-13 11:42:47,646 on stmt: jump 350
2023-08-13 11:42:47,646 ==== SSA block rewrite pass on 350
2023-08-13 11:42:47,646 Running <numba.core.ssa._FreshVarHandler object at 0x000001F6971D5D50>
2023-08-13 11:42:47,646 on stmt: $phi350.0.2 = phi(incoming_values=[Var($phi350.0, numbers.py:243), Var($phi350.0.1, numbers.py:243)], incoming_blocks=[338, 348])
2023-08-13 11:42:47,646 on stmt: $350return_value.1 = cast(value=$phi350.0.2)
2023-08-13 11:42:47,646 on stmt: return $350return_value.1
2023-08-13 11:42:47,646 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001F6971C9510>],
             292: [<numba.core.ir.Assign object at 0x000001F6971CB650>]})
2023-08-13 11:42:47,646 ==== SSA block rewrite pass on 0
2023-08-13 11:42:47,646 Running <numba.core.ssa._FixSSAVars object at 0x000001F697135E10>
2023-08-13 11:42:47,647 on stmt: a = arg(0, name=a)
2023-08-13 11:42:47,647 on stmt: b = arg(1, name=b)
2023-08-13 11:42:47,647 on stmt: $8load_deref.1 = freevar(tp: float64)
2023-08-13 11:42:47,647 on stmt: $const10.2 = const(int, 1)
2023-08-13 11:42:47,647 on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,647 on stmt: $30load_deref.5 = freevar(tp: float64)
2023-08-13 11:42:47,647 on stmt: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,647 on stmt: $const52.9 = const(int, 0)
2023-08-13 11:42:47,648 on stmt: $54compare_op.10 = b < $const52.9
2023-08-13 11:42:47,648 on stmt: bool60 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,648 on stmt: $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,648 on stmt: branch $60pred, 62, 182
2023-08-13 11:42:47,648 ==== SSA block rewrite pass on 62
2023-08-13 11:42:47,648 Running <numba.core.ssa._FixSSAVars object at 0x000001F697135E10>
2023-08-13 11:42:47,648 on stmt: invert = const(bool, True)
2023-08-13 11:42:47,648 on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-08-13 11:42:47,649 on stmt: $const74.4 = const(int, 0)
2023-08-13 11:42:47,649 on stmt: $76compare_op.5 = exp < $const74.4
2023-08-13 11:42:47,649 on stmt: bool82 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,649 on stmt: $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,649 on stmt: branch $82pred, 84, 98
2023-08-13 11:42:47,649 ==== SSA block rewrite pass on 84
2023-08-13 11:42:47,649 Running <numba.core.ssa._FixSSAVars object at 0x000001F697135E10>
2023-08-13 11:42:47,649 on stmt: $84load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-08-13 11:42:47,649 on stmt: <static> raise <class 'OverflowError'>
2023-08-13 11:42:47,649 ==== SSA block rewrite pass on 98
2023-08-13 11:42:47,649 Running <numba.core.ssa._FixSSAVars object at 0x000001F697135E10>
2023-08-13 11:42:47,649 on stmt: $98load_deref.0 = freevar(is_integer: False)
2023-08-13 11:42:47,650 on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,650 on stmt: $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,650 on stmt: jump 180
2023-08-13 11:42:47,650 ==== SSA block rewrite pass on 180
2023-08-13 11:42:47,650 Running <numba.core.ssa._FixSSAVars object at 0x000001F697135E10>
2023-08-13 11:42:47,650 on stmt: jump 190
2023-08-13 11:42:47,650 ==== SSA block rewrite pass on 182
2023-08-13 11:42:47,650 Running <numba.core.ssa._FixSSAVars object at 0x000001F697135E10>
2023-08-13 11:42:47,650 on stmt: invert.1 = const(bool, False)
2023-08-13 11:42:47,650 on stmt: exp.1 = b
2023-08-13 11:42:47,650 on stmt: jump 190
2023-08-13 11:42:47,650 ==== SSA block rewrite pass on 190
2023-08-13 11:42:47,650 Running <numba.core.ssa._FixSSAVars object at 0x000001F697135E10>
2023-08-13 11:42:47,650 on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[180, 182])
2023-08-13 11:42:47,650 on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:219), Var(invert.1, numbers.py:232)], incoming_blocks=[180, 182])
2023-08-13 11:42:47,650 on stmt: $const192.1 = const(int, 65536)
2023-08-13 11:42:47,651 on stmt: $194compare_op.2 = exp.3 > $const192.1
2023-08-13 11:42:47,651 on stmt: bool200 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,651 on stmt: $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,651 on stmt: branch $200pred, 202, 270
2023-08-13 11:42:47,651 ==== SSA block rewrite pass on 202
2023-08-13 11:42:47,651 Running <numba.core.ssa._FixSSAVars object at 0x000001F697135E10>
2023-08-13 11:42:47,651 on stmt: $202load_global.0 = global(math: <module 'math' (built-in)>)
2023-08-13 11:42:47,651 on stmt: $214load_attr.2 = getattr(value=$202load_global.0, attr=pow)
2023-08-13 11:42:47,651 on stmt: $226load_global.4 = global(float: <class 'float'>)
2023-08-13 11:42:47,651 on stmt: $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,651 on stmt: $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,651 on stmt: $268return_value.9 = cast(value=$258call.8)
2023-08-13 11:42:47,651 on stmt: return $268return_value.9
2023-08-13 11:42:47,651 ==== SSA block rewrite pass on 270
2023-08-13 11:42:47,652 Running <numba.core.ssa._FixSSAVars object at 0x000001F697135E10>
2023-08-13 11:42:47,652 on stmt: $const272.1 = const(int, 0)
2023-08-13 11:42:47,652 on stmt: $274compare_op.2 = exp.3 != $const272.1
2023-08-13 11:42:47,652 on stmt: bool280 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,652 on stmt: $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,652 on stmt: branch $280pred, 282, 334
2023-08-13 11:42:47,652 ==== SSA block rewrite pass on 282
2023-08-13 11:42:47,652 Running <numba.core.ssa._FixSSAVars object at 0x000001F697135E10>
2023-08-13 11:42:47,652 on stmt: a.1.2 = phi(incoming_values=[Var(a.1.1, numbers.py:241), Var(a.1, numbers.py:217)], incoming_blocks=[302, 270])
2023-08-13 11:42:47,652 on stmt: exp.4 = phi(incoming_values=[Var(exp.2, numbers.py:240), Var(exp.3, numbers.py:234)], incoming_blocks=[302, 270])
2023-08-13 11:42:47,652 on stmt: $const284.1 = const(int, 1)
2023-08-13 11:42:47,653 on stmt: $binop_and_286.2 = exp.4 & $const284.1
2023-08-13 11:42:47,653 on stmt: bool290 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,653 on stmt: $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,653 on stmt: branch $290pred, 292, 302
2023-08-13 11:42:47,653 ==== SSA block rewrite pass on 292
2023-08-13 11:42:47,653 Running <numba.core.ssa._FixSSAVars object at 0x000001F697135E10>
2023-08-13 11:42:47,653 on stmt: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,653 find_def var='r' stmt=$binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,653 find_def_from_top label 292
2023-08-13 11:42:47,653 idom 282 from label 292
2023-08-13 11:42:47,653 find_def_from_bottom label 282
2023-08-13 11:42:47,653 find_def_from_top label 282
2023-08-13 11:42:47,654 insert phi node r.2 = phi(incoming_values=[], incoming_blocks=[]) at 282
2023-08-13 11:42:47,654 find_def_from_bottom label 302
2023-08-13 11:42:47,654 find_def_from_top label 302
2023-08-13 11:42:47,654 insert phi node r.3 = phi(incoming_values=[], incoming_blocks=[]) at 302
2023-08-13 11:42:47,654 find_def_from_bottom label 282
2023-08-13 11:42:47,654 incoming_def r.2 = phi(incoming_values=[], incoming_blocks=[])
2023-08-13 11:42:47,654 find_def_from_bottom label 292
2023-08-13 11:42:47,654 incoming_def r.1 = $binop_imul296.2
2023-08-13 11:42:47,654 incoming_def r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[282, 292])
2023-08-13 11:42:47,654 find_def_from_bottom label 270
2023-08-13 11:42:47,654 find_def_from_top label 270
2023-08-13 11:42:47,654 idom 190 from label 270
2023-08-13 11:42:47,654 find_def_from_bottom label 190
2023-08-13 11:42:47,654 find_def_from_top label 190
2023-08-13 11:42:47,654 idom 0 from label 190
2023-08-13 11:42:47,655 find_def_from_bottom label 0
2023-08-13 11:42:47,655 incoming_def r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,655 replaced with: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,655 on stmt: r.1 = $binop_imul296.2
2023-08-13 11:42:47,655 on stmt: jump 302
2023-08-13 11:42:47,655 ==== SSA block rewrite pass on 302
2023-08-13 11:42:47,655 Running <numba.core.ssa._FixSSAVars object at 0x000001F697135E10>
2023-08-13 11:42:47,655 on stmt: $const304.1 = const(int, 1)
2023-08-13 11:42:47,655 on stmt: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,655 on stmt: exp.2 = $binop_irshift306.2
2023-08-13 11:42:47,655 on stmt: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-08-13 11:42:47,655 on stmt: a.1.1 = $binop_imul316.5
2023-08-13 11:42:47,655 on stmt: $const324.7 = const(int, 0)
2023-08-13 11:42:47,655 on stmt: $326compare_op.8 = exp.2 != $const324.7
2023-08-13 11:42:47,656 on stmt: bool332 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,656 on stmt: $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,656 on stmt: branch $332pred, 282, 334
2023-08-13 11:42:47,656 ==== SSA block rewrite pass on 334
2023-08-13 11:42:47,656 Running <numba.core.ssa._FixSSAVars object at 0x000001F697135E10>
2023-08-13 11:42:47,656 on stmt: bool336 = global(bool: <class 'bool'>)
2023-08-13 11:42:47,656 on stmt: $336pred = call bool336(invert.2, func=bool336, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,656 on stmt: branch $336pred, 338, 348
2023-08-13 11:42:47,656 ==== SSA block rewrite pass on 338
2023-08-13 11:42:47,656 Running <numba.core.ssa._FixSSAVars object at 0x000001F697135E10>
2023-08-13 11:42:47,656 on stmt: $const338.0 = const(float, 1.0)
2023-08-13 11:42:47,656 on stmt: $binop_truediv342.2 = $const338.0 / r
2023-08-13 11:42:47,656 find_def var='r' stmt=$binop_truediv342.2 = $const338.0 / r
2023-08-13 11:42:47,656 find_def_from_top label 338
2023-08-13 11:42:47,657 idom 334 from label 338
2023-08-13 11:42:47,657 find_def_from_bottom label 334
2023-08-13 11:42:47,657 find_def_from_top label 334
2023-08-13 11:42:47,657 insert phi node r.4 = phi(incoming_values=[], incoming_blocks=[]) at 334
2023-08-13 11:42:47,657 find_def_from_bottom label 302
2023-08-13 11:42:47,657 incoming_def r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[282, 292])
2023-08-13 11:42:47,657 find_def_from_bottom label 270
2023-08-13 11:42:47,657 find_def_from_top label 270
2023-08-13 11:42:47,657 idom 190 from label 270
2023-08-13 11:42:47,657 find_def_from_bottom label 190
2023-08-13 11:42:47,657 find_def_from_top label 190
2023-08-13 11:42:47,657 idom 0 from label 190
2023-08-13 11:42:47,657 find_def_from_bottom label 0
2023-08-13 11:42:47,657 incoming_def r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,657 replaced with: $binop_truediv342.2 = $const338.0 / r.4
2023-08-13 11:42:47,657 on stmt: $phi350.0 = $binop_truediv342.2
2023-08-13 11:42:47,658 on stmt: jump 350
2023-08-13 11:42:47,658 ==== SSA block rewrite pass on 348
2023-08-13 11:42:47,658 Running <numba.core.ssa._FixSSAVars object at 0x000001F697135E10>
2023-08-13 11:42:47,658 on stmt: $phi350.0.1 = r
2023-08-13 11:42:47,658 find_def var='r' stmt=$phi350.0.1 = r
2023-08-13 11:42:47,658 find_def_from_top label 348
2023-08-13 11:42:47,658 idom 334 from label 348
2023-08-13 11:42:47,658 find_def_from_bottom label 334
2023-08-13 11:42:47,658 replaced with: $phi350.0.1 = r.4
2023-08-13 11:42:47,658 on stmt: jump 350
2023-08-13 11:42:47,658 ==== SSA block rewrite pass on 350
2023-08-13 11:42:47,658 Running <numba.core.ssa._FixSSAVars object at 0x000001F697135E10>
2023-08-13 11:42:47,658 on stmt: $phi350.0.2 = phi(incoming_values=[Var($phi350.0, numbers.py:243), Var($phi350.0.1, numbers.py:243)], incoming_blocks=[338, 348])
2023-08-13 11:42:47,658 on stmt: $350return_value.1 = cast(value=$phi350.0.2)
2023-08-13 11:42:47,658 on stmt: return $350return_value.1
2023-08-13 11:42:47,881 bytecode dump:
>          0	NOP(arg=None, lineno=2524)
           2	RESUME(arg=0, lineno=2524)
           4	LOAD_GLOBAL(arg=1, lineno=2528)
          16	LOAD_ATTR(arg=1, lineno=2528)
          26	LOAD_FAST(arg=0, lineno=2528)
          28	PRECALL(arg=1, lineno=2528)
          32	CALL(arg=1, lineno=2528)
          42	LOAD_CONST(arg=1, lineno=2528)
          44	LOAD_GLOBAL(arg=1, lineno=2528)
          56	LOAD_ATTR(arg=2, lineno=2528)
          66	LOAD_FAST(arg=0, lineno=2528)
          68	PRECALL(arg=1, lineno=2528)
          72	CALL(arg=1, lineno=2528)
          82	BINARY_OP(arg=5, lineno=2528)
          86	BINARY_OP(arg=0, lineno=2528)
          90	RETURN_VALUE(arg=None, lineno=2528)
2023-08-13 11:42:47,881 pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-13 11:42:47,881 stack: []
2023-08-13 11:42:47,882 state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-13 11:42:47,882 dispatch pc=0, inst=NOP(arg=None, lineno=2524)
2023-08-13 11:42:47,883 stack []
2023-08-13 11:42:47,883 dispatch pc=2, inst=RESUME(arg=0, lineno=2524)
2023-08-13 11:42:47,884 stack []
2023-08-13 11:42:47,884 dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=2528)
2023-08-13 11:42:47,884 stack []
2023-08-13 11:42:47,884 dispatch pc=16, inst=LOAD_ATTR(arg=1, lineno=2528)
2023-08-13 11:42:47,884 stack ['$null$4.1', '$4load_global.0']
2023-08-13 11:42:47,884 dispatch pc=26, inst=LOAD_FAST(arg=0, lineno=2528)
2023-08-13 11:42:47,884 stack ['$null$4.1', '$16load_attr.2']
2023-08-13 11:42:47,885 dispatch pc=28, inst=PRECALL(arg=1, lineno=2528)
2023-08-13 11:42:47,885 stack ['$null$4.1', '$16load_attr.2', '$x26.3']
2023-08-13 11:42:47,885 dispatch pc=32, inst=CALL(arg=1, lineno=2528)
2023-08-13 11:42:47,885 stack ['$null$4.1', '$16load_attr.2', '$x26.3']
2023-08-13 11:42:47,885 dispatch pc=42, inst=LOAD_CONST(arg=1, lineno=2528)
2023-08-13 11:42:47,886 stack ['$32call.4']
2023-08-13 11:42:47,886 dispatch pc=44, inst=LOAD_GLOBAL(arg=1, lineno=2528)
2023-08-13 11:42:47,886 stack ['$32call.4', '$const42.5']
2023-08-13 11:42:47,886 dispatch pc=56, inst=LOAD_ATTR(arg=2, lineno=2528)
2023-08-13 11:42:47,886 stack ['$32call.4', '$const42.5', '$null$44.7', '$44load_global.6']
2023-08-13 11:42:47,886 dispatch pc=66, inst=LOAD_FAST(arg=0, lineno=2528)
2023-08-13 11:42:47,886 stack ['$32call.4', '$const42.5', '$null$44.7', '$56load_attr.8']
2023-08-13 11:42:47,886 dispatch pc=68, inst=PRECALL(arg=1, lineno=2528)
2023-08-13 11:42:47,887 stack ['$32call.4', '$const42.5', '$null$44.7', '$56load_attr.8', '$x66.9']
2023-08-13 11:42:47,887 dispatch pc=72, inst=CALL(arg=1, lineno=2528)
2023-08-13 11:42:47,887 stack ['$32call.4', '$const42.5', '$null$44.7', '$56load_attr.8', '$x66.9']
2023-08-13 11:42:47,887 dispatch pc=82, inst=BINARY_OP(arg=5, lineno=2528)
2023-08-13 11:42:47,887 stack ['$32call.4', '$const42.5', '$72call.10']
2023-08-13 11:42:47,887 dispatch pc=86, inst=BINARY_OP(arg=0, lineno=2528)
2023-08-13 11:42:47,887 stack ['$32call.4', '$binop_mul82.11']
2023-08-13 11:42:47,887 dispatch pc=90, inst=RETURN_VALUE(arg=None, lineno=2528)
2023-08-13 11:42:47,888 stack ['$binop_add86.12']
2023-08-13 11:42:47,888 end state. edges=[]
2023-08-13 11:42:47,888 -------------------------Prune PHIs-------------------------
2023-08-13 11:42:47,888 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-08-13 11:42:47,888 defmap: {}
2023-08-13 11:42:47,888 phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:47,888 changing phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:47,888 keep phismap: {}
2023-08-13 11:42:47,888 new_out: defaultdict(<class 'dict'>, {})
2023-08-13 11:42:47,889 ----------------------DONE Prune PHIs-----------------------
2023-08-13 11:42:47,889 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'item': '$4load_global.0', 'res': '$16load_attr.2'}), (18, {}), (20, {}), (22, {}), (24, {}), (26, {'res': '$x26.3'}), (28, {}), (30, {}), (32, {'func': '$16load_attr.2', 'args': ['$x26.3'], 'kw_names': None, 'res': '$32call.4'}), (34, {}), (36, {}), (38, {}), (40, {}), (42, {'res': '$const42.5'}), (44, {'idx': 0, 'res': '$44load_global.6'}), (46, {}), (48, {}), (50, {}), (52, {}), (54, {}), (56, {'item': '$44load_global.6', 'res': '$56load_attr.8'}), (58, {}), (60, {}), (62, {}), (64, {}), (66, {'res': '$x66.9'}), (68, {}), (70, {}), (72, {'func': '$56load_attr.8', 'args': ['$x66.9'], 'kw_names': None, 'res': '$72call.10'}), (74, {}), (76, {}), (78, {}), (80, {}), (82, {'op': '*', 'lhs': '$const42.5', 'rhs': '$72call.10', 'res': '$binop_mul82.11'}), (84, {}), (86, {'op': '+', 'lhs': '$32call.4', 'rhs': '$binop_mul82.11', 'res': '$binop_add86.12'}), (88, {}), (90, {'retval': '$binop_add86.12', 'castval': '$90return_value.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:47,890 label 0:
    x = arg(0, name=x)                       ['x']
    $4load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>) ['$4load_global.0']
    $16load_attr.2 = getattr(value=$4load_global.0, attr=cos) ['$16load_attr.2', '$4load_global.0']
    $32call.4 = call $16load_attr.2(x, func=$16load_attr.2, args=[Var(x, utils.py:2524)], kws=(), vararg=None, varkwarg=None, target=None) ['$16load_attr.2', '$32call.4', 'x']
    $const42.5 = const(complex, 1j)          ['$const42.5']
    $44load_global.6 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>) ['$44load_global.6']
    $56load_attr.8 = getattr(value=$44load_global.6, attr=sin) ['$44load_global.6', '$56load_attr.8']
    $72call.10 = call $56load_attr.8(x, func=$56load_attr.8, args=[Var(x, utils.py:2524)], kws=(), vararg=None, varkwarg=None, target=None) ['$56load_attr.8', '$72call.10', 'x']
    $binop_mul82.11 = $const42.5 * $72call.10 ['$72call.10', '$binop_mul82.11', '$const42.5']
    $binop_add86.12 = $32call.4 + $binop_mul82.11 ['$32call.4', '$binop_add86.12', '$binop_mul82.11']
    $90return_value.13 = cast(value=$binop_add86.12) ['$90return_value.13', '$binop_add86.12']
    return $90return_value.13                ['$90return_value.13']

2023-08-13 11:42:47,900 ==== SSA block analysis pass on 0
2023-08-13 11:42:47,900 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F697194BD0>
2023-08-13 11:42:47,900 on stmt: x = arg(0, name=x)
2023-08-13 11:42:47,900 on stmt: $4load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:47,900 on stmt: $16load_attr.2 = getattr(value=$4load_global.0, attr=cos)
2023-08-13 11:42:47,901 on stmt: $32call.4 = call $16load_attr.2(x, func=$16load_attr.2, args=[Var(x, utils.py:2524)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,901 on stmt: $const42.5 = const(complex, 1j)
2023-08-13 11:42:47,901 on stmt: $44load_global.6 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:47,901 on stmt: $56load_attr.8 = getattr(value=$44load_global.6, attr=sin)
2023-08-13 11:42:47,901 on stmt: $72call.10 = call $56load_attr.8(x, func=$56load_attr.8, args=[Var(x, utils.py:2524)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:47,901 on stmt: $binop_mul82.11 = $const42.5 * $72call.10
2023-08-13 11:42:47,901 on stmt: $binop_add86.12 = $32call.4 + $binop_mul82.11
2023-08-13 11:42:47,901 on stmt: $90return_value.13 = cast(value=$binop_add86.12)
2023-08-13 11:42:47,901 on stmt: return $90return_value.13
2023-08-13 11:42:47,901 defs defaultdict(<class 'list'>,
            {'$16load_attr.2': [<numba.core.ir.Assign object at 0x000001F697118550>],
             '$32call.4': [<numba.core.ir.Assign object at 0x000001F697118210>],
             '$44load_global.6': [<numba.core.ir.Assign object at 0x000001F697119790>],
             '$4load_global.0': [<numba.core.ir.Assign object at 0x000001F697118D50>],
             '$56load_attr.8': [<numba.core.ir.Assign object at 0x000001F697119E90>],
             '$72call.10': [<numba.core.ir.Assign object at 0x000001F697119A90>],
             '$90return_value.13': [<numba.core.ir.Assign object at 0x000001F69711BFD0>],
             '$binop_add86.12': [<numba.core.ir.Assign object at 0x000001F69711B190>],
             '$binop_mul82.11': [<numba.core.ir.Assign object at 0x000001F697119D50>],
             '$const42.5': [<numba.core.ir.Assign object at 0x000001F697118A50>],
             'x': [<numba.core.ir.Assign object at 0x000001F697118950>]})
2023-08-13 11:42:47,901 SSA violators set()
2023-08-13 11:42:48,013 bytecode dump:
>          0	NOP(arg=None, lineno=2524)
           2	RESUME(arg=0, lineno=2524)
           4	LOAD_GLOBAL(arg=1, lineno=2528)
          16	LOAD_ATTR(arg=1, lineno=2528)
          26	LOAD_FAST(arg=0, lineno=2528)
          28	PRECALL(arg=1, lineno=2528)
          32	CALL(arg=1, lineno=2528)
          42	LOAD_CONST(arg=1, lineno=2528)
          44	LOAD_GLOBAL(arg=1, lineno=2528)
          56	LOAD_ATTR(arg=2, lineno=2528)
          66	LOAD_FAST(arg=0, lineno=2528)
          68	PRECALL(arg=1, lineno=2528)
          72	CALL(arg=1, lineno=2528)
          82	BINARY_OP(arg=5, lineno=2528)
          86	BINARY_OP(arg=0, lineno=2528)
          90	RETURN_VALUE(arg=None, lineno=2528)
2023-08-13 11:42:48,013 pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-13 11:42:48,013 stack: []
2023-08-13 11:42:48,014 state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-13 11:42:48,014 dispatch pc=0, inst=NOP(arg=None, lineno=2524)
2023-08-13 11:42:48,014 stack []
2023-08-13 11:42:48,014 dispatch pc=2, inst=RESUME(arg=0, lineno=2524)
2023-08-13 11:42:48,014 stack []
2023-08-13 11:42:48,014 dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=2528)
2023-08-13 11:42:48,014 stack []
2023-08-13 11:42:48,014 dispatch pc=16, inst=LOAD_ATTR(arg=1, lineno=2528)
2023-08-13 11:42:48,014 stack ['$null$4.1', '$4load_global.0']
2023-08-13 11:42:48,015 dispatch pc=26, inst=LOAD_FAST(arg=0, lineno=2528)
2023-08-13 11:42:48,015 stack ['$null$4.1', '$16load_attr.2']
2023-08-13 11:42:48,015 dispatch pc=28, inst=PRECALL(arg=1, lineno=2528)
2023-08-13 11:42:48,015 stack ['$null$4.1', '$16load_attr.2', '$x26.3']
2023-08-13 11:42:48,015 dispatch pc=32, inst=CALL(arg=1, lineno=2528)
2023-08-13 11:42:48,016 stack ['$null$4.1', '$16load_attr.2', '$x26.3']
2023-08-13 11:42:48,016 dispatch pc=42, inst=LOAD_CONST(arg=1, lineno=2528)
2023-08-13 11:42:48,016 stack ['$32call.4']
2023-08-13 11:42:48,016 dispatch pc=44, inst=LOAD_GLOBAL(arg=1, lineno=2528)
2023-08-13 11:42:48,016 stack ['$32call.4', '$const42.5']
2023-08-13 11:42:48,016 dispatch pc=56, inst=LOAD_ATTR(arg=2, lineno=2528)
2023-08-13 11:42:48,016 stack ['$32call.4', '$const42.5', '$null$44.7', '$44load_global.6']
2023-08-13 11:42:48,016 dispatch pc=66, inst=LOAD_FAST(arg=0, lineno=2528)
2023-08-13 11:42:48,016 stack ['$32call.4', '$const42.5', '$null$44.7', '$56load_attr.8']
2023-08-13 11:42:48,016 dispatch pc=68, inst=PRECALL(arg=1, lineno=2528)
2023-08-13 11:42:48,016 stack ['$32call.4', '$const42.5', '$null$44.7', '$56load_attr.8', '$x66.9']
2023-08-13 11:42:48,016 dispatch pc=72, inst=CALL(arg=1, lineno=2528)
2023-08-13 11:42:48,016 stack ['$32call.4', '$const42.5', '$null$44.7', '$56load_attr.8', '$x66.9']
2023-08-13 11:42:48,017 dispatch pc=82, inst=BINARY_OP(arg=5, lineno=2528)
2023-08-13 11:42:48,017 stack ['$32call.4', '$const42.5', '$72call.10']
2023-08-13 11:42:48,017 dispatch pc=86, inst=BINARY_OP(arg=0, lineno=2528)
2023-08-13 11:42:48,017 stack ['$32call.4', '$binop_mul82.11']
2023-08-13 11:42:48,017 dispatch pc=90, inst=RETURN_VALUE(arg=None, lineno=2528)
2023-08-13 11:42:48,017 stack ['$binop_add86.12']
2023-08-13 11:42:48,017 end state. edges=[]
2023-08-13 11:42:48,017 -------------------------Prune PHIs-------------------------
2023-08-13 11:42:48,017 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-08-13 11:42:48,017 defmap: {}
2023-08-13 11:42:48,017 phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:48,017 changing phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:48,018 keep phismap: {}
2023-08-13 11:42:48,018 new_out: defaultdict(<class 'dict'>, {})
2023-08-13 11:42:48,018 ----------------------DONE Prune PHIs-----------------------
2023-08-13 11:42:48,018 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'item': '$4load_global.0', 'res': '$16load_attr.2'}), (18, {}), (20, {}), (22, {}), (24, {}), (26, {'res': '$x26.3'}), (28, {}), (30, {}), (32, {'func': '$16load_attr.2', 'args': ['$x26.3'], 'kw_names': None, 'res': '$32call.4'}), (34, {}), (36, {}), (38, {}), (40, {}), (42, {'res': '$const42.5'}), (44, {'idx': 0, 'res': '$44load_global.6'}), (46, {}), (48, {}), (50, {}), (52, {}), (54, {}), (56, {'item': '$44load_global.6', 'res': '$56load_attr.8'}), (58, {}), (60, {}), (62, {}), (64, {}), (66, {'res': '$x66.9'}), (68, {}), (70, {}), (72, {'func': '$56load_attr.8', 'args': ['$x66.9'], 'kw_names': None, 'res': '$72call.10'}), (74, {}), (76, {}), (78, {}), (80, {}), (82, {'op': '*', 'lhs': '$const42.5', 'rhs': '$72call.10', 'res': '$binop_mul82.11'}), (84, {}), (86, {'op': '+', 'lhs': '$32call.4', 'rhs': '$binop_mul82.11', 'res': '$binop_add86.12'}), (88, {}), (90, {'retval': '$binop_add86.12', 'castval': '$90return_value.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:48,018 label 0:
    x = arg(0, name=x)                       ['x']
    $4load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>) ['$4load_global.0']
    $16load_attr.2 = getattr(value=$4load_global.0, attr=cos) ['$16load_attr.2', '$4load_global.0']
    $32call.4 = call $16load_attr.2(x, func=$16load_attr.2, args=[Var(x, utils.py:2524)], kws=(), vararg=None, varkwarg=None, target=None) ['$16load_attr.2', '$32call.4', 'x']
    $const42.5 = const(complex, 1j)          ['$const42.5']
    $44load_global.6 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>) ['$44load_global.6']
    $56load_attr.8 = getattr(value=$44load_global.6, attr=sin) ['$44load_global.6', '$56load_attr.8']
    $72call.10 = call $56load_attr.8(x, func=$56load_attr.8, args=[Var(x, utils.py:2524)], kws=(), vararg=None, varkwarg=None, target=None) ['$56load_attr.8', '$72call.10', 'x']
    $binop_mul82.11 = $const42.5 * $72call.10 ['$72call.10', '$binop_mul82.11', '$const42.5']
    $binop_add86.12 = $32call.4 + $binop_mul82.11 ['$32call.4', '$binop_add86.12', '$binop_mul82.11']
    $90return_value.13 = cast(value=$binop_add86.12) ['$90return_value.13', '$binop_add86.12']
    return $90return_value.13                ['$90return_value.13']

2023-08-13 11:42:48,028 ==== SSA block analysis pass on 0
2023-08-13 11:42:48,028 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6977BA450>
2023-08-13 11:42:48,028 on stmt: x = arg(0, name=x)
2023-08-13 11:42:48,028 on stmt: $4load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:48,028 on stmt: $16load_attr.2 = getattr(value=$4load_global.0, attr=cos)
2023-08-13 11:42:48,028 on stmt: $32call.4 = call $16load_attr.2(x, func=$16load_attr.2, args=[Var(x, utils.py:2524)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:48,028 on stmt: $const42.5 = const(complex, 1j)
2023-08-13 11:42:48,028 on stmt: $44load_global.6 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:48,028 on stmt: $56load_attr.8 = getattr(value=$44load_global.6, attr=sin)
2023-08-13 11:42:48,028 on stmt: $72call.10 = call $56load_attr.8(x, func=$56load_attr.8, args=[Var(x, utils.py:2524)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:48,029 on stmt: $binop_mul82.11 = $const42.5 * $72call.10
2023-08-13 11:42:48,029 on stmt: $binop_add86.12 = $32call.4 + $binop_mul82.11
2023-08-13 11:42:48,029 on stmt: $90return_value.13 = cast(value=$binop_add86.12)
2023-08-13 11:42:48,029 on stmt: return $90return_value.13
2023-08-13 11:42:48,029 defs defaultdict(<class 'list'>,
            {'$16load_attr.2': [<numba.core.ir.Assign object at 0x000001F6977C9310>],
             '$32call.4': [<numba.core.ir.Assign object at 0x000001F6977C97D0>],
             '$44load_global.6': [<numba.core.ir.Assign object at 0x000001F6977C9C90>],
             '$4load_global.0': [<numba.core.ir.Assign object at 0x000001F6977C9090>],
             '$56load_attr.8': [<numba.core.ir.Assign object at 0x000001F6977C9FD0>],
             '$72call.10': [<numba.core.ir.Assign object at 0x000001F6977CA4D0>],
             '$90return_value.13': [<numba.core.ir.Assign object at 0x000001F6977CAD10>],
             '$binop_add86.12': [<numba.core.ir.Assign object at 0x000001F6977CAA90>],
             '$binop_mul82.11': [<numba.core.ir.Assign object at 0x000001F6977CA810>],
             '$const42.5': [<numba.core.ir.Assign object at 0x000001F6977C9AD0>],
             'x': [<numba.core.ir.Assign object at 0x000001F6977C8E90>]})
2023-08-13 11:42:48,029 SSA violators set()
2023-08-13 11:42:48,327 bytecode dump:
>          0	NOP(arg=None, lineno=430)
           2	RESUME(arg=0, lineno=430)
           4	LOAD_FAST(arg=0, lineno=434)
           6	LOAD_CONST(arg=1, lineno=434)
           8	BINARY_SUBSCR(arg=None, lineno=434)
          18	LOAD_FAST(arg=0, lineno=434)
          20	LOAD_CONST(arg=2, lineno=434)
          22	BINARY_SUBSCR(arg=None, lineno=434)
          32	BINARY_OP(arg=0, lineno=434)
          36	LOAD_CONST(arg=3, lineno=434)
          38	LOAD_FAST(arg=0, lineno=434)
          40	LOAD_CONST(arg=4, lineno=434)
          42	BINARY_SUBSCR(arg=None, lineno=434)
          52	BINARY_OP(arg=5, lineno=434)
          56	BINARY_OP(arg=10, lineno=434)
          60	STORE_FAST(arg=1, lineno=434)
          62	LOAD_FAST(arg=0, lineno=435)
          64	LOAD_CONST(arg=1, lineno=435)
          66	BINARY_SUBSCR(arg=None, lineno=435)
          76	LOAD_FAST(arg=0, lineno=435)
          78	LOAD_CONST(arg=2, lineno=435)
          80	BINARY_SUBSCR(arg=None, lineno=435)
          90	BINARY_OP(arg=10, lineno=435)
          94	LOAD_CONST(arg=3, lineno=435)
          96	BINARY_OP(arg=11, lineno=435)
         100	STORE_FAST(arg=2, lineno=435)
         102	LOAD_GLOBAL(arg=1, lineno=437)
         114	LOAD_ATTR(arg=1, lineno=437)
         124	LOAD_FAST(arg=2, lineno=437)
         126	PRECALL(arg=1, lineno=437)
         130	CALL(arg=1, lineno=437)
         140	LOAD_GLOBAL(arg=1, lineno=437)
         152	LOAD_ATTR(arg=1, lineno=437)
         162	LOAD_FAST(arg=1, lineno=437)
         164	PRECALL(arg=1, lineno=437)
         168	CALL(arg=1, lineno=437)
         178	COMPARE_OP(arg=5, lineno=437)
         184	POP_JUMP_FORWARD_IF_FALSE(arg=2, lineno=437)
         186	LOAD_CONST(arg=4, lineno=440)
         188	RETURN_VALUE(arg=None, lineno=440)
>        190	LOAD_FAST(arg=2, lineno=442)
         192	UNARY_NEGATIVE(arg=None, lineno=442)
         194	LOAD_FAST(arg=1, lineno=442)
         196	BINARY_OP(arg=11, lineno=442)
         200	RETURN_VALUE(arg=None, lineno=442)
2023-08-13 11:42:48,328 pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-13 11:42:48,328 stack: []
2023-08-13 11:42:48,328 state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-13 11:42:48,328 dispatch pc=0, inst=NOP(arg=None, lineno=430)
2023-08-13 11:42:48,328 stack []
2023-08-13 11:42:48,328 dispatch pc=2, inst=RESUME(arg=0, lineno=430)
2023-08-13 11:42:48,328 stack []
2023-08-13 11:42:48,328 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=434)
2023-08-13 11:42:48,328 stack []
2023-08-13 11:42:48,328 dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=434)
2023-08-13 11:42:48,328 stack ['$x4.0']
2023-08-13 11:42:48,328 dispatch pc=8, inst=BINARY_SUBSCR(arg=None, lineno=434)
2023-08-13 11:42:48,328 stack ['$x4.0', '$const6.1']
2023-08-13 11:42:48,329 dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=434)
2023-08-13 11:42:48,329 stack ['$8binary_subscr.2']
2023-08-13 11:42:48,329 dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=434)
2023-08-13 11:42:48,329 stack ['$8binary_subscr.2', '$x18.3']
2023-08-13 11:42:48,329 dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=434)
2023-08-13 11:42:48,329 stack ['$8binary_subscr.2', '$x18.3', '$const20.4']
2023-08-13 11:42:48,330 dispatch pc=32, inst=BINARY_OP(arg=0, lineno=434)
2023-08-13 11:42:48,330 stack ['$8binary_subscr.2', '$22binary_subscr.5']
2023-08-13 11:42:48,330 dispatch pc=36, inst=LOAD_CONST(arg=3, lineno=434)
2023-08-13 11:42:48,330 stack ['$binop_add32.6']
2023-08-13 11:42:48,330 dispatch pc=38, inst=LOAD_FAST(arg=0, lineno=434)
2023-08-13 11:42:48,330 stack ['$binop_add32.6', '$const36.7']
2023-08-13 11:42:48,331 dispatch pc=40, inst=LOAD_CONST(arg=4, lineno=434)
2023-08-13 11:42:48,331 stack ['$binop_add32.6', '$const36.7', '$x38.8']
2023-08-13 11:42:48,331 dispatch pc=42, inst=BINARY_SUBSCR(arg=None, lineno=434)
2023-08-13 11:42:48,332 stack ['$binop_add32.6', '$const36.7', '$x38.8', '$const40.9']
2023-08-13 11:42:48,332 dispatch pc=52, inst=BINARY_OP(arg=5, lineno=434)
2023-08-13 11:42:48,332 stack ['$binop_add32.6', '$const36.7', '$42binary_subscr.10']
2023-08-13 11:42:48,332 dispatch pc=56, inst=BINARY_OP(arg=10, lineno=434)
2023-08-13 11:42:48,332 stack ['$binop_add32.6', '$binop_mul52.11']
2023-08-13 11:42:48,332 dispatch pc=60, inst=STORE_FAST(arg=1, lineno=434)
2023-08-13 11:42:48,333 stack ['$binop_sub56.12']
2023-08-13 11:42:48,333 dispatch pc=62, inst=LOAD_FAST(arg=0, lineno=435)
2023-08-13 11:42:48,333 stack []
2023-08-13 11:42:48,333 dispatch pc=64, inst=LOAD_CONST(arg=1, lineno=435)
2023-08-13 11:42:48,333 stack ['$x62.13']
2023-08-13 11:42:48,333 dispatch pc=66, inst=BINARY_SUBSCR(arg=None, lineno=435)
2023-08-13 11:42:48,334 stack ['$x62.13', '$const64.14']
2023-08-13 11:42:48,334 dispatch pc=76, inst=LOAD_FAST(arg=0, lineno=435)
2023-08-13 11:42:48,334 stack ['$66binary_subscr.15']
2023-08-13 11:42:48,334 dispatch pc=78, inst=LOAD_CONST(arg=2, lineno=435)
2023-08-13 11:42:48,334 stack ['$66binary_subscr.15', '$x76.16']
2023-08-13 11:42:48,335 dispatch pc=80, inst=BINARY_SUBSCR(arg=None, lineno=435)
2023-08-13 11:42:48,335 stack ['$66binary_subscr.15', '$x76.16', '$const78.17']
2023-08-13 11:42:48,335 dispatch pc=90, inst=BINARY_OP(arg=10, lineno=435)
2023-08-13 11:42:48,335 stack ['$66binary_subscr.15', '$80binary_subscr.18']
2023-08-13 11:42:48,335 dispatch pc=94, inst=LOAD_CONST(arg=3, lineno=435)
2023-08-13 11:42:48,335 stack ['$binop_sub90.19']
2023-08-13 11:42:48,335 dispatch pc=96, inst=BINARY_OP(arg=11, lineno=435)
2023-08-13 11:42:48,336 stack ['$binop_sub90.19', '$const94.20']
2023-08-13 11:42:48,336 dispatch pc=100, inst=STORE_FAST(arg=2, lineno=435)
2023-08-13 11:42:48,336 stack ['$binop_truediv96.21']
2023-08-13 11:42:48,336 dispatch pc=102, inst=LOAD_GLOBAL(arg=1, lineno=437)
2023-08-13 11:42:48,336 stack []
2023-08-13 11:42:48,336 dispatch pc=114, inst=LOAD_ATTR(arg=1, lineno=437)
2023-08-13 11:42:48,337 stack ['$null$102.23', '$102load_global.22']
2023-08-13 11:42:48,337 dispatch pc=124, inst=LOAD_FAST(arg=2, lineno=437)
2023-08-13 11:42:48,337 stack ['$null$102.23', '$114load_attr.24']
2023-08-13 11:42:48,337 dispatch pc=126, inst=PRECALL(arg=1, lineno=437)
2023-08-13 11:42:48,337 stack ['$null$102.23', '$114load_attr.24', '$b124.25']
2023-08-13 11:42:48,338 dispatch pc=130, inst=CALL(arg=1, lineno=437)
2023-08-13 11:42:48,338 stack ['$null$102.23', '$114load_attr.24', '$b124.25']
2023-08-13 11:42:48,338 dispatch pc=140, inst=LOAD_GLOBAL(arg=1, lineno=437)
2023-08-13 11:42:48,338 stack ['$130call.26']
2023-08-13 11:42:48,338 dispatch pc=152, inst=LOAD_ATTR(arg=1, lineno=437)
2023-08-13 11:42:48,338 stack ['$130call.26', '$null$140.28', '$140load_global.27']
2023-08-13 11:42:48,339 dispatch pc=162, inst=LOAD_FAST(arg=1, lineno=437)
2023-08-13 11:42:48,339 stack ['$130call.26', '$null$140.28', '$152load_attr.29']
2023-08-13 11:42:48,339 dispatch pc=164, inst=PRECALL(arg=1, lineno=437)
2023-08-13 11:42:48,339 stack ['$130call.26', '$null$140.28', '$152load_attr.29', '$a162.30']
2023-08-13 11:42:48,339 dispatch pc=168, inst=CALL(arg=1, lineno=437)
2023-08-13 11:42:48,339 stack ['$130call.26', '$null$140.28', '$152load_attr.29', '$a162.30']
2023-08-13 11:42:48,339 dispatch pc=178, inst=COMPARE_OP(arg=5, lineno=437)
2023-08-13 11:42:48,339 stack ['$130call.26', '$168call.31']
2023-08-13 11:42:48,339 dispatch pc=184, inst=POP_JUMP_FORWARD_IF_FALSE(arg=2, lineno=437)
2023-08-13 11:42:48,339 stack ['$178compare_op.32']
2023-08-13 11:42:48,339 end state. edges=[Edge(pc=186, stack=(), blockstack=(), npush=0), Edge(pc=190, stack=(), blockstack=(), npush=0)]
2023-08-13 11:42:48,339 pending: deque([State(pc_initial=186 nstack_initial=0), State(pc_initial=190 nstack_initial=0)])
2023-08-13 11:42:48,339 stack: []
2023-08-13 11:42:48,339 state.pc_initial: State(pc_initial=186 nstack_initial=0)
2023-08-13 11:42:48,340 dispatch pc=186, inst=LOAD_CONST(arg=4, lineno=440)
2023-08-13 11:42:48,340 stack []
2023-08-13 11:42:48,340 dispatch pc=188, inst=RETURN_VALUE(arg=None, lineno=440)
2023-08-13 11:42:48,340 stack ['$const186.0']
2023-08-13 11:42:48,340 end state. edges=[]
2023-08-13 11:42:48,340 pending: deque([State(pc_initial=190 nstack_initial=0)])
2023-08-13 11:42:48,340 stack: []
2023-08-13 11:42:48,340 state.pc_initial: State(pc_initial=190 nstack_initial=0)
2023-08-13 11:42:48,340 dispatch pc=190, inst=LOAD_FAST(arg=2, lineno=442)
2023-08-13 11:42:48,340 stack []
2023-08-13 11:42:48,340 dispatch pc=192, inst=UNARY_NEGATIVE(arg=None, lineno=442)
2023-08-13 11:42:48,340 stack ['$b190.0']
2023-08-13 11:42:48,340 dispatch pc=194, inst=LOAD_FAST(arg=1, lineno=442)
2023-08-13 11:42:48,340 stack ['$192unary_negative.1']
2023-08-13 11:42:48,340 dispatch pc=196, inst=BINARY_OP(arg=11, lineno=442)
2023-08-13 11:42:48,340 stack ['$192unary_negative.1', '$a194.2']
2023-08-13 11:42:48,341 dispatch pc=200, inst=RETURN_VALUE(arg=None, lineno=442)
2023-08-13 11:42:48,341 stack ['$binop_truediv196.3']
2023-08-13 11:42:48,341 end state. edges=[]
2023-08-13 11:42:48,341 -------------------------Prune PHIs-------------------------
2023-08-13 11:42:48,341 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=186 nstack_initial=0): set(),
             State(pc_initial=190 nstack_initial=0): set()})
2023-08-13 11:42:48,341 defmap: {}
2023-08-13 11:42:48,341 phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:48,341 changing phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:48,341 keep phismap: {}
2023-08-13 11:42:48,341 new_out: defaultdict(<class 'dict'>, {})
2023-08-13 11:42:48,341 ----------------------DONE Prune PHIs-----------------------
2023-08-13 11:42:48,341 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$x4.0'}), (6, {'res': '$const6.1'}), (8, {'index': '$const6.1', 'target': '$x4.0', 'res': '$8binary_subscr.2'}), (10, {}), (12, {}), (14, {}), (16, {}), (18, {'res': '$x18.3'}), (20, {'res': '$const20.4'}), (22, {'index': '$const20.4', 'target': '$x18.3', 'res': '$22binary_subscr.5'}), (24, {}), (26, {}), (28, {}), (30, {}), (32, {'op': '+', 'lhs': '$8binary_subscr.2', 'rhs': '$22binary_subscr.5', 'res': '$binop_add32.6'}), (34, {}), (36, {'res': '$const36.7'}), (38, {'res': '$x38.8'}), (40, {'res': '$const40.9'}), (42, {'index': '$const40.9', 'target': '$x38.8', 'res': '$42binary_subscr.10'}), (44, {}), (46, {}), (48, {}), (50, {}), (52, {'op': '*', 'lhs': '$const36.7', 'rhs': '$42binary_subscr.10', 'res': '$binop_mul52.11'}), (54, {}), (56, {'op': '-', 'lhs': '$binop_add32.6', 'rhs': '$binop_mul52.11', 'res': '$binop_sub56.12'}), (58, {}), (60, {'value': '$binop_sub56.12'}), (62, {'res': '$x62.13'}), (64, {'res': '$const64.14'}), (66, {'index': '$const64.14', 'target': '$x62.13', 'res': '$66binary_subscr.15'}), (68, {}), (70, {}), (72, {}), (74, {}), (76, {'res': '$x76.16'}), (78, {'res': '$const78.17'}), (80, {'index': '$const78.17', 'target': '$x76.16', 'res': '$80binary_subscr.18'}), (82, {}), (84, {}), (86, {}), (88, {}), (90, {'op': '-', 'lhs': '$66binary_subscr.15', 'rhs': '$80binary_subscr.18', 'res': '$binop_sub90.19'}), (92, {}), (94, {'res': '$const94.20'}), (96, {'op': '/', 'lhs': '$binop_sub90.19', 'rhs': '$const94.20', 'res': '$binop_truediv96.21'}), (98, {}), (100, {'value': '$binop_truediv96.21'}), (102, {'idx': 0, 'res': '$102load_global.22'}), (104, {}), (106, {}), (108, {}), (110, {}), (112, {}), (114, {'item': '$102load_global.22', 'res': '$114load_attr.24'}), (116, {}), (118, {}), (120, {}), (122, {}), (124, {'res': '$b124.25'}), (126, {}), (128, {}), (130, {'func': '$114load_attr.24', 'args': ['$b124.25'], 'kw_names': None, 'res': '$130call.26'}), (132, {}), (134, {}), (136, {}), (138, {}), (140, {'idx': 0, 'res': '$140load_global.27'}), (142, {}), (144, {}), (146, {}), (148, {}), (150, {}), (152, {'item': '$140load_global.27', 'res': '$152load_attr.29'}), (154, {}), (156, {}), (158, {}), (160, {}), (162, {'res': '$a162.30'}), (164, {}), (166, {}), (168, {'func': '$152load_attr.29', 'args': ['$a162.30'], 'kw_names': None, 'res': '$168call.31'}), (170, {}), (172, {}), (174, {}), (176, {}), (178, {'lhs': '$130call.26', 'rhs': '$168call.31', 'res': '$178compare_op.32'}), (180, {}), (182, {}), (184, {'pred': '$178compare_op.32'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={186: (), 190: ()})
2023-08-13 11:42:48,342 block_infos State(pc_initial=186 nstack_initial=0):
AdaptBlockInfo(insts=((186, {'res': '$const186.0'}), (188, {'retval': '$const186.0', 'castval': '$188return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:48,342 block_infos State(pc_initial=190 nstack_initial=0):
AdaptBlockInfo(insts=((190, {'res': '$b190.0'}), (192, {'value': '$b190.0', 'res': '$192unary_negative.1'}), (194, {'res': '$a194.2'}), (196, {'op': '/', 'lhs': '$192unary_negative.1', 'rhs': '$a194.2', 'res': '$binop_truediv196.3'}), (198, {}), (200, {'retval': '$binop_truediv196.3', 'castval': '$200return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:48,343 label 0:
    x = arg(0, name=x)                       ['x']
    $const6.1 = const(int, 1)                ['$const6.1']
    $8binary_subscr.2 = getitem(value=x, index=$const6.1, fn=<built-in function getitem>) ['$8binary_subscr.2', '$const6.1', 'x']
    $const20.4 = const(int, -1)              ['$const20.4']
    $22binary_subscr.5 = getitem(value=x, index=$const20.4, fn=<built-in function getitem>) ['$22binary_subscr.5', '$const20.4', 'x']
    $binop_add32.6 = $8binary_subscr.2 + $22binary_subscr.5 ['$22binary_subscr.5', '$8binary_subscr.2', '$binop_add32.6']
    $const36.7 = const(int, 2)               ['$const36.7']
    $const40.9 = const(int, 0)               ['$const40.9']
    $42binary_subscr.10 = getitem(value=x, index=$const40.9, fn=<built-in function getitem>) ['$42binary_subscr.10', '$const40.9', 'x']
    $binop_mul52.11 = $const36.7 * $42binary_subscr.10 ['$42binary_subscr.10', '$binop_mul52.11', '$const36.7']
    a = $binop_add32.6 - $binop_mul52.11     ['$binop_add32.6', '$binop_mul52.11', 'a']
    $const64.14 = const(int, 1)              ['$const64.14']
    $66binary_subscr.15 = getitem(value=x, index=$const64.14, fn=<built-in function getitem>) ['$66binary_subscr.15', '$const64.14', 'x']
    $const78.17 = const(int, -1)             ['$const78.17']
    $80binary_subscr.18 = getitem(value=x, index=$const78.17, fn=<built-in function getitem>) ['$80binary_subscr.18', '$const78.17', 'x']
    $binop_sub90.19 = $66binary_subscr.15 - $80binary_subscr.18 ['$66binary_subscr.15', '$80binary_subscr.18', '$binop_sub90.19']
    $const94.20 = const(int, 2)              ['$const94.20']
    b = $binop_sub90.19 / $const94.20        ['$binop_sub90.19', '$const94.20', 'b']
    $102load_global.22 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>) ['$102load_global.22']
    $114load_attr.24 = getattr(value=$102load_global.22, attr=abs) ['$102load_global.22', '$114load_attr.24']
    $130call.26 = call $114load_attr.24(b, func=$114load_attr.24, args=[Var(b, pitch.py:435)], kws=(), vararg=None, varkwarg=None, target=None) ['$114load_attr.24', '$130call.26', 'b']
    $140load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>) ['$140load_global.27']
    $152load_attr.29 = getattr(value=$140load_global.27, attr=abs) ['$140load_global.27', '$152load_attr.29']
    $168call.31 = call $152load_attr.29(a, func=$152load_attr.29, args=[Var(a, pitch.py:434)], kws=(), vararg=None, varkwarg=None, target=None) ['$152load_attr.29', '$168call.31', 'a']
    $178compare_op.32 = $130call.26 >= $168call.31 ['$130call.26', '$168call.31', '$178compare_op.32']
    bool184 = global(bool: <class 'bool'>)   ['bool184']
    $184pred = call bool184($178compare_op.32, func=bool184, args=(Var($178compare_op.32, pitch.py:437),), kws=(), vararg=None, varkwarg=None, target=None) ['$178compare_op.32', '$184pred', 'bool184']
    branch $184pred, 186, 190                ['$184pred']
label 186:
    $const186.0 = const(int, 0)              ['$const186.0']
    $188return_value.1 = cast(value=$const186.0) ['$188return_value.1', '$const186.0']
    return $188return_value.1                ['$188return_value.1']
label 190:
    $192unary_negative.1 = unary(fn=<built-in function neg>, value=b) ['$192unary_negative.1', 'b']
    $binop_truediv196.3 = $192unary_negative.1 / a ['$192unary_negative.1', '$binop_truediv196.3', 'a']
    $200return_value.4 = cast(value=$binop_truediv196.3) ['$200return_value.4', '$binop_truediv196.3']
    return $200return_value.4                ['$200return_value.4']

2023-08-13 11:42:48,349 bytecode dump:
>          0	NOP(arg=None, lineno=445)
           2	RESUME(arg=0, lineno=445)
           4	LOAD_GLOBAL(arg=1, lineno=453)
          16	LOAD_FAST(arg=0, lineno=453)
          18	PRECALL(arg=1, lineno=453)
          22	CALL(arg=1, lineno=453)
          32	LOAD_FAST(arg=1, lineno=453)
          34	LOAD_CONST(arg=1, lineno=453)
          36	LOAD_CONST(arg=1, lineno=453)
          38	BUILD_SLICE(arg=2, lineno=453)
          40	STORE_SUBSCR(arg=None, lineno=453)
          44	LOAD_CONST(arg=1, lineno=453)
          46	RETURN_VALUE(arg=None, lineno=453)
2023-08-13 11:42:48,349 pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-13 11:42:48,349 stack: []
2023-08-13 11:42:48,349 state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-13 11:42:48,349 dispatch pc=0, inst=NOP(arg=None, lineno=445)
2023-08-13 11:42:48,349 stack []
2023-08-13 11:42:48,349 dispatch pc=2, inst=RESUME(arg=0, lineno=445)
2023-08-13 11:42:48,349 stack []
2023-08-13 11:42:48,350 dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=453)
2023-08-13 11:42:48,350 stack []
2023-08-13 11:42:48,350 dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=453)
2023-08-13 11:42:48,350 stack ['$null$4.1', '$4load_global.0']
2023-08-13 11:42:48,350 dispatch pc=18, inst=PRECALL(arg=1, lineno=453)
2023-08-13 11:42:48,350 stack ['$null$4.1', '$4load_global.0', '$x16.2']
2023-08-13 11:42:48,350 dispatch pc=22, inst=CALL(arg=1, lineno=453)
2023-08-13 11:42:48,350 stack ['$null$4.1', '$4load_global.0', '$x16.2']
2023-08-13 11:42:48,350 dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=453)
2023-08-13 11:42:48,350 stack ['$22call.3']
2023-08-13 11:42:48,350 dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=453)
2023-08-13 11:42:48,350 stack ['$22call.3', '$y32.4']
2023-08-13 11:42:48,350 dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=453)
2023-08-13 11:42:48,350 stack ['$22call.3', '$y32.4', '$const34.5']
2023-08-13 11:42:48,351 dispatch pc=38, inst=BUILD_SLICE(arg=2, lineno=453)
2023-08-13 11:42:48,351 stack ['$22call.3', '$y32.4', '$const34.5', '$const36.6']
2023-08-13 11:42:48,351 dispatch pc=40, inst=STORE_SUBSCR(arg=None, lineno=453)
2023-08-13 11:42:48,351 stack ['$22call.3', '$y32.4', '$38build_slice.8']
2023-08-13 11:42:48,351 dispatch pc=44, inst=LOAD_CONST(arg=1, lineno=453)
2023-08-13 11:42:48,351 stack []
2023-08-13 11:42:48,351 dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=453)
2023-08-13 11:42:48,351 stack ['$const44.9']
2023-08-13 11:42:48,351 end state. edges=[]
2023-08-13 11:42:48,351 -------------------------Prune PHIs-------------------------
2023-08-13 11:42:48,351 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-08-13 11:42:48,351 defmap: {}
2023-08-13 11:42:48,351 phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:48,351 changing phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:48,351 keep phismap: {}
2023-08-13 11:42:48,352 new_out: defaultdict(<class 'dict'>, {})
2023-08-13 11:42:48,352 ----------------------DONE Prune PHIs-----------------------
2023-08-13 11:42:48,352 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'res': '$x16.2'}), (18, {}), (20, {}), (22, {'func': '$4load_global.0', 'args': ['$x16.2'], 'kw_names': None, 'res': '$22call.3'}), (24, {}), (26, {}), (28, {}), (30, {}), (32, {'res': '$y32.4'}), (34, {'res': '$const34.5'}), (36, {'res': '$const36.6'}), (38, {'start': '$const34.5', 'stop': '$const36.6', 'step': None, 'res': '$38build_slice.8', 'slicevar': '$38build_slice.7'}), (40, {'target': '$y32.4', 'index': '$38build_slice.8', 'value': '$22call.3'}), (42, {}), (44, {'res': '$const44.9'}), (46, {'retval': '$const44.9', 'castval': '$46return_value.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:48,352 label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $4load_global.0 = global(_pi_stencil: <numba.stencils.stencil.StencilFunc object at 0x000001F6977CE310>) ['$4load_global.0']
    $22call.3 = call $4load_global.0(x, func=$4load_global.0, args=[Var(x, pitch.py:445)], kws=(), vararg=None, varkwarg=None, target=None) ['$22call.3', '$4load_global.0', 'x']
    $const34.5 = const(NoneType, None)       ['$const34.5']
    $const36.6 = const(NoneType, None)       ['$const36.6']
    $38build_slice.7 = global(slice: <class 'slice'>) ['$38build_slice.7']
    $38build_slice.8 = call $38build_slice.7($const34.5, $const36.6, func=$38build_slice.7, args=(Var($const34.5, pitch.py:453), Var($const36.6, pitch.py:453)), kws=(), vararg=None, varkwarg=None, target=None) ['$38build_slice.7', '$38build_slice.8', '$const34.5', '$const36.6']
    y[$38build_slice.8] = $22call.3          ['$22call.3', '$38build_slice.8', 'y']
    $const44.9 = const(NoneType, None)       ['$const44.9']
    $46return_value.10 = cast(value=$const44.9) ['$46return_value.10', '$const44.9']
    return $46return_value.10                ['$46return_value.10']

2023-08-13 11:42:48,358 ==== SSA block analysis pass on 0
2023-08-13 11:42:48,358 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6977EF250>
2023-08-13 11:42:48,358 on stmt: x = arg(0, name=x)
2023-08-13 11:42:48,358 on stmt: y = arg(1, name=y)
2023-08-13 11:42:48,358 on stmt: $4load_global.0 = global(_pi_stencil: <numba.stencils.stencil.StencilFunc object at 0x000001F6977CE310>)
2023-08-13 11:42:48,358 on stmt: $22call.3 = call $4load_global.0(x, func=$4load_global.0, args=[Var(x, pitch.py:445)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:48,358 on stmt: $const34.5 = const(NoneType, None)
2023-08-13 11:42:48,359 on stmt: $const36.6 = const(NoneType, None)
2023-08-13 11:42:48,359 on stmt: $38build_slice.7 = global(slice: <class 'slice'>)
2023-08-13 11:42:48,359 on stmt: $38build_slice.8 = call $38build_slice.7($const34.5, $const36.6, func=$38build_slice.7, args=(Var($const34.5, pitch.py:453), Var($const36.6, pitch.py:453)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:48,359 on stmt: y[slice(None, None, None)] = $22call.3
2023-08-13 11:42:48,359 on stmt: $const44.9 = const(NoneType, None)
2023-08-13 11:42:48,359 on stmt: $46return_value.10 = cast(value=$const44.9)
2023-08-13 11:42:48,359 on stmt: return $46return_value.10
2023-08-13 11:42:48,360 defs defaultdict(<class 'list'>,
            {'$22call.3': [<numba.core.ir.Assign object at 0x000001F6977F7610>],
             '$38build_slice.7': [<numba.core.ir.Assign object at 0x000001F6977F7110>],
             '$38build_slice.8': [<numba.core.ir.Assign object at 0x000001F6977F7210>],
             '$46return_value.10': [<numba.core.ir.Assign object at 0x000001F6977F6D10>],
             '$4load_global.0': [<numba.core.ir.Assign object at 0x000001F6977F7F50>],
             '$const34.5': [<numba.core.ir.Assign object at 0x000001F6977F7750>],
             '$const36.6': [<numba.core.ir.Assign object at 0x000001F6977F7450>],
             '$const44.9': [<numba.core.ir.Assign object at 0x000001F6977F6F10>],
             'x': [<numba.core.ir.Assign object at 0x000001F6977F66D0>],
             'y': [<numba.core.ir.Assign object at 0x000001F6977F6D90>]})
2023-08-13 11:42:48,360 SSA violators set()
2023-08-13 11:42:48,563 bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	RESUME(arg=0, lineno=1)
           4	LOAD_FAST(arg=0, lineno=2)
           6	LOAD_ATTR(arg=0, lineno=2)
          16	STORE_FAST(arg=1, lineno=2)
          18	LOAD_GLOBAL(arg=2, lineno=3)
          30	LOAD_METHOD(arg=2, lineno=3)
          52	LOAD_FAST(arg=1, lineno=3)
          54	LOAD_GLOBAL(arg=2, lineno=3)
          66	LOAD_ATTR(arg=3, lineno=3)
          76	KW_NAMES(arg=1, lineno=3)
          78	PRECALL(arg=2, lineno=3)
          82	CALL(arg=2, lineno=3)
          92	STORE_FAST(arg=2, lineno=3)
          94	LOAD_CONST(arg=2, lineno=4)
          96	LOAD_FAST(arg=2, lineno=4)
          98	LOAD_CONST(arg=0, lineno=4)
         100	LOAD_CONST(arg=3, lineno=4)
         102	BUILD_SLICE(arg=2, lineno=4)
         104	STORE_SUBSCR(arg=None, lineno=4)
         108	LOAD_CONST(arg=2, lineno=5)
         110	LOAD_FAST(arg=2, lineno=5)
         112	LOAD_CONST(arg=4, lineno=5)
         114	LOAD_CONST(arg=0, lineno=5)
         116	BUILD_SLICE(arg=2, lineno=5)
         118	STORE_SUBSCR(arg=None, lineno=5)
         122	LOAD_GLOBAL(arg=9, lineno=6)
         134	LOAD_GLOBAL(arg=11, lineno=6)
         146	LOAD_CONST(arg=2, lineno=6)
         148	LOAD_CONST(arg=4, lineno=6)
         150	PRECALL(arg=2, lineno=6)
         154	CALL(arg=2, lineno=6)
         164	UNARY_NEGATIVE(arg=None, lineno=6)
         166	LOAD_FAST(arg=1, lineno=6)
         168	LOAD_CONST(arg=2, lineno=6)
         170	BINARY_SUBSCR(arg=None, lineno=6)
         180	LOAD_GLOBAL(arg=13, lineno=6)
         192	LOAD_CONST(arg=2, lineno=6)
         194	LOAD_CONST(arg=3, lineno=6)
         196	PRECALL(arg=2, lineno=6)
         200	CALL(arg=2, lineno=6)
         210	BINARY_OP(arg=10, lineno=6)
         214	PRECALL(arg=2, lineno=6)
         218	CALL(arg=2, lineno=6)
         228	GET_ITER(arg=None, lineno=6)
>        230	FOR_ITER(arg=4, lineno=6)
         232	STORE_FAST(arg=3, lineno=6)
         234	LOAD_CONST(arg=2, lineno=7)
         236	STORE_FAST(arg=4, lineno=7)
         238	JUMP_BACKWARD(arg=5, lineno=7)
>        240	LOAD_FAST(arg=2, lineno=8)
         242	RETURN_VALUE(arg=None, lineno=8)
2023-08-13 11:42:48,563 pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-13 11:42:48,563 stack: []
2023-08-13 11:42:48,563 state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-13 11:42:48,563 dispatch pc=0, inst=NOP(arg=None, lineno=1)
2023-08-13 11:42:48,563 stack []
2023-08-13 11:42:48,564 dispatch pc=2, inst=RESUME(arg=0, lineno=1)
2023-08-13 11:42:48,564 stack []
2023-08-13 11:42:48,564 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2)
2023-08-13 11:42:48,564 stack []
2023-08-13 11:42:48,564 dispatch pc=6, inst=LOAD_ATTR(arg=0, lineno=2)
2023-08-13 11:42:48,564 stack ['$x4.0']
2023-08-13 11:42:48,564 dispatch pc=16, inst=STORE_FAST(arg=1, lineno=2)
2023-08-13 11:42:48,565 stack ['$6load_attr.1']
2023-08-13 11:42:48,565 dispatch pc=18, inst=LOAD_GLOBAL(arg=2, lineno=3)
2023-08-13 11:42:48,565 stack []
2023-08-13 11:42:48,565 dispatch pc=30, inst=LOAD_METHOD(arg=2, lineno=3)
2023-08-13 11:42:48,565 stack ['$18load_global.2']
2023-08-13 11:42:48,565 dispatch pc=52, inst=LOAD_FAST(arg=1, lineno=3)
2023-08-13 11:42:48,565 stack ['$null$30.3', '$30load_method.4']
2023-08-13 11:42:48,565 dispatch pc=54, inst=LOAD_GLOBAL(arg=2, lineno=3)
2023-08-13 11:42:48,565 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5']
2023-08-13 11:42:48,565 dispatch pc=66, inst=LOAD_ATTR(arg=3, lineno=3)
2023-08-13 11:42:48,566 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$54load_global.6']
2023-08-13 11:42:48,566 dispatch pc=76, inst=KW_NAMES(arg=1, lineno=3)
2023-08-13 11:42:48,566 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$66load_attr.7']
2023-08-13 11:42:48,566 dispatch pc=78, inst=PRECALL(arg=2, lineno=3)
2023-08-13 11:42:48,566 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$66load_attr.7']
2023-08-13 11:42:48,566 dispatch pc=82, inst=CALL(arg=2, lineno=3)
2023-08-13 11:42:48,566 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$66load_attr.7']
2023-08-13 11:42:48,566 dispatch pc=92, inst=STORE_FAST(arg=2, lineno=3)
2023-08-13 11:42:48,566 stack ['$82call.8']
2023-08-13 11:42:48,566 dispatch pc=94, inst=LOAD_CONST(arg=2, lineno=4)
2023-08-13 11:42:48,566 stack []
2023-08-13 11:42:48,566 dispatch pc=96, inst=LOAD_FAST(arg=2, lineno=4)
2023-08-13 11:42:48,567 stack ['$const94.9']
2023-08-13 11:42:48,567 dispatch pc=98, inst=LOAD_CONST(arg=0, lineno=4)
2023-08-13 11:42:48,567 stack ['$const94.9', '$out096.10']
2023-08-13 11:42:48,567 dispatch pc=100, inst=LOAD_CONST(arg=3, lineno=4)
2023-08-13 11:42:48,567 stack ['$const94.9', '$out096.10', '$const98.11']
2023-08-13 11:42:48,567 dispatch pc=102, inst=BUILD_SLICE(arg=2, lineno=4)
2023-08-13 11:42:48,567 stack ['$const94.9', '$out096.10', '$const98.11', '$const100.12']
2023-08-13 11:42:48,567 dispatch pc=104, inst=STORE_SUBSCR(arg=None, lineno=4)
2023-08-13 11:42:48,567 stack ['$const94.9', '$out096.10', '$102build_slice.14']
2023-08-13 11:42:48,567 dispatch pc=108, inst=LOAD_CONST(arg=2, lineno=5)
2023-08-13 11:42:48,567 stack []
2023-08-13 11:42:48,568 dispatch pc=110, inst=LOAD_FAST(arg=2, lineno=5)
2023-08-13 11:42:48,568 stack ['$const108.15']
2023-08-13 11:42:48,568 dispatch pc=112, inst=LOAD_CONST(arg=4, lineno=5)
2023-08-13 11:42:48,568 stack ['$const108.15', '$out0110.16']
2023-08-13 11:42:48,568 dispatch pc=114, inst=LOAD_CONST(arg=0, lineno=5)
2023-08-13 11:42:48,568 stack ['$const108.15', '$out0110.16', '$const112.17']
2023-08-13 11:42:48,568 dispatch pc=116, inst=BUILD_SLICE(arg=2, lineno=5)
2023-08-13 11:42:48,568 stack ['$const108.15', '$out0110.16', '$const112.17', '$const114.18']
2023-08-13 11:42:48,568 dispatch pc=118, inst=STORE_SUBSCR(arg=None, lineno=5)
2023-08-13 11:42:48,568 stack ['$const108.15', '$out0110.16', '$116build_slice.20']
2023-08-13 11:42:48,568 dispatch pc=122, inst=LOAD_GLOBAL(arg=9, lineno=6)
2023-08-13 11:42:48,568 stack []
2023-08-13 11:42:48,568 dispatch pc=134, inst=LOAD_GLOBAL(arg=11, lineno=6)
2023-08-13 11:42:48,568 stack ['$null$122.22', '$122load_global.21']
2023-08-13 11:42:48,568 dispatch pc=146, inst=LOAD_CONST(arg=2, lineno=6)
2023-08-13 11:42:48,569 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23']
2023-08-13 11:42:48,569 dispatch pc=148, inst=LOAD_CONST(arg=4, lineno=6)
2023-08-13 11:42:48,569 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23', '$const146.25']
2023-08-13 11:42:48,569 dispatch pc=150, inst=PRECALL(arg=2, lineno=6)
2023-08-13 11:42:48,569 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23', '$const146.25', '$const148.26']
2023-08-13 11:42:48,569 dispatch pc=154, inst=CALL(arg=2, lineno=6)
2023-08-13 11:42:48,569 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23', '$const146.25', '$const148.26']
2023-08-13 11:42:48,569 dispatch pc=164, inst=UNARY_NEGATIVE(arg=None, lineno=6)
2023-08-13 11:42:48,569 stack ['$null$122.22', '$122load_global.21', '$154call.27']
2023-08-13 11:42:48,569 dispatch pc=166, inst=LOAD_FAST(arg=1, lineno=6)
2023-08-13 11:42:48,569 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28']
2023-08-13 11:42:48,569 dispatch pc=168, inst=LOAD_CONST(arg=2, lineno=6)
2023-08-13 11:42:48,569 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$full_shape0166.29']
2023-08-13 11:42:48,570 dispatch pc=170, inst=BINARY_SUBSCR(arg=None, lineno=6)
2023-08-13 11:42:48,570 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$full_shape0166.29', '$const168.30']
2023-08-13 11:42:48,570 dispatch pc=180, inst=LOAD_GLOBAL(arg=13, lineno=6)
2023-08-13 11:42:48,570 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31']
2023-08-13 11:42:48,570 dispatch pc=192, inst=LOAD_CONST(arg=2, lineno=6)
2023-08-13 11:42:48,570 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32']
2023-08-13 11:42:48,570 dispatch pc=194, inst=LOAD_CONST(arg=3, lineno=6)
2023-08-13 11:42:48,570 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32', '$const192.34']
2023-08-13 11:42:48,570 dispatch pc=196, inst=PRECALL(arg=2, lineno=6)
2023-08-13 11:42:48,570 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32', '$const192.34', '$const194.35']
2023-08-13 11:42:48,570 dispatch pc=200, inst=CALL(arg=2, lineno=6)
2023-08-13 11:42:48,570 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32', '$const192.34', '$const194.35']
2023-08-13 11:42:48,570 dispatch pc=210, inst=BINARY_OP(arg=10, lineno=6)
2023-08-13 11:42:48,570 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$200call.36']
2023-08-13 11:42:48,570 dispatch pc=214, inst=PRECALL(arg=2, lineno=6)
2023-08-13 11:42:48,571 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$binop_sub210.37']
2023-08-13 11:42:48,571 dispatch pc=218, inst=CALL(arg=2, lineno=6)
2023-08-13 11:42:48,571 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$binop_sub210.37']
2023-08-13 11:42:48,571 dispatch pc=228, inst=GET_ITER(arg=None, lineno=6)
2023-08-13 11:42:48,571 stack ['$218call.38']
2023-08-13 11:42:48,571 end state. edges=[Edge(pc=230, stack=('$228get_iter.39',), blockstack=(), npush=0)]
2023-08-13 11:42:48,571 pending: deque([State(pc_initial=230 nstack_initial=1)])
2023-08-13 11:42:48,571 stack: ['$phi230.0']
2023-08-13 11:42:48,571 state.pc_initial: State(pc_initial=230 nstack_initial=1)
2023-08-13 11:42:48,571 dispatch pc=230, inst=FOR_ITER(arg=4, lineno=6)
2023-08-13 11:42:48,571 stack ['$phi230.0']
2023-08-13 11:42:48,571 end state. edges=[Edge(pc=240, stack=(), blockstack=(), npush=0), Edge(pc=232, stack=('$phi230.0', '$230for_iter.2'), blockstack=(), npush=0)]
2023-08-13 11:42:48,571 pending: deque([State(pc_initial=240 nstack_initial=0), State(pc_initial=232 nstack_initial=2)])
2023-08-13 11:42:48,571 stack: []
2023-08-13 11:42:48,571 state.pc_initial: State(pc_initial=240 nstack_initial=0)
2023-08-13 11:42:48,572 dispatch pc=240, inst=LOAD_FAST(arg=2, lineno=8)
2023-08-13 11:42:48,572 stack []
2023-08-13 11:42:48,572 dispatch pc=242, inst=RETURN_VALUE(arg=None, lineno=8)
2023-08-13 11:42:48,572 stack ['$out0240.0']
2023-08-13 11:42:48,572 end state. edges=[]
2023-08-13 11:42:48,572 pending: deque([State(pc_initial=232 nstack_initial=2)])
2023-08-13 11:42:48,572 stack: ['$phi232.0', '$phi232.1']
2023-08-13 11:42:48,572 state.pc_initial: State(pc_initial=232 nstack_initial=2)
2023-08-13 11:42:48,572 dispatch pc=232, inst=STORE_FAST(arg=3, lineno=6)
2023-08-13 11:42:48,572 stack ['$phi232.0', '$phi232.1']
2023-08-13 11:42:48,572 dispatch pc=234, inst=LOAD_CONST(arg=2, lineno=7)
2023-08-13 11:42:48,572 stack ['$phi232.0']
2023-08-13 11:42:48,572 dispatch pc=236, inst=STORE_FAST(arg=4, lineno=7)
2023-08-13 11:42:48,572 stack ['$phi232.0', '$const234.2']
2023-08-13 11:42:48,572 dispatch pc=238, inst=JUMP_BACKWARD(arg=5, lineno=7)
2023-08-13 11:42:48,573 stack ['$phi232.0']
2023-08-13 11:42:48,573 end state. edges=[Edge(pc=230, stack=('$phi232.0',), blockstack=(), npush=0)]
2023-08-13 11:42:48,573 pending: deque([State(pc_initial=230 nstack_initial=1)])
2023-08-13 11:42:48,573 -------------------------Prune PHIs-------------------------
2023-08-13 11:42:48,573 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=230 nstack_initial=1): {'$phi230.0'},
             State(pc_initial=232 nstack_initial=2): {'$phi232.1'},
             State(pc_initial=240 nstack_initial=0): set()})
2023-08-13 11:42:48,573 defmap: {'$phi230.0': State(pc_initial=0 nstack_initial=0),
 '$phi232.1': State(pc_initial=230 nstack_initial=1)}
2023-08-13 11:42:48,573 phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi232.0',
                            State(pc_initial=232 nstack_initial=2))},
             '$phi232.0': {('$phi230.0',
                            State(pc_initial=230 nstack_initial=1))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:48,573 changing phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi230.0',
                            State(pc_initial=230 nstack_initial=1))},
             '$phi232.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:48,574 changing phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:48,574 changing phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:48,574 keep phismap: {'$phi230.0': {('$228get_iter.39', State(pc_initial=0 nstack_initial=0))},
 '$phi232.1': {('$230for_iter.2', State(pc_initial=230 nstack_initial=1))}}
2023-08-13 11:42:48,574 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi230.0': '$228get_iter.39'},
             State(pc_initial=230 nstack_initial=1): {'$phi232.1': '$230for_iter.2'}})
2023-08-13 11:42:48,574 ----------------------DONE Prune PHIs-----------------------
2023-08-13 11:42:48,574 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$x4.0'}), (6, {'item': '$x4.0', 'res': '$6load_attr.1'}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'value': '$6load_attr.1'}), (18, {'idx': 1, 'res': '$18load_global.2'}), (20, {}), (22, {}), (24, {}), (26, {}), (28, {}), (30, {'item': '$18load_global.2', 'res': '$30load_method.4'}), (32, {}), (34, {}), (36, {}), (38, {}), (40, {}), (42, {}), (44, {}), (46, {}), (48, {}), (50, {}), (52, {'res': '$full_shape052.5'}), (54, {'idx': 1, 'res': '$54load_global.6'}), (56, {}), (58, {}), (60, {}), (62, {}), (64, {}), (66, {'item': '$54load_global.6', 'res': '$66load_attr.7'}), (68, {}), (70, {}), (72, {}), (74, {}), (78, {}), (80, {}), (82, {'func': '$30load_method.4', 'args': ['$full_shape052.5', '$66load_attr.7'], 'kw_names': 1, 'res': '$82call.8'}), (84, {}), (86, {}), (88, {}), (90, {}), (92, {'value': '$82call.8'}), (94, {'res': '$const94.9'}), (96, {'res': '$out096.10'}), (98, {'res': '$const98.11'}), (100, {'res': '$const100.12'}), (102, {'start': '$const98.11', 'stop': '$const100.12', 'step': None, 'res': '$102build_slice.14', 'slicevar': '$102build_slice.13'}), (104, {'target': '$out096.10', 'index': '$102build_slice.14', 'value': '$const94.9'}), (106, {}), (108, {'res': '$const108.15'}), (110, {'res': '$out0110.16'}), (112, {'res': '$const112.17'}), (114, {'res': '$const114.18'}), (116, {'start': '$const112.17', 'stop': '$const114.18', 'step': None, 'res': '$116build_slice.20', 'slicevar': '$116build_slice.19'}), (118, {'target': '$out0110.16', 'index': '$116build_slice.20', 'value': '$const108.15'}), (120, {}), (122, {'idx': 4, 'res': '$122load_global.21'}), (124, {}), (126, {}), (128, {}), (130, {}), (132, {}), (134, {'idx': 5, 'res': '$134load_global.23'}), (136, {}), (138, {}), (140, {}), (142, {}), (144, {}), (146, {'res': '$const146.25'}), (148, {'res': '$const148.26'}), (150, {}), (152, {}), (154, {'func': '$134load_global.23', 'args': ['$const146.25', '$const148.26'], 'kw_names': None, 'res': '$154call.27'}), (156, {}), (158, {}), (160, {}), (162, {}), (164, {'value': '$154call.27', 'res': '$164unary_negative.28'}), (166, {'res': '$full_shape0166.29'}), (168, {'res': '$const168.30'}), (170, {'index': '$const168.30', 'target': '$full_shape0166.29', 'res': '$170binary_subscr.31'}), (172, {}), (174, {}), (176, {}), (178, {}), (180, {'idx': 6, 'res': '$180load_global.32'}), (182, {}), (184, {}), (186, {}), (188, {}), (190, {}), (192, {'res': '$const192.34'}), (194, {'res': '$const194.35'}), (196, {}), (198, {}), (200, {'func': '$180load_global.32', 'args': ['$const192.34', '$const194.35'], 'kw_names': None, 'res': '$200call.36'}), (202, {}), (204, {}), (206, {}), (208, {}), (210, {'op': '-', 'lhs': '$170binary_subscr.31', 'rhs': '$200call.36', 'res': '$binop_sub210.37'}), (212, {}), (214, {}), (216, {}), (218, {'func': '$122load_global.21', 'args': ['$164unary_negative.28', '$binop_sub210.37'], 'kw_names': None, 'res': '$218call.38'}), (220, {}), (222, {}), (224, {}), (226, {}), (228, {'value': '$218call.38', 'res': '$228get_iter.39'})), outgoing_phis={'$phi230.0': '$228get_iter.39'}, blockstack=(), active_try_block=None, outgoing_edgepushed={230: ('$228get_iter.39',)})
2023-08-13 11:42:48,575 block_infos State(pc_initial=230 nstack_initial=1):
AdaptBlockInfo(insts=((230, {'iterator': '$phi230.0', 'pair': '$230for_iter.1', 'indval': '$230for_iter.2', 'pred': '$230for_iter.3'}),), outgoing_phis={'$phi232.1': '$230for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={240: (), 232: ('$phi230.0', '$230for_iter.2')})
2023-08-13 11:42:48,575 block_infos State(pc_initial=232 nstack_initial=2):
AdaptBlockInfo(insts=((232, {'value': '$phi232.1'}), (234, {'res': '$const234.2'}), (236, {'value': '$const234.2'}), (238, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={230: ('$phi232.0',)})
2023-08-13 11:42:48,575 block_infos State(pc_initial=240 nstack_initial=0):
AdaptBlockInfo(insts=((240, {'res': '$out0240.0'}), (242, {'retval': '$out0240.0', 'castval': '$242return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:48,577 label 0:
    x = arg(0, name=x)                       ['x']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $18load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>) ['$18load_global.2']
    $30load_method.4 = getattr(value=$18load_global.2, attr=empty) ['$18load_global.2', '$30load_method.4']
    $54load_global.6 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>) ['$54load_global.6']
    $66load_attr.7 = getattr(value=$54load_global.6, attr=float64) ['$54load_global.6', '$66load_attr.7']
    out0 = call $30load_method.4(full_shape0, func=$30load_method.4, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($66load_attr.7, <string>:3))], vararg=None, varkwarg=None, target=None) ['$30load_method.4', '$66load_attr.7', 'full_shape0', 'out0']
    $const94.9 = const(int, 0)               ['$const94.9']
    $const98.11 = const(NoneType, None)      ['$const98.11']
    $const100.12 = const(int, 1)             ['$const100.12']
    $102build_slice.13 = global(slice: <class 'slice'>) ['$102build_slice.13']
    $102build_slice.14 = call $102build_slice.13($const98.11, $const100.12, func=$102build_slice.13, args=(Var($const98.11, <string>:4), Var($const100.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$102build_slice.13', '$102build_slice.14', '$const100.12', '$const98.11']
    out0[$102build_slice.14] = $const94.9    ['$102build_slice.14', '$const94.9', 'out0']
    $const108.15 = const(int, 0)             ['$const108.15']
    $const112.17 = const(int, -1)            ['$const112.17']
    $const114.18 = const(NoneType, None)     ['$const114.18']
    $116build_slice.19 = global(slice: <class 'slice'>) ['$116build_slice.19']
    $116build_slice.20 = call $116build_slice.19($const112.17, $const114.18, func=$116build_slice.19, args=(Var($const112.17, <string>:5), Var($const114.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$116build_slice.19', '$116build_slice.20', '$const112.17', '$const114.18']
    out0[$116build_slice.20] = $const108.15  ['$116build_slice.20', '$const108.15', 'out0']
    $122load_global.21 = global(range: <class 'range'>) ['$122load_global.21']
    $134load_global.23 = global(min: <built-in function min>) ['$134load_global.23']
    $const146.25 = const(int, 0)             ['$const146.25']
    $const148.26 = const(int, -1)            ['$const148.26']
    $154call.27 = call $134load_global.23($const146.25, $const148.26, func=$134load_global.23, args=[Var($const146.25, <string>:6), Var($const148.26, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$134load_global.23', '$154call.27', '$const146.25', '$const148.26']
    $164unary_negative.28 = unary(fn=<built-in function neg>, value=$154call.27) ['$154call.27', '$164unary_negative.28']
    $const168.30 = const(int, 0)             ['$const168.30']
    $170binary_subscr.31 = getitem(value=full_shape0, index=$const168.30, fn=<built-in function getitem>) ['$170binary_subscr.31', '$const168.30', 'full_shape0']
    $180load_global.32 = global(max: <built-in function max>) ['$180load_global.32']
    $const192.34 = const(int, 0)             ['$const192.34']
    $const194.35 = const(int, 1)             ['$const194.35']
    $200call.36 = call $180load_global.32($const192.34, $const194.35, func=$180load_global.32, args=[Var($const192.34, <string>:6), Var($const194.35, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$180load_global.32', '$200call.36', '$const192.34', '$const194.35']
    $binop_sub210.37 = $170binary_subscr.31 - $200call.36 ['$170binary_subscr.31', '$200call.36', '$binop_sub210.37']
    $218call.38 = call $122load_global.21($164unary_negative.28, $binop_sub210.37, func=$122load_global.21, args=[Var($164unary_negative.28, <string>:6), Var($binop_sub210.37, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$122load_global.21', '$164unary_negative.28', '$218call.38', '$binop_sub210.37']
    $228get_iter.39 = getiter(value=$218call.38) ['$218call.38', '$228get_iter.39']
    $phi230.0 = $228get_iter.39              ['$228get_iter.39', '$phi230.0']
    jump 230                                 []
label 230:
    $230for_iter.1 = iternext(value=$phi230.0) ['$230for_iter.1', '$phi230.0']
    $230for_iter.2 = pair_first(value=$230for_iter.1) ['$230for_iter.1', '$230for_iter.2']
    $230for_iter.3 = pair_second(value=$230for_iter.1) ['$230for_iter.1', '$230for_iter.3']
    $phi232.1 = $230for_iter.2               ['$230for_iter.2', '$phi232.1']
    branch $230for_iter.3, 232, 240          ['$230for_iter.3']
label 232:
    index00 = $phi232.1                      ['$phi232.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 230                                 []
label 240:
    $242return_value.1 = cast(value=out0)    ['$242return_value.1', 'out0']
    return $242return_value.1                ['$242return_value.1']

2023-08-13 11:42:48,607 ==== SSA block analysis pass on 0
2023-08-13 11:42:48,607 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6976C2190>
2023-08-13 11:42:48,607 on stmt: x = arg(0, name=x)
2023-08-13 11:42:48,607 on stmt: full_shape0 = getattr(value=x, attr=shape)
2023-08-13 11:42:48,608 on stmt: $18load_global.2.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:48,608 on stmt: $30load_method.4.1 = getattr(value=$18load_global.2.1, attr=empty)
2023-08-13 11:42:48,608 on stmt: $54load_global.6.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:48,608 on stmt: $66load_attr.7.1 = getattr(value=$54load_global.6.1, attr=float64)
2023-08-13 11:42:48,608 on stmt: out0 = call $30load_method.4.1(full_shape0, func=$30load_method.4.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($66load_attr.7.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:48,608 on stmt: $const94.9.1 = const(int, 0)
2023-08-13 11:42:48,608 on stmt: $const98.11.1 = const(NoneType, None)
2023-08-13 11:42:48,608 on stmt: $const100.12.1 = const(int, 1)
2023-08-13 11:42:48,609 on stmt: $102build_slice.13.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:48,609 on stmt: $102build_slice.14.1 = call $102build_slice.13.1($const98.11.1, $const100.12.1, func=$102build_slice.13.1, args=(Var($const98.11.1, <string>:4), Var($const100.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:48,609 on stmt: out0[$102build_slice.14.1] = $const94.9.1
2023-08-13 11:42:48,609 on stmt: $const108.15.1 = const(int, 0)
2023-08-13 11:42:48,609 on stmt: $const112.17.1 = const(int, -1)
2023-08-13 11:42:48,609 on stmt: $const114.18.1 = const(NoneType, None)
2023-08-13 11:42:48,610 on stmt: $116build_slice.19.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:48,610 on stmt: $116build_slice.20.1 = call $116build_slice.19.1($const112.17.1, $const114.18.1, func=$116build_slice.19.1, args=(Var($const112.17.1, <string>:5), Var($const114.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:48,610 on stmt: out0[$116build_slice.20.1] = $const108.15.1
2023-08-13 11:42:48,610 on stmt: $122load_global.21.1 = global(range: <class 'range'>)
2023-08-13 11:42:48,610 on stmt: $134load_global.23.1 = global(min: <built-in function min>)
2023-08-13 11:42:48,610 on stmt: $const146.25.1 = const(int, 0)
2023-08-13 11:42:48,610 on stmt: $const148.26.1 = const(int, -1)
2023-08-13 11:42:48,610 on stmt: $154call.27.1 = call $134load_global.23.1($const146.25.1, $const148.26.1, func=$134load_global.23.1, args=[Var($const146.25.1, <string>:6), Var($const148.26.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:48,610 on stmt: $164unary_negative.28.1 = unary(fn=<built-in function neg>, value=$154call.27.1)
2023-08-13 11:42:48,611 on stmt: $const168.30.1 = const(int, 0)
2023-08-13 11:42:48,611 on stmt: $170binary_subscr.31.1 = getitem(value=full_shape0, index=$const168.30.1, fn=<built-in function getitem>)
2023-08-13 11:42:48,611 on stmt: $180load_global.32.1 = global(max: <built-in function max>)
2023-08-13 11:42:48,611 on stmt: $const192.34.1 = const(int, 0)
2023-08-13 11:42:48,611 on stmt: $const194.35.1 = const(int, 1)
2023-08-13 11:42:48,611 on stmt: $200call.36.1 = call $180load_global.32.1($const192.34.1, $const194.35.1, func=$180load_global.32.1, args=[Var($const192.34.1, <string>:6), Var($const194.35.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:48,611 on stmt: $binop_sub210.37.1 = $170binary_subscr.31.1 - $200call.36.1
2023-08-13 11:42:48,611 on stmt: $218call.38.1 = call $122load_global.21.1($164unary_negative.28.1, $binop_sub210.37.1, func=$122load_global.21.1, args=[Var($164unary_negative.28.1, <string>:6), Var($binop_sub210.37.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:48,611 on stmt: $228get_iter.39.1 = getiter(value=$218call.38.1)
2023-08-13 11:42:48,611 on stmt: $phi230.0.1 = $228get_iter.39.1
2023-08-13 11:42:48,611 on stmt: jump 230
2023-08-13 11:42:48,612 ==== SSA block analysis pass on 230
2023-08-13 11:42:48,612 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6976C2190>
2023-08-13 11:42:48,612 on stmt: $230for_iter.1.1 = iternext(value=$phi230.0.1)
2023-08-13 11:42:48,612 on stmt: $230for_iter.2.1 = pair_first(value=$230for_iter.1.1)
2023-08-13 11:42:48,612 on stmt: $230for_iter.3.1 = pair_second(value=$230for_iter.1.1)
2023-08-13 11:42:48,612 on stmt: $phi232.1.1 = $230for_iter.2.1
2023-08-13 11:42:48,612 on stmt: branch $230for_iter.3.1, 232, 432
2023-08-13 11:42:48,612 ==== SSA block analysis pass on 232
2023-08-13 11:42:48,612 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6976C2190>
2023-08-13 11:42:48,612 on stmt: index00 = $phi232.1.1
2023-08-13 11:42:48,612 on stmt: jump 240
2023-08-13 11:42:48,612 ==== SSA block analysis pass on 432
2023-08-13 11:42:48,612 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6976C2190>
2023-08-13 11:42:48,612 on stmt: $242return_value.1.1 = cast(value=out0)
2023-08-13 11:42:48,613 on stmt: return $242return_value.1.1
2023-08-13 11:42:48,613 ==== SSA block analysis pass on 240
2023-08-13 11:42:48,613 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6976C2190>
2023-08-13 11:42:48,613 on stmt: $const6.1 = const(int, 1)
2023-08-13 11:42:48,613 on stmt: stencil_index = $const6.1 + index00
2023-08-13 11:42:48,613 on stmt: $8binary_subscr.2 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:48,614 on stmt: $const20.4 = const(int, -1)
2023-08-13 11:42:48,614 on stmt: stencil_index.1 = $const20.4 + index00
2023-08-13 11:42:48,614 on stmt: $22binary_subscr.5 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2023-08-13 11:42:48,614 on stmt: $binop_add32.6 = $8binary_subscr.2 + $22binary_subscr.5
2023-08-13 11:42:48,615 on stmt: $const36.7 = const(int, 2)
2023-08-13 11:42:48,615 on stmt: $const40.9 = const(int, 0)
2023-08-13 11:42:48,615 on stmt: stencil_index.2 = $const40.9 + index00
2023-08-13 11:42:48,615 on stmt: $42binary_subscr.10 = getitem(value=x, index=stencil_index.2, fn=<built-in function getitem>)
2023-08-13 11:42:48,615 on stmt: $binop_mul52.11 = $const36.7 * $42binary_subscr.10
2023-08-13 11:42:48,615 on stmt: a = $binop_add32.6 - $binop_mul52.11
2023-08-13 11:42:48,615 on stmt: $const64.14 = const(int, 1)
2023-08-13 11:42:48,615 on stmt: stencil_index.3 = $const64.14 + index00
2023-08-13 11:42:48,615 on stmt: $66binary_subscr.15 = getitem(value=x, index=stencil_index.3, fn=<built-in function getitem>)
2023-08-13 11:42:48,616 on stmt: $const78.17 = const(int, -1)
2023-08-13 11:42:48,616 on stmt: stencil_index.4 = $const78.17 + index00
2023-08-13 11:42:48,616 on stmt: $80binary_subscr.18 = getitem(value=x, index=stencil_index.4, fn=<built-in function getitem>)
2023-08-13 11:42:48,616 on stmt: $binop_sub90.19 = $66binary_subscr.15 - $80binary_subscr.18
2023-08-13 11:42:48,616 on stmt: $const94.20 = const(int, 2)
2023-08-13 11:42:48,616 on stmt: b = $binop_sub90.19 / $const94.20
2023-08-13 11:42:48,616 on stmt: $102load_global.22 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:48,616 on stmt: $114load_attr.24 = getattr(value=$102load_global.22, attr=abs)
2023-08-13 11:42:48,616 on stmt: $130call.26 = call $114load_attr.24(b, func=$114load_attr.24, args=[Var(b, pitch.py:435)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:48,616 on stmt: $140load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:48,616 on stmt: $152load_attr.29 = getattr(value=$140load_global.27, attr=abs)
2023-08-13 11:42:48,616 on stmt: $168call.31 = call $152load_attr.29(a, func=$152load_attr.29, args=[Var(a, pitch.py:434)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:48,616 on stmt: $178compare_op.32 = $130call.26 >= $168call.31
2023-08-13 11:42:48,617 on stmt: bool184 = global(bool: <class 'bool'>)
2023-08-13 11:42:48,617 on stmt: $184pred = call bool184($178compare_op.32, func=bool184, args=(Var($178compare_op.32, pitch.py:437),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:48,617 on stmt: branch $184pred, 241, 427
2023-08-13 11:42:48,617 ==== SSA block analysis pass on 241
2023-08-13 11:42:48,617 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6976C2190>
2023-08-13 11:42:48,617 on stmt: $const186.0 = const(int, 0)
2023-08-13 11:42:48,617 on stmt: $188return_value.1 = cast(value=$const186.0)
2023-08-13 11:42:48,617 on stmt: out0[index00] = $188return_value.1
2023-08-13 11:42:48,617 on stmt: jump 431
2023-08-13 11:42:48,617 ==== SSA block analysis pass on 427
2023-08-13 11:42:48,618 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6976C2190>
2023-08-13 11:42:48,618 on stmt: $192unary_negative.1 = unary(fn=<built-in function neg>, value=b)
2023-08-13 11:42:48,618 on stmt: $binop_truediv196.3 = $192unary_negative.1 / a
2023-08-13 11:42:48,618 on stmt: $200return_value.4 = cast(value=$binop_truediv196.3)
2023-08-13 11:42:48,618 on stmt: out0[index00] = $200return_value.4
2023-08-13 11:42:48,618 on stmt: jump 431
2023-08-13 11:42:48,618 ==== SSA block analysis pass on 431
2023-08-13 11:42:48,618 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6976C2190>
2023-08-13 11:42:48,618 on stmt: jump 230
2023-08-13 11:42:48,620 defs defaultdict(<class 'list'>,
            {'$102build_slice.13.1': [<numba.core.ir.Assign object at 0x000001F6971B7FD0>],
             '$102build_slice.14.1': [<numba.core.ir.Assign object at 0x000001F6971278D0>],
             '$102load_global.22': [<numba.core.ir.Assign object at 0x000001F696F55AD0>],
             '$114load_attr.24': [<numba.core.ir.Assign object at 0x000001F696FBAB90>],
             '$116build_slice.19.1': [<numba.core.ir.Assign object at 0x000001F697124B10>],
             '$116build_slice.20.1': [<numba.core.ir.Assign object at 0x000001F697125990>],
             '$122load_global.21.1': [<numba.core.ir.Assign object at 0x000001F697127650>],
             '$130call.26': [<numba.core.ir.Assign object at 0x000001F696FB8ED0>],
             '$134load_global.23.1': [<numba.core.ir.Assign object at 0x000001F697126550>],
             '$140load_global.27': [<numba.core.ir.Assign object at 0x000001F696FC8690>],
             '$152load_attr.29': [<numba.core.ir.Assign object at 0x000001F696F6E050>],
             '$154call.27.1': [<numba.core.ir.Assign object at 0x000001F697170350>],
             '$164unary_negative.28.1': [<numba.core.ir.Assign object at 0x000001F697172C90>],
             '$168call.31': [<numba.core.ir.Assign object at 0x000001F696F4BC50>],
             '$170binary_subscr.31.1': [<numba.core.ir.Assign object at 0x000001F697650410>],
             '$178compare_op.32': [<numba.core.ir.Assign object at 0x000001F696F48610>],
             '$180load_global.32.1': [<numba.core.ir.Assign object at 0x000001F697650650>],
             '$184pred': [<numba.core.ir.Assign object at 0x000001F696F0E790>],
             '$188return_value.1': [<numba.core.ir.Assign object at 0x000001F69772FB50>],
             '$18load_global.2.1': [<numba.core.ir.Assign object at 0x000001F6971D4AD0>],
             '$192unary_negative.1': [<numba.core.ir.Assign object at 0x000001F6977199D0>],
             '$200call.36.1': [<numba.core.ir.Assign object at 0x000001F6976510D0>],
             '$200return_value.4': [<numba.core.ir.Assign object at 0x000001F6977F6890>],
             '$218call.38.1': [<numba.core.ir.Assign object at 0x000001F6971FD890>],
             '$228get_iter.39.1': [<numba.core.ir.Assign object at 0x000001F6971FE110>],
             '$22binary_subscr.5': [<numba.core.ir.Assign object at 0x000001F697144E50>],
             '$230for_iter.1.1': [<numba.core.ir.Assign object at 0x000001F6971FC290>],
             '$230for_iter.2.1': [<numba.core.ir.Assign object at 0x000001F6971FF8D0>],
             '$230for_iter.3.1': [<numba.core.ir.Assign object at 0x000001F69715A7D0>],
             '$242return_value.1.1': [<numba.core.ir.Assign object at 0x000001F6976AF150>],
             '$30load_method.4.1': [<numba.core.ir.Assign object at 0x000001F6971D4F10>],
             '$42binary_subscr.10': [<numba.core.ir.Assign object at 0x000001F697146850>],
             '$54load_global.6.1': [<numba.core.ir.Assign object at 0x000001F6971D4910>],
             '$66binary_subscr.15': [<numba.core.ir.Assign object at 0x000001F697145650>],
             '$66load_attr.7.1': [<numba.core.ir.Assign object at 0x000001F6971D4890>],
             '$80binary_subscr.18': [<numba.core.ir.Assign object at 0x000001F697196310>],
             '$8binary_subscr.2': [<numba.core.ir.Assign object at 0x000001F697146390>],
             '$binop_add32.6': [<numba.core.ir.Assign object at 0x000001F697171D50>],
             '$binop_mul52.11': [<numba.core.ir.Assign object at 0x000001F6971C9190>],
             '$binop_sub210.37.1': [<numba.core.ir.Assign object at 0x000001F6976501D0>],
             '$binop_sub90.19': [<numba.core.ir.Assign object at 0x000001F6971B67D0>],
             '$binop_truediv196.3': [<numba.core.ir.Assign object at 0x000001F6977C5E50>],
             '$const100.12.1': [<numba.core.ir.Assign object at 0x000001F6971B6E90>],
             '$const108.15.1': [<numba.core.ir.Assign object at 0x000001F697127A50>],
             '$const112.17.1': [<numba.core.ir.Assign object at 0x000001F697126910>],
             '$const114.18.1': [<numba.core.ir.Assign object at 0x000001F697126510>],
             '$const146.25.1': [<numba.core.ir.Assign object at 0x000001F697125950>],
             '$const148.26.1': [<numba.core.ir.Assign object at 0x000001F697127F10>],
             '$const168.30.1': [<numba.core.ir.Assign object at 0x000001F697171C50>],
             '$const186.0': [<numba.core.ir.Assign object at 0x000001F6977EE450>],
             '$const192.34.1': [<numba.core.ir.Assign object at 0x000001F6976509D0>],
             '$const194.35.1': [<numba.core.ir.Assign object at 0x000001F697650CD0>],
             '$const20.4': [<numba.core.ir.Assign object at 0x000001F69626EE90>],
             '$const36.7': [<numba.core.ir.Assign object at 0x000001F6971702D0>],
             '$const40.9': [<numba.core.ir.Assign object at 0x000001F696D6FBD0>],
             '$const6.1': [<numba.core.ir.Assign object at 0x000001F6970115D0>],
             '$const64.14': [<numba.core.ir.Assign object at 0x000001F697167690>],
             '$const78.17': [<numba.core.ir.Assign object at 0x000001F697101E90>],
             '$const94.20': [<numba.core.ir.Assign object at 0x000001F69719E4D0>],
             '$const94.9.1': [<numba.core.ir.Assign object at 0x000001F6971B4090>],
             '$const98.11.1': [<numba.core.ir.Assign object at 0x000001F6971B75D0>],
             '$phi230.0.1': [<numba.core.ir.Assign object at 0x000001F6971D5450>],
             '$phi232.1.1': [<numba.core.ir.Assign object at 0x000001F697159550>],
             'a': [<numba.core.ir.Assign object at 0x000001F69711E0D0>],
             'b': [<numba.core.ir.Assign object at 0x000001F69719ED10>],
             'bool184': [<numba.core.ir.Assign object at 0x000001F696F420D0>],
             'full_shape0': [<numba.core.ir.Assign object at 0x000001F6971D51D0>],
             'index00': [<numba.core.ir.Assign object at 0x000001F69715A510>],
             'out0': [<numba.core.ir.Assign object at 0x000001F6971B4050>],
             'stencil_index': [<numba.core.ir.Assign object at 0x000001F697144910>],
             'stencil_index.1': [<numba.core.ir.Assign object at 0x000001F697144790>],
             'stencil_index.2': [<numba.core.ir.Assign object at 0x000001F6971467D0>],
             'stencil_index.3': [<numba.core.ir.Assign object at 0x000001F697146910>],
             'stencil_index.4': [<numba.core.ir.Assign object at 0x000001F697197750>],
             'x': [<numba.core.ir.Assign object at 0x000001F6971D5890>]})
2023-08-13 11:42:48,620 SSA violators set()
2023-08-13 11:42:48,636 bytecode dump:
>          0	NOP(arg=None, lineno=4253)
           2	COPY_FREE_VARS(arg=1, lineno=4253)
           4	RESUME(arg=0, lineno=4253)
           6	LOAD_GLOBAL(arg=1, lineno=4254)
          18	LOAD_FAST(arg=0, lineno=4254)
          20	LOAD_FAST(arg=1, lineno=4254)
          22	LOAD_DEREF(arg=2, lineno=4254)
          24	PRECALL(arg=3, lineno=4254)
          28	CALL(arg=3, lineno=4254)
          38	RETURN_VALUE(arg=None, lineno=4254)
2023-08-13 11:42:48,636 pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-13 11:42:48,636 stack: []
2023-08-13 11:42:48,636 state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-13 11:42:48,636 dispatch pc=0, inst=NOP(arg=None, lineno=4253)
2023-08-13 11:42:48,636 stack []
2023-08-13 11:42:48,636 dispatch pc=2, inst=COPY_FREE_VARS(arg=1, lineno=4253)
2023-08-13 11:42:48,636 stack []
2023-08-13 11:42:48,636 dispatch pc=4, inst=RESUME(arg=0, lineno=4253)
2023-08-13 11:42:48,636 stack []
2023-08-13 11:42:48,636 dispatch pc=6, inst=LOAD_GLOBAL(arg=1, lineno=4254)
2023-08-13 11:42:48,636 stack []
2023-08-13 11:42:48,637 dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=4254)
2023-08-13 11:42:48,637 stack ['$null$6.1', '$6load_global.0']
2023-08-13 11:42:48,637 dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=4254)
2023-08-13 11:42:48,637 stack ['$null$6.1', '$6load_global.0', '$shape18.2']
2023-08-13 11:42:48,637 dispatch pc=22, inst=LOAD_DEREF(arg=2, lineno=4254)
2023-08-13 11:42:48,637 stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3']
2023-08-13 11:42:48,637 dispatch pc=24, inst=PRECALL(arg=3, lineno=4254)
2023-08-13 11:42:48,637 stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3', '$22load_deref.4']
2023-08-13 11:42:48,637 dispatch pc=28, inst=CALL(arg=3, lineno=4254)
2023-08-13 11:42:48,637 stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3', '$22load_deref.4']
2023-08-13 11:42:48,637 dispatch pc=38, inst=RETURN_VALUE(arg=None, lineno=4254)
2023-08-13 11:42:48,637 stack ['$28call.5']
2023-08-13 11:42:48,637 end state. edges=[]
2023-08-13 11:42:48,637 -------------------------Prune PHIs-------------------------
2023-08-13 11:42:48,637 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-08-13 11:42:48,638 defmap: {}
2023-08-13 11:42:48,638 phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:48,638 changing phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:48,638 keep phismap: {}
2023-08-13 11:42:48,638 new_out: defaultdict(<class 'dict'>, {})
2023-08-13 11:42:48,638 ----------------------DONE Prune PHIs-----------------------
2023-08-13 11:42:48,638 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {}), (6, {'idx': 0, 'res': '$6load_global.0'}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {}), (18, {'res': '$shape18.2'}), (20, {'res': '$dtype20.3'}), (22, {'res': '$22load_deref.4'}), (24, {}), (26, {}), (28, {'func': '$6load_global.0', 'args': ['$shape18.2', '$dtype20.3', '$22load_deref.4'], 'kw_names': None, 'res': '$28call.5'}), (30, {}), (32, {}), (34, {}), (36, {}), (38, {'retval': '$28call.5', 'castval': '$38return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:48,638 label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $6load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$6load_global.0']
    $22load_deref.4 = freevar(retty: array(float64, 1d, C)) ['$22load_deref.4']
    $28call.5 = call $6load_global.0(shape, dtype, $22load_deref.4, func=$6load_global.0, args=[Var(shape, arrayobj.py:4253), Var(dtype, arrayobj.py:4253), Var($22load_deref.4, arrayobj.py:4254)], kws=(), vararg=None, varkwarg=None, target=None) ['$22load_deref.4', '$28call.5', '$6load_global.0', 'dtype', 'shape']
    $38return_value.6 = cast(value=$28call.5) ['$28call.5', '$38return_value.6']
    return $38return_value.6                 ['$38return_value.6']

2023-08-13 11:42:48,644 ==== SSA block analysis pass on 0
2023-08-13 11:42:48,644 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6976AD890>
2023-08-13 11:42:48,644 on stmt: shape = arg(0, name=shape)
2023-08-13 11:42:48,644 on stmt: dtype = arg(1, name=dtype)
2023-08-13 11:42:48,644 on stmt: $6load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
2023-08-13 11:42:48,645 on stmt: $22load_deref.4 = freevar(retty: array(float64, 1d, C))
2023-08-13 11:42:48,645 on stmt: $28call.5 = call $6load_global.0(shape, dtype, $22load_deref.4, func=$6load_global.0, args=[Var(shape, arrayobj.py:4253), Var(dtype, arrayobj.py:4253), Var($22load_deref.4, arrayobj.py:4254)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:48,645 on stmt: $38return_value.6 = cast(value=$28call.5)
2023-08-13 11:42:48,645 on stmt: return $38return_value.6
2023-08-13 11:42:48,645 defs defaultdict(<class 'list'>,
            {'$22load_deref.4': [<numba.core.ir.Assign object at 0x000001F6976C3650>],
             '$28call.5': [<numba.core.ir.Assign object at 0x000001F6976C0550>],
             '$38return_value.6': [<numba.core.ir.Assign object at 0x000001F6976C0250>],
             '$6load_global.0': [<numba.core.ir.Assign object at 0x000001F6976460D0>],
             'dtype': [<numba.core.ir.Assign object at 0x000001F697646590>],
             'shape': [<numba.core.ir.Assign object at 0x000001F697646F10>]})
2023-08-13 11:42:48,645 SSA violators set()
2023-08-13 11:42:49,205 bytecode dump:
>          0	NOP(arg=None, lineno=445)
           2	RESUME(arg=0, lineno=445)
           4	LOAD_GLOBAL(arg=1, lineno=453)
          16	LOAD_FAST(arg=0, lineno=453)
          18	PRECALL(arg=1, lineno=453)
          22	CALL(arg=1, lineno=453)
          32	LOAD_FAST(arg=1, lineno=453)
          34	LOAD_CONST(arg=1, lineno=453)
          36	LOAD_CONST(arg=1, lineno=453)
          38	BUILD_SLICE(arg=2, lineno=453)
          40	STORE_SUBSCR(arg=None, lineno=453)
          44	LOAD_CONST(arg=1, lineno=453)
          46	RETURN_VALUE(arg=None, lineno=453)
2023-08-13 11:42:49,205 pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-13 11:42:49,205 stack: []
2023-08-13 11:42:49,205 state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-13 11:42:49,205 dispatch pc=0, inst=NOP(arg=None, lineno=445)
2023-08-13 11:42:49,205 stack []
2023-08-13 11:42:49,205 dispatch pc=2, inst=RESUME(arg=0, lineno=445)
2023-08-13 11:42:49,205 stack []
2023-08-13 11:42:49,205 dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=453)
2023-08-13 11:42:49,205 stack []
2023-08-13 11:42:49,206 dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=453)
2023-08-13 11:42:49,206 stack ['$null$4.1', '$4load_global.0']
2023-08-13 11:42:49,206 dispatch pc=18, inst=PRECALL(arg=1, lineno=453)
2023-08-13 11:42:49,206 stack ['$null$4.1', '$4load_global.0', '$x16.2']
2023-08-13 11:42:49,206 dispatch pc=22, inst=CALL(arg=1, lineno=453)
2023-08-13 11:42:49,206 stack ['$null$4.1', '$4load_global.0', '$x16.2']
2023-08-13 11:42:49,206 dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=453)
2023-08-13 11:42:49,206 stack ['$22call.3']
2023-08-13 11:42:49,206 dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=453)
2023-08-13 11:42:49,206 stack ['$22call.3', '$y32.4']
2023-08-13 11:42:49,206 dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=453)
2023-08-13 11:42:49,206 stack ['$22call.3', '$y32.4', '$const34.5']
2023-08-13 11:42:49,206 dispatch pc=38, inst=BUILD_SLICE(arg=2, lineno=453)
2023-08-13 11:42:49,206 stack ['$22call.3', '$y32.4', '$const34.5', '$const36.6']
2023-08-13 11:42:49,206 dispatch pc=40, inst=STORE_SUBSCR(arg=None, lineno=453)
2023-08-13 11:42:49,207 stack ['$22call.3', '$y32.4', '$38build_slice.8']
2023-08-13 11:42:49,207 dispatch pc=44, inst=LOAD_CONST(arg=1, lineno=453)
2023-08-13 11:42:49,207 stack []
2023-08-13 11:42:49,207 dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=453)
2023-08-13 11:42:49,207 stack ['$const44.9']
2023-08-13 11:42:49,207 end state. edges=[]
2023-08-13 11:42:49,207 -------------------------Prune PHIs-------------------------
2023-08-13 11:42:49,207 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-08-13 11:42:49,207 defmap: {}
2023-08-13 11:42:49,207 phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:49,207 changing phismap: defaultdict(<class 'set'>, {})
2023-08-13 11:42:49,207 keep phismap: {}
2023-08-13 11:42:49,207 new_out: defaultdict(<class 'dict'>, {})
2023-08-13 11:42:49,208 ----------------------DONE Prune PHIs-----------------------
2023-08-13 11:42:49,208 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'res': '$x16.2'}), (18, {}), (20, {}), (22, {'func': '$4load_global.0', 'args': ['$x16.2'], 'kw_names': None, 'res': '$22call.3'}), (24, {}), (26, {}), (28, {}), (30, {}), (32, {'res': '$y32.4'}), (34, {'res': '$const34.5'}), (36, {'res': '$const36.6'}), (38, {'start': '$const34.5', 'stop': '$const36.6', 'step': None, 'res': '$38build_slice.8', 'slicevar': '$38build_slice.7'}), (40, {'target': '$y32.4', 'index': '$38build_slice.8', 'value': '$22call.3'}), (42, {}), (44, {'res': '$const44.9'}), (46, {'retval': '$const44.9', 'castval': '$46return_value.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:49,208 label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $4load_global.0 = global(_pi_stencil: <numba.stencils.stencil.StencilFunc object at 0x000001F6977CE310>) ['$4load_global.0']
    $22call.3 = call $4load_global.0(x, func=$4load_global.0, args=[Var(x, pitch.py:445)], kws=(), vararg=None, varkwarg=None, target=None) ['$22call.3', '$4load_global.0', 'x']
    $const34.5 = const(NoneType, None)       ['$const34.5']
    $const36.6 = const(NoneType, None)       ['$const36.6']
    $38build_slice.7 = global(slice: <class 'slice'>) ['$38build_slice.7']
    $38build_slice.8 = call $38build_slice.7($const34.5, $const36.6, func=$38build_slice.7, args=(Var($const34.5, pitch.py:453), Var($const36.6, pitch.py:453)), kws=(), vararg=None, varkwarg=None, target=None) ['$38build_slice.7', '$38build_slice.8', '$const34.5', '$const36.6']
    y[$38build_slice.8] = $22call.3          ['$22call.3', '$38build_slice.8', 'y']
    $const44.9 = const(NoneType, None)       ['$const44.9']
    $46return_value.10 = cast(value=$const44.9) ['$46return_value.10', '$const44.9']
    return $46return_value.10                ['$46return_value.10']

2023-08-13 11:42:49,217 ==== SSA block analysis pass on 0
2023-08-13 11:42:49,217 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F697739450>
2023-08-13 11:42:49,217 on stmt: x = arg(0, name=x)
2023-08-13 11:42:49,217 on stmt: y = arg(1, name=y)
2023-08-13 11:42:49,217 on stmt: $4load_global.0 = global(_pi_stencil: <numba.stencils.stencil.StencilFunc object at 0x000001F6977CE310>)
2023-08-13 11:42:49,217 on stmt: $22call.3 = call $4load_global.0(x, func=$4load_global.0, args=[Var(x, pitch.py:445)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:49,217 on stmt: $const34.5 = const(NoneType, None)
2023-08-13 11:42:49,217 on stmt: $const36.6 = const(NoneType, None)
2023-08-13 11:42:49,217 on stmt: $38build_slice.7 = global(slice: <class 'slice'>)
2023-08-13 11:42:49,217 on stmt: $38build_slice.8 = call $38build_slice.7($const34.5, $const36.6, func=$38build_slice.7, args=(Var($const34.5, pitch.py:453), Var($const36.6, pitch.py:453)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:49,218 on stmt: y[slice(None, None, None)] = $22call.3
2023-08-13 11:42:49,218 on stmt: $const44.9 = const(NoneType, None)
2023-08-13 11:42:49,218 on stmt: $46return_value.10 = cast(value=$const44.9)
2023-08-13 11:42:49,218 on stmt: return $46return_value.10
2023-08-13 11:42:49,218 defs defaultdict(<class 'list'>,
            {'$22call.3': [<numba.core.ir.Assign object at 0x000001F696A2CBD0>],
             '$38build_slice.7': [<numba.core.ir.Assign object at 0x000001F696A2E910>],
             '$38build_slice.8': [<numba.core.ir.Assign object at 0x000001F696A2D050>],
             '$46return_value.10': [<numba.core.ir.Assign object at 0x000001F696A2F750>],
             '$4load_global.0': [<numba.core.ir.Assign object at 0x000001F696A2D610>],
             '$const34.5': [<numba.core.ir.Assign object at 0x000001F696A2C390>],
             '$const36.6': [<numba.core.ir.Assign object at 0x000001F696A2C710>],
             '$const44.9': [<numba.core.ir.Assign object at 0x000001F696A2D490>],
             'x': [<numba.core.ir.Assign object at 0x000001F696A2E450>],
             'y': [<numba.core.ir.Assign object at 0x000001F696A2C950>]})
2023-08-13 11:42:49,218 SSA violators set()
2023-08-13 11:42:49,299 bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	RESUME(arg=0, lineno=1)
           4	LOAD_FAST(arg=0, lineno=2)
           6	LOAD_ATTR(arg=0, lineno=2)
          16	STORE_FAST(arg=1, lineno=2)
          18	LOAD_GLOBAL(arg=2, lineno=3)
          30	LOAD_METHOD(arg=2, lineno=3)
          52	LOAD_FAST(arg=1, lineno=3)
          54	LOAD_GLOBAL(arg=2, lineno=3)
          66	LOAD_ATTR(arg=3, lineno=3)
          76	KW_NAMES(arg=1, lineno=3)
          78	PRECALL(arg=2, lineno=3)
          82	CALL(arg=2, lineno=3)
          92	STORE_FAST(arg=2, lineno=3)
          94	LOAD_CONST(arg=2, lineno=4)
          96	LOAD_FAST(arg=2, lineno=4)
          98	LOAD_CONST(arg=0, lineno=4)
         100	LOAD_CONST(arg=3, lineno=4)
         102	BUILD_SLICE(arg=2, lineno=4)
         104	STORE_SUBSCR(arg=None, lineno=4)
         108	LOAD_CONST(arg=2, lineno=5)
         110	LOAD_FAST(arg=2, lineno=5)
         112	LOAD_CONST(arg=4, lineno=5)
         114	LOAD_CONST(arg=0, lineno=5)
         116	BUILD_SLICE(arg=2, lineno=5)
         118	STORE_SUBSCR(arg=None, lineno=5)
         122	LOAD_GLOBAL(arg=9, lineno=6)
         134	LOAD_GLOBAL(arg=11, lineno=6)
         146	LOAD_CONST(arg=2, lineno=6)
         148	LOAD_CONST(arg=4, lineno=6)
         150	PRECALL(arg=2, lineno=6)
         154	CALL(arg=2, lineno=6)
         164	UNARY_NEGATIVE(arg=None, lineno=6)
         166	LOAD_FAST(arg=1, lineno=6)
         168	LOAD_CONST(arg=2, lineno=6)
         170	BINARY_SUBSCR(arg=None, lineno=6)
         180	LOAD_GLOBAL(arg=13, lineno=6)
         192	LOAD_CONST(arg=2, lineno=6)
         194	LOAD_CONST(arg=3, lineno=6)
         196	PRECALL(arg=2, lineno=6)
         200	CALL(arg=2, lineno=6)
         210	BINARY_OP(arg=10, lineno=6)
         214	PRECALL(arg=2, lineno=6)
         218	CALL(arg=2, lineno=6)
         228	GET_ITER(arg=None, lineno=6)
>        230	FOR_ITER(arg=4, lineno=6)
         232	STORE_FAST(arg=3, lineno=6)
         234	LOAD_CONST(arg=2, lineno=7)
         236	STORE_FAST(arg=4, lineno=7)
         238	JUMP_BACKWARD(arg=5, lineno=7)
>        240	LOAD_FAST(arg=2, lineno=8)
         242	RETURN_VALUE(arg=None, lineno=8)
2023-08-13 11:42:49,299 pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-13 11:42:49,299 stack: []
2023-08-13 11:42:49,299 state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-13 11:42:49,299 dispatch pc=0, inst=NOP(arg=None, lineno=1)
2023-08-13 11:42:49,299 stack []
2023-08-13 11:42:49,299 dispatch pc=2, inst=RESUME(arg=0, lineno=1)
2023-08-13 11:42:49,300 stack []
2023-08-13 11:42:49,300 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2)
2023-08-13 11:42:49,300 stack []
2023-08-13 11:42:49,300 dispatch pc=6, inst=LOAD_ATTR(arg=0, lineno=2)
2023-08-13 11:42:49,300 stack ['$x4.0']
2023-08-13 11:42:49,300 dispatch pc=16, inst=STORE_FAST(arg=1, lineno=2)
2023-08-13 11:42:49,300 stack ['$6load_attr.1']
2023-08-13 11:42:49,300 dispatch pc=18, inst=LOAD_GLOBAL(arg=2, lineno=3)
2023-08-13 11:42:49,300 stack []
2023-08-13 11:42:49,300 dispatch pc=30, inst=LOAD_METHOD(arg=2, lineno=3)
2023-08-13 11:42:49,300 stack ['$18load_global.2']
2023-08-13 11:42:49,300 dispatch pc=52, inst=LOAD_FAST(arg=1, lineno=3)
2023-08-13 11:42:49,300 stack ['$null$30.3', '$30load_method.4']
2023-08-13 11:42:49,301 dispatch pc=54, inst=LOAD_GLOBAL(arg=2, lineno=3)
2023-08-13 11:42:49,301 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5']
2023-08-13 11:42:49,301 dispatch pc=66, inst=LOAD_ATTR(arg=3, lineno=3)
2023-08-13 11:42:49,301 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$54load_global.6']
2023-08-13 11:42:49,301 dispatch pc=76, inst=KW_NAMES(arg=1, lineno=3)
2023-08-13 11:42:49,301 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$66load_attr.7']
2023-08-13 11:42:49,301 dispatch pc=78, inst=PRECALL(arg=2, lineno=3)
2023-08-13 11:42:49,301 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$66load_attr.7']
2023-08-13 11:42:49,301 dispatch pc=82, inst=CALL(arg=2, lineno=3)
2023-08-13 11:42:49,301 stack ['$null$30.3', '$30load_method.4', '$full_shape052.5', '$66load_attr.7']
2023-08-13 11:42:49,301 dispatch pc=92, inst=STORE_FAST(arg=2, lineno=3)
2023-08-13 11:42:49,301 stack ['$82call.8']
2023-08-13 11:42:49,301 dispatch pc=94, inst=LOAD_CONST(arg=2, lineno=4)
2023-08-13 11:42:49,301 stack []
2023-08-13 11:42:49,301 dispatch pc=96, inst=LOAD_FAST(arg=2, lineno=4)
2023-08-13 11:42:49,302 stack ['$const94.9']
2023-08-13 11:42:49,302 dispatch pc=98, inst=LOAD_CONST(arg=0, lineno=4)
2023-08-13 11:42:49,302 stack ['$const94.9', '$out096.10']
2023-08-13 11:42:49,302 dispatch pc=100, inst=LOAD_CONST(arg=3, lineno=4)
2023-08-13 11:42:49,302 stack ['$const94.9', '$out096.10', '$const98.11']
2023-08-13 11:42:49,302 dispatch pc=102, inst=BUILD_SLICE(arg=2, lineno=4)
2023-08-13 11:42:49,302 stack ['$const94.9', '$out096.10', '$const98.11', '$const100.12']
2023-08-13 11:42:49,302 dispatch pc=104, inst=STORE_SUBSCR(arg=None, lineno=4)
2023-08-13 11:42:49,302 stack ['$const94.9', '$out096.10', '$102build_slice.14']
2023-08-13 11:42:49,302 dispatch pc=108, inst=LOAD_CONST(arg=2, lineno=5)
2023-08-13 11:42:49,302 stack []
2023-08-13 11:42:49,302 dispatch pc=110, inst=LOAD_FAST(arg=2, lineno=5)
2023-08-13 11:42:49,302 stack ['$const108.15']
2023-08-13 11:42:49,302 dispatch pc=112, inst=LOAD_CONST(arg=4, lineno=5)
2023-08-13 11:42:49,302 stack ['$const108.15', '$out0110.16']
2023-08-13 11:42:49,303 dispatch pc=114, inst=LOAD_CONST(arg=0, lineno=5)
2023-08-13 11:42:49,303 stack ['$const108.15', '$out0110.16', '$const112.17']
2023-08-13 11:42:49,303 dispatch pc=116, inst=BUILD_SLICE(arg=2, lineno=5)
2023-08-13 11:42:49,303 stack ['$const108.15', '$out0110.16', '$const112.17', '$const114.18']
2023-08-13 11:42:49,303 dispatch pc=118, inst=STORE_SUBSCR(arg=None, lineno=5)
2023-08-13 11:42:49,303 stack ['$const108.15', '$out0110.16', '$116build_slice.20']
2023-08-13 11:42:49,303 dispatch pc=122, inst=LOAD_GLOBAL(arg=9, lineno=6)
2023-08-13 11:42:49,303 stack []
2023-08-13 11:42:49,303 dispatch pc=134, inst=LOAD_GLOBAL(arg=11, lineno=6)
2023-08-13 11:42:49,303 stack ['$null$122.22', '$122load_global.21']
2023-08-13 11:42:49,303 dispatch pc=146, inst=LOAD_CONST(arg=2, lineno=6)
2023-08-13 11:42:49,303 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23']
2023-08-13 11:42:49,303 dispatch pc=148, inst=LOAD_CONST(arg=4, lineno=6)
2023-08-13 11:42:49,303 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23', '$const146.25']
2023-08-13 11:42:49,304 dispatch pc=150, inst=PRECALL(arg=2, lineno=6)
2023-08-13 11:42:49,304 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23', '$const146.25', '$const148.26']
2023-08-13 11:42:49,304 dispatch pc=154, inst=CALL(arg=2, lineno=6)
2023-08-13 11:42:49,304 stack ['$null$122.22', '$122load_global.21', '$null$134.24', '$134load_global.23', '$const146.25', '$const148.26']
2023-08-13 11:42:49,304 dispatch pc=164, inst=UNARY_NEGATIVE(arg=None, lineno=6)
2023-08-13 11:42:49,304 stack ['$null$122.22', '$122load_global.21', '$154call.27']
2023-08-13 11:42:49,304 dispatch pc=166, inst=LOAD_FAST(arg=1, lineno=6)
2023-08-13 11:42:49,304 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28']
2023-08-13 11:42:49,304 dispatch pc=168, inst=LOAD_CONST(arg=2, lineno=6)
2023-08-13 11:42:49,304 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$full_shape0166.29']
2023-08-13 11:42:49,304 dispatch pc=170, inst=BINARY_SUBSCR(arg=None, lineno=6)
2023-08-13 11:42:49,305 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$full_shape0166.29', '$const168.30']
2023-08-13 11:42:49,305 dispatch pc=180, inst=LOAD_GLOBAL(arg=13, lineno=6)
2023-08-13 11:42:49,305 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31']
2023-08-13 11:42:49,305 dispatch pc=192, inst=LOAD_CONST(arg=2, lineno=6)
2023-08-13 11:42:49,305 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32']
2023-08-13 11:42:49,305 dispatch pc=194, inst=LOAD_CONST(arg=3, lineno=6)
2023-08-13 11:42:49,305 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32', '$const192.34']
2023-08-13 11:42:49,305 dispatch pc=196, inst=PRECALL(arg=2, lineno=6)
2023-08-13 11:42:49,305 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32', '$const192.34', '$const194.35']
2023-08-13 11:42:49,305 dispatch pc=200, inst=CALL(arg=2, lineno=6)
2023-08-13 11:42:49,305 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$null$180.33', '$180load_global.32', '$const192.34', '$const194.35']
2023-08-13 11:42:49,305 dispatch pc=210, inst=BINARY_OP(arg=10, lineno=6)
2023-08-13 11:42:49,305 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$170binary_subscr.31', '$200call.36']
2023-08-13 11:42:49,305 dispatch pc=214, inst=PRECALL(arg=2, lineno=6)
2023-08-13 11:42:49,306 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$binop_sub210.37']
2023-08-13 11:42:49,306 dispatch pc=218, inst=CALL(arg=2, lineno=6)
2023-08-13 11:42:49,306 stack ['$null$122.22', '$122load_global.21', '$164unary_negative.28', '$binop_sub210.37']
2023-08-13 11:42:49,306 dispatch pc=228, inst=GET_ITER(arg=None, lineno=6)
2023-08-13 11:42:49,306 stack ['$218call.38']
2023-08-13 11:42:49,306 end state. edges=[Edge(pc=230, stack=('$228get_iter.39',), blockstack=(), npush=0)]
2023-08-13 11:42:49,306 pending: deque([State(pc_initial=230 nstack_initial=1)])
2023-08-13 11:42:49,306 stack: ['$phi230.0']
2023-08-13 11:42:49,306 state.pc_initial: State(pc_initial=230 nstack_initial=1)
2023-08-13 11:42:49,306 dispatch pc=230, inst=FOR_ITER(arg=4, lineno=6)
2023-08-13 11:42:49,306 stack ['$phi230.0']
2023-08-13 11:42:49,306 end state. edges=[Edge(pc=240, stack=(), blockstack=(), npush=0), Edge(pc=232, stack=('$phi230.0', '$230for_iter.2'), blockstack=(), npush=0)]
2023-08-13 11:42:49,306 pending: deque([State(pc_initial=240 nstack_initial=0), State(pc_initial=232 nstack_initial=2)])
2023-08-13 11:42:49,307 stack: []
2023-08-13 11:42:49,307 state.pc_initial: State(pc_initial=240 nstack_initial=0)
2023-08-13 11:42:49,307 dispatch pc=240, inst=LOAD_FAST(arg=2, lineno=8)
2023-08-13 11:42:49,307 stack []
2023-08-13 11:42:49,307 dispatch pc=242, inst=RETURN_VALUE(arg=None, lineno=8)
2023-08-13 11:42:49,307 stack ['$out0240.0']
2023-08-13 11:42:49,307 end state. edges=[]
2023-08-13 11:42:49,307 pending: deque([State(pc_initial=232 nstack_initial=2)])
2023-08-13 11:42:49,307 stack: ['$phi232.0', '$phi232.1']
2023-08-13 11:42:49,307 state.pc_initial: State(pc_initial=232 nstack_initial=2)
2023-08-13 11:42:49,307 dispatch pc=232, inst=STORE_FAST(arg=3, lineno=6)
2023-08-13 11:42:49,307 stack ['$phi232.0', '$phi232.1']
2023-08-13 11:42:49,307 dispatch pc=234, inst=LOAD_CONST(arg=2, lineno=7)
2023-08-13 11:42:49,307 stack ['$phi232.0']
2023-08-13 11:42:49,308 dispatch pc=236, inst=STORE_FAST(arg=4, lineno=7)
2023-08-13 11:42:49,308 stack ['$phi232.0', '$const234.2']
2023-08-13 11:42:49,308 dispatch pc=238, inst=JUMP_BACKWARD(arg=5, lineno=7)
2023-08-13 11:42:49,308 stack ['$phi232.0']
2023-08-13 11:42:49,308 end state. edges=[Edge(pc=230, stack=('$phi232.0',), blockstack=(), npush=0)]
2023-08-13 11:42:49,308 pending: deque([State(pc_initial=230 nstack_initial=1)])
2023-08-13 11:42:49,308 -------------------------Prune PHIs-------------------------
2023-08-13 11:42:49,308 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=230 nstack_initial=1): {'$phi230.0'},
             State(pc_initial=232 nstack_initial=2): {'$phi232.1'},
             State(pc_initial=240 nstack_initial=0): set()})
2023-08-13 11:42:49,308 defmap: {'$phi230.0': State(pc_initial=0 nstack_initial=0),
 '$phi232.1': State(pc_initial=230 nstack_initial=1)}
2023-08-13 11:42:49,308 phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi232.0',
                            State(pc_initial=232 nstack_initial=2))},
             '$phi232.0': {('$phi230.0',
                            State(pc_initial=230 nstack_initial=1))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:49,309 changing phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi230.0',
                            State(pc_initial=230 nstack_initial=1))},
             '$phi232.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:49,309 changing phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:49,309 changing phismap: defaultdict(<class 'set'>,
            {'$phi230.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.0': {('$228get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi232.1': {('$230for_iter.2',
                            State(pc_initial=230 nstack_initial=1))}})
2023-08-13 11:42:49,310 keep phismap: {'$phi230.0': {('$228get_iter.39', State(pc_initial=0 nstack_initial=0))},
 '$phi232.1': {('$230for_iter.2', State(pc_initial=230 nstack_initial=1))}}
2023-08-13 11:42:49,310 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi230.0': '$228get_iter.39'},
             State(pc_initial=230 nstack_initial=1): {'$phi232.1': '$230for_iter.2'}})
2023-08-13 11:42:49,310 ----------------------DONE Prune PHIs-----------------------
2023-08-13 11:42:49,310 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$x4.0'}), (6, {'item': '$x4.0', 'res': '$6load_attr.1'}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'value': '$6load_attr.1'}), (18, {'idx': 1, 'res': '$18load_global.2'}), (20, {}), (22, {}), (24, {}), (26, {}), (28, {}), (30, {'item': '$18load_global.2', 'res': '$30load_method.4'}), (32, {}), (34, {}), (36, {}), (38, {}), (40, {}), (42, {}), (44, {}), (46, {}), (48, {}), (50, {}), (52, {'res': '$full_shape052.5'}), (54, {'idx': 1, 'res': '$54load_global.6'}), (56, {}), (58, {}), (60, {}), (62, {}), (64, {}), (66, {'item': '$54load_global.6', 'res': '$66load_attr.7'}), (68, {}), (70, {}), (72, {}), (74, {}), (78, {}), (80, {}), (82, {'func': '$30load_method.4', 'args': ['$full_shape052.5', '$66load_attr.7'], 'kw_names': 1, 'res': '$82call.8'}), (84, {}), (86, {}), (88, {}), (90, {}), (92, {'value': '$82call.8'}), (94, {'res': '$const94.9'}), (96, {'res': '$out096.10'}), (98, {'res': '$const98.11'}), (100, {'res': '$const100.12'}), (102, {'start': '$const98.11', 'stop': '$const100.12', 'step': None, 'res': '$102build_slice.14', 'slicevar': '$102build_slice.13'}), (104, {'target': '$out096.10', 'index': '$102build_slice.14', 'value': '$const94.9'}), (106, {}), (108, {'res': '$const108.15'}), (110, {'res': '$out0110.16'}), (112, {'res': '$const112.17'}), (114, {'res': '$const114.18'}), (116, {'start': '$const112.17', 'stop': '$const114.18', 'step': None, 'res': '$116build_slice.20', 'slicevar': '$116build_slice.19'}), (118, {'target': '$out0110.16', 'index': '$116build_slice.20', 'value': '$const108.15'}), (120, {}), (122, {'idx': 4, 'res': '$122load_global.21'}), (124, {}), (126, {}), (128, {}), (130, {}), (132, {}), (134, {'idx': 5, 'res': '$134load_global.23'}), (136, {}), (138, {}), (140, {}), (142, {}), (144, {}), (146, {'res': '$const146.25'}), (148, {'res': '$const148.26'}), (150, {}), (152, {}), (154, {'func': '$134load_global.23', 'args': ['$const146.25', '$const148.26'], 'kw_names': None, 'res': '$154call.27'}), (156, {}), (158, {}), (160, {}), (162, {}), (164, {'value': '$154call.27', 'res': '$164unary_negative.28'}), (166, {'res': '$full_shape0166.29'}), (168, {'res': '$const168.30'}), (170, {'index': '$const168.30', 'target': '$full_shape0166.29', 'res': '$170binary_subscr.31'}), (172, {}), (174, {}), (176, {}), (178, {}), (180, {'idx': 6, 'res': '$180load_global.32'}), (182, {}), (184, {}), (186, {}), (188, {}), (190, {}), (192, {'res': '$const192.34'}), (194, {'res': '$const194.35'}), (196, {}), (198, {}), (200, {'func': '$180load_global.32', 'args': ['$const192.34', '$const194.35'], 'kw_names': None, 'res': '$200call.36'}), (202, {}), (204, {}), (206, {}), (208, {}), (210, {'op': '-', 'lhs': '$170binary_subscr.31', 'rhs': '$200call.36', 'res': '$binop_sub210.37'}), (212, {}), (214, {}), (216, {}), (218, {'func': '$122load_global.21', 'args': ['$164unary_negative.28', '$binop_sub210.37'], 'kw_names': None, 'res': '$218call.38'}), (220, {}), (222, {}), (224, {}), (226, {}), (228, {'value': '$218call.38', 'res': '$228get_iter.39'})), outgoing_phis={'$phi230.0': '$228get_iter.39'}, blockstack=(), active_try_block=None, outgoing_edgepushed={230: ('$228get_iter.39',)})
2023-08-13 11:42:49,311 block_infos State(pc_initial=230 nstack_initial=1):
AdaptBlockInfo(insts=((230, {'iterator': '$phi230.0', 'pair': '$230for_iter.1', 'indval': '$230for_iter.2', 'pred': '$230for_iter.3'}),), outgoing_phis={'$phi232.1': '$230for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={240: (), 232: ('$phi230.0', '$230for_iter.2')})
2023-08-13 11:42:49,311 block_infos State(pc_initial=232 nstack_initial=2):
AdaptBlockInfo(insts=((232, {'value': '$phi232.1'}), (234, {'res': '$const234.2'}), (236, {'value': '$const234.2'}), (238, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={230: ('$phi232.0',)})
2023-08-13 11:42:49,311 block_infos State(pc_initial=240 nstack_initial=0):
AdaptBlockInfo(insts=((240, {'res': '$out0240.0'}), (242, {'retval': '$out0240.0', 'castval': '$242return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-13 11:42:49,312 label 0:
    x = arg(0, name=x)                       ['x']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $18load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>) ['$18load_global.2']
    $30load_method.4 = getattr(value=$18load_global.2, attr=empty) ['$18load_global.2', '$30load_method.4']
    $54load_global.6 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>) ['$54load_global.6']
    $66load_attr.7 = getattr(value=$54load_global.6, attr=float64) ['$54load_global.6', '$66load_attr.7']
    out0 = call $30load_method.4(full_shape0, func=$30load_method.4, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($66load_attr.7, <string>:3))], vararg=None, varkwarg=None, target=None) ['$30load_method.4', '$66load_attr.7', 'full_shape0', 'out0']
    $const94.9 = const(int, 0)               ['$const94.9']
    $const98.11 = const(NoneType, None)      ['$const98.11']
    $const100.12 = const(int, 1)             ['$const100.12']
    $102build_slice.13 = global(slice: <class 'slice'>) ['$102build_slice.13']
    $102build_slice.14 = call $102build_slice.13($const98.11, $const100.12, func=$102build_slice.13, args=(Var($const98.11, <string>:4), Var($const100.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$102build_slice.13', '$102build_slice.14', '$const100.12', '$const98.11']
    out0[$102build_slice.14] = $const94.9    ['$102build_slice.14', '$const94.9', 'out0']
    $const108.15 = const(int, 0)             ['$const108.15']
    $const112.17 = const(int, -1)            ['$const112.17']
    $const114.18 = const(NoneType, None)     ['$const114.18']
    $116build_slice.19 = global(slice: <class 'slice'>) ['$116build_slice.19']
    $116build_slice.20 = call $116build_slice.19($const112.17, $const114.18, func=$116build_slice.19, args=(Var($const112.17, <string>:5), Var($const114.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$116build_slice.19', '$116build_slice.20', '$const112.17', '$const114.18']
    out0[$116build_slice.20] = $const108.15  ['$116build_slice.20', '$const108.15', 'out0']
    $122load_global.21 = global(range: <class 'range'>) ['$122load_global.21']
    $134load_global.23 = global(min: <built-in function min>) ['$134load_global.23']
    $const146.25 = const(int, 0)             ['$const146.25']
    $const148.26 = const(int, -1)            ['$const148.26']
    $154call.27 = call $134load_global.23($const146.25, $const148.26, func=$134load_global.23, args=[Var($const146.25, <string>:6), Var($const148.26, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$134load_global.23', '$154call.27', '$const146.25', '$const148.26']
    $164unary_negative.28 = unary(fn=<built-in function neg>, value=$154call.27) ['$154call.27', '$164unary_negative.28']
    $const168.30 = const(int, 0)             ['$const168.30']
    $170binary_subscr.31 = getitem(value=full_shape0, index=$const168.30, fn=<built-in function getitem>) ['$170binary_subscr.31', '$const168.30', 'full_shape0']
    $180load_global.32 = global(max: <built-in function max>) ['$180load_global.32']
    $const192.34 = const(int, 0)             ['$const192.34']
    $const194.35 = const(int, 1)             ['$const194.35']
    $200call.36 = call $180load_global.32($const192.34, $const194.35, func=$180load_global.32, args=[Var($const192.34, <string>:6), Var($const194.35, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$180load_global.32', '$200call.36', '$const192.34', '$const194.35']
    $binop_sub210.37 = $170binary_subscr.31 - $200call.36 ['$170binary_subscr.31', '$200call.36', '$binop_sub210.37']
    $218call.38 = call $122load_global.21($164unary_negative.28, $binop_sub210.37, func=$122load_global.21, args=[Var($164unary_negative.28, <string>:6), Var($binop_sub210.37, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$122load_global.21', '$164unary_negative.28', '$218call.38', '$binop_sub210.37']
    $228get_iter.39 = getiter(value=$218call.38) ['$218call.38', '$228get_iter.39']
    $phi230.0 = $228get_iter.39              ['$228get_iter.39', '$phi230.0']
    jump 230                                 []
label 230:
    $230for_iter.1 = iternext(value=$phi230.0) ['$230for_iter.1', '$phi230.0']
    $230for_iter.2 = pair_first(value=$230for_iter.1) ['$230for_iter.1', '$230for_iter.2']
    $230for_iter.3 = pair_second(value=$230for_iter.1) ['$230for_iter.1', '$230for_iter.3']
    $phi232.1 = $230for_iter.2               ['$230for_iter.2', '$phi232.1']
    branch $230for_iter.3, 232, 240          ['$230for_iter.3']
label 232:
    index00 = $phi232.1                      ['$phi232.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 230                                 []
label 240:
    $242return_value.1 = cast(value=out0)    ['$242return_value.1', 'out0']
    return $242return_value.1                ['$242return_value.1']

2023-08-13 11:42:49,346 ==== SSA block analysis pass on 0
2023-08-13 11:42:49,347 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6963AAD50>
2023-08-13 11:42:49,347 on stmt: x = arg(0, name=x)
2023-08-13 11:42:49,347 on stmt: full_shape0 = getattr(value=x, attr=shape)
2023-08-13 11:42:49,347 on stmt: $18load_global.2.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:49,347 on stmt: $30load_method.4.1 = getattr(value=$18load_global.2.1, attr=empty)
2023-08-13 11:42:49,347 on stmt: $54load_global.6.1 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:49,347 on stmt: $66load_attr.7.1 = getattr(value=$54load_global.6.1, attr=float64)
2023-08-13 11:42:49,348 on stmt: out0 = call $30load_method.4.1(full_shape0, func=$30load_method.4.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($66load_attr.7.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:49,348 on stmt: $const94.9.1 = const(int, 0)
2023-08-13 11:42:49,348 on stmt: $const98.11.1 = const(NoneType, None)
2023-08-13 11:42:49,348 on stmt: $const100.12.1 = const(int, 1)
2023-08-13 11:42:49,348 on stmt: $102build_slice.13.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:49,348 on stmt: $102build_slice.14.1 = call $102build_slice.13.1($const98.11.1, $const100.12.1, func=$102build_slice.13.1, args=(Var($const98.11.1, <string>:4), Var($const100.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:49,348 on stmt: out0[$102build_slice.14.1] = $const94.9.1
2023-08-13 11:42:49,348 on stmt: $const108.15.1 = const(int, 0)
2023-08-13 11:42:49,348 on stmt: $const112.17.1 = const(int, -1)
2023-08-13 11:42:49,348 on stmt: $const114.18.1 = const(NoneType, None)
2023-08-13 11:42:49,348 on stmt: $116build_slice.19.1 = global(slice: <class 'slice'>)
2023-08-13 11:42:49,348 on stmt: $116build_slice.20.1 = call $116build_slice.19.1($const112.17.1, $const114.18.1, func=$116build_slice.19.1, args=(Var($const112.17.1, <string>:5), Var($const114.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:49,349 on stmt: out0[$116build_slice.20.1] = $const108.15.1
2023-08-13 11:42:49,349 on stmt: $122load_global.21.1 = global(range: <class 'range'>)
2023-08-13 11:42:49,349 on stmt: $134load_global.23.1 = global(min: <built-in function min>)
2023-08-13 11:42:49,349 on stmt: $const146.25.1 = const(int, 0)
2023-08-13 11:42:49,349 on stmt: $const148.26.1 = const(int, -1)
2023-08-13 11:42:49,349 on stmt: $154call.27.1 = call $134load_global.23.1($const146.25.1, $const148.26.1, func=$134load_global.23.1, args=[Var($const146.25.1, <string>:6), Var($const148.26.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:49,349 on stmt: $164unary_negative.28.1 = unary(fn=<built-in function neg>, value=$154call.27.1)
2023-08-13 11:42:49,349 on stmt: $const168.30.1 = const(int, 0)
2023-08-13 11:42:49,349 on stmt: $170binary_subscr.31.1 = getitem(value=full_shape0, index=$const168.30.1, fn=<built-in function getitem>)
2023-08-13 11:42:49,349 on stmt: $180load_global.32.1 = global(max: <built-in function max>)
2023-08-13 11:42:49,349 on stmt: $const192.34.1 = const(int, 0)
2023-08-13 11:42:49,350 on stmt: $const194.35.1 = const(int, 1)
2023-08-13 11:42:49,350 on stmt: $200call.36.1 = call $180load_global.32.1($const192.34.1, $const194.35.1, func=$180load_global.32.1, args=[Var($const192.34.1, <string>:6), Var($const194.35.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:49,350 on stmt: $binop_sub210.37.1 = $170binary_subscr.31.1 - $200call.36.1
2023-08-13 11:42:49,350 on stmt: $218call.38.1 = call $122load_global.21.1($164unary_negative.28.1, $binop_sub210.37.1, func=$122load_global.21.1, args=[Var($164unary_negative.28.1, <string>:6), Var($binop_sub210.37.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:49,350 on stmt: $228get_iter.39.1 = getiter(value=$218call.38.1)
2023-08-13 11:42:49,350 on stmt: $phi230.0.1 = $228get_iter.39.1
2023-08-13 11:42:49,350 on stmt: jump 230
2023-08-13 11:42:49,350 ==== SSA block analysis pass on 230
2023-08-13 11:42:49,350 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6963AAD50>
2023-08-13 11:42:49,350 on stmt: $230for_iter.1.1 = iternext(value=$phi230.0.1)
2023-08-13 11:42:49,350 on stmt: $230for_iter.2.1 = pair_first(value=$230for_iter.1.1)
2023-08-13 11:42:49,351 on stmt: $230for_iter.3.1 = pair_second(value=$230for_iter.1.1)
2023-08-13 11:42:49,351 on stmt: $phi232.1.1 = $230for_iter.2.1
2023-08-13 11:42:49,351 on stmt: branch $230for_iter.3.1, 232, 432
2023-08-13 11:42:49,351 ==== SSA block analysis pass on 232
2023-08-13 11:42:49,351 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6963AAD50>
2023-08-13 11:42:49,351 on stmt: index00 = $phi232.1.1
2023-08-13 11:42:49,351 on stmt: jump 240
2023-08-13 11:42:49,351 ==== SSA block analysis pass on 432
2023-08-13 11:42:49,351 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6963AAD50>
2023-08-13 11:42:49,351 on stmt: $242return_value.1.1 = cast(value=out0)
2023-08-13 11:42:49,351 on stmt: return $242return_value.1.1
2023-08-13 11:42:49,351 ==== SSA block analysis pass on 240
2023-08-13 11:42:49,351 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6963AAD50>
2023-08-13 11:42:49,351 on stmt: $const6.1 = const(int, 1)
2023-08-13 11:42:49,351 on stmt: stencil_index = $const6.1 + index00
2023-08-13 11:42:49,352 on stmt: $8binary_subscr.2 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2023-08-13 11:42:49,352 on stmt: $const20.4 = const(int, -1)
2023-08-13 11:42:49,352 on stmt: stencil_index.1 = $const20.4 + index00
2023-08-13 11:42:49,352 on stmt: $22binary_subscr.5 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2023-08-13 11:42:49,352 on stmt: $binop_add32.6 = $8binary_subscr.2 + $22binary_subscr.5
2023-08-13 11:42:49,352 on stmt: $const36.7 = const(int, 2)
2023-08-13 11:42:49,352 on stmt: $const40.9 = const(int, 0)
2023-08-13 11:42:49,352 on stmt: stencil_index.2 = $const40.9 + index00
2023-08-13 11:42:49,352 on stmt: $42binary_subscr.10 = getitem(value=x, index=stencil_index.2, fn=<built-in function getitem>)
2023-08-13 11:42:49,352 on stmt: $binop_mul52.11 = $const36.7 * $42binary_subscr.10
2023-08-13 11:42:49,352 on stmt: a = $binop_add32.6 - $binop_mul52.11
2023-08-13 11:42:49,353 on stmt: $const64.14 = const(int, 1)
2023-08-13 11:42:49,353 on stmt: stencil_index.3 = $const64.14 + index00
2023-08-13 11:42:49,353 on stmt: $66binary_subscr.15 = getitem(value=x, index=stencil_index.3, fn=<built-in function getitem>)
2023-08-13 11:42:49,353 on stmt: $const78.17 = const(int, -1)
2023-08-13 11:42:49,353 on stmt: stencil_index.4 = $const78.17 + index00
2023-08-13 11:42:49,353 on stmt: $80binary_subscr.18 = getitem(value=x, index=stencil_index.4, fn=<built-in function getitem>)
2023-08-13 11:42:49,353 on stmt: $binop_sub90.19 = $66binary_subscr.15 - $80binary_subscr.18
2023-08-13 11:42:49,353 on stmt: $const94.20 = const(int, 2)
2023-08-13 11:42:49,353 on stmt: b = $binop_sub90.19 / $const94.20
2023-08-13 11:42:49,353 on stmt: $102load_global.22 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:49,354 on stmt: $114load_attr.24 = getattr(value=$102load_global.22, attr=abs)
2023-08-13 11:42:49,354 on stmt: $130call.26 = call $114load_attr.24(b, func=$114load_attr.24, args=[Var(b, pitch.py:435)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:49,354 on stmt: $140load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\nimai\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\numpy\\__init__.py'>)
2023-08-13 11:42:49,354 on stmt: $152load_attr.29 = getattr(value=$140load_global.27, attr=abs)
2023-08-13 11:42:49,354 on stmt: $168call.31 = call $152load_attr.29(a, func=$152load_attr.29, args=[Var(a, pitch.py:434)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:49,354 on stmt: $178compare_op.32 = $130call.26 >= $168call.31
2023-08-13 11:42:49,354 on stmt: bool184 = global(bool: <class 'bool'>)
2023-08-13 11:42:49,354 on stmt: $184pred = call bool184($178compare_op.32, func=bool184, args=(Var($178compare_op.32, pitch.py:437),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-13 11:42:49,354 on stmt: branch $184pred, 241, 427
2023-08-13 11:42:49,354 ==== SSA block analysis pass on 241
2023-08-13 11:42:49,355 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6963AAD50>
2023-08-13 11:42:49,355 on stmt: $const186.0 = const(int, 0)
2023-08-13 11:42:49,355 on stmt: $188return_value.1 = cast(value=$const186.0)
2023-08-13 11:42:49,355 on stmt: out0[index00] = $188return_value.1
2023-08-13 11:42:49,355 on stmt: jump 431
2023-08-13 11:42:49,355 ==== SSA block analysis pass on 427
2023-08-13 11:42:49,355 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6963AAD50>
2023-08-13 11:42:49,355 on stmt: $192unary_negative.1 = unary(fn=<built-in function neg>, value=b)
2023-08-13 11:42:49,355 on stmt: $binop_truediv196.3 = $192unary_negative.1 / a
2023-08-13 11:42:49,355 on stmt: $200return_value.4 = cast(value=$binop_truediv196.3)
2023-08-13 11:42:49,355 on stmt: out0[index00] = $200return_value.4
2023-08-13 11:42:49,355 on stmt: jump 431
2023-08-13 11:42:49,355 ==== SSA block analysis pass on 431
2023-08-13 11:42:49,355 Running <numba.core.ssa._GatherDefsHandler object at 0x000001F6963AAD50>
2023-08-13 11:42:49,356 on stmt: jump 230
2023-08-13 11:42:49,358 defs defaultdict(<class 'list'>,
            {'$102build_slice.13.1': [<numba.core.ir.Assign object at 0x000001F696391E10>],
             '$102build_slice.14.1': [<numba.core.ir.Assign object at 0x000001F696391D90>],
             '$102load_global.22': [<numba.core.ir.Assign object at 0x000001F69634EDD0>],
             '$114load_attr.24': [<numba.core.ir.Assign object at 0x000001F696A07550>],
             '$116build_slice.19.1': [<numba.core.ir.Assign object at 0x000001F696391E50>],
             '$116build_slice.20.1': [<numba.core.ir.Assign object at 0x000001F696392FD0>],
             '$122load_global.21.1': [<numba.core.ir.Assign object at 0x000001F696391B90>],
             '$130call.26': [<numba.core.ir.Assign object at 0x000001F696116350>],
             '$134load_global.23.1': [<numba.core.ir.Assign object at 0x000001F696390DD0>],
             '$140load_global.27': [<numba.core.ir.Assign object at 0x000001F696048590>],
             '$152load_attr.29': [<numba.core.ir.Assign object at 0x000001F69607D190>],
             '$154call.27.1': [<numba.core.ir.Assign object at 0x000001F696390750>],
             '$164unary_negative.28.1': [<numba.core.ir.Assign object at 0x000001F696391190>],
             '$168call.31': [<numba.core.ir.Assign object at 0x000001F69678C150>],
             '$170binary_subscr.31.1': [<numba.core.ir.Assign object at 0x000001F696390710>],
             '$178compare_op.32': [<numba.core.ir.Assign object at 0x000001F6967E41D0>],
             '$180load_global.32.1': [<numba.core.ir.Assign object at 0x000001F696390250>],
             '$184pred': [<numba.core.ir.Assign object at 0x000001F69624EB50>],
             '$188return_value.1': [<numba.core.ir.Assign object at 0x000001F6960B8DD0>],
             '$18load_global.2.1': [<numba.core.ir.Assign object at 0x000001F6963B9ED0>],
             '$192unary_negative.1': [<numba.core.ir.Assign object at 0x000001F696C58D10>],
             '$200call.36.1': [<numba.core.ir.Assign object at 0x000001F696392C90>],
             '$200return_value.4': [<numba.core.ir.Assign object at 0x000001F696077890>],
             '$218call.38.1': [<numba.core.ir.Assign object at 0x000001F6963915D0>],
             '$228get_iter.39.1': [<numba.core.ir.Assign object at 0x000001F6963917D0>],
             '$22binary_subscr.5': [<numba.core.ir.Assign object at 0x000001F696369D10>],
             '$230for_iter.1.1': [<numba.core.ir.Assign object at 0x000001F6963928D0>],
             '$230for_iter.2.1': [<numba.core.ir.Assign object at 0x000001F6963A9B50>],
             '$230for_iter.3.1': [<numba.core.ir.Assign object at 0x000001F6963AA090>],
             '$242return_value.1.1': [<numba.core.ir.Assign object at 0x000001F6963AB290>],
             '$30load_method.4.1': [<numba.core.ir.Assign object at 0x000001F6963BBD90>],
             '$42binary_subscr.10': [<numba.core.ir.Assign object at 0x000001F69636A4D0>],
             '$54load_global.6.1': [<numba.core.ir.Assign object at 0x000001F6963BAA50>],
             '$66binary_subscr.15': [<numba.core.ir.Assign object at 0x000001F69636BE90>],
             '$66load_attr.7.1': [<numba.core.ir.Assign object at 0x000001F6963BB810>],
             '$80binary_subscr.18': [<numba.core.ir.Assign object at 0x000001F69636B9D0>],
             '$8binary_subscr.2': [<numba.core.ir.Assign object at 0x000001F696369810>],
             '$binop_add32.6': [<numba.core.ir.Assign object at 0x000001F696609B90>],
             '$binop_mul52.11': [<numba.core.ir.Assign object at 0x000001F69705BED0>],
             '$binop_sub210.37.1': [<numba.core.ir.Assign object at 0x000001F696392BD0>],
             '$binop_sub90.19': [<numba.core.ir.Assign object at 0x000001F696C9F5D0>],
             '$binop_truediv196.3': [<numba.core.ir.Assign object at 0x000001F696CF1590>],
             '$const100.12.1': [<numba.core.ir.Assign object at 0x000001F6963935D0>],
             '$const108.15.1': [<numba.core.ir.Assign object at 0x000001F6963933D0>],
             '$const112.17.1': [<numba.core.ir.Assign object at 0x000001F696393610>],
             '$const114.18.1': [<numba.core.ir.Assign object at 0x000001F696391F50>],
             '$const146.25.1': [<numba.core.ir.Assign object at 0x000001F696390D50>],
             '$const148.26.1': [<numba.core.ir.Assign object at 0x000001F696390BD0>],
             '$const168.30.1': [<numba.core.ir.Assign object at 0x000001F6963906D0>],
             '$const186.0': [<numba.core.ir.Assign object at 0x000001F6960EBE90>],
             '$const192.34.1': [<numba.core.ir.Assign object at 0x000001F696390850>],
             '$const194.35.1': [<numba.core.ir.Assign object at 0x000001F696390350>],
             '$const20.4': [<numba.core.ir.Assign object at 0x000001F696C01D10>],
             '$const36.7': [<numba.core.ir.Assign object at 0x000001F6966088D0>],
             '$const40.9': [<numba.core.ir.Assign object at 0x000001F696B37DD0>],
             '$const6.1': [<numba.core.ir.Assign object at 0x000001F69773B4D0>],
             '$const64.14': [<numba.core.ir.Assign object at 0x000001F696C7A310>],
             '$const78.17': [<numba.core.ir.Assign object at 0x000001F696CC4790>],
             '$const94.20': [<numba.core.ir.Assign object at 0x000001F696CA4790>],
             '$const94.9.1': [<numba.core.ir.Assign object at 0x000001F6963B85D0>],
             '$const98.11.1': [<numba.core.ir.Assign object at 0x000001F696391CD0>],
             '$phi230.0.1': [<numba.core.ir.Assign object at 0x000001F6963BB4D0>],
             '$phi232.1.1': [<numba.core.ir.Assign object at 0x000001F6963AB2D0>],
             'a': [<numba.core.ir.Assign object at 0x000001F6976BB390>],
             'b': [<numba.core.ir.Assign object at 0x000001F696CA7A90>],
             'bool184': [<numba.core.ir.Assign object at 0x000001F696146450>],
             'full_shape0': [<numba.core.ir.Assign object at 0x000001F6963BA7D0>],
             'index00': [<numba.core.ir.Assign object at 0x000001F6963ABC50>],
             'out0': [<numba.core.ir.Assign object at 0x000001F6963BA390>],
             'stencil_index': [<numba.core.ir.Assign object at 0x000001F696369B50>],
             'stencil_index.1': [<numba.core.ir.Assign object at 0x000001F696369E90>],
             'stencil_index.2': [<numba.core.ir.Assign object at 0x000001F69636A090>],
             'stencil_index.3': [<numba.core.ir.Assign object at 0x000001F696369AD0>],
             'stencil_index.4': [<numba.core.ir.Assign object at 0x000001F696368E50>],
             'x': [<numba.core.ir.Assign object at 0x000001F6963BA810>]})
2023-08-13 11:42:49,358 SSA violators set()
2023-08-13 12:12:25,733 127.0.0.1 - - [13/Aug/2023 12:12:25] "POST /predict HTTP/1.1" 200 -
